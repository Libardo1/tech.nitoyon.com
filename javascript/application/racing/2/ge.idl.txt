// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: googleearth.exe

[
  uuid(3476FAB2-687F-4EA6-9AC2-88D72DC7D7FC),
  version(1.0),
  helpstring("Earth 1.0 Type Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663657),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1158178165),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, Created by MIDL version 6.00.0361 at Wed Sep 13 13:09:24 2006
)

]
library EARTHLib
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IApplicationGE;
    interface ICameraInfoGE;
    interface IViewExtentsGE;
    interface IFeatureGE;
    interface IFeatureCollectionGE;
    interface IKHInterface;
    interface IKHViewInfo;
    interface IKHViewExtents;
    interface IKHFeature;

    [
      uuid(8097D7E9-DB9E-4AEF-9B28-61D82A1DF784),
      helpstring("ApplicationGE Class")
    ]
    coclass ApplicationGE {
        [default] interface IApplicationGE;
    };

    [
      odl,
      uuid(2830837B-D4E8-48C6-B6EE-04633372ABE4),
      helpstring("IApplicationGE Interface"),
      dual,
      oleautomation
    ]
    interface IApplicationGE : IDispatch {
        [id(0x00000001), helpstring("method GetCamera")]
        HRESULT GetCamera(
                        [in] long considerTerrain, 
                        [out, retval] ICameraInfoGE** pCamera);
        [id(0x00000002), helpstring("method SetCamera")]
        HRESULT SetCamera(
                        [in] ICameraInfoGE* camera, 
                        [in] double speed);
        [id(0x00000003), helpstring("method SetCameraParams")]
        HRESULT SetCameraParams(
                        [in] double lat, 
                        [in] double lon, 
                        [in] double alt, 
                        [in] AltitudeModeGE altMode, 
                        [in] double Range, 
                        [in] double Tilt, 
                        [in] double Azimuth, 
                        [in] double speed);
        [id(0x00000004), propget, helpstring("property StreamingProgressPercentage")]
        HRESULT StreamingProgressPercentage([out, retval] long* pVal);
        [id(0x00000005), helpstring("method SaveScreenShot")]
        HRESULT SaveScreenShot(
                        [in] BSTR fileName, 
                        [in] long quality);
        [id(0x00000006), helpstring("method OpenKmlFile")]
        HRESULT OpenKmlFile(
                        [in] BSTR fileName, 
                        [in] long suppressMessages);
        [id(0x00000007), helpstring("method LoadKmlData")]
        HRESULT LoadKmlData([in] BSTR* kmlData);
        [id(0x00000008), propget, helpstring("property AutoPilotSpeed")]
        HRESULT AutoPilotSpeed([out, retval] double* pVal);
        [id(0x00000008), propput, helpstring("property AutoPilotSpeed")]
        HRESULT AutoPilotSpeed([in] double pVal);
        [id(0x00000009), propget, helpstring("property ViewExtents")]
        HRESULT ViewExtents([out, retval] IViewExtentsGE** pVal);
        [id(0x0000000a), helpstring("method GetFeatureByName")]
        HRESULT GetFeatureByName(
                        [in] BSTR Name, 
                        [out, retval] IFeatureGE** pFeature);
        [id(0x0000000b), helpstring("method GetFeatureByHref")]
        HRESULT GetFeatureByHref(
                        [in] BSTR href, 
                        [out, retval] IFeatureGE** pFeature);
        [id(0x0000000c), helpstring("method SetFeatureView")]
        HRESULT SetFeatureView(
                        [in] IFeatureGE* feature, 
                        [in] double speed);
        [id(0x0000000d), helpstring("method GetPointOnTerrainFromScreenCoords")]
        HRESULT GetPointOnTerrainFromScreenCoords(
                        [in] double screen_x, 
                        [in] double screen_y, 
                        [out, retval] SAFEARRAY(double)* coords);
        [id(0x0000000e), propget, helpstring("property VersionMajor")]
        HRESULT VersionMajor([out, retval] int* major);
        [id(0x0000000f), propget, helpstring("property VersionMinor")]
        HRESULT VersionMinor([out, retval] int* minor);
        [id(0x00000010), propget, helpstring("property VersionBuild")]
        HRESULT VersionBuild([out, retval] int* build);
        [id(0x00000011), propget, helpstring("property VersionAppTye")]
        HRESULT VersionAppType([out, retval] AppTypeGE* appType);
        [id(0x00000012), helpstring("method IsInitialized")]
        HRESULT IsInitialized([out, retval] long* IsInitialized);
        [id(0x00000013), helpstring("method IsOnline")]
        HRESULT IsOnline([out, retval] long* IsOnline);
        [id(0x00000014), helpstring("method Login")]
        HRESULT Login();
        [id(0x00000015), helpstring("method Logout")]
        HRESULT Logout();
        [id(0x00000016), helpstring("method ShowDescriptionBalloon")]
        HRESULT ShowDescriptionBalloon([in] IFeatureGE* feature);
        [id(0x00000017), helpstring("method HideDescriptionBalloons")]
        HRESULT HideDescriptionBalloons();
        [id(0x00000018), helpstring("method GetHighlightedFeature")]
        HRESULT GetHighlightedFeature([out, retval] IFeatureGE** pFeature);
        [id(0x00000019), helpstring("method GetMyPlaces")]
        HRESULT GetMyPlaces([out, retval] IFeatureGE** pMyPlaces);
        [id(0x0000001a), helpstring("method GetTemporaryPlaces")]
        HRESULT GetTemporaryPlaces([out, retval] IFeatureGE** pTemporaryPlaces);
        [id(0x0000001b), helpstring("method GetLayersDatabases")]
        HRESULT GetLayersDatabases([out, retval] IFeatureCollectionGE** pDatabases);
        [id(0x0000001c), propget, helpstring("property ElevationExaggeration")]
        HRESULT ElevationExaggeration([out, retval] double* pExaggeration);
        [id(0x0000001c), propput, helpstring("property ElevationExaggeration")]
        HRESULT ElevationExaggeration([in] double pExaggeration);
        [id(0x0000001d), helpstring("method GetMainHwnd")]
        HRESULT GetMainHwnd([out, retval] OLE_HANDLE* hwnd);
    };

    [
      odl,
      uuid(08D46BCD-AF56-4175-999E-6DDC3771C64E),
      helpstring("ICameraInfoGE Interface"),
      dual,
      oleautomation
    ]
    interface ICameraInfoGE : IDispatch {
        [id(0x00000001), propget, helpstring("property FocusPointLatitude")]
        HRESULT FocusPointLatitude([out, retval] double* pLat);
        [id(0x00000001), propput, helpstring("property FocusPointLatitude")]
        HRESULT FocusPointLatitude([in] double pLat);
        [id(0x00000002), propget, helpstring("property FocusPointLongitude")]
        HRESULT FocusPointLongitude([out, retval] double* pLon);
        [id(0x00000002), propput, helpstring("property FocusPointLongitude")]
        HRESULT FocusPointLongitude([in] double pLon);
        [id(0x00000003), propget, helpstring("property FocusPointAltitude")]
        HRESULT FocusPointAltitude([out, retval] double* pAlt);
        [id(0x00000003), propput, helpstring("property FocusPointAltitude")]
        HRESULT FocusPointAltitude([in] double pAlt);
        [id(0x00000004), propget, helpstring("property AltitudeModeGE")]
        HRESULT FocusPointAltitudeMode([out, retval] AltitudeModeGE* pAltMode);
        [id(0x00000004), propput, helpstring("property AltitudeModeGE")]
        HRESULT FocusPointAltitudeMode([in] AltitudeModeGE pAltMode);
        [id(0x00000005), propget, helpstring("property Range")]
        HRESULT Range([out, retval] double* pRange);
        [id(0x00000005), propput, helpstring("property Range")]
        HRESULT Range([in] double pRange);
        [id(0x00000006), propget, helpstring("property Tilt")]
        HRESULT Tilt([out, retval] double* pTilt);
        [id(0x00000006), propput, helpstring("property Tilt")]
        HRESULT Tilt([in] double pTilt);
        [id(0x00000007), propget, helpstring("property Azimuth")]
        HRESULT Azimuth([out, retval] double* pAzimuth);
        [id(0x00000007), propput, helpstring("property Azimuth")]
        HRESULT Azimuth([in] double pAzimuth);
    };

    typedef [uuid(ECF071D1-75F4-4F61-A5D9-D96EEAF5EC1D), public]
    __MIDL___MIDL_itf_earth_0000_0001 AltitudeModeGE;

    typedef enum {
        RelativeToGroundAltitudeGE = 1,
        AbsoluteAltitudeGE = 2
    } __MIDL___MIDL_itf_earth_0000_0001;

    [
      odl,
      uuid(865AB2C1-38C5-492B-8B71-AC73F5A7A43D),
      helpstring("IViewExtentsGE Interface"),
      dual,
      oleautomation
    ]
    interface IViewExtentsGE : IDispatch {
        [id(0x00000001), propget, helpstring("property North")]
        HRESULT North([out, retval] double* pVal);
        [id(0x00000002), propget, helpstring("property South")]
        HRESULT South([out, retval] double* pVal);
        [id(0x00000003), propget, helpstring("property East")]
        HRESULT East([out, retval] double* pVal);
        [id(0x00000004), propget, helpstring("property West")]
        HRESULT West([out, retval] double* pVal);
    };

    [
      odl,
      uuid(92547B06-0007-4820-B76A-C84E402CA709),
      helpstring("IFeatureGE Interface"),
      dual,
      oleautomation
    ]
    interface IFeatureGE : IDispatch {
        [id(0x00000001), propget, helpstring("property Name")]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000002), propget, helpstring("property Visibility")]
        HRESULT Visibility([out, retval] long* pVal);
        [id(0x00000002), propput, helpstring("property Visibility")]
        HRESULT Visibility([in] long pVal);
        [id(0x00000003), propget, helpstring("property HasView")]
        HRESULT HasView([out, retval] long* pVal);
        [id(0x00000004), propget, helpstring("property Highlighted")]
        HRESULT Highlighted([out, retval] long* pVal);
        [id(0x00000005), helpstring("method Highlight")]
        HRESULT Highlight();
        [id(0x00000006), helpstring("method GetParent")]
        HRESULT GetParent([out, retval] IFeatureGE** pParent);
        [id(0x00000007), helpstring("method GetChildren")]
        HRESULT GetChildren([out, retval] IFeatureCollectionGE** pChildren);
    };

    [
      odl,
      uuid(851D25E7-785F-4DB7-95F9-A0EF7E836C44),
      helpstring("IFeatureCollectionGE Interface"),
      dual,
      oleautomation
    ]
    interface IFeatureCollectionGE : IDispatch {
        [id(0xfffffffc), propget, helpstring("property _NewEnum")]
        HRESULT _NewEnum([out, retval] IUnknown** ppUnk);
        [id(00000000), propget, helpstring("property Item")]
        HRESULT Item(
                        [in] long index, 
                        [out, retval] IFeatureGE** pFeature);
        [id(0x00000001), propget, helpstring("property Count")]
        HRESULT Count([out, retval] long* Count);
    };

    typedef [public]
    __MIDL_IApplicationGE_0001 AppTypeGE;

    typedef enum {
        EnterpriseClientGE = 0,
        ProGE = 1,
        PlusGE = 2,
        FreeGE = 5,
        UnknownGE = 255
    } __MIDL_IApplicationGE_0001;

    [
      uuid(645EEE5A-BD51-4C05-A6AF-6F2CF8950AAB),
      helpstring("ViewInfoGE Class")
    ]
    coclass CameraInfoGE {
        [default] interface ICameraInfoGE;
    };

    [
      uuid(D93BF052-FC68-4DB6-A4F8-A4DC9BEEB1C0),
      helpstring("ViewExtentsGE Class")
    ]
    coclass ViewExtentsGE {
        [default] interface IViewExtentsGE;
    };

    [
      uuid(CBD4FB70-F00B-4963-B249-4B056E6A981A),
      helpstring("FeatureGE Class")
    ]
    coclass FeatureGE {
        [default] interface IFeatureGE;
    };

    [
      uuid(9059C329-4661-49B2-9984-8753C45DB7B9),
      helpstring("FeatureCollectionGE")
    ]
    coclass FeatureCollectionGE {
        [default] interface IFeatureCollectionGE;
    };

    [
      uuid(AFD07A5E-3E20-4D77-825C-2F6D1A50BE5B),
      helpstring("KHInterface Class")
    ]
    coclass KHInterface {
        [default] interface IKHInterface;
    };

    [
      odl,
      uuid(80A43F86-E2CD-4671-A7FA-E5627B519711),
      helpstring("IKHInterface Interface"),
      dual,
      oleautomation
    ]
    interface IKHInterface : IDispatch {
        [id(0x00000002), helpstring("property currentView")]
        HRESULT currentView(
                        [in] long terrain, 
                        [out, retval] IKHViewInfo** pView);
        [id(0x00000003), propget, helpstring("property streamingProgressPercentage")]
        HRESULT StreamingProgressPercentage([out, retval] long* pVal);
        [id(0x00000004), helpstring("method SaveScreenShot")]
        HRESULT SaveScreenShot(
                        [in] BSTR fileName, 
                        [in] long quality);
        [id(0x00000005), helpstring("method OpenFile")]
        HRESULT OpenFile([in] BSTR fileName);
        [id(0x00000006), helpstring("method QuitApplication")]
        HRESULT QuitApplication();
        [id(0x00000007), helpstring("method SetRenderWindowSize")]
        HRESULT SetRenderWindowSize(
                        long width, 
                        long height);
        [id(0x00000009), propget, helpstring("property autopilotSpeed")]
        HRESULT AutoPilotSpeed([out, retval] double* pVal);
        [id(0x00000009), propput, helpstring("property autopilotSpeed")]
        HRESULT AutoPilotSpeed([in] double pVal);
        [id(0x0000000a), propget, helpstring("property currentViewExtents")]
        HRESULT currentViewExtents([out, retval] IKHViewExtents** pVal);
        [id(0x0000000b), helpstring("method setView")]
        HRESULT setView(
                        [in] IKHViewInfo* view, 
                        [in] long terrain, 
                        [in] double speed);
        [id(0x0000000c), helpstring("method LoadKml")]
        HRESULT LoadKml([in] BSTR* kmlData);
        [id(0x0000000d), helpstring("method getFeatureByName")]
        HRESULT GetFeatureByName(
                        [in] BSTR Name, 
                        [out, retval] IKHFeature** pFeature);
        [id(0x0000000e), helpstring("method setViewParams")]
        HRESULT setViewParams(
                        [in] double lat, 
                        [in] double lon, 
                        [in] double Range, 
                        [in] double Tilt, 
                        [in] double Azimuth, 
                        [in] long terrain, 
                        [in] double speed);
        [id(0x0000000f), helpstring("method setFeatureView")]
        HRESULT SetFeatureView(
                        [in] IKHFeature* feature, 
                        [in] double speed);
        [id(0x00000010), helpstring("method getPointOnTerrainFromScreenCoords")]
        HRESULT GetPointOnTerrainFromScreenCoords(
                        [in] double screen_x, 
                        [in] double screen_y, 
                        [out, retval] SAFEARRAY(double)* coords);
        [id(0x00000011), helpstring("method getCurrentVersion")]
        HRESULT getCurrentVersion(
                        [out] int* major, 
                        [out] int* minor, 
                        [out] int* build, 
                        [out] appType* appType);
        [id(0x00000012), helpstring("method isClientInitialized")]
        HRESULT isClientInitialized([out] int* IsInitialized);
    };

    [
      odl,
      uuid(45F89E39-7A46-4CA4-97E3-8C5AA252531C),
      helpstring("IKHViewInfo Interface"),
      dual,
      oleautomation
    ]
    interface IKHViewInfo : IDispatch {
        [id(0x00000001), propget, helpstring("property latitude")]
        HRESULT latitude([out, retval] double* pLat);
        [id(0x00000001), propput, helpstring("property latitude")]
        HRESULT latitude([in] double pLat);
        [id(0x00000002), propget, helpstring("property longitude")]
        HRESULT longitude([out, retval] double* pLon);
        [id(0x00000002), propput, helpstring("property longitude")]
        HRESULT longitude([in] double pLon);
        [id(0x00000003), propget, helpstring("property range")]
        HRESULT Range([out, retval] double* pRange);
        [id(0x00000003), propput, helpstring("property range")]
        HRESULT Range([in] double pRange);
        [id(0x00000004), propget, helpstring("property tilt")]
        HRESULT Tilt([out, retval] double* pTilt);
        [id(0x00000004), propput, helpstring("property tilt")]
        HRESULT Tilt([in] double pTilt);
        [id(0x00000005), propget, helpstring("property azimuth")]
        HRESULT Azimuth([out, retval] double* pAzimuth);
        [id(0x00000005), propput, helpstring("property azimuth")]
        HRESULT Azimuth([in] double pAzimuth);
    };

    [
      odl,
      uuid(D05D6E91-72DA-4654-B8A7-BCBD3B87E3B6),
      helpstring("IKHViewExtents Interface"),
      dual,
      oleautomation
    ]
    interface IKHViewExtents : IDispatch {
        [id(0x00000001), propget, helpstring("property north")]
        HRESULT North([out, retval] double* pVal);
        [id(0x00000002), propget, helpstring("property south")]
        HRESULT South([out, retval] double* pVal);
        [id(0x00000003), propget, helpstring("property east")]
        HRESULT East([out, retval] double* pVal);
        [id(0x00000004), propget, helpstring("property west")]
        HRESULT West([out, retval] double* pVal);
    };

    [
      odl,
      uuid(07F46615-1857-40CF-9AA9-872C9858E769),
      helpstring("IKHFeature Interface"),
      dual,
      oleautomation
    ]
    interface IKHFeature : IDispatch {
        [id(0x00000001), propget, helpstring("property visibility")]
        HRESULT Visibility([out, retval] long* pVal);
        [id(0x00000001), propput, helpstring("property visibility")]
        HRESULT Visibility([in] long pVal);
        [id(0x00000002), propget, helpstring("property hasView")]
        HRESULT HasView([out, retval] long* pVal);
    };

    typedef [public]
    __MIDL_IKHInterface_0001 appType;

    typedef enum {
        GE_EC = 0,
        GE_Pro = 1,
        GE_Plus = 2,
        GE_LT = 3,
        GE_NV = 4,
        GE_Free = 5,
        UNKNOWN = 255
    } __MIDL_IKHInterface_0001;

    [
      uuid(A2D4475B-C9AA-48E2-A029-1DB829DACF7B),
      helpstring("KHViewInfo Class")
    ]
    coclass KHViewInfo {
        [default] interface IKHViewInfo;
    };

    [
      uuid(63E6BE14-A742-4EEA-8AF3-0EC39F10F850),
      helpstring("KHViewExtents Class")
    ]
    coclass KHViewExtents {
        [default] interface IKHViewExtents;
    };

    [
      uuid(B153D707-447A-4538-913E-6146B3FDEE02),
      helpstring("KHFeature Class")
    ]
    coclass KHFeature {
        [default] interface IKHFeature;
    };
};

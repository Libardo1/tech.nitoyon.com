<slide><![CDATA[

閲覧方法

:→, SPACE：:次のページへ
:←, Shift+SPACE：:前のページへ

----

*RIA と呼ばれるもの まとめ

----

**自己紹介

----

はじめまして
にとよん と申します

----

「てっく煮」というサイトをやってます
><center><img src="images/techni.jpg"></center><

----

難しいプログラミングの話


よりも

----

いかに見せるか、
いかに伝えるか、


を考えるのが好きです。

----

代表作 <img src="http://b.hatena.ne.jp/entry/image/large/http://tech.nitoyon.com/javascript/application/racing/1/">
><center><img src="images/gmap.gif"></center><

----

「アイデア」を
楽しんでもらった作品

----

slashdot.jp で<a href="http://slashdot.jp/askslashdot/article.pl?sid=05/11/15/2313231">取り上げられた</a>

----

動ナビで<a href="http://search.blognavi.info/news/entry/20060312/15093/index.html">取り上げられた</a>

----

重要なのは「見せ方」「伝え方」
なんだと再認識した

----

**いきなり本題

----

Web サービスの現実

----

今の世間の SE さんと呼ばれている人の開発言語は
-VB とか
-ASP.NET とか
-Java とか

----

そんな SE さんに...

----

-Web 2.0 みたいな見た目で

----
-Ajaxみたいにかっこよく

----

-ステキなアプリを作って！

----

とお願いしたら
たぶん困る

----

***その理由は

----

+クロスブラウザ対応
+開発環境(IDE)がない
+JavaScriptナニソレ
+デザイン大変(HTML+CSS+…)

----

覚えることが多い上に
バッドノウハウもいろいろ

----

Web屋以外は手を出せない

----

でも

----

そんな状況を
変えてくれそうなのが

----
**期待の星 「RIA」

----

Rich Internet Application
<span class="small">(もしくは Rich Interactive Application)</span>

----

代表選手が

----

**Flex と WPF

----

どちらもクライアント側の技術

----

Web サーバーは<br>Apache でも IIS でも OK

----

サーバー側実装は

Perl、PHP、Ruby...

なんでも

----


***RIAが解決する<br>４つの問題
+実行環境
+開発環境(IDE)
+開発言語のとっつき
+デザイン大変

----

と、１つの付加価値

----

5. デザイナとの連携

----

**Flex

----
><center><img src="images/flex-architecture.jpg"></center><

----

***1. 実行環境

----

<strong>Flex</strong>
ブラウザで動くRIA

----

Flash Player 9 が入っていれば動く

----

Flash Player 9 の導入率

2006年12月：50%
2007年03月：80%


(<a href="http://www.adobe.com/products/player_census/flashplayer/version_penetration.html">参考資料</a>)

----

<strong>Apollo</strong>
ローカルで動くRIA

----

ランタイム必要
（まだα版）

----

普及すれば OS 問わずに
ローカルアプリが動く！

----

かなり期待＞＜

----

***2. 開発環境(IDE)

----

Flex Builder
(Eclipse ベース)


6万円

----

と

----

Flex SDK
コマンドラインコンパイラ


無料

----

IDE な人も
コマンドラインな人も
おｋ

----

***3. 開発言語のとっつき

----

ActionScript 3

----

ECMAScript 4 ベース

つまり

JavaScript っぽい

----

Date や Array は
JavaScript と同じ
>|
var array:Array = [];
array.push("hoge");
array.push("fuga");

var s:String = array.join("\n");
|<

----

オブジェクト指向の書き方は<br>Java っぽい

>|
package{
    import flash.display.Sprite;
 
    public class Test extends Sprite{
        function Test(){
            graphics.beginFill(0xff0000, 1);
            graphics.drawCircle(50, 50, 50);
            graphics.endFill();
        }
    }
}
|<

----

JavaScript な人も
Java な人も
入って来やすい

----

フレームワークのソース<span class="small">(mx.*)</span><br>は公開されている

----

しかも、コンパイラ・デバッガがオープンソースに！
<span class="small">(2007年後半予定)</span>

----

***4. デザイン

----

MXMLでがっちりレイアウト

----

left, right, width, minWidth, maxWidth に従う！

----

>||
<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
  layout="absolute">
  <mx:Button label="ボタン" 
    left="30" right="30" minWidth="300" />
</mx:Application>
||<

><center><img src="images/flex-width.jpg"></center><

----

段組簡単
-HBox

float 段組がバカらしくなる

----

便利コントロール
-ColorPicker
-DataGrid
-DateChooser
-Tree
-DividedBox
-Accordion

----

<span style="font-size: 50%; text-decoration:line-through">「Ajax で超クールなデータグリッド」<br><br>といった記事を見つけては<br>ブックマークしていく<br>労力からの開放。</span>

----

***5. デザイナとの連携

----

Flash 業界には既にデザイナいっぱい

----

外注して連携！


かっこいいと評判に
なるはず(?)

----

**WPF

Windows Presentation Foundation

----

><center><img src="images/wpf-architecture.jpg"></center><

----

***1. 実行環境

----

<strong>Silverlight</strong>
ブラウザで動くRIA

----

現状、

Silverlight 1.0：β版
Silverlight 1.1：α版

----

Silverlight 1.1 は
IE だけでなく Firefoxでも動く

----

Intel Mac の
Firefox、Safari でも動く

----

普及率はまだまだ

----

というか正式版が出てない

----

<strong>WPF を使った EXE</strong>
ローカルで動く実行RIA

----

要 .NET Framework 3.0
再頒布パッケージ

----

:動作環境：:Windows XP SP2 以降

----

・・・！？

----

当分はコンシューマ向けには<br>使えなさげ

----

（つぶやき）
Mac用再頒布パッケージが
発表されないかなぁ

>|
　☆　ﾁﾝ　　〃　∧＿∧ 　 ／￣￣￣￣￣￣￣￣￣￣￣￣
　　ヽ　＿＿_＼（＼・∀・）＜　Mac版WPFまだー？
　 　 　 ＼＿／⊂　⊂＿)＿ ＼＿＿＿＿＿＿＿＿＿＿＿＿
|<

----

***2. 開発環境(IDE)

----

Visual Studio

----

Expression Edition なら

<strong>0円</strong>

----

VB な人が自然に入れる

----

***3. 開発言語のとっつき

----

<strong>Silverlight 1.1</strong>
スクリプト実行環境<span class="small">（Dynamic Language Runtime）</span>がサポートする<br>言語は全て動く

----

公式にサポートされる言語
-JavaScript <span class="small">(ECMAScript 3.0)</span>
-Python
-Ruby <span class="small">(実装中)</span>
-VB <span class="small">(実装中)</span>
-PHP <span class="small">(予定)</span>
-Scheme <span class="small">(予定)</span>

----

スクリプト実行環境<br><span class="small">（Dynamic Language Runtime）</span> は<br>オープンソースで公開される

----

誰かが頑張れば<br>さらに言語も<br>増えていく！

----

百花繚乱

----

クライアントもサーバーも<br>Ruby で書く

----

クライアントもサーバーも<br>PHP で書く

----

クライアントもサーバーも<br>Perl で書く

----

といったことが可能に！

----

<strong>WPF を使った EXE</strong>
.NET Framework がサポートする言語は全て動く

----

-C#
-VB
-JScript
-C++

----

スクリプト実行環境<br><span class="small">（Dynamic Language Runtime）</span>が<br>.NET Framework に<br>統合される予定

----

C# で書いたクラスの<br>インスタンスを<br>スクリプトから参照できる <span class="small">（はず）</span>

----

スクリプトで書いたクラスの<br>インスタンスを<br>C#から参照できる <span class="small">（はず）</span>

----

***4. デザイン

----

XAMLでがっちりレイアウト

----

Margin, Width, MinWidth, MaxWidth に従う！

>||
<Window x:Class="WindowsApplication1.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="WindowsApplication1" Height="296" Width="409"
    >
  <Button Margin="30" MinWidth="200">ボタン</Button>
</Window>
||<

----

レイアウト簡単(1)
:StackPanel:右や下に並べていく
:Grid:HTML の table タグ

----

レイアウト簡単(2)
:WrapPanel:CSS でいう float
:DockPanel:ヘッダ・フッタの配置

----

便利コントロール
-メニュー
-ツールバー
-リッチエディット
-PDF 風ドキュメントビューワー

----

さらに

-ベクターデータ
-アニメーション
-3D <span class="small">(Silverlight には含まれない)</span>

----

XAMLはかなり複雑

----

何でも表現できる設計

----

XAML = 
----
構造
----
＋スタイル
----
＋ベクター
----
＋タイムライン アニメーション
----
＋3D
----

手でコーディングするのは<br>かなり辛い

----

複雑な設計の理由は...

----

***5. デザイナとの連携

----

Expression Blend

><center><img src="images/blend-icon.jpg"></center><

----
ベクターデータを作れます

><center><img src="images/blend5.jpg"></center><

----

タイムラインがあります

><center><img src="images/blend7.jpg"></center><

----

3D いじれます

----

そして、XAML 吐きます

><center><img src="images/blend6.jpg"></center><

----

「XAMLをいじるのはデザイナ」
という割り切り

----

でも、XAML は XML なので

----

プログラマが一部のパラメータを修正することも可能

----

協業しやすい

----

プログラマとデザイナの依存関係の少ない連携

----

一方、Flex では...

----

デザイナが作るのは<br>SWF や JPG

----

プログラマが一部をいじるのは無理

----

MXML はあくまで<br>構造しか定義できない

----

そのうち Flex のスキンを
Illustrator なんかで作れるようになるらしい

----

（個人的感想）
-WPF＋Blend の方がステキ
-やっぱり MS すげー

----

ちなみに Expression Blend

><center><img src="images/blend-icon.jpg"></center><

----

-現在プレビュー版公開中
-誰でもダウンロードできる

----

-2007年第3四半期、発売予定
-MSDNサブスクリプションに含まれる(!)

----

**MXML と XAML

----

共通点があって面白い

----

***XML の構造が<br>コンパイルされる

----

この MXML は
>||
<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
  layout="absolute">
  <mx:Button label="ボタン" 
    left="30" right="30" minWidth="300" />
</mx:Application>
||<

----

この ActionScript と同等
>||
package{
    public class <filename> extends Application{
        public function <filename>():void{
            this.layout = "absolute";

            var _btn1:Button = new Button();
            _btn1.label = "ボタン";
            _btn1.left = 30;
            _btn1.right = 30;
            _btn1.minWidth = 30;

            addChld(_btn1);
        }
    }
}
||<


----

この XAML は
>||
<Window x:Class="WindowsApplication1.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="WindowsApplication1" Height="296" Width="409"
    >
  <Button Margin="30" MinWidth="200">ボタン</Button>
</Window>
||<

----

この C# と同等
>||
// 前略
    public class WindowsApplication1 : Window{
        public WindowsApplication1(){
            this.Title = "WindowsApplication1";
            this.Height = 296;
            this.Width = 409;

            Button _btn1 = new Button();
            _btn1.Content = "ボタン";
            _btn1.Margin = new Thickness(30);
            _btn1.MinWidth = 30;

            Content = _btn1;
        }
    }
||<
----

***ソースコードの配置

----

MXML
>|
&lt;?xml version="1.0"?>
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml">
  &lt;mx:Script>
  &lt;![CDATA[
    function onClick():void
    {
      btn1.label = "clicked!!";
    }
  ]]&gt;
  &lt;/mx:Script>
  &lt;mx:Button id="btn1" click="onClick()" label="ボタン" />
&lt;/mx:Application>
|<
----

MXML
>||
<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml">
  <mx:Script source="script1.as" />
  <mx:Button id="btn1" click="onClick()" label="ボタン" />
</mx:Application>
||<

<span class="small">外部ファイルに配置もできる</span>

----

XAMLはパーシャルクラスにイベントハンドラを実装
:<span class="small">パーシャルクラス</span>:<span class="small">１つのクラスを複数のファイルで定義する機能。WPF では XAML とそのパーシャルクラスで、１つのクラスを定義する</span>
----

>||
<Window x:Class="WindowsApplication1.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="WindowsApplication1" Height="296" Width="409"
    >
  <Button Name="btn1" Click="onClick">ボタン</Button>
</Window>
||<

>||
namespace WindowsApplication1
{
  public partial class Window1 : Window
  {
    void onClick(object sender, RoutedEventArgs e)
    {
      btn1.Content = "clicked";
    }
  }
}
||<

----

（雑感）
MXMLはHTMLっぽく書ける

XAMLは見た目の定義に徹する<br><span class="small">(コードは XAML の外に)</span>

----

他の類似点
-データバインディング
-DOM風イベント伝播<br><span class="small">(capture, bubbling)</span>

----

**まとめ

----

動作環境

-◎：Flex
-△：WPF を使った EXE
-×：Apollo、Silverlight

----

使える言語

-◎：WPF EXE、Silverlight
-△：Flex、Apollo

----

デザイナとの連携

-◎：WPF EXE、Silverlight
-○：Flex、Apollo

----

オープン度

どっこいどっこい

----

ご清聴ありがとうございました

----

おわり

]]>
</slide>
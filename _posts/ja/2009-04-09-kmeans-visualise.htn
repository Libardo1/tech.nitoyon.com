---
layout: post
title: クラスタリングの定番アルゴリズム「K-means法」をビジュアライズしてみた
tags: ''
lang: ja
old_url: http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise
---
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113644/nitoyoncom-22/ref=nosim">集合知プログラミング</a> を読んでいたら、K-means 法（K平均法）の説明が出てきました。

K-means 法はクラスタリングを行うための定番のアルゴリズムらしいです。存在は知っていたんだけどいまいちピンときていなかったので、動作を理解するためにサンプルを作ってみました。

><center><script src="http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FKMeans.swf&amp;up_background=%23223344&amp;synd=open&amp;w=430&amp;h=410&amp;title=K-means+algorithm&amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;output=js"></script><noscript>(Flash Player 9 以上が有効だと、ここ分かりやすい Flash が表示されますよ)</noscript></center><

クリックすると１ステップずつ動かすことができます。クラスタの数や点の数を変更して、Restart を押すと好きなパラメータで試すことができます。

こうやって１ステップずつ確認しながら動かしてみると、意外に単純な仕組みなのが実感できました。

**K-means 法とは
<a href="http://ja.wikipedia.org/wiki/K%E5%B9%B3%E5%9D%87%E6%B3%95">K平均法 - Wikipedia</a> に詳しく書いてあるけど、もうすこしザックリと書くとこんなイメージになります。
+各点にランダムにクラスタを割り当てる
+クラスタの重心を計算する。
+点のクラスタを、一番近い重心のクラスタに変更する
+変化がなければ終了。変化がある限りは 2. に戻る。
これでも分かりにくいですね。例題を紹介しましょう。

**図で解説！
***(ステップ1) 1. 初期状態
これが初期状態です。色がクラスタを表していています。５色あるので、クラスタは５つですね。

各点にランダムな色を割り振っています。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022450.png" width="350" height="264"></center><

***(ステップ2) 2. 重心を計算する
クラスタごとに重心（座標の平均値）を求めます。×印が重心です。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022519.png" width="350" height="264"></center><
====

***(ステップ3) 3. 一番近い重心の色に変わる
それぞれの点の色を塗り替えます。自分から一番近い重心の色に変わります。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409023131.png" width="350" height="264"></center><

青の重心は近くに点が少ないので、寂しいクラスタになっちゃってますね。

***(ステップ4) 2. 再度、重心を計算する
重心の位置やクラスタに変化があったので、2. に戻ります。

新しいクラスタでの重心の位置を求めます。×印がクラスタの中心に移動してますね。
><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022541.png" width="350" height="264"></center><

***(ステップ5) 3. 再度、色を置き換える
新しい重心の位置に応じて、もう一度色を置き換えます。青と黄が勢力を拡大しました。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022619.png" width="350" height="264"></center><

***(ステップ6) 2. また重心を計算する
相変わらず変化があったので、重心の位置をもう１度計算します。

黄緑の重心が少し右方向に移動しました。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022633.png" width="350" height="264"></center><


***(ステップ7) 3. また色を置き換える
再クラスタリングします。

黄緑が赤を少し奪い、黄色が黄緑を少し奪いました。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022700.png" width="350" height="264"></center><

***(ステップ7) 2. またまた重心を計算する
黄緑の重心が、さらに右に移動しました。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022726.png" width="350" height="264"></center><

***(ステップ8) 3. またまた色を置き換える
黄緑がさらに右方向に勢力を拡大しています。それに伴い、左の方の陣地は、黄色や青色に奪われています。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022852.png" width="350" height="264"></center><


***(最後) 9. 変化がなくなった
さらに何ステップか経過させた結果、ここで終了しました。

><center><img src="http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409023141.png" width="350" height="264"></center><

最終的に黄緑は右上の点を占領したようです。

全ての点が一番近い重心に属していて、重心の位置も変化しない状態です。それらしく色分けできているのが分かります。


**まとめ
K-means 法は単純な仕組みで動いていることが分かりました。単純だからこそ、色んな改良をしやすいんでしょうね。

ソースコードは少し長いので http://tech.nitoyon.com/misc/swf/KMeans.as に置いています。

>{% amazon jp:4873113644:detail %}<

><div class="seealso"><
**あわせてどうぞ
-{% post_link 2009-04-13-kmeans-visualize-3d %}
-{% post_link 2010-01-26-dijkstra-aster-visualize %}
-{% post_link 2009-03-16-postal-map %}
-{% post_link 2009-03-03-dp %}
></div><

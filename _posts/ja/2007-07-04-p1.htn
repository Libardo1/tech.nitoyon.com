---
layout: post
title: JavaScript で Number 型の数値を２進数表現してみる
tags: ''
lang: ja
old_url: http://d.hatena.ne.jp/nitoyon/20070704/p1
---
先日の {% post_link 2007-06-29-four-operations-implementation-in-javascript %} の関連エントリ。

デバッグの過程で、数値を２進数で表示したくなったので実装してみた。

**ソースコード
ワンライナー版。
>|javascript|
function dump_int(i){var s="";while(i){s=(i&1)+s;i>>>=1}return s}
||<

整形したらこうなる。
>|javascript|
function dump_int(i)
{
    var s = "";

    while(i)
    {
        s = (i & 1) + s;
        i >>>= 1;
    }

    return s;
}
||<

&gt;&gt;&gt; が符号を考えずに右シフトする演算子だそうだ。今回、このビット演算子で遊ぶまで、こんな演算子があることすら知らなかった。

**Firebug で確認してみた
>|
<span class="synStatement">&gt;&gt;&gt; function dump_int(i){var s="",c=-1;while(c){s=(i&1)+s;i>>>=1;c>>>=1}return s}</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(0)</span>
<span class="synConstant">""</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(1)</span>
<span class="synConstant">"1"</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(2)</span>
<span class="synConstant">"10"</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(3)</span>
<span class="synConstant">"11"</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(0x1000)</span>
<span class="synConstant">"1000000000000"</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(-1)</span>
<span class="synConstant">"11111111111111111111111111111111"</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(-2)</span>
<span class="synConstant">"11111111111111111111111111111110"</span>
<span class="synStatement">&gt;&gt;&gt; dump_int(-3)</span>
<span class="synConstant">"11111111111111111111111111111101"</span>
|<

出力の最大桁数が 32bit なのは、ビット演算の前に ToInt32 という内部関数が呼ばれて 32bit に切り詰められるから。

**桁数をそろえるバージョン
桁数がそろってなくて見にくい場合は、こう改造すればよい。
>|
<span class="synStatement">&gt;&gt;&gt; function dump_int2(i){var s="",c=-1;while(c){s=(i&1)+s;i>>>=1;c>>>=1}return s}</span>
<span class="synStatement">&gt;&gt;&gt; dump_int2(3)</span>
<span class="synConstant">"00000000000000000000000000000011"</span>
|<

c = -1 として while(c){c >>>= 1;} のループを回すことにより、ビット数の回数だけ while のループが回るようにしている。


**toString(2)
ところで、これとは別に Number.prototype.toString() に 2 を渡すことで２進数表示することもできる。今回作った dump_int とはちょっと異なっていて面白い。
>|
<span class="synStatement">&gt;&gt;&gt; (0).toString(2)</span>
<span class="synConstant">"0"</span>
<span class="synStatement">&gt;&gt;&gt; (1).toString(2)</span>
<span class="synConstant">"1"</span>
<span class="synStatement">&gt;&gt;&gt; (2).toString(2)</span>
<span class="synConstant">"10"</span>
<span class="synStatement">&gt;&gt;&gt; (-1).toString(2)</span>
<span class="synConstant">"-1"</span>
<span class="synStatement">&gt;&gt;&gt; (-2).toString(2)</span>
<span class="synConstant">"-10"</span>
|<

マイナスの値を渡したときの挙動が明らかに違う。というのも、Number 型は 64bit の浮動小数点であり、符号部に 1bit が割かれている。

というわけで、負数を toString(2) すると - がつくのは Number の内部に符号部があるから、と考えると納得がいく。

Number 形が浮動小数点ということは、小数を toString(2) することもできたりする。
>|
<span class="synStatement">&gt;&gt;&gt; (2.25).toString(2)</span>
<span class="synConstant">"10.01"</span>
|<

**まとめ

-自作 dump_int は 32bit までの数にしか対応できない
-toString(2) は 64bit の浮動小数点の範囲を全てカバーできる

比べてみると dump_int がいい所なしに見えるが、先日の {% post_link 2007-06-29-four-operations-implementation-in-javascript %} を作るときには役立ったんですよ、っと。

あ、そうそう、今回は ECMA-262 3rd edition の仕様をかなり参考にしましたよ。


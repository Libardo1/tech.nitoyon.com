---
layout: post
title: Google Maps で地球儀
tags: ActionScript
lang: ja
old_url: http://d.hatena.ne.jp/nitoyon/20080523/google_maps_earth
---
Google Maps API for Flash では、残念ながら地図データを BitmapData.draw() することはできない。だから、PV3D のテクスチャにはできなくて悲しい。

とはいえ、DisplacementMapFilter という最終手段が残っている。地球儀を作ってみた。

><script src="http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGoogleEarthAs3.swf&amp;up_background=%23000000&amp;synd=open&amp;w=400&amp;h=400&amp;title=Google+Globe&amp;border=%23000000%7C3px%2C1px+solid+%23999999&amp;output=js"></script><noscript>(Flash Player 9 以降が有効になっていると、ここに地球儀が表示されます。)</noscript><

<a href="http://psyark.jp/?entry=20050925191451">psyark.jp - DMFチュートリアル2</a> をすごく参考にした。ほとんどそのまんま。

気になるのが、Google Maps API for Flash の利用条件の「You may not alter or obscure the logos or attribution on the map.」という条項。日本語訳すると「地図上のロゴや権利者の表示は、変えたり隠したりしないでね」ということなんだけど、このサンプルでは完全に隠れてしまっている。

隠したいわけじゃないんだけど、地球儀を実現するには丸くくり抜く関係上、隠さないようにするのは困難だ。著作権の文字は場所や地図のタイプによって変わるので、固定で埋め込む訳にもいかない。Copyright クラスというのはあるんだけど、いまいち使い方が分かってない。そこを解決しないと、商用コンテンツへの応用は難しそうだ。

<a href="http://d.hatena.ne.jp/nitoyon/20080523/google_maps_earth2">Google Maps で地球儀 (2)</a> に続く。

以下、ソース(69行)。
====
>|javascript|
package {
    import flash.display.*;
    import flash.geom.*;
    import flash.filters.DisplacementMapFilter;
    import flash.utils.setInterval;
    import com.google.maps.*;

    [SWF(backgroundColor="0x000000")]
    public class GoogleEarthAs3 extends Sprite {
        private const WIDTH:int = 800;
        private const HEIGHT:int = 500;
        private const RADIUS:int = 200;
        private var map:Map;

        public function GoogleEarthAs3() {
            stage.scaleMode = "noScale";
            stage.align = "TL";

            map = new Map();
            map.key = "ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg";
            map.setSize(new Point(800, 500));
            map.addEventListener(MapEvent.MAP_READY, function(event:*):void{
                var lng:Number = 0;
                var types:Array = [MapType.SATELLITE_MAP_TYPE, MapType.PHYSICAL_MAP_TYPE, MapType.NORMAL_MAP_TYPE];
                var type:int = 0;
                map.setCenter(new LatLng(0, lng), 1, types[type]);
                map.disableDragging();

                setInterval(function():void
                {
                    lng += 3;
                    type = Math.random() < 0.05 ? (type + 1) % 3 : type;
                    map.setCenter(new LatLng(0, lng), 1, types[type]);
                    lng = lng % 360;
                }, 150);
            });

            var bmd:BitmapData = new BitmapData(WIDTH, HEIGHT, false, 0);
            for(var j:int = 0; j < RADIUS * 2; j++){
                var ay:Number = Math.PI / 2 - Math.acos(1 - j / RADIUS);
                var dy:Number = RADIUS - j - RADIUS * ay;
                var rx:Number = RADIUS * Math.cos(ay);
                for(var i:int = RADIUS - rx; i < RADIUS + rx; i++){
                    var ax:Number = Math.PI / 2 - Math.acos(1 - (i - RADIUS + rx) / rx);
                    var dx:Number = RADIUS - i - rx * ax;

                    bmd.setPixel(i, j, getColor(dx + 128, dy + 128, 128));
                }
            }

            map.filters = [new DisplacementMapFilter(bmd, new Point(50, 50), 1, 2, 192, 150)];
            var matrix:Matrix = new Matrix();
            matrix.translate(-50, -50);
            map.transform.matrix = matrix;
            addChild(map);

            var msk:Sprite = new Sprite();
            msk.graphics.beginFill(0);
            msk.graphics.drawCircle(RADIUS, RADIUS, RADIUS);
            msk.graphics.endFill();
            addChild(msk);
            mask = msk;
        }

        private static function getColor(r:int, g:int, b:int):uint {
            return r * 0x10000 + g * 0x100 + b;
        }
    }
}
||<

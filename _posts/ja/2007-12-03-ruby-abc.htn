---
layout: post
title: Ruby で スイーツ(笑)関数
tags: Ruby
lang: ja
old_url: http://d.hatena.ne.jp/nitoyon/20071203/ruby_abc
---
**Ruby はじめました(冷やし中華的な発音で)
LiveCoding#5 にて 「Ruby とか Haskell は分かってて当たり前よね」 という空気だったので、今更ながらに Ruby を勉強しはじめた。

Haskell は難しいらしいので、ちょっと先延ばし。

参考資料：
-<a href="http://dev.ariel-networks.com/articles/workshop/ruby/">プログラミング言語Ruby ? ありえるえりあ</a>
-<a href="http://blog.masuidrive.jp/index.php/2007/08/13/php-to-rails/">masuidrive on rails ≫ Blog Archive ≫ PHPユーザの為のRuby/Rails入門</a>

**初めてのコーディング
LiveCoding 後に cuzic さん邸で LiveCoder を中心に反省会というか雑談をしてた。

そのときに話題に上った「スイーツ（笑）」関数で <strong>フィボナッチ数</strong> を求めるようにしてみた。
>|ruby|
def スイーツ(笑)
    if 笑 == 1 || 笑 == 2
        return 1
    end
    return スイーツ(笑 - 1) + スイーツ(笑 - 2)
end

(1..10).each{|i| puts スイーツ(i)}
||<

**出力
うまくいってる。わーい。
>|sh|
>ruby -KU Test.rb
1
1
2
3
5
8
13
21
34
55
||<
UTF-8 で保存して、-KU オプションをつけて実行した。

**ちょっと改善
三項演算子も使えるようだ。あと、Perl みたいに return は省略できるわけね。ふむふむ。
>|ruby|
def スイーツ(笑)
  笑 == 1 || 笑 == 2 ? 1 : スイーツ(笑 - 1) + スイーツ(笑 - 2)
end
||<
これより短くできるんだろうか？　えろい人に期待。

**雑感
-irb がいい！
--すぐに試せる
--サンプルをちょっと変えたときにどうなるか分かる
--methods とかでメソッド一覧も見れるから、リファレンス代わりにも使える
-オブジェクト指向！
--[] とか + すらもメソッドだったりする設計が好き。内部設計を変に隠そうとしてないから取っ付きやすい。
--"hoge".object_id が毎回違うあたりの潔さがステキ
--だからこそ、シンボルが重要になるわけね。ふむふむ。
-スコープはまだよく分からん
--<a href="http://blog.masuidrive.jp/index.php/2007/08/13/php-to-rails/">masuidrive on rails ≫ Blog Archive ≫ PHPユーザの為のRuby/Rails入門</a>の17ページ目に出てくるサンプルが、書いてあることと挙動が違う
--と思ったら、<a href="http://moriq.tdiary.net/20070829.html">3 日坊主日記 - Rubyのスコープ</a> で突っ込まれてた
--じゃあ、どういうときに変数スコープができるんだろ

**続きます
次回は、Web2.O(笑) を作る予定。

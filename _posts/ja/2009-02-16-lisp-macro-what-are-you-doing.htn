---
layout: post
title: Common Lisp のマクロが何をやってるか把握する
tags: Lisp
lang: ja
old_url: http://d.hatena.ne.jp/nitoyon/20090216/lisp_macro_what_are_you_doing
---
Common Lisp のマクロの背後で何が行われているのかがいまいち分からなかったので、少し詳しく見ていくことにした。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066371/nitoyoncom-22/ref=nosim">On Lisp</a> の<a href="http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/macros.html">7章 マクロ</a> には、<code>defmacro</code> と <code>macroexpand-1</code> の内部処理を Lisp でエミュレートしたコードが紹介されている。
>|lisp|
(defmacro our-expander (name) `(get ,name 'expander))

(defmacro our-defmacro (name parms &body body)
  (let ((g (gensym)))
    `(progn
       (setf (our-expander ',name)
             #'(lambda (,g)
                 (block ,name
                        (destructuring-bind ,parms (cdr ,g)
                          ,@body))))
       ',name)))

(defun our-macroexpand-1 (expr)
  (if (and (consp expr) (our-expander (car expr)))
      (funcall (our-expander (car expr)) expr)
      expr))
||<

7章の冒頭に登場する <code>nil!</code> を <code>our-defmacro</code> を使って定義したとしよう。
>|lisp|
(our-defmacro nil! (var) `(setq ,var nil))
||<

このとき、いったいどういう処理が実施されてるんだろう。それ理解するのが今回の趣旨。

**our-defmacro がすること
our-defmacro はマクロなので、<code>(our-defmacro nil! (var) `(setq ,var nil))</code> は次のように展開される。
>|lisp|
(progn
  (setf (our-expander 'nil!)
        #'(lambda (#:G3123)
            (block nil!
                   (destructuring-bind (var) (cdr #:G3123)
                   `(setq ,var nil)))))
  'nil!)))
; #:G3123 が gensym で定義されたシンボルだとしておく
||<
<code>progn</code> では２つの式を順番に評価している。１つ目が <code>setf</code> で２つ目が <code>'nil!</code> だ。

２つ目の結果が <code>progn</code> の評価結果となるので、この式の戻り値はシンボル <code>nil!</code> となる。

１つ目の <code>setf</code> のところを見ていこう。<code>our-expander</code> マクロが登場してるのでこれも展開してみる。
>|lisp|
  (setf (get 'nil! 'expander) #'(lambda (#:G3123) (...)) )
||<
<code>nil!</code> シンボルの <code>expander</code> プロパティに lambda を設定している。この lambda は ANSI Common Lisp の仕様書で expansion function と定義されているものに該当するようだ。

expansion function は「マクロを展開する処理」を実装した関数である。マクロ評価時に expansion function がどうやって呼ばれるかを見ていこう。

**expansion function はどう呼ばれるか
expansion function を呼び出すのは <code>our-macroexpand-1</code> だ。こいつを見ていく。
>|lisp|
(defun our-macroexpand-1 (expr)
  (if (and (consp expr) (our-expander (car expr)))
      (funcall (our-expander (car expr)) expr)
      expr))
||<
この関数は <code>(our-macro-expand '(nil! x))</code> のように呼び出す。

１行目の <code>if</code> では、引数のチェックをしている。
+<code>expr</code> が <code>cons</code> であるか？
+<code>car expr</code>（つまり <code>'nil!</code>）に <code>expand</code> プロパティが定義されているか？

<code>'(nil! x)</code> はこの条件を満たすので、晴れて２行目が評価される。

２行目は、<code>(funcall [expansion function] expr)</code> を実施している。ここで expansion function が呼ばれている。引数は <code>expr</code> だ。

つまり、expansion function は <code>'(nil! x)</code> を引数に呼び出されることが分かった。

**expansion function の定義を見つつ、our-macroexpand-1 の結果を追う
引数が分かったところで、expansion function の動きを追っていく。

expansion function を再掲しておく。この関数の引数が <code>'(nil! x)</code> である。
>|lisp|
  #'(lambda (expr)
      (block nil!
             (destructuring-bind (var) (cdr expr)
             `(setq ,var nil)))))
||<

<code>(block nil! ...)</code> では <code>nil!</code> という名前のブロックを定義してる。この構文のおかげで、マクロの中で <code>return-from nil!</code> を実行できるわけだ。

次の、<code>destructuring-bind</code> は <code>var</code> に引数の <code>cdr</code> を代入してる。ただの代入じゃなくて、構造化代入を使ってるが、詳しくは、On Lisp の <a href="http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/destructuring.html">18. 構造化代入</a> に書いてあるのでここでは触れない。

ということで、ブロックの中を整理すると、次のような評価になる。
>|lisp|
  (destructuring-bind (var) (x) `(setq ,var nil))
||<
シングルクォートで書き直すとこうなる。
>|lisp|
  (destructuring-bind (var) (x) (list 'setq var 'nil))
||<
さらに <code>let</code> で書き直すとこうなる。
>|lisp|
  (let ((var x))
    (list 'setq var 'nil))
||<

つまり、expansion function の評価結果は
>|lisp|
(setq x nil)
||<
である。

**おわりに
マクロの説明なのにマクロを使ってるのが少し気持ち悪いが、処理系内で何が起こってるかを説明するためにはこのような書き方になるんだと思う。

実際に処理系がマクロを評価する場合、<code>our-macroexpand-1</code> で展開した結果のリストを再度評価する。つまり、<code>(setq x nil)</code> を評価して、実際に <code>x</code> に <code>nil</code> が代入される。もし、マクロの評価結果のリストがマクロなら、もう一度、上記のような処理を実施するわけだ。

ちなみに、<code>our-expander</code> にあたる関数は Common Lisp では  <code>macro-function</code> が用意されている。こいつにシンボル名を渡せば expansion function を取得できる。

>{% amazon jp:4274066371:detail %}<


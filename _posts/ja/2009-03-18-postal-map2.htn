---
layout: post
title: 郵便番号マップ作成記 (2) - ジオコーディングで経度緯度を求める
tags: ''
lang: ja
old_url: http://d.hatena.ne.jp/nitoyon/20090318/postal_map2
---
<a href="http://d.hatena.ne.jp/nitoyon/20090317/postal_map1">第１回</a> では郵便番号データをデータベースに格納するところまでを作った。今回は住所から緯度経度を求めていこう。ビジュアライズのための下準備は今回で完了だ。

**ジオコーディング API は何を使おう
ジオコーディングとは、住所や名所から緯度経度を求めること。世の中にはいくつかジオコーディングの API が存在するが、今回は Google が提供する <a href="http://code.google.com/intl/ja/apis/maps/documentation/services.html#Geocoding">ジオコーディング API</a> を選択した。

理由はGoogle が提供するという安心感と、<a href="http://googlejapan.blogspot.com/2007/09/ip.html">１日あたり1万5千回まで OK</a> と太っ腹なところ。REST で利用できるのも魅力的だった。

**いざ実行
スクリプトをがーっと書いてひたすら実行する。
><div class="fix-height-syntax"><
>|ruby|
require 'EntrySchema'
require 'cgi'
require 'open-uri'

$URL = "http://maps.google.com/maps/geo?"

Code.find_all_by_low("0000").each do |code|
  # 経度緯度を既に求めていたら次
  next unless code.lat.nil? and code.lng.nil?

  # URL を求める
  q = code.pref + code.city
  url = $URL + {"q" => q, "output" => "xml"}.map { |key, value|
    "#{CGI.escape(key)}=#{CGI.escape(value)}"
  }.join("&")

  # 読み取る
  open(url) do |f|
    xml = f.read
    puts xml
    doc = REXML::Document.new(xml)

    # coordinates タグの中身を読み取る
    latlng = REXML::XPath.first(doc.root, '//coordinates').text
    lng, lat = latlng.split(/,/)
    code.lng = lng.to_f
    code.lat = lat.to_f
    puts "#{q} #{lng} #{lat}"
  end

  # 保存
  code.save

  # ３秒スリープしておく
  sleep(3)
end
||<
></div><

エラー処理は特にやってないので、例外が起きたらそこで止まる。データ量も多くないので、止まってたらそのときに手作業で対応すればよいだろう。

途中、「岡山市北区」でエラーになった。「Google さん、しっかりしてよー」と調べてみたら…
>http://ja.wikipedia.org/wiki/%E5%8C%97%E5%8C%BA_(%E5%B2%A1%E5%B1%B1%E5%B8%82):title=北区 (岡山市) - Wikipedia>
北区（きたく）は岡山県岡山市が2009年4月1日の政令指定都市移行に伴い設置を決めた4つの行政区のうちの一つ
<<
とのことらしい。

まだ存在してない区ならば、取得できなくても仕方がない…。

岡山市の４つの区については Google Maps で検索して、見つかった適当なデータから緯度経度を直接 INSERT して対応しておいた。

**DB の中身を JSON で出力
さて、これで緯度経度のデータが出揃った。JavaScript で扱いやすいように、JSON データとして出力しておく。

これも簡単なスクリプトを書いて実現した。住所に \ が含まれることはないので凝った JSON 化は不要だろう。何も考えず使い捨てな勢いで出力コードを書いておいた。
>|ruby|
require 'EntrySchema'

json = Code.find_all_by_low("0000").map { |code|
  %Q|{"lat" : #{code.lat}, "lng" : #{code.lng}, "name" : "#{code.pref}#{code.city}", "code
" : "#{code.high}"}|
}.join(",\n")

puts "[#{json}]"
||<

続く。

><div class="seealso"><
**連載目次（予定）
-{% post_link 2009-03-16-postal-map %}
-{% post_link 2009-03-17-postal-map1 %}
-郵便番号マップ作成記 (2) - ジオコーディングで経度緯度を求める
-{% post_link 2009-03-20-postal-map3 %}
></div><


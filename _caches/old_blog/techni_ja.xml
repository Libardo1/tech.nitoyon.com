<?xml version="1.0" encoding="UTF-8"?>
<diary>
<day date="2003-11-19" title="">
<body>
*p1*&lt;a href=&quot;#&quot;&gt;実験場&lt;/a&gt;
aaa

&gt;&lt;script src=&quot;https://gist.github.com/2491537.js&quot;&gt;&lt;/script&gt;&lt;
</body>
</day>
<day date="2003-11-20" title="">
<body>
*プログラム用語リンクテスト。

JAVA。HSP。OOP。カプセル化。デザインパターン。Win32。CreateProcess。DBI。API。OSP。OSI。C++。CPP。C#。M$。Avalon。WinFS。Indigo。VirtualHost。mod_perl。
-noise10 &gt; Apache、Linux、Javaがらみのキーワードを入れるとかなり引っ掛かるのではないかと(ぉ)

*京都キーワード作成テスト
-アンデパンダン。パンダ。
-[[龍馬]]
</body>
</day>
<day date="2003-11-21" title="">
<body>
*警察呼び出し
しもたちうり警察からキタ━━━(゜∀゜)━━━ッ!!

ってことで、免停されに逝かねばならぬ

*本家編集
本家の日記システムを編集。あと本家を変更するとすれば、Wiki風の書き方かしら。
</body>
</day>
<day date="2003-11-22" title="">
<body>
*XSS
はてなダイアリーではCSSを自由にいじれるんだけど、その最後に次のような一節を加えてみた。
&gt;|
&amp;lt;/style&amp;gt;
&amp;lt;script&amp;gt;
alert(&quot;hoge&quot;);
&amp;lt;/script&amp;gt;
|&lt;
すると、&amp;lt; が &amp;amp;lt; と表示された。ちゃんと対策されているのね。

*無駄に参照してみる
参照したらどう表示されるんだろうテスト。TrackBack っていまいちまだわかんね。

id:kchan/id:laser/id:jono/id:akipponn/id:gomigomi5353 → 各人のリファラに referred と記述されてることを確認。

アンデパンダンをキーワード登録しておいたら、id:NTM さんに使ってもらっている模様。ライブを行うカフェなんかは参照する人もいるんだな。[[etw]]なんかも登録しておくと誰か参照してくれるのかな。
</body>
</day>
<day date="2003-11-23" title="">
<body>
*[[小人のパズル]]

id:shimaken さんのところで紹介されて、次に id:jono くんのところで紹介された &lt;a href=&quot;http://www.kanshin.com/index.php3?mode=keyword&amp;amp;id=370778&quot;&gt;小人のパズル&lt;/A&gt;というパズルゲームを紹介される。情報学やデータの圧縮に多少の知識がある人はどうぞ。そうでないとなかなか解けなさそうなクイズですな。問題の補足をすると、

-色以外口に出しちゃダメ
-言語変えたり速さ変えたり声の高さ変えたり回数変えたりってのはなし
-次に答える人を他の人が指名することもできない
-作戦タイムは帽子をかぶせられる前

となるかな。大事なのは、前にいる&lt;B&gt;全ての&lt;/B&gt;小人の帽子の色が分かり、前の人は後ろの人が答えた内容を知ることができる、ってことですね。

残念ながらわたくしは答えることができず、知的レベルの高い友人にヒント（というより答え）を出してもらって何とか答えにたどり着けました。

私の本家日記の方で答えを暴露してみた。→ http://www.nitoyon.com/kinkyo/

*JJ CLUB
15分100円で楽しめる。

*スタイル変更

CSSをいろいろいじってスタイルを変えてみる。ドットっぽいデザインになったのは、ドット絵職人（ISBN:4844357050）という本を立ち読みしたから。

ドットを生かしたデザインとCSSで表っぽく作る試み。だいたい成功してるかな。
</body>
</day>
<day date="2003-11-24" title="">
<body>
*[pc]Gator
頑張って駆除。

-http://www.geocities.co.jp/Milkyway-Lynx/1240/news/0628/GAIN.html 
-http://higaitaisaku.web.infoseek.co.jp/removegator.html 

*[阪神]残留？
伊良部と下柳とアリアスが残留してくれたら満足。来年も期待できるかな。

-http://headlines.yahoo.co.jp/hl?a=20031123-00000003-spn-spo 
-http://sports.yahoo.co.jp/headlines/20031123/20031123-00020803-jij-spo.html 

*[flash]&lt;a href=&quot;http://www.cbc.ca/kids/games/trampoline.swf&quot;&gt;トランポリンゲーム&lt;/a&gt;
慣れるまで思うように飛ぶのが大変。tutorial で学んで実践で特訓しましょう。

きれいに飛んだり連続で飛んだりすると高得点。わたくし、しばらくやって 6,230点をたたき出しました。

→ 偶然に 17,390点をたたき出してしまった。10回連続ぐらいとんで、うち２～３回は３回転したかな。
</body>
</day>
<day date="2003-11-25" title="">
<body>
*[阪神]&lt;a href=&quot;http://www.sanspo.com/baseball/top/bt200311/bt2003112502.html&quot;&gt;下柳メジャーへ？&lt;/a&gt;
なんだ、結局行くんですか。日本残留なら、阪神なのかな。

*[はてな]&lt;a href=&quot;http://d.hatena.ne.jp/hatenadiary/20031125&quot;&gt;有料オプション開始&lt;/a&gt;
いまいち魅力を感じないのは私だけ？

*[flash]続・トランポリンゲーム
昨日紹介した、&lt;a href=&quot;http://www.cbc.ca/kids/games/trampoline.swf&quot;&gt;トランポリンゲーム&lt;/a&gt;で、ついに廃人的スコア「53,535点」をたたき出してしまた。んが。
</body>
</day>
<day date="2003-11-26" title="">
<body>
*p1*[pc]&lt;a href=&quot;http://internet.watch.impress.co.jp/static/column/jiken/index.htm&quot;&gt;第1回：廃棄パソコンへの知識不足が招いた事件を追う&lt;/a&gt;
無理矢理に blog ぽくリンクを張る。ゴミ箱にファイルを移動したら消えたと思っているのは言語道断。でも、最近のHDDは大きいから、そういう誤解をしている人も多いんだろうな。

*p2*[pc][ms]&lt;a href=&quot;http://www.zdnet.co.jp/news/0311/25/ne00_ms.html&quot; title=&quot;ZDNN：Microsoftは検索をどこまで進化させるのかへ&quot;&gt;ZDNN：Microsoftは検索をどこまで進化させるのか&lt;/a&gt;
なかなか期待がもてますな。WinFS の発表と同時に Google 買収の話が出てつながりが期待されていたけど、いろいろベータテストしているようで、どうなることやら。
&gt;&gt;
現在進行中のプロジェクトの中には、Stuff I've Seenを使い慣れたために、文書を個別のファイルに格納しなくなったというレベルにまで至ったユーザーのグループを対象とした調査もある。 
&lt;&lt;

という一節に期待をしてしまう。今は、MP3 やデジカメの写真の整理に時間がかかるけど、こうなったら音楽用フォルダや写真用フォルダに次々とほりこんでいっても探すのに時間がかからなくなる・・・はず。

*p3*&lt;a href=&quot;http://www3.nhk.or.jp/kouhaku/&quot;&gt;紅白出場歌手決定&lt;/a&gt;
どうでもいいけど、このページコントラスト高すぎ。目がちかちかする。

今年の紅白歌合戦に、ゆずか・・・。想像できない。

*p4*[tips]Word の数式エディタショートカット集
意外と知られていない Word の数式エディタのショートカットです。覚えると格段に効率アップ。

いろいろありますよ。詳しくは &lt;a href=&quot;http://www.econ.nagasaki-u.ac.jp/staff/moriyasu/misc/eeshortcut/&quot;&gt;数式エディタショートカット集&lt;/a&gt; を参照。例を挙げるとこんなの。
-Ctrl+G, q で θ
-Ctrl+G, Q で Θ
-Ctrl+I で積分
-Ctrl+K, i で ∞
</body>
</day>
<day date="2003-11-27" title="">
<body>
*p1*ケータイ機種変
3.5年前のモデルから1.5年前のモデルに変更。PC業界だと、ムーアの法則で２倍になっていると考えるんだけど、ケータイだとあきらかに４倍ぐらいの性能になっているように思える。

*p2*[net]&lt;a href=&quot;http://www.yomiuri.co.jp/main/news/20031127i413.htm&quot;&gt;ファイル交換ソフト悪用しネットで映画公開、２人逮捕&lt;/a&gt;（読売Online）
-&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/11/27/1289.html&quot; title=&quot;京都府警、ファイル交換ソフト「Winny」ユーザー2名を逮捕へ&quot;&gt;京都府警、ファイル交換ソフト「Winny」ユーザー2名を逮捕&lt;/a&gt; (Internet Watch)
ついに、Winny ユーザーにもメスが。19歳のほうは、夕方のTBS系列のニュースで取り上げられていたけど、２人目も来たとは。

もしかしたら、ゲームと映画と２ジャンルにわたって逮捕したのも、逮捕による抑止力を期待してのことなのかもしれない。

２人続けて裏付けもとって踏み入ったんだからすごいよな。どうやったんだろう。&lt;s&gt;Winnyでファイル検索したら、「誰が」もっているファイルかは分かるわけで、それが現在転送してくれている相手かを調べることができたりするんだろうか。「誰が」という情報は何らかの形でやり取りしているはずだから、それを解読したんだろうか。そこまでの情報がないと逮捕状取れないよね？&lt;/s&gt;

→ asahi.com の&lt;a href=&quot;http://www.asahi.com/national/update/1127/035.html&quot;&gt;交換ソフト「Ｗｉｎｎｙ」で初の逮捕者　製作者宅も捜索 &lt;/a&gt; によると
&gt;&gt;
特定のサーバーを経由せず、データが暗号化される仕組みになっていることから、検挙は難しいと言われていた。府警は独自の操作技術を開発、暗号も解読して発信者を特定したという。
&lt;&lt;
とのことで、暗号を解読したみたいですね。がんばるなぁ。


*p3*[pc]&lt;a href=&quot;http://www.zdnet.co.jp/news/0311/27/ne00_la.html&quot; title=&quot;ZDNN：「マスタ」「スレーブ」は差別的？　LA郡が削除を要求へ&quot;&gt;ZDNN：「マスタ」「スレーブ」は差別的？　LA郡が削除を要求&lt;/a&gt;
それを言い出したらきりがない。

そのうち、すべての機械に平等に扱え、とかいわれかねん。CPUがHDDをこき使うなんて前近代的だ、とかね。

*p4*[pc][net]&lt;a href=&quot;http://www.zdnet.co.jp/enterprise/0311/26/epi02.html&quot; title=&quot;エンタープライズ：Internet Explorerの新セキュリティホールは「極めて危険」へ&quot;&gt;エンタープライズ：Internet Explorerの新セキュリティホールは「極めて危険」&lt;/a&gt;
月例アップデートを揺るがす穴が公開されたようで。しかも、MSを通さずにいきなり公にされたもんだから....

&gt;&gt;
この欠陥により、悪意のあるコードを隠したWebサイトを訪れたユーザーのコンピュータに、侵入者はあらゆるコードをインストールすることが可能になる。セキュリティ制限をバイパスし、機密情報なども容易に漏洩させることが可能となる。
&lt;&lt;

*p5*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/11/27/1275.html&quot;&gt;Googleの買収提案を断った「Friendster」の人気が急上昇&lt;/a&gt;
なかなか楽しげ。また新たな種類のサイトが誕生したわけか。
</body>
</day>
<day date="2003-11-28" title="">
<body>
*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2003/11/27/okiniiri.html&quot;&gt;窓の杜 - 【今日のお気に入り】劣化させずにJPEGファイルサイズを減少「carmine」v1.03&lt;/a&gt;
こったアルゴリズムなのかな。ちと興味あり。

*[alttab]AltTab拡張ソフト草案
Windows の Alt+Tab を拡張するソフトを作ってみよう企画。
-Alt+Tabで表示されるウインドウでグループ化を実現。ツリー上でリストを表示
-グループは同じアプリケーションを自動的に束ねる
--Explorer は自動的にグループ化、など。
-グループを登録することもできる
--メーラーやブラウザのネット系、エディタやコンパイラの開発系など。
-Win+Tab で同じグループの中で切り替えられるようにしてみる
--すべてのアプリをタブ化できるわけだ
-Windows NT 系のデスクトップも切り替えられるようにする（？）

開発参考URL：&lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwxp/html/xpvisualstyles.asp&quot;&gt;Using Windows XP Visual Styles and PrintWindow in Windows Applications&lt;/a&gt;

*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/11/28/1298.html&quot;&gt;ACCS、Winnyユーザー逮捕への経緯詳細を説明&lt;/a&gt; (Internet Watch)
まとめてみた。
-京都府警がやったこと
--Winnyが暗号化して送信しているデータの解析。(すごい)
--データの実際の送信者を特定。(これってどうして？　ほかの人のデータを中継して、キャッシュしたものではないことをどうやって特定したんだろう。容疑者がBBSにキャッシュをさらしてたのかな。)
--被疑者のIPアドレスの取得（まぁ、netstatでもしたんでしょうな）
-ACCSがやったこと
--著作者と協力して、実際に容疑者のWinnyからダウンロードできるか確認
-一部の「にちゃんねら」がやったこと
--ACCSにF5アタック

やはり一番疑問なのが、データを放流した人を特定したところ。キャッシュされたデータを送信しているだけかもしれないし、中継しているだけかもしれないし。やはり、BBS でハッシュを晒していたと考えるのが妥当かなぁ。

*[k-tai]&lt;a href=&quot;http://www.zdnet.co.jp/mobile/0311/27/n_portable.html&quot;&gt;ZDNet Mobile：番号ポータビリティ始まったら……「利用したい」トップはau&lt;/a&gt;
この調査結果を見る限りでは、番号ポータビリティーが始まったら、DoCoMoからの流出が増えるわけですな。
</body>
</day>
<day date="2003-11-30" title="">
<body>
*[alttab]α版制作中
寝起きとか寝る前に制作中。仕事の他に楽しめるプログラミングをするのは重要かもしれない。

将来の機能拡張に備えて、大げさ目の設計にしてさじ加減を考えて実装。
</body>
</day>
<day date="2003-12-01" title="">
<body>
*[news]地上デジタル放送
開始。で、受信機持っている人っているの？

*[net]&lt;a href=&quot;http://japan.cnet.com/news/com/story/0,2000047668,20062290,00.htm&quot; title=&quot;CNET Japan - ついにIPv6の時代が来る？：各国政府が相次いで対応を表明へ&quot;&gt;CNET Japan - ついにIPv6の時代が来る？：各国政府が相次いで対応を表明&lt;/a&gt;

&gt;&gt;
すでに大量のアドレスを確保している米国はIPv6への移行に消極的だった。（中略）　しかしその米国も、今年6月に国防総省がIPv6への移行を表明したことで、にわかに情勢が変わってきたという。同省が調達する製品はIPv6互換でなければならないとされたことから、製品を納入するハードウェア・ソフトウェアベンダーが対応を検討しはじめたとのことだ。
&lt;&lt;

国防総省が動けば世界が動く。
</body>
<comments>
<comment>
<username>じゅんいち</username>
<body>地上デジタルは、受信機よりは放送エリアのほうが問題かと。都内なんかひどいっすよ。民放は千代田区コミュニティーチャンネル状態。</body>
<timestamp>1070304181</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>地上デジタルで馴れ合い！</body>
<timestamp>1070306725</timestamp>
</comment>
</comments>
</day>
<day date="2003-12-02" title="">
<body>
*[pc]&lt;a href=&quot;http://www.zdnet.co.jp/products/0312/01/rj00_dcube.html&quot;&gt;PCUpdate：FMで飛ばせるMP3プレーヤー――D Cube NMP-612T/256&lt;/a&gt; (ZDNet)
&gt;&gt;
収録したファイルをFMトランスミッタで飛ばして、車や手持ちのオーディオ機器で聴けるのが、D Cubeの最大の特徴だ。FMトランスミッタの周波数は、自由に設定可能だが、周波数は87.5～95MHzとなっている。
&lt;&lt;
こういう使い方もできるのか。ラジオ受信機ならいたるところにあるもんね。なるほどなるほど。

*ノートPCがブルースクリーン
一番最後の[[Windows Update]]以来、再起動していないわけだから、いろいろ不具合が出てきたんだろうか。

Windows XPの自動診断によると
&gt;&gt;
Synaptics Touchpad Driver (SYNTP.SYS)
Synaptics が製造元です。お客様のデバイスに対応する更新されたドライバが入手可能で、これにより問題を修正できます。Microsoft は、新しいドライバをインストールしてシステムの安定性を向上させることをお勧めします。更新されたドライバをダウンロードするには、Synaptics の Web サイト http://www.synaptics.com/support/downloads.cfm を参照してください。
&lt;&lt;
とのことで、タッチパッドのドライバがクラッシュしたようで、もはやなんとも。

*[pc]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/02/nebt_08.html&quot;&gt;ZDNN：ムーアの法則の限界、Intelが指摘&lt;/a&gt;
数日前に「ムーアの法則」をキーワード登録しておいたおかげで、このニュースを取り上げている人を捕捉しちゃいました。
</body>
<comments>
<comment>
<username>爬猫</username>
<body>iPod にも FM トランスミッタのアクセサリが各社から出てますね</body>
<timestamp>1070373326</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>へー。そうなんだ。昔からよくある発想なのかな＜FM</body>
<timestamp>1070445265</timestamp>
</comment>
<comment>
<username>爬猫</username>
<body>どうなんでしょう。FM トランスミッタ自身は小学生の頃電子工作で作った記憶が無きにしもあらずですけど。ただ、この製品、FM トランスミッタを初めから内蔵してるのが目新しいですね</body>
<timestamp>1070462754</timestamp>
</comment>
</comments>
</day>
<day date="2003-12-03" title="">
<body>
*[pc][ms]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/02/ne00_ms.html&quot;&gt;ZDNN：MSがLonghornで見せるコンピューティングの未来&lt;/a&gt;
よくまとまっている。「開発者にはすげーありがたい Longhorn」ってのを明言してくれたのがちょっとうれしい。

*[pc][ms]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/02/ne00_mscar.html&quot;&gt;ZDNN：「すべての車に自社OSを」――MSが掲げる遠大な野望&lt;/a&gt;
ユビキタスへむけての争いがここでも。

*[ms][net]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/03/nebt_02.html&quot;&gt;ZDNN：Hotmail、デザインを刷新。スパム対策も強化&lt;/a&gt;
ひさびさにログインしてみた。使ってないなぁ。
</body>
</day>
<day date="2003-12-04" title="">
<body>
*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2003/12/03/okiniiri.html&quot;&gt;窓の杜 - 【今日のお気に入り】マウスホイールで音量調節「WheelVol」v1.0&lt;/a&gt;
音量って、気軽に調節したい項目の１つなのに、ＰＣではなかなかめんどくさい。音量の調節をマウスホイールの「回転」というインターフェースで可能になるんだから、より直感的になるかな。

*[net]&lt;a href=&quot;http://www.zdnet.co.jp/broadband/0312/03/lp01.html&quot;&gt;リビング＋：「出会い系で恋人・友達できた」は14％　～インフォプラント&lt;/a&gt; (ZDNet)
わたくしは 14% に含まれておりますね。ネット出会いの怖さをなくすには、友達の紹介ですな。それを実現している Friendster...日本版でないかな。
</body>
</day>
<day date="2003-12-05" title="">
<body>
*控えめに
ニュースを読む時間がないぐらい忙しいと、ネタがなくて困るなぁ。リストアップだけはしておくか。

-&lt;a href=&quot;http://www.zdnet.co.jp/broadband/0312/04/lp13.html&quot;&gt;リビング＋：Winnyに参加しただけで摘発も？　～ACCS (1/2)&lt;/a&gt; (ZDNet)
-&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/12/05/1391.html&quot;&gt;NTT-AT、「電磁波による情報漏えいとその対策」など技術説明会を実施&lt;/a&gt; (INTERNET Watch)
-&lt;a href=&quot;http://www.atmarkit.co.jp/fwin2k/insiderseye/20031203wse/wse.html&quot;&gt;＠IT：Insider's Eye -- Windowsのパッチはいかにして作られるか？&lt;/a&gt;

*生茶パンダもどき
id:jonoくんにもらう。かわいいけどごつい。横から見ると不気味。はやり純正品がいいなぁ。
</body>
</day>
<day date="2003-12-06" title="">
<body>
*[linux][pg]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/06/nj00_gbaonlinux.html&quot;&gt;News：「圧倒的じゃないか！」──ゲームボーイにLinuxで目覚めた&lt;/a&gt; (ZDNet)
うわー、これは楽しそう！　家庭用ゲーム機でゲーム開発かぁ。いい世の中になったもんだ。
&gt;&gt;
GBAに対して特殊なことをする必要はない。PC上で作成したプログラムをUSBケーブルを通してGBAのメモリ上（256Kバイト）におくだけでよいのである。また、電源を切れば、メモリ上のプログラムは消えるため、心置きなく試すことができる。 
&lt;&lt;
「電源ぶち」が気軽にできるのは、初心者にとってはうれしいことでしょうな。

*[soft]&lt;a href=&quot;http://www.vector.co.jp/magazine/softnews/031206/n031206com1.html&quot;&gt;ハイパーテキストスクリーンセーバー&lt;/a&gt; (Vector)
これはありそうでなかった代物ですな。素敵な発想。
ただ、今はPCの見た目に凝ってないので使わないけど。こりだすと大変だし、環境がいろいろあるので場所によって見た目が違うと気持ち悪いしさ。

*[ms][keitai]&lt;a href=&quot;http://www.zdnet.co.jp/mobile/0312/04/n_os.html&quot;&gt;Mobile：Microsoftのオープン性に疑問～立川社長&lt;/a&gt; (ZDNet)
OSにはオープンを求めるのに、利用者にはオープンではない・・・。
JAVAでいじれる範囲を拡大してくれー。そしたら、スパムフィルタをJAVAで書いたり、住所録をいじったり、写真を加工したりできるのに。

*[keitai]&lt;a href=&quot;http://www.zdnet.co.jp/mobile/0312/04/n_imode.html&quot;&gt;Mobile：iモードサイト大賞決まる。大賞は「AD乗換案内」&lt;/a&gt; (ZDNet)
DoCoMo公認ページばっかやん。

*[hatena]
はてなアンテナのスタイルをいじってみる。ol タグをスタイルシートでいじるのは無謀すぎる。

タブ風にしてみたかった野望は達成されたので、いいとするか。
</body>
</day>
<day date="2003-12-07" title="">
<body>
*[pc]&lt;a href=&quot;http://www.zdnet.co.jp/products/0312/04/rj01_muvo2.html&quot;&gt;PCUPdate：1.5Gバイトは“必要十分”――小型HDDオーディオプレーヤー「MuVo2」&lt;/a&gt; (ZDNet)
いい感じ。携帯MP3プレイヤーもいろいろ出てきて楽しい分野になってきましたね。

個人的には外で音楽を聴くのはあまり好きではないので、買うことはないだろうな。自分の世界に入ることができるんだけど、世の中から取り残された気分に・・・ならない？
</body>
</day>
<day date="2003-12-08" title="">
<body>
*[pc]&lt;a href=&quot;http://www.watch.impress.co.jp/av/docs/20030526/ivdr.htm&quot;&gt;iVDRコンソーシアム、1.8型のリムーバブルHDD「iVDR mini」など&lt;/a&gt;
規格が統一できるのはよいね。デジカメ用のリムーバルメディアの規格がたくさんあるのはなんとかしてほしいもんね。

*[net]&lt;a href=&quot;http://japan.internet.com/research/20031205/1.html&quot;&gt;Japan.internet.com デイリーリサーチ - ユーザーはホットスポットよりネットカフェが好き&lt;/a&gt;
ホットスポットの普及は時期尚早かな。ユビキタスな時代には必要なんだけどもさ。
</body>
</day>
<day date="2003-12-09" title="">
<body>
*[net]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/08/xert_yahoo.html&quot;&gt;News：Yahoo!が提案する新たなスパム対策とは？&lt;/a&gt; (ZDNet)
新しい方法を提唱するのは簡単なんだけどさ。
個人的にはベイジアンフィルタの &lt;a href=&quot;http://www.h2.dion.ne.jp/~nabeken/bsfilter/&quot;&gt;bsfilter&lt;/a&gt; が笑えるぐらいうまく動いているのでどうでもいい。

*[pg]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/09/nebt_11.html&quot;&gt;News：Intel、マシンに学習させるソフト提供&lt;/a&gt;
ベイズ則らしい。学習用のライブラリといったところかな。

*&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/12/09/1429.html&quot;&gt;電通調査、2003年の話題商品・ヒット商品第1位は「ブロードバンド」&lt;/a&gt; (INTERNET Watch)
いろんな意味で Y!BB は話題づくりしてくれましたからね。
２位はアミノ酸。アミノサプリが１番手だけど、後発のアミノ式の方がインパクトは強いかな。

*どうでもいいこと
PUFFY と PuTTy は似ていると思った。
</body>
</day>
<day date="2003-12-10" title="">
<body>
*誕生日
16進数で18歳。

*&lt;a href=&quot;http://www.atmarkit.co.jp/fwin2k/win2ktips/104ie_pgarc/104ie_pgarc_02.html&quot;&gt;WebページをMHT形式で保存したときの正体&lt;/a&gt;
ひえー。HTMLメールっぽく保存されるのか。マルチパートだってよ。なるほど。賢いね。
</body>
</day>
<day date="2003-12-11" title="">
<body>
*&lt;a href=&quot;http://internet.watch.impress.co.jp/static/column/jiken/2003/12/09/&quot;&gt;インターネット事件簿 第2回：「セキュリティ架空請求」に見るインターネットのけものみち&lt;/a&gt; (INTERNET Watch)
すげー巧妙。まともな管理者じゃなかったらだまされるんじゃないかなぁ。

*[ms][net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/12/11/1451.html&quot;&gt;IEにURLを偽装できるパッチ未公開の脆弱性が発見される&lt;/a&gt; (INTERNET Watch)
-&lt;a href=&quot;http://japan.cnet.com/news/ent/story/0,2000047623,20062654,00.htm&quot;&gt;CNET Japan - Internet Explorerにオンライン詐欺を助長する新たな欠陥&lt;/a&gt;
-&lt;a href=&quot;http://itpro.nikkeibp.co.jp/free/ITPro/NEWS/20031211/137400/&quot;&gt;IEにURLを偽装できるセキュリティ・ホール，安易なクリックは禁物 : IT Pro ニュース&lt;/a&gt;
id:hoshikuzu:20031210#p7 さんとこに色々例があって楽しい。URL 偽装できまっせ。SSL証明書がどうこう言っている時代に、こんな穴が...

緊急じゃないと言っているMSは認識がおかしくないか。HTML書ける人なら誰でもできるソーシャルハッキングじゃん。アダルトサイトで横行しそう？

*[net]&lt;a href=&quot;http://www.zdnet.co.jp/enterprise/0312/10/epn15.html&quot;&gt;エンタープライズ：2004年4月には「メールの70％がスパム」に&lt;/a&gt; (ZDNet)
やな感じ。

*[tv]&lt;a href=&quot;http://www.zdnet.co.jp/survey/0312/10/svn01.html&quot;&gt;Survey：電通総研が斬る！ 地上デジタル放送への論点（1）&lt;/a&gt; (ZDNet)
なんだかんだいって、CD や DVD に移行したんだから地上デジタルも普及するよー、って書いてある。

そうなのかなぁ。CD や DVD はプレイヤーだけでなくメディアの値下がりも大きかったけど、はてさてテレビがデジタルになって利点はどこに見いだせるのかなぁ・・・。

*[ms][longhorn]&lt;a href=&quot;http://www.zdnet.co.jp/enterprise/0312/09/epn08.html&quot;&gt;エンタープライズ：Longhornの魅せるプレゼンテーション技術「Avalon」&lt;/a&gt; (ZDNet)
うわー、ログオン画面をカスタマイズしているよ。いろんな意味で悲鳴。
</body>
</day>
<day date="2003-12-12" title="">
<body>
*[keitai]&lt;a href=&quot;http://www.zdnet.co.jp/mobile/0312/11/n_imode.html&quot;&gt;Mobile：iモード契約者が初の減少&lt;/a&gt; (ZDNet)
au に移ってるんだとさ。へー。FOMAに移っている人もいるのかな。で、ボーダフォンはだめだめだと。セルラーは圏外。

*[ms]&lt;a href=&quot;http://www.zdnet.co.jp/enterprise/0312/12/epn01.html&quot;&gt;エンタープライズ：MS、謎のパッチリリースは「人為ミス」&lt;/a&gt; (ZDNet)
なんやそら。

*メーリングリスト構築
&lt;a href=&quot;http://www.freak-tennis.net/cgi/muu/muu.php&quot;&gt;むーさん&lt;/a&gt;がメーリングリストを自作したというのでつっこみを。
&gt;&gt;
とりあえずの目標はHTMLメールや添付ファイルが送られてきたらエラーメッセージを返すのと、メンバー以外から送られてきたらエラーメッセージを返すのとである。
（中略）
まずHTML・添付メールをはじく部分であるがこれはメールヘッダ部のContent-Typeがtext/plainでないものはエラーとする(合ってるかな？)。つまり平文メールしか受け付けませ～ん！まぁ主に携帯で運用するんで大丈夫でしょ！
&lt;&lt;
えーっと、これだとテキストメールにテキストファイルを添付すると・・・すり抜けますね。ってことで、Multipart/* も弾かないといけないのでは。他にも、Content-type をわざと複数行にしてみたらすり抜けたりするだろうし、まじめにやろうとするとやっかい。
送信元のブロックも本当にやりたければ、Fromの判断だけでなく、送信元のメールサーバーも調べて、本当にキャリアのメールサーバーなのか確認する必要があるね。身内ならそこまでやる必要はないだろうけど。

*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2003/12/11/okiniiri.html&quot;&gt;窓の杜 - 【今日のお気に入り】マウスポインタを可愛く目立たせる「Star Cursor」v1.00&lt;/a&gt;
ほんとにかわいい。

*[alttab]&lt;a href=&quot;http://www.google.co.jp/search?hl=ja&amp;ie=UTF-8&amp;oe=UTF-8&amp;q=AltTab+%E6%8B%A1%E5%BC%B5&quot;&gt;Google 検索「AltTab 拡張」でトップ&lt;/a&gt;
Googleで「AltTab 拡張」で検索すると、このページがトップに来るらしい。できてもいないソフトがトップにくるとは。ちなみに、仕事が忙しくて逃避する時間もないです。仕事に飽き気味になった頃に、また開発再会するはず。
blogがGoogleで上位に来やすいってのは知ってたけどさー、窓の杜よりも上ってのはやりすぎだろ。
</body>
</day>
<day date="2003-12-14" title="">
<body>
*IEのURL偽装対策
IEのURL偽装バグを使ったページが表示されると警告を発するプログラムを作ったら面白いかなーと思った。

*&lt;a href=&quot;http://www.zdnet.co.jp/broadband/0312/13/lp01.html&quot;&gt;リビング＋：謎の白装束集団、渋谷を占拠！？&lt;/a&gt; (ZDNet)
goo のプロモーションらしいですが、なかなかしゃれてる。
</body>
</day>
<day date="2003-12-15" title="">
<body>
*[mail]&lt;a href=&quot;http://www.zdnet.co.jp/news/0312/12/ne00_mail.html&quot;&gt;News：偽装スパム・詐欺メールを防ぐ「メール身元確認」システム&lt;/a&gt; (ZDNet)
&gt;&gt;
DomainKeysのアプローチは、公開鍵暗号とドメインネームシステム（DNS）を組み合わせたもの。ドメイン名の所有者（おそらく、そのドメイン名を発信元アドレスとする電子メールを管理している）は、秘密鍵を使って電子署名を作成し、この署名はすべての送信メールのヘッダに埋め込まれる。ドメイン名所有者は、自分のサーバにこの秘密鍵に対応する公開鍵を置いておく。 

　受信側のシステムはこのメールを受信すると、電子署名と送信者欄に記されたドメインを取り出す。それからドメイン名所有者のサーバから公開鍵を取ってきて、電子署名がそれに対応する秘密鍵で生成されたものかどうかを判断し、それによって送信者とそのドメインの関係を確認する。 
&lt;&lt;
秘密鍵で暗号化した文字を、公開鍵で解読するのね。秘密鍵・公開鍵ともに公開するのかと思ってびっくりした。

*[music]&lt;a href=&quot;http://www.sanspo.com/geino/top/gt200312/gt2003121508.html&quot;&gt;スピッツの「あいのり」主題歌が大ブレーク&lt;/a&gt; (SANSPO.COM)
あいのりで流れると絶対に当たるのね。もはやこの番組の中で流れると、どんな曲でも「切なく」聞こえてしまうんじゃないか。

ふと思ったんだけど、地方ごとに主題歌が違う試みって面白いんじゃないかな。今まであったんだろうか。地上デジタルが進めば、年代にあわせて・・・なんて事も可能になるはず？

*[gourmet]わらじや
なぜか[[わらじや]]がキーワード登録されていて笑った。あ、おとつい行ったので調べてたんです。詳しくは、美食日記の方参照してね。
</body>
</day>
<day date="2003-12-16" title="">
<body>
*p1*[pc]&lt;a href=&quot;http://www.yomiuri.co.jp/net/news/20031213ij11.htm&quot;&gt;ＰＣ画面、横から見えないフィルター&lt;/a&gt; YOMIURI ON-LINE
お仕事中にあんなことやこんなことができるようになる、と。

*p2*南極には風邪の菌を持ち込まないようにしている
とのことなので、どんなに寒くても風邪を引かないらしい。体が弱ってても風邪を引かないのか。

&gt;http://ja.wikipedia.org/wiki/%E5%8D%97%E6%A5%B5%E5%9C%B0%E5%9F%9F%E8%A6%B3%E6%B8%AC%E9%9A%8A:title=南極地域観測隊 - Wikipedia&gt;
南極には風邪の病原体がいないため、隊員達はどんなに寒くても風邪をひかない。また、病原体や病原菌を外部から持ち込まないよう、隊員達は日本出発前に、風邪はもちろん水虫や虫歯に至るまで完全に治療しなければならない。
&lt;&lt;
</body>
</day>
<day date="2003-12-17" title="">
<body>
*p1*&lt;a href=&quot;http://www.zdnet.co.jp/broadband/0312/15/lp14.html&quot;&gt;リビング＋：「ゲームが人を暴力的にする」は支持されつつある&lt;/a&gt; (ZDNet)
昔は「ゲーム」で人が暴力的になるはずがないと思っていた。昔のゲームといえば、マリオがぴょんぴょんはねて踏んづけたりするレベル。RPGで主人公が攻撃するといっても、攻撃するふりをして、敵が点滅するぐらいのレベルだった。そんななかでは、あくまで現実の一面を映し出したゲーム画面に、人間が勝手に想像力で場面を思い描くものだった。もともと自分はゲームに感情移入するほうでもないし想像力も乏しく、所詮ゲームと割り切っていたもんだ。初期のゲームで暴力的になる人なんて、かなり想像力が優れていて、そんなひとはきっとテレビや本でも暴力的になるはずだから、ゲーム自体に問題があるとは思えない。
けども、最近のゲームは想像力を導入するまでもなく、すべてのことが作り手から供給されてしまう。そんな状態においては、ゲームの中の事象が現実とリンクしてしまうんじゃないか、と不安に思ってしまう。
こんな不安が多い中、任天堂だけは、リアリティーを排除し、昔と同じメタファーを今の技術で提供しているように思う。マリオがクリボーを踏みつけるのと同じ抽象度で、ポケモンは相手のモンスターを倒す。そこでは、確かに「倒す」という表現はされているものの、人を凶暴化させる要素はなく、あくまで仮想の世界であり、ゲームであることを印象づけてくれる。
ゲーム業界を創ったメーカーのこだわりをもって、メーカーとしての責任を果たしているようにも思う。

*p2*カススタに登録されたらしい
&lt;a href=&quot;http://d.hatena.ne.jp/adramine/20031215/1343480305&quot;&gt;追加(敬称略) - gobbledygook&lt;/a&gt; で登録されていたらしい。知らなかった。ありがたいことだ。
&gt;&gt;
アンカー以外のインライン要素指定無しだけど、使わないのなら関係ないですな。

が、class=&quot;header&quot;の中に生のインライン要素がbrで折り返してあるけど、リストでマークアップして、div.header li{list-style:none;}とかにした方がスマートに思えますな。
&lt;&lt;
勢いで作ったスタイルにコメントをしていただいて非常にうれしく思います。
</body>
</day>
<day date="2003-12-18" title="">
<body>
*[ms]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/special/2003/12/16/1522.html&quot;&gt;IE脆弱性を悪用するアドレス詐称サイトに注意！&lt;/a&gt; (INTERNET Watch)
-&lt;a href=&quot;http://support.microsoft.com/?id=833786&quot;&gt;833786 - 成りすました Web サイトか見分ける手順について&lt;/a&gt;
なんだかなぁ。パッチをリリースするのは大変だろうけど、この回避方法では実用に耐えないぐらい面倒だ。
プロクシを運用しているようなシステムでは、制御コードを省くように設定したらとりあえずは対処できるとのこと。

*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2003/12/16/1515.html&quot;&gt;Yahoo! JAPAN検索キーワードランキング&lt;/a&gt; (INTERNET Watch)
世の中の人はURL覚えないのかな。ベスト10に入っているやつの公式サイトは、JR以外は全部URL言えるけどなぁ（４位の壁紙は公式サイトなしとして）。JRは東日本が jreast.co.jp に対して西日本が westjr.co.jp でよく勘違いする。

*[ms]&lt;a href=&quot;http://www.zdnet.co.jp/enterprise/0312/17/epic02.html&quot;&gt;エンタープライズ：Windows XP SP2で、IEのセキュリティはどう変わる？&lt;/a&gt; (ZDNet)
安全に安全に。

*[keitai]&lt;a href=&quot;http://www.zdnet.co.jp/mobile/0312/17/n_enoki.html&quot;&gt;Mobile：“au買うのはちょっと待って”とドコモ、榎氏&lt;/a&gt; (ZDNet)
必 死 だ な ｗ

FOMAの仕様を見てねとのことだけど、&lt;a href=&quot;http://www.nttdocomo.co.jp/new/contents/03/whatnew1218.html&quot;&gt;FOMA「900iシリーズ」を開発&lt;/a&gt; というニュースリリースが出てますな。
:「デコメール」機能の搭載:要はHTMLメールらしい。
:ｉアプリのコンテンツサイズを拡大:いろいろできるようになる。
:「キャラ電」機能の搭載:テレビ電話で自分の代わりのキャラクタを利用できるようになる。キャラクタを操作して、感情を伝えるらしい。使えるのか？？？
:「着モーション」機能の搭載:着うた。
:「Macromedia Flash」１００K対応:FLASHキター
:全機種「メガピクセルカメラ」の搭載:すごいね。各社同じ方向に流れているはず。
:全機種「外部メモリースロット」を標準搭載:いいね。各社同じ方向に流れているはず。
</body>
</day>
<day date="2003-12-19" title="">
<body>
*[ms][net]IEのバグがいろいろ
例のURL偽装がらみで、いろいろな人がいろいろな実験を行って、いろいろと問題が出てきているみたいですね。
-id:hoshikuzu:20031211#p2で早速利用したスパムを公開してはります
-&lt;a href=&quot;http://www.on-sky.net/~hs/index.cgi?date=20031213&quot;&gt;SSL man in tne middle(MITM) demo&lt;/a&gt;によると、SSL証明書も詐称先のほうを信用するみたい。
-&lt;a href=&quot;http://www.st.ryukoku.ac.jp/%7Ekjm/security/memo/2003/12.html#20031216_IE&quot;&gt;IEの新セキュリティーホールとはてなダイアリーXSS対策&lt;/a&gt;についてのまとめ。(セキュリティーホール memo)
あーこわい。

@i問題は、IEバグのパッチが出ても、パッチ当てない人は絶対にいるだろうし、すべてのシステムがXSS対策をする必要がありますね。
「はてな」は閲覧用と編集用のCookieに分けて、「編集はSSL経由のみ・編集用のCookieにSecure属性」という選択肢を可能にしたら楽になるのでは？　対策が早いからその必要はないといったらないんだろうけど、いたちごっこは疲れますよね。
0x00をIEのパーサーが無視する問題は、フィルター方式でHTMLをブロックすような実装の限界を感じますな。絶対また何か出てくるって。

そもそも、IEのパーサーに関連して、XSS脆弱性対策エンジンをMSが用意して欲しい。IEのパーサー部分はオープンにしていいんじゃないかなぁ。→&lt;a href=&quot;http://enterprise.watch.impress.co.jp/cda/topic/2003/12/18/915.html&quot;&gt;日本の某６大学には期限付きで開示されるらしいですが&lt;/a&gt;

*[ms][pg]&lt;a href=&quot;http://www.codeproject.com/com/cominterfacehookingpart.asp&quot;&gt;COM Interface Hooking and Its Application - Part I&lt;/a&gt; (The Code Project)
XP のログオン画面でSPY++が起動している絵があるけど、なかなかの衝撃だ。
話自体も、COMを実装したDLLをフックする話で、なかなか興味深い。

</body>
</day>
<day date="2003-12-20" title="">
<body>
*[net][soft]&lt;a href=&quot;http://www.softether.com/jp/&quot;&gt;SoftEther.com - SoftEther 仮想イーサネットシステム&lt;/a&gt;
へー。なかなかがんばる人がいるなぁ。サイトもよくできていて分かりよい。ダウンロードはしてないから完成度は分からない。

どうやら仮想イーサーカードとして認識されるらしく、がんばってドライバ書いたんだよなぁ。DDKは触ったことあるけど、ドキュメントがないから大変だろうな。
</body>
<comments>
<comment>
<username>Sla</username>
<body>若き天才プログラマとして有名な人ですね、確か。</body>
<timestamp>1071909570</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>へー。よくご存知で。</body>
<timestamp>1071930375</timestamp>
</comment>
</comments>
</day>
<day date="2003-12-21" title="">
<body>
*[keitai]&lt;a href=&quot;http://k-tai.impress.co.jp/cda/article/interview/16968.html&quot;&gt;WordやExcelを携帯で確認できる表示システム　シャープ開発担当者にその仕組みを聞く&lt;/a&gt;
すごい時代だ。ケータイ＝PDAになる時代も近い。
</body>
</day>
<day date="2003-12-22" title="">
<body>
*p1*&lt;a href=&quot;http://www.asahi.com/business/update/1222/027.html&quot;&gt;自転車こぐとタイヤに空気、大阪の中小企業が開発&lt;/a&gt;
いろいろとがんばる人がいるもので。((test))

*p2*[mfc][pg]wincore.cppでASSERT
wincore.cpp で謎のASSERT。
&gt;&gt;
Line 628:  ASSERT(pWnd-&gt;m_hWnd == NULL);   // only do once
&lt;&lt;
1つの CWnd で２度 Create を実行すると発生するみたい。ほんとMFC意味不明。(if you call CWnd.Create twice, then this assertion will occur.)
</body>
</day>
<day date="2003-12-23" title="">
<body>
*[flash]WhizzBall
WhizzBallで遊ぶ。子供の頃、デパートにある玉が１回転したりレールに沿って動くモニュメント（？）が好きだった自分にとっては、かなり魅惑的なゲーム。
</body>
</day>
<day date="2003-12-25" title="">
<body>
*p1*[net]&lt;a href=&quot;http://www.zdnet.co.jp/broadband/0312/22/lp12.html&quot;&gt;リビング＋：禁断の「ダウンロード」で成功したアダルト事業者&lt;/a&gt;
この手の技術はもういいところまで来たのか。いろんなサービスがMS依存になっていくにしたがって、やはりWindows時代が続くんだなーと思ってしまう。
WMPでどんなことができるかって、いまいち理解できてないなぁ。MediaPlayerSDK読む時間ないよ。

*p2*[linux]wget tips
ページを丸々取得するためには次のようにする。
&gt;|sh|
$ wget -r -k -np http://xxxxxxx/xxx/
||&lt;

ここで利用した引数だけ列挙しておこう。それ以外はmanもしくは&lt;a href=&quot;http://members.at.infoseek.co.jp/futora/wget153/&quot;&gt;wget&lt;/a&gt;を参照。
:r:再帰的
:k:絶対パスから相対パスへの変換を行う
:np(no-parent):親ディレクトリは取得しない

</body>
<comments>
<comment>
<username>いちかわ</username>
<body>robot=off (?)オプションも重要かな</body>
<timestamp>1072362120</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>そんな邪悪なオプションが..</body>
<timestamp>1072368592</timestamp>
</comment>
</comments>
</day>
<day date="2003-12-26" title="">
<body>
*[web]&lt;a href=&quot;http://tickety.boo.jp/words/archives/cat_8.html&quot;&gt;Movable Typeカスタマイズ&lt;/a&gt;
なんとなく本家のほうにMovable Type を導入したくなってきたのでいろいろ調べてみる。
</body>
</day>
<day date="2003-12-27" title="">
<body>
*[web]Movable Type やっぱだめぽ
どこがだめだと思ったかを書いてみる
:データベースを使ってる:スクリプト書いて変換をごりごりしたい。データベースを使うと、そういう気軽さがなくなる。
:カスタマイズできすぎるがゆえのとっつきにくさ:独自タグを導入してテンプレートを編集できるのはいいけど、タグが多すぎ。
:肝心なところはカスタマイズできない:「コメント用フォームに１項目付け加える」なんてことはできないよね。（たぶん

きっとバランス感覚の問題なんだろうけど、Web からすべてのことをやってもらうのは無茶だし、そういった機能のために無駄にソースが膨れあがるのはいただけない。もっと機能を単純化して、やりたい人はソースを直接いじれるようにして欲しい。

そういう意味では、PukiWiki のソースはなかなか好き。

*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/special/2003/12/26/1630.html&quot;&gt;読者が選ぶ 2003年インターネット10大ニュース結果発表&lt;/a&gt; (INTERNET Watch)
今年を振り返る企画。いろいろあったね。

１つ大きいと思うのが、これらのニュースのうちのいくつかは実際に夕方のニュースなどで取り上げられたこと。去年の上位よりも取り上げられる機会が増えたんじゃないかなぁ。ウィルスのニュースを見たおっちゃんおばちゃんが「ウィルスが危ないらしいけど、どうしたらいいの？」と身近な詳しい人に聞いていたし、世間のセキュリティー意識はわずかながらも底上げされたのでは？

*[tv]&lt;a href=&quot;http://www.sponichi.co.jp/entertainment/kiji/2003/12/26/02.html&quot;&gt;“野鳥の会”紅白落選！&lt;/a&gt;
ひきこもごも。

*だメルコのバッキャロー
&lt;a href=&quot;http://buffalo.melcoinc.co.jp/products/catalog/item/b/bbr-4hg/&quot;&gt;BBR-4HG&lt;/a&gt;を買ってみた。
ルーターでDMZ設定をして、外部からのポート80番のHTTPリクエストはサーバーに連れて行きたかった。図にするとこんな感じ。
&gt;|
              WAN             
              ┃              
              ┃              
        ┌──┸──┐        
        │ルーター  │        
        │          │        
        └──┰──┘        
              ┃              
  ━━┳━━━┻━━┳━━━  
      ┃            ┃        
  ┌─┸──┐    ┌┸───┐
  │サーバー│    │WinXP   │
  │        │    │        │
  └────┘    └────┘
|&lt;
けども、DMZの設定やアドレス変換テーブルがうまいこと機能してくれない。何度やっても外からコネクションをはれない。

そういや、ルーターのIPを変更したとき、DHCPのデフォルトゲートウェイを「BroadStationのIPアドレス」にしてるのに初期設定のIPアドレスになってしまった。そんな怪しい挙動もあり、「ルーターのIPアドレスを変更して検証してへんやろ」と突っ込んでしまった。

結局、ダメダメだよー。「IPアドレスを変更したとき、アドレス変換が機能しない」というバグがあってもおかしくない実装だ。ファームウェアのバージョンアップに期待しよう。発売されたてのルーターは買わないほうがいいと言う教訓を知る。

仕方がないので、今までどおり下のような構成に。
&gt;|
  WAN                           
  ┃                            
  ┃                            
  ┃      ┌─────┐        
  ┃      │ルーター  │        
  ┃      │          │        
  ┃      └──┰──┘        
━┻┳━        ┃              
    ┃━┳━━━┻━━┳━━━  
    ┃  ┃            ┃        
┌─┸─┸┐        ┌┸───┐
│サーバー│        │WinXP   │
│        │        │        │
└────┘        └────┘
|&lt;
</body>
</day>
<day date="2003-12-28" title="">
<body>
*[keitai]&lt;a href=&quot;http://headlines.yahoo.co.jp/hl?a=20031227-00000100-kyodo-bus_all&quot;&gt;気になる曲名すぐ判明　携帯電話に聞かせ自動認識&lt;/a&gt;
へー
</body>
</day>
<day date="2003-12-29" title="">
<body>
*p1*[web]blosxomいいかも？
&lt;a href=&quot;http://internet.watch.impress.co.jp/static/link/2003/12/26/blog.htm&quot;&gt;誰でも作れる！　Blogで新たな情報発信&lt;/a&gt; で紹介されていた blosxom をちょっと触ってみる。先日、Movable Type に言った文句が全部解決されている雰囲気。

なんてったって、本体のソースコードが500行っていうのがすごい。ちょっと年末年始に触って遊んでみるか。
</body>
</day>
<day date="2004-01-01" title="">
<body>
*[pc]&lt;a href=&quot;http://www.watch.impress.co.jp/akiba/hotline/20031227/etc_miniqtwin.html&quot;&gt;Windows XPを2人同時に利用できるキューブ系PCが発売に&lt;/a&gt;
こりゃー楽しい。同じパーティションのWindows XPを見にいっても問題は起こらないのか。

Web を見た限りでは、MS製のドライバをうまいこと書き換えて、それぞれの信号を適切に処理しているっぽい。うーん。具体的に何をしているのかが、いまいち見当つかない。

1つのCPUを分割して使用する技術が完成したら、LinuxとWindowsを１台で同時に走らせるなんてことも可能になるかもね。そうなったら、ディスプレイ切り替え機をつけて１人で楽しいことができそう。
</body>
</day>
<day date="2004-01-02" title="">
<body>
*[xyzzy]xyzzyを触ってみる
ちょっと触ったかんじ、だいぶ使いよい。

便利でいいんだけど、emacs系のキーバインドと Windows系のキーバインドはぜんぜん相容れないのが悩みどころ。emacsで 「Ctrl X」 といえば大事な出発のためのストロークだし、Windowsで「Ctrl X」といえば「カット」と相場が決まってる。

悩ましい。

*[xyzzy]秀丸はウインドウが増えすぎて気持ち悪い
秀丸の難点はウインドウが増えすぎるところにあったんだよね。それにEmacs系の機能豊富さにも惹かれるところはあったわけで。

いろいろ調べると、http://www.uranus.dti.ne.jp/~shiro-/soft/xyzzy/keybind.html#windows で Windows っぽいキーバインド方法が書いてあったので導入してみる。この winkey2 を使うと「選択中に Ctrl-X を押すとカット、それ以外は command-prefix キーとして解釈」してくれるみたい。いいね、いいね。
</body>
</day>
<day date="2004-01-05" title="">
<body>
*p1*[c++]chkesp.c のアサート
VC++6.0 で、次のようなアサートが出た。
&gt;&gt;
Module:XXXXX
File: i386\chkesp.c
Line: 42

The value of ESP was not properly saved across a function call.
This is usually a result of calling a function declared with one calling conversion with a function pointer declared with a different calling conversion.
&lt;&lt;

DLL の関数へのポインタを GetProcAddress で取得したときに、型が間違っていたのが原因っぽい。

今回は WINAPI を抜かしてしまった。初めてであったアサートなだけに驚いてしまった。
</body>
</day>
<day date="2004-01-06" title="">
<body>
*p1*[pc]&lt;a href=&quot;http://japan.cnet.com/news/ent/story/0,2000047623,20063467,00.htm&quot;&gt;CNET Japan - BIOSの歴史に終止符?--米インテルと米MSが新仕様EFI普及へ&lt;/a&gt;
MSもいろいろなことに口出ししてるな。利点がいまいち分からないのは、利用者はBIOSで悩まされることがあんまりないからだろうな。

*p2*[c++]VC++ ビルドエラー
DLL を作ろうとして、HogeFunc を .def ファイルでエクスポート指定しようとしたらこんなことを言われた。
&gt;&gt;
.\hogedll.def : warning LNK4022: シンボル &quot;HogeFunc&quot; の unique match が見つかりません
.\hogedll.def : warning LNK4002: &quot;int __stdcall HogeFunc(unsigned long,int)&quot; (?HogeFunc@@YGHKH@Z) は .\Debug\main.obj で定義されています
.\hogedll.def : warning LNK4002: &quot;public: virtual int __thiscall A::HogeFunc(int)&quot; (?HogeFunc@A@@UAEHH@Z) は .\Debug\A.obj で定義されています
&lt;&lt;
そうか、同じ関数名で複数の実体があると、.def ファイルでは限界があるのか。これって解決できるんだろか。

こういう場合は __declspec(dllexport) で逃げた方がいいのかな。
</body>
</day>
<day date="2004-01-07" title="">
<body>
*&lt;a href=&quot;http://solution.itagent.co.jp/info/03122605.html&quot;&gt;秋葉原電気街と神田明神が新春キャンペーンを実施&lt;/a&gt;
「IT祈とう」だそうで。祈とうしてもらうとウイルスに感染しなくなるらしい。個人レベルなら、祈とう料払うならアンチウイルスソフトを導入しようよ。

管理者さんなんかだとくると安心？　しかし、現物がないと「祈とう」しにくいのでは。モバイル ノートでシステムに ssh しておいて、ポート フォワードでご加護をイントラネットに注入するんかな（意味不明

*[kyoto][edu]&lt;a href=&quot;http://www.kyoto-np.co.jp/kp/topics/2004jan/06/W20040106MWC1K100000058.html&quot;&gt;ＦＡ制、178教諭が名乗り　京都市教委「予想以上の多さ」&lt;/a&gt; （京都新聞）
いろいろ考えるな。全校生徒の前で、「わたしは FA で旅立ちます」とか言うんだろうか。試しに&lt;a href=http://www.geocities.jp/laccucr/fa.html&quot;&gt;松井秀喜がメジャーに行くときの FA 会見&lt;/a&gt;をもじって、どんなスピーチになるか検証してみた。

&gt;&gt;
私、○○は今年取得しましたフリーエージェントの権利を行使いたしまして、来季より西京高付属中でプレーするという事を望み、その道を選びました。昨夜、校長先生、教育委員長、PTA会長に直接、時間を作っていただいて、お会いしまして、その思いを伝えました。もちろん、今年１年、いえ今年１年だけではなく、ずっと前から、何とかこの小学校に残って、何とか学校のためにプレーしてくれないかという言葉を何度も何度もしていただいておりました。大変、僕自身も昨日、その事を伝えるのは心苦しかったのですが、僕の個人的な、向こうに行ってプレーしたいという気持ちが最後まで消えなかったものですから、それを伝え、了承していただいたと思っております。

自分自身の夢、プレーしたいという気持ちに対して、今年１年当小学校でプレーしなければいけなかったわけですが、学校に対して、先生方に対して、そして生徒のみなさんに対しても、そういう気持ちはやはり見せられないですし、僕自身一生懸命、いえ一生懸命というわけじゃないんですが、自分のわがままに対して、ふたをして考えないようにしてきました。昨日の夜にそういう決断に至ったわけですが、最後の最後まで悩んで、本当に苦しかったというのが正直なところです。決断をした以上は、向こうで何とかいいプレーをしたいと考えています。僕自身この小学校で１０年間、もちろん、みなさんに育てられた人間だと思っていますし、今現在、そういうものしか僕の中にありませんので、１０年間で養ってきた京都魂と言いますか、僕の体に染み付いたものを向こうでも精一杯発揮できたらいいなと思っています。

本当に最後まで心に引っかかったのは、残留を望んでいた生徒のみなさんでした。本当に申し訳ない気持ちでいっぱいです。今、何も生徒のみなさんにうまく伝えられる言葉は見当たりませんが、先ほども言った通り、京都魂というものを向こうで見せ付けることもまた、生徒のみなさんへのちょっとした恩返しになると思うし、何とかいいプレーで喜んでもらえるように頑張りたいと思います。

一緒に闘ってきた先生方にも、大変、心苦しい気持ちでいっぱいです。僕のわがままを許してくれるかどうか分かりませんが、とりあえず、決断した以上は命を懸けて頑張っていきたいと思います。
&lt;&lt;

すごいすごい。合うよ。ばっちし。
</body>
</day>
<day date="2004-01-08" title="">
<body>
*[kyoto]&lt;a href=&quot;http://www.kyoto-np.co.jp/kp/topics/2004jan/07/W20040107MWA1K100000057.html&quot;&gt;舞妓さんら画面で「龍馬に１票」　花街で電子投票ＰＲ&lt;/a&gt;（京都新聞）
電子投票いいね！　地方自治体でなら導入しやすいけど、参院選とか衆院選に導入されるのはいつになることやら。

国会での決議もより議論をしていただくために、テレビ番組でよくある「会場の100人のお客さんに聞いてみました」形式を採用したらいいのに。すごいテンポアップして国会中継もどきどきすること間違いなし！
</body>
</day>
<day date="2004-01-09" title="">
<body>
*p1*[Win32]APIフックについてまとめておこう
:&lt;a href=&quot;http://help.madshi.net/madCodeHook.htm&quot;&gt;madCodeHook&lt;/a&gt;:概要（英語）
:&lt;a href=&quot;http://www.internals.com/articles/apispy/apispy.htm&quot;&gt;API Spying Techniques for Windows 9x, NT and 2000&lt;/a&gt;:概要その２（英語）
:&lt;a href=&quot;http://www.codeproject.com/system/hooksys.asp&quot;&gt;The Code Project - API hooking revealed - System&lt;/a&gt;:解説＠Code Project．
:&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4756138055/ref%3Dsr%5Faps%5Fb%5F6/249-2647440-3877103&quot;&gt;Amazon.co.jp： 本 Advanced Windows&lt;/a&gt;:まじめにやるならこの本を購入しよう。
:&lt;a href=&quot;http://member.nifty.ne.jp/TaN/prog-tips.html&quot;&gt;dchookのソース&lt;/a&gt;:サンプルその１。Dokopopのソースコード。
:Regmonのソース:サンプルその２。&lt;a href=&quot;http://www.sysinternals.com/ntw2k/source/regmon.shtml&quot;&gt;Regmon&lt;/a&gt;のソース。昔はソース公開されていたが、現在はされていないみたい。「regsrc.zip」でぐぐってみると、誰かが昔公開されていたのを２次配布しているのが見つかる・・・かも。
:&lt;a href=&quot;http://www.codeproject.com/dll/apihijack.asp&quot;&gt;APIHijack&lt;/a&gt;:APIフック用のライブラリ解説＠code project
:&lt;a href=&quot;http://www.codeproject.com/dll/DLL_Injection_tutorial.asp&quot;&gt;DLL Injection and function interception tutorial - The Code Project - DLLs&lt;/a&gt;:同じくCode Project から
:&lt;a href=&quot;http://d.hatena.ne.jp/NyaRuRu/20040614#p3&quot;&gt;NyaRuRuの日記&lt;/a&gt;:.
:&lt;a href=&quot;http://japan.internet.com/developer/20050830/26.html&quot;&gt;Japan.internet.com デベロッパー - 別のプロセスにコードを割り込ませる3つの方法&lt;/a&gt;:.

某氏に解説してもらった内容をメモ。
&gt;&gt;
Win32プロセスは EXE や DLL のファイルフォーマットである PE フォーマットのファイルをほぼそのままメモリ上にロードする形で起動される。で、PE フォーマットのバイナリでは API コールというのは全部間接ジャンプになっていて、.idata というセクションにそのジャンプ先の値を書き込んだテーブルが収められている。コンパイル後のアセンブラでは call .idata[ 52] って感じになっていて、.idata 領域に API の実アドレスが一杯並んでいる。Windows の PE ローダは .idata セクションのアドレステーブル中の値を書き換えることで、ロードされたバイナリと API の実コードのある空間とをリンクする。

で、dchook がやっているのは、あるプロセスにおいて利用される API をフックするために、そのプロセスのオンメモリな .idata の中身を上書きするという作業。API のアドレスの代わりにフック関数のアドレスを書き込んでやる。この道の用語では、こういう手法を DLL Injection と呼んでいるらしい。
&lt;&lt;

*p2*[net]&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/0401/08/epc20.html&quot;&gt;「SoftEtherを危険視するのはおかしいです」――19歳の開発者に聞く&lt;/a&gt;
すごい経歴だなぁ。

言ってることは筋が通っているし、いいんじゃないの。これからの時代は、ノートパソコンを持ち込ませた段階で終わりですな。HTTPだけ許可しても、over HTTP で逃げられるしねぇ。

*p3*&lt;a href=&quot;http://www.itmedia.co.jp/&quot;&gt;ITmedia&lt;/a&gt;
今日になって初めて新しいデザインを見た。すっきりしてるね。Enterprise だけメニューで mouse hover のときに背景色が変わるけどなんでだろ。

全体がテーブルタグでかこわれていて、IEだと全部読み込まないと表示されない。何とかしてほしい。
</body>
</day>
<day date="2004-01-10" title="">
<body>
*&lt;a href=&quot;http://www.jij.co.jp/news/top-page/topic/art-20031215212823-RLYIHOCDBC.nwc&quot;&gt;ガチャピン人形が出現、バンダイが玩具菓子発売&lt;/a&gt;
かわいい。

*[pc]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0401/10/news018.html&quot;&gt;Adobeなど、画像編集ソフトに通貨偽造防止技術採用&lt;/a&gt;(ITmedia)
通貨を開いているかを認識するのって簡単なんだろうか。コピー機でできているんだから、編集ソフトでもできるのかなぁ。

*[pc]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0401/10/news013.html&quot;&gt;PC業界は家電市場で主役になれるか&lt;/a&gt; (ITmedia)
家電が強い日本としては主役になられると困るよ。
技術者的視点から考えると、家電になるからにはインターフェースがシンプルでなければならない。インターフェースを洗練するということはPC業界が不得意な分野に思う。特にOSなんてものは全てのインターフェースの最大公約数となるように設計されているはずなのに、それを洗練しろというのだから厳しいのではないか。

洗練するためには、Software over OS か new OS という二択なんだけど、MSの Media Center Edition は前者ですな。XP の上に家電っぽく見せるためのソフトウェアが動いてる。しかし、この方向で最大公約数を隠して、必要最低限の機能を提供できるんだろうか。PC業界発展のための決まり文句「こんな機能も・あんな機能もつけてみました」こそが必要最低限から足を踏み外す理由とならなければよいが。さらに、現在のディープなPCユーザーが、必要最低限なPCを見てどう捕らえるんだろうか。「こんなんPCじゃない！」って言われて終わりにならないことを祈る。それならいっそ、新しいOSで行っちゃったほうがいいような気もするが、それじゃーMSはもうからんだろうな。
逆に、PS2やXBOXに代表されるように家電にもPC的な設計が出てきて、結局ボーダレス化している。PC業界も家電業界も向かう方向が一緒なんだけど、それぞれの思想で製品を作ったときに、大衆にはどっちが好まれるんだろう！

</body>
<comments>
<comment>
<username>のいせ</username>
<body>溢れる多機能をリテラシーのない一般ユーザーにどうやって飲み込ませるか、というところがUIの洗練というものの中身ですわな。デバイス自身が何を説明できるか、というところを考えるとPCが優位じゃないかという気もする。何故って、家電には喧しいポップアップヘルプやウザげなイルカなんぞを実装するのが難しいから。PC的UIと家電的UIに関する国産家電メーカーの憂鬱は、PSX に現れていると見るべきかもしれない。あれは既にPCの領域に片足を踏み込んでしまっている。とかなんとか、適当なことをハツカキコしつつ、どうでもいいけどこのページ Mozilla だと文字が妙に小さくなったり左側のグレーのカラムがすかっと消えちゃうよとかクレームをつけてみるテスト(何)</body>
<timestamp>1073775056</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>IEでしか実験してませんからねぇ。Mozilla は気にしないでください。</body>
<timestamp>1073802367</timestamp>
</comment>
<comment>
<username>akipponn</username>
<body>あう、mozilla user @佐○研です、、、見捨てないで☆</body>
<timestamp>1073917735</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-11" title="">
<body>
*p1*&lt;a href=&quot;http://www.watch.impress.co.jp/akiba/hotline/20040110/etc_dataglass2.html&quot;&gt;SVGAの単眼ヘッドマウントディスプレイがデモ中、約19万円&lt;/a&gt; (AKIBA PC Headline)
スカウター！　試してみたいなぁ

*p2*[funny]&lt;a href=&quot;http://shinoken.tea-nifty.com/xxx/2003/12/post_21.html&quot;&gt;XXX: ニモ★寿司！！&lt;/a&gt;
かわいい！

*p3*[ms]ログオンとログインについて
logon と login をどうやって使い分けるかについての議論
-&lt;a href=&quot;http://www.users.gr.jp/ml/archive/viewer.aspx?name=win2k&amp;no=7708&quot;&gt;[Win2k:07708] Re: LMHOSTS を利用しての BDC にメイン参加の要求をする方法&lt;/a&gt; (議論の発端)
-&lt;a href=&quot;http://www.users.gr.jp/ml/archive/viewer.aspx?name=win2k&amp;no=7709&quot;&gt;[Win2k:07709] ログオンとログイン (Re: LMHOSTS を利用しての BDC にメイン参加の要求をする方法)&lt;/a&gt; (どっちでもいいんとちゃう意見)
-&lt;a href=&quot;http://www.users.gr.jp/ml/archive/viewer.aspx?name=win2k&amp;no=7716&quot;&gt;[Win2k:07716] Re: ログオンとログイン&lt;/a&gt; (歴史的解釈)
個人的には、「Windows ではログオンを使う」という方向でいいように思う。

Hotmail では「.NET Passport サインイン」という言葉を使っているけど、これは .NET Passport であることを意識させるための命名なんだろうな。そのくせURLは「http://login.passport.net/」だったり意味不明。（Hotmailも &lt;a href=&quot;http://internet.watch.impress.co.jp/www/article/980105/hotmail.htm&quot;&gt;MS が買収する&lt;/a&gt;前の名残でログインなのかもね）

Yahooのメールやオークションでは「ログイン」を使っている。ちなみに、このはてなダイアリーも「ログイン」を使っているし、Web サービスでは「ログイン」を用いるのが慣習なのかな。

*p4*住友建設のCM
確かこんな感じだったと思う。
&gt;&gt;
客：（新築の家を見回して）やっとできたな
社員：まだです。人が何十年も住んで育てていく。木造の家ってそういうものです。一緒にお手伝いさせてください。
&lt;&lt;

IT業界に応用してみると
&gt;&gt;
客：（発注していたシステムの完成品を見て）やっとできたな
社員：まだです。何年も使っていくシステム。未知の問題にそなえるものです。一緒にお手伝いさせてください（つまり保守契約しろ）
&lt;&lt;
となるね。夢のない話だ。
</body>
<comments>
<comment>
<username>tomocha</username>
<body>Windowsへはログオン、ネットワークやデータベース等はログイン と一応意識的に使い分けています。正しいのかは分からないけど…。</body>
<timestamp>1073904459</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-12" title="">
<body>
*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/static/column/antivrs/2004/01/09/&quot;&gt;連載：新しいウイルス対策を考える&lt;/a&gt; (INTERNET Watch)
なかなか踏み込んだ記事。
</body>
</day>
<day date="2004-01-13" title="">
<body>
*[net]&lt;a href=&quot;http://japan.internet.com/research/20040109/1.html&quot;&gt;受験生の88％が携帯電話を持っている&lt;/a&gt; (internet.com)
&gt;&gt;
志望校を決める際にインターネットを情報収集手段として使った受験生は210人（全体の70％）という結果になった。また、受験生の88％が携帯電話を持っていることもわかった。 
&lt;&lt;
大学は学生獲得のためにも、Webページをがんばって作らなきゃね。

&lt;a href=&quot;http://www.moetan.jp/moetan.html&quot;&gt;もえたん&lt;/a&gt;に続き、「もえ大」が流行るかもよ（適当

*[game]&lt;a href=&quot;http://hokotate.cocolog-nifty.com/blog/2004/01/post_3.html&quot;&gt;ホコタテブログ: 岩田任天堂社長が“異質な新商品”について言及&lt;/a&gt;
&gt;&gt;
（“異質な新商品”について）
「どれだけ驚いてもらえるかが命だ。発表直後はみんなが拍手するとは思えないし、その覚悟はしている。一割の人が『面白い』と思ってくれて、戸惑っていた人たちもいずれ『やってみたい』と思って広がればいい。だれでも遊べる原点に戻ったゲームにしたい。ただ、ハードとソフトの一体型では社業を支えられない。あるプラットホームを使うが、既存のゲーム機の枠組みにははまらないということだ」
&lt;&lt;
いったいどんなプラットホームよ。原点に戻るということで、「カードゲーム」と思ってしまったが、はてさて。

*[net]&lt;a href=&quot;http://www.updown.org/toku/korea.htm&quot;&gt;韓国の反日サイバーテロ団体　本格的に２ちゃんねるを攻撃中！？&lt;/a&gt;
-&lt;a href=&quot;http://www.asahi.com/tech/asahinews/TKY200401120052.html&quot;&gt;「竹島」めぐりネットで日韓中傷合戦、パンクのサイトも&lt;/a&gt; (asahi.com)
ネット市民というのはどこの国でもお行儀が悪いようで。「お互いに相手が最初にやった」というんでしょうが、そりゃ事の発端を言い出したら、お互い譲らなくなるでしょうな。

ネット警察ができたらちょっとはまともになるかもしれないけど、国と国をまたいだときはどっちにしてもややこしそう。
</body>
<comments>
<comment>
<username>cann</username>
<body>喧嘩はネットがいいわ。声の大きさに左右されない。言質が取れる。＞ネット喧嘩</body>
<timestamp>1073998070</timestamp>
</comment>
<comment>
<username>cann</username>
<body>あ、私の日記もリンクについかされたのね…　おはずかしいですわ。</body>
<timestamp>1073999472</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ネットでのケンカは、お互い言いたいことだけ言って、議論が発展しないことが多いと思います。</body>
<timestamp>1074050660</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-14" title="">
<body>
*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2004/01/14/okiniiri.html&quot;&gt;【窓の杜今日のお気に入り】ペン習字ソフト「マウス de ペン習字 - Calligra」v1.0&lt;/a&gt;
あふぉや。ネタソフトとしか思えん。

*&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0401/14/news069.html&quot;&gt;ITmediaニュース：対話もできる「ドラえもん」1号機、バンダイが発売&lt;/a&gt;
ドラえもんキター。

*[net]&lt;a href=&quot;http://hail2u.net/blog/blog/cnet_japan_and_trackback.html&quot;&gt;CNet JapanとTrackBack&lt;/a&gt;
CNet Japan に TrackBack が実装されたのね。2chも実装するゆーてるし、もはや Web における一般的な技術になりつつあるのかな。


</body>
<comments>
<comment>
<username>まるしん</username>
<body>MacII とかで、Calligraph とかいうソフトで遊んでましたが何か?</body>
<timestamp>1074360124</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-16" title="">
<body>
*[ms]&lt;a href=&quot;http://japan.cnet.com/news/media/story/0,2000047715,20063705,00.htm&quot;&gt;毎日新聞とマイクロソフト、両社のニュースサイトを4月に統合 - CNET Japan&lt;/a&gt;
新聞社にはネットワークでの営業のノウハウがないのはもっともな話。MSに委託販売のような形にすると、MSも記事をただでてにいれらるし両者両得になるわけですな。

MSがシステムを作るんだから、MSがデザインを行わなきゃいけないのは分かるけど、デザインがMSっぽいものになるのは避けてほしいな。

*[net]&lt;a href=&quot;http://www.yomiuri.co.jp/net/news/20040115ij33.htm&quot;&gt;無線ＬＡＮ　不正傍受に罰則 / インターネット / ニュース / ネット＆デジタル&lt;/a&gt; (YOMIURI ON-LINE)
&gt;&gt;
改正案では、無線ＬＡＮでやり取りされる情報のほか、秘話機能を使ったコードレス電話での会話の盗聴など、暗号化された無線通信の不正傍受を処罰の対象とする。
&lt;&lt;
無線LANは暗号化されていなくても読み取ったらだめ？？

*&lt;a href=&quot;http://www.hotwired.co.jp/news/news/technology/story/20040115303.html&quot;&gt;アドビの「紙幣の偽造防止」技術、簡単に破れることが判明&lt;/a&gt;
常に画像を解析し続けたら、負荷かかるもんな。そりゃー、後からつなぎ合わせたらうまくいくだろうよ。

*[ms]&lt;a href=&quot;http://blog.bulknews.net/mt/archives/000712.html&quot;&gt;blog.bulknews.net: PDF をブラウザで表示させない&lt;/a&gt;
いいかも。

→と思ったら、まったくブラウザでPDFを表示できなくなるのか。PDF を開こうとしたときに、別プロセスで Acrobat Reader があがるようにはできないものか？　動画を開いたら WMP が開くんだから、設定することは可能よね。

*[ms]Virtual PC for mac の値付け
kakaku.com で Virutal PC for mac の値段を&lt;a href=&quot;http://www.kakaku.com/txtsearch/txtsearchresult.asp?TopCategoryCD=6&amp;CategoryCD=0360&amp;SearchWord=Virtual+PC+for+mac&quot;&gt;調べてみた&lt;/a&gt;。
:VIRTUAL PC 6 for Mac 日本語版 with Windows XP Home:23,300円
:VIRTUAL PC 6 for Mac 日本語版 with Windows XP Professional:25,900円
それに対して、&lt;a href=&quot;http://www.kakaku.com/txtsearch/txtsearchresult.asp?TopCategoryCD=6&amp;CategoryCD=0310&amp;SearchWord=Windows+XP&quot;&gt;XPのお値段&lt;/a&gt;はと申しますと
:Windows XP Home SP1 日本語版:20,000円
:Windows XP Professional SP1 日本語版:27,880円
だった。

あれ、Professional に至っては、Mac で Windows XP 使ったほうが安いぞ！

Macユーザーに Windows を使ってほしい気持ちは分かるけど、、、さすがにこの値段設定は...Windows ユーザーのやる気を削ぎますね。
</body>
</day>
<day date="2004-01-17" title="">
<body>
*[pc]&lt;a href=&quot;http://www.hotwired.co.jp/news/news/technology/story/20040116301.html&quot;&gt;脳とコンピューターを直結するインターフェースが現実に&lt;/a&gt; (HOT WIRED JAPAN)
&gt;&gt;
四肢が全く動かない人でも、思考する際に生じる脳内信号だけを利用して、コンピューターやロボットを操作することはもちろん、将来的には、麻痺した筋肉に信号を送る経路を新たに確保して、自分の筋肉まで動かせるようになる可能性がある。
&lt;&lt;
ひえー。ロボットの反逆が起こる日も近いぞ！
</body>
<comments>
<comment>
<username>のいせ</username>
<body>http://www.newscientist.com/news/news.jsp?id=ns99993488 ちと古いけど関連にうす。</body>
<timestamp>1074324508</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-19" title="">
<body>
*p1*&lt;a href=&quot;http://www.yomiuri.co.jp/net/news/20040116ij11.htm&quot;&gt;スペイン製の赤ちゃん泣き声分析器発売へ&lt;/a&gt; (YOMIURI ON-LINE)
バウリンガルそのまんまですね。ネタとして売り出していないところが少し怖いかも？　アメリカで発売したら訴訟されるかもよ。

id:wushi さんが「ばぶリンガル」と表現されていたのが、うまい言い方だと思った。

*p2*[memo]semi_staticプラグイン
blosxom のプラグイン。応用して、登録してあるタイムスタンプよりも新しかったら出力する、みたいな形に改造すると楽しいかな
http://www.torus.jp/.plugins/semi_static
</body>
</day>
<day date="2004-01-20" title="">
<body>
*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2004/01/19/okiniiri.html&quot;&gt;マウスをキーボードで操作「K2M」v0.002.00&lt;/a&gt; (窓の杜 今日のお気に入り)
こういうソフトはいろいろあるんだけど、画面のキャプチャを見た感じでは２つの「モード」を採用しているよう。移動も加速減速ともに行えるみたいで、便利そうじゃないかな。

問題はどういうときに利用するかなんだよな...

*&lt;a href=&quot;http://www.yomiuri.co.jp/net/news/20040119ij21.htm&quot;&gt;大戦中の英軍偵察写真　５００万枚をネット公開&lt;/a&gt; (YOMIURI ON-LINE)
これは楽しそう。500万枚を全部ダウンロードしたら、1枚10kbとしても 10G も HDD を食いますな。

公開されるはずのURLはこちら＜http://www.evidenceincamera.co.uk/
</body>
</day>
<day date="2004-01-21" title="">
<body>
*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2004/01/21/okiniiri.html&quot;&gt;メッセンジャー用ファイル転送ツール「FileXC」v1.1&lt;/a&gt;窓の杜 今日のお気に入り
MSN Messanger SDK を使ってるのかな。

MS って WMP にせよ Messanger にせよ SDK は公開しているのに、実際にプラグイン アプリケーションを作る人は少ないよね。SDKはあるもののサンプルが少ないからなのかなぁ。タブブラウザなんかでIEコンポーネントをいじり倒す人は出てきてるけどね。
</body>
</day>
<day date="2004-01-23" title="">
<body>
*&lt;a href=&quot;http://www.mainichi.co.jp/digital/coverstory/archive/200401/21/1.html&quot;&gt;電子書籍は読書を変えるか 専用端末相次ぎ発売へ&lt;/a&gt; (mainichi.co.jp)
将来的には電子書籍 兼 電子ノートなんかは出てくるはずよね。それとは別に普及するかどうかなんだけれど、便利だし新しい物好きの日本人にはたまらないんじゃないかなぁ。CM は「紙を使わないから地球に優しい！」という決まり文句でも使って。

普及してくると学校の授業風景もずいぶんと変わってくるんでしょうな。そうなってくると、ますます出版業界は頑張らないと大変。出版業界よりも、製本業界のほうが大変か...

*[game]&lt;a href=&quot;http://www.artepiazza.com/docs/dq5.html&quot;&gt;「ドラゴンクエストV 天空の花嫁」3月25日に発売決定&lt;/a&gt;
PS2 版だそう。開発中（らしい）&lt;a href=&quot;http://www.level5.co.jp/products/new/dq8/&quot;&gt;DQ8&lt;/a&gt; のシステムをあるていど導入しているのかな。リンク先をたどると、十数枚のスクリーンを閲覧できます。

*&lt;a href=&quot;http://wn.31rsm.ne.jp/~kuriken/column/star.html&quot;&gt;つのだ☆ひろ１００考&lt;/a&gt;
動ナビの「見つけてきたNEWS」より。おもろい、これ。100コ列挙してみる勢い的には千鳥の100択クイズだし、ネタ的には陣内智則さんっぽい。
</body>
<comments>
<comment>
<username>まるしん</username>
<body>そんなのより、英雄伝説VI の方に萌えてくれ</body>
<timestamp>1074878748</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>うーん、英雄伝説はやったことないんですよね</body>
<timestamp>1075010178</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-25" title="">
<body>
*[ms]&lt;a href=&quot;http://www.cnn.co.jp/fringe/CNN200401240016.html&quot;&gt;「マイクローソフト.com」論争で和解&lt;/a&gt; (cnn.co.jp)
めでたしめでたし。マイク・ロー君、おめでとう。

*&lt;a href=&quot;http://www.yomiuri.co.jp/national/news/20040124i215.htm&quot;&gt;「公開講座参加はＵＣＬＡ」古賀潤議員がＨＰ再修正&lt;/a&gt; (yomiuri.co.jp)
あー、もうだめだめ。ここまでくると、その場しのぎの言い訳でしかないことがバレバレよね。
&gt;&gt;
読売新聞の取材に対し、ＵＣＬＡは「公開講座の過去３５年間の受講者名簿に、古賀議員の名前は残されていない」と回答している。 
&lt;&lt;
「CUCLA の公開講座でした」と発表する日も近いかな。

いずれにしても、CUCLA と UCLA の事務の方に多大な迷惑をかけているんだから、これ以上しょうもない嘘はつかないでくれ。

*[flash]&lt;a href=&quot;http://www.fetchfido.co.uk/games/reaction/reaction_test.htm&quot;&gt;Reaction Test&lt;/a&gt;
某氏に紹介してもらう。

いわゆる反射神経のテスト。わたくしはどうしても 0.25秒の壁を突破することはできませんでした。0.18 秒を出した友達もいるし、自分はまだまだですね。

*[flash]&lt;a href=&quot;http://www.marleentimmer.com/worteldrie/djtrainer/djtrainer.html&quot;&gt;DJ-TRAINER&lt;/a&gt;
id:KSK:20040125 さんより。

DJ 気分が味わえる。自分が作曲できるんじゃないかと錯覚できます。
</body>
<comments>
<comment>
<username>cann</username>
<body>平均0.241でした。</body>
<timestamp>1075026291</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-29" title="">
<body>
*&lt;a href=&quot;http://pc.watch.impress.co.jp/docs/2004/0128/pana.htm&quot;&gt;松下、次世代乾電「オキシライド乾電池」&lt;/a&gt; (PC Watch)
乾電池も進化していくのね。

*[net]&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/0401/27/epn28.html&quot;&gt;エンタープライズ：巧みなソーシャルエンジニアリングが引き起こしたMyDoomのまん延&lt;/a&gt; (ITmedia)
nitoyon.com のほうには 20通ぐらい来ております。どうやら xxxx@ の部分を適当に想像して送っているようで、いままで使ったことの無いようなアドレスにも届いています。

不思議とWebでアドレスを晒している大学のメールアドレスには来ていない。MyDoomさんはWebキャッシュからは抽出しないのかな。

MyDoom はセキュリティーホールを使わずソーシャルエンジニアリングを利用するのが特徴。エラーメールが元のメールを添付して帰ってくる仕組みを悪用している。今まで誰も気づかなかった手法ですな。「あれ、こんなメール出したっけな？」と思って確認してしまう気持ちもよく分かります。
</body>
</day>
<day date="2004-01-30" title="">
<body>
*p1*[apache]mod_rewrite
mod_rewrite を使って http://www.sample.com/hoge を、内部的には http://www.samle.com/index.cgi?hoge として扱うための方法をまとめてみた。

ぱっと思いつくのが次の方法。
&gt;|
RewriteEngine  On
RewriteRule    ^(.*)$ index.cgi?$1
|&lt;

しかし、これだと
&gt;|
　http://www.samle.com/hoge
→http://www.samle.com/index.cgi?hoge
→http://www.samle.com/index.cgi?index.cgi?hoge
→http://www.samle.com/index.cgi?index.cgi?index.cgi?hoge
|&lt;
というように無限に置き換えていってしまう。

そこで、RewriteCond を使って次のようにしてやる必要がある。こうすると、index.cgi から始まるようなURLは置き換えないようになる。これでひとまずはOK。
&gt;|
RewriteEngine  On
RewriteCond    $1 !^index.cgi
RewriteRule    ^(.*)$ index.cgi?$1
|&lt;

このままだと画像フォルダにおいている http://www.sample.com/img/hoge.gif みたいなファイルも http://www.sample.com/index.cgi?img/hoge.gif から取得しちゃう。さすがにこれは嫌なので img フォルダは置き換えないように設定してみる。index.cgi から始まらず、かつ img から始まらないようなURLだけ、index.cgi?$1 に置き換えることができる。
&gt;|
RewriteEngine  On
RewriteCond    $1 !^index.cgi
RewriteCond    $1 !^img
RewriteRule    ^(.*)$ index.cgi?$1
|&lt;

*p2*&lt;a href=&quot;http://www.mainichi.co.jp/news/flash/shakai/20040130k0000m040141001c.html&quot;&gt;公的個人認証制度：ウィンドウズのみ使用可能 &lt;/a&gt; (mainichi.co.jp)
&gt;&gt;
２９日に始まった国の公的個人認証制度がマイクロソフト社のウィンドウズパソコンでしか使えず、アップル社のマッキントッシュ（マック）など、他の基本ソフト（ＯＳ）では利用できないことが分かった。

(中略)

同制度はインターネットを利用した行政機関への申請・届け出の際に、署名・押印に代わって本人を確認するもので、電子政府の基盤といわれる。利用したい人は、自分のパソコンに、区市町村で配布されるＣＤ―ＲＯＭなどを使って、ソフトをインストールしなければならない。しかし、ウィンドウズ対応のものしか作られていない。
&lt;&lt;

Webベースにしたら万事解決するけど、さすがに、それじゃぁいやなのかな。独自プロトコルで通信するんだろうなぁ。

*p3*&lt;a href=&quot;http://www.cnn.co.jp/fringe/CNN200401290011.html&quot;&gt;クリントン氏、在任中に送ったメールはわずか２通&lt;/a&gt;
&gt;&gt;
クリントン前大統領は、パソコン・オンチ？　在任中に送った電子メールはたった２通で、しかもその内の１通はテストメールだったという。
&lt;&lt;
業務をいちいちメールで行っていたら、きっちりとした文章をかくので疲れそう。大統領は口で次々と指示を出していかなくちゃ処理がおっつかないのではないかな。それをくみ取って公式の文章にするのが下の人たちのお仕事ですよね。
</body>
<comments>
<comment>
<username>まーくん</username>
<body>行政が提供するサービスで使えるってやつだっけ。用途としては行政側がアプリケーションを配って、というような感じを想定しているようにおもえたけど、一般にも開放してくれるとうれしいんかなぁ。CA証明書がIEとかに搭載されれば便利なのかもしれないけど。</body>
<timestamp>1075951927</timestamp>
</comment>
</comments>
</day>
<day date="2004-01-31" title="">
<body>
*[flash]&lt;a href=&quot;http://jp.shockwave.com/games/puzzles/zookeeper/zookeeper.html&quot;&gt;ZOO KEEPER&lt;/a&gt;
今更だけど、ZOO KEEPER を紹介してみる。すべての動物を規定数以上消していくとステージクリア。ドット絵なのがかわいいです。

ちなみにわたくしは１万点行くか行かないかぐらいでダウンします。人が出てきてからがかなり難しい。

→15,000点行きました。でもこれが限界だ。
</body>
</day>
<day date="2004-02-02" title="">
<body>
*p1*[web]東大建築学科のWebはPukiWiki
junichiumくんから&lt;a href=&quot;http://www.arch.t.u-tokyo.ac.jp/index-j.html&quot;&gt;東大建築学科のWeb&lt;/a&gt;がPukiWikiを利用しているという情報をもらう。

実際に見てみると、ページ右下のアイコンを見ていると確かにそんな雰囲気。リンク先のURLを見ても「?cmd=search」とか「?RecentChanges」などの文字が出現しており、こりゃー確かに紛れもなくPukiWikiだ。

バージョン1.4からページごとに編集可能な人を設定できる機能がついたので、こういった用途に使われることも増えてくるかもしれないですね。実際、Wikiの編集はHTMLを書くよりはるかに楽なので、PukiWiki を利用したWebサイト構築は近い未来に一般的になるのではないかと想像しています。

そうなってくると、Webサイトの外注ではなくPukiWikiのスキンを外注するだけでよくなってコスト削減になるし、ページ全体のデザインは深く考えなくても統一されるし、HTMLもきれいだし・・・言うことなしですな。企業のように画像やFLASHを多用する必要があるサイトにおいてはWikiは利用しにくいかもしれないけど、いろいろなケースでWikiを利用できるケースが出現してくると思います。

蛇足ですが、自分のサイト http://www.nitoyon.com/vc/ は PukiWiki の 1.3 系のソースに手を入れて、HTML出力をするようにしちゃってます。1.4 系に移行して同じことを実現するパッチを公開したいなぁ、と地味に考えていたりもする（いつになるのやら

*p2*[java]&lt;a href=&quot;http://www.geocities.co.jp/SiliconValley-PaloAlto/4714/&quot;&gt;ジサクジエンの旅&lt;/a&gt;
id:kchan から紹介してもらう。

徹夜明けの身にとってはこのような理不尽なゲームは非常に楽しめた。昔のパソコンのプログラム投稿雑誌系のゲームって、こういうコンティニューがなかったり、当たり判定がたまに変だったり、へなちょこなノリだったりなのが多かった気がする。そういう懐かしい雰囲気を醸し出しているゲームで、思わず熱くなってしまう。

でもやっぱり難しすぎ。

→Jet を使うところまで何とか言ったけど、でもやっぱり無理
</body>
</day>
<day date="2004-02-03" title="">
<body>
*[net][game]&lt;a href=&quot;http://enterprise.watch.impress.co.jp/cda/casestudy/2004/02/03/1185.html&quot;&gt;株式会社コーエー 『信長の野望 Online』&lt;/a&gt;
&gt;&gt;
信長の野望 Onlineの中で、ユーザー（プレイヤー）は自分の分身となる侍や忍者といったキャラクターを操作し、仮想の戦国時代に新たな歴史をつづる一人となる。 
&lt;&lt;
そうなのか。何人かのグループで信長の野望を対戦するのかと思いきや、全員が同時代を生きるのね。

こうなってくると、どこの企業が仮想世界を制するかが楽しみになってきますね。信長の野望 Onlineの場合は、地図が現実の日本と似ているので、将来的には移動端末＋GPSと絡めていくと楽しい未来が待っているかもしれませんね。
</body>
</day>
<day date="2004-02-04" title="">
<body>
*[net]&lt;a href=&quot;http://www.yomiuri.co.jp/main/news/20040203i415.htm&quot;&gt;家庭のＰＣ３千台つなぎ研究に活用…ＮＴＴ西が実験&lt;/a&gt; (YOMIURI ON-LINE)
グリッドコンピューティング実験をNTTが主導で行うそうな。

3,750円分の商品券にあこがれて応募してみようかな。自宅サーバーは Linux なので、実験の OS が Windows 限定だったら参加は無理だなぁ。

*[net]&lt;a href=&quot;http://itpro.nikkeibp.co.jp/free/NCC/NEWS/20040203/139282/&quot;&gt;「このままでは日本のインターネットは崩壊する」，IIJの鈴木社長が総務省研究会で警鐘&lt;/a&gt; (IT Pro)
某氏からの情報によると、2001年頃には IIJ の会長が「&lt;a href=&quot;http://ascii24.com/news/i/keyp/article/2001/05/02/625730-002.html?&quot;&gt;バックボーンは余っている&lt;/a&gt;」と発言しており、それが３年経ったら180°転換するんだから、恐ろしい業界ですな。

2001年春って言ったら、ちょうどADSLが普及し始めの頃。そりゃー、余りもしてただろうなぁ。
</body>
</day>
<day date="2004-02-05" title="">
<body>
*p1*[hatena]はてなダイアリーキーワード自動リンクAPIが公開された
&lt;a href=&quot;http://d.hatena.ne.jp/hatenadiary/20040205#1075960162&quot;&gt;はてなダイアリーキーワード自動リンクAPI&lt;/a&gt;

ほほー。これはなかなかおもしろい試み。どんなページからでもはてなのキーワードを使っていいよ、という話なんだよね。

本家の日記に早速実装してみようと思ったけど、a タグの中身やURLにヒットしたら嫌なので断念。軽くHTML解析しなきゃならなくなるよねぇ。

ただ、利用方法はいろいろありそうで、例えばWikiのプラグインとして作成してみるのもおもしろいかもしれない（１日に１回だけダウンロードする仕組み付きで）。

*p2*&lt;a href=&quot;http://campaign.biglobe.ne.jp/toei/zebraman/&quot;&gt;ゼブラーマンは実在のテレビ番組&lt;/a&gt;
id:chepooka:20040201#1075621616 さんより。

スピリッツで連載中で映画にもなるゼブラーマンは、主人公がテレビの特撮ヒーロー「ゼブラーマン」にあこがれるという話なんだけども、そのゼブラーマンが実在の特撮ヒーロー番組だったらしい。くどかんさんらしい凝った設定ですな。
</body>
</day>
<day date="2004-02-07" title="">
<body>
*p1*[net]&lt;a href=&quot;https://www.netsecurity.ne.jp/article/1/12226.html&quot;&gt;サーバ管理者、経営者に朗報！　安価で安全な新方法論　サイバーノーガード戦法！&lt;/a&gt;
この記事、ぶっとんでて好きだなぁ。あくまで皮肉ですよね。

*p2*[ms][Win32]Windows XP Homeの制限
XP Home はエクスプローラからファイルやフォルダのアクセス権を設定することができないのだけれど、どうやら「EditSecurity」関数を使うことはできるみたい。

「EditSecurity」関数に、ISecurityInformationを与えてやれば、どんなオブジェクトのアクセス権であっても Windows 標準のダイアログでアクセス権を設定できるみたい。ISecurityInformation::GetSecurity でアクセス権を Windows に教えてあげて、ISecurityInformation::SetSecurity でアクセス権を設定してやればよいらしいです。MS のサイトで見つけたサンプルは &lt;a href=&quot;http://www.microsoft.com/msj/0599/security/security0599.aspx&quot;&gt;Security Briefs, MSJ May 1999&lt;/a&gt; ぐらいかな。
</body>
</day>
<day date="2004-02-09" title="">
<body>
*[pc]&lt;a href=&quot;http://akiba.ascii24.com/akiba/news/2004/02/07/648138-000.html&quot;&gt;バレンタインデーに“愛のメモリー”はいかが？&lt;/a&gt;
これ欲しい。

USB Key なメモリーで、2人の写真は絶対に消せないようにしておくと、おもしろいかもね。そういうサービスって、プレゼント用に使えるんじゃないかなぁ。他にも、デジカメ用メモリ（SDやCFなど）に固定領域を作っておいて、結婚式の写真をその場でつっこんで引き出物に使うとか……。嫌がらせだなぁ……。

*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/02/09/2034.html&quot;&gt;今年の米大統領選、ネット投票は断念へ&lt;/a&gt;
ネット投票は大変だろうなぁ。国外の人向けなんだから、WWW を使うんでしょうなぁ。

ネット投票と電子投票は違って、電子投票は投票所に行ってタッチパネルで投票を行うことをさすことが多いみたい。ネット投票では、本人確認と１回だけの投票というものをしっかりと確認しなくちゃいけないから大変なのですね。電子投票なら、今までと同様に投票所に人がいれば十分なのにね。
</body>
</day>
<day date="2004-02-10" title="">
<body>
*&lt;a href=&quot;http://ascii24.com/news/i/tech/article/2004/01/08/647647-000.html&quot;&gt;東芝、0.85インチHDDを開発――ディスク径は約22ミリ&lt;/a&gt;
かわいい。
</body>
</day>
<day date="2004-02-11" title="">
<body>
*p1*読みが長い漢字
http://f7.aaacafe.ne.jp/~kanji/long.html

某氏に紹介してもらう。

「うしのあゆみがおそい」「あるきかたがただしくない」が一語でかけるとは。もう意味不明。これって、本当になんらかの文献で使われているんだろうか。
</body>
<comments>
<comment>
<username>cann</username>
<body>おもしょいです。。。</body>
<timestamp>1077026470</timestamp>
</comment>
</comments>
</day>
<day date="2004-02-12" title="">
<body>
*&lt;a href=&quot;http://pcweb.mycom.co.jp/news/2004/02/10/013.html&quot;&gt;Suicaで買い物も可能に、JR東日本が3月22日から64駅196店舗で開始へ&lt;/a&gt; (MYCOM PC WEB)
Suicaが電子マネーの方向に動き出しましたね。今はSuicaを使えるのはJR構内だけだけど、今後、一般のお店にも進出する予定なんだろうか。もしそうなったら、非接触なだけに読み取り機がJR以外の人の手に渡るのはやや怖いです。

悪意を持った倒産寸前のお店の店長が、読み取り機をもって満員電車に乗って引き出す……なんていうことも可能になるのでは。どのIDの読み取り機から引き出したかを記録しておけばなんとかなるかな。

SuicaがWebマネー化したらもうちょっとおもしろくなりますね。先にカードが普及すると、いろんな事業展開が見えてきて楽しいだろうな。

*[keitai]&lt;a href=&quot;http://japan.cnet.com/news/com/story/0,2000047668,20064233,00.htm&quot;&gt;Bluetoothの欠陥で、ノキアなどの携帯電話機にセキュリティの不安&lt;/a&gt; (CNET Japan)
こわすぎこわすぎ。Blootoothってなんでもできちゃうのね。

こういう実例を見ると、i-ModeでJavaアプリから住所録を見れなかったりWebアクセスできないのは仕様上正しく思えてしまいます。
</body>
</day>
<day date="2004-02-13" title="">
<body>
*&lt;a href=&quot;http://pcweb.mycom.co.jp/news/2004/02/12/016.html&quot;&gt;NTT、切手サイズで容量1GBの光メモリの試作に成功 - 2005年の製品化へ&lt;/a&gt;(MYCOM PC WEB)
いろいろな技術が出てきますね...　CD-RやDVDに置き換わることができるかどうかなんですが、この記事を見ただけでは何とも。サイズの上では何とも利点に思えるけど、次世代DVDなんて話も出ているし、さぁどうなることやら。

&gt;&gt;
すでに5大レーベルを始めとする日米のレコード会社のメンバーに説明、意見交換を行ったところ、「複製が難しい点や安価なコストが評価され、前向きな反応が得られた」(同社広報)という。
&lt;&lt;
とのことだけど、一般にリーダーが出回るはずだし、データ自体は取り出すことはできるのでは？

*[ms]&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/0402/13/epc11.html&quot;&gt;Windows 2000のソースコード、漏えいの可能性&lt;/a&gt; (ITmedia エンタープライズ)
何より驚いたのが
&gt;&gt;
(Windowsの)ソースコード全体の容量は約40Gバイトと考えられており、従って12日に出回ったファイルが本物だったとしても、全体のうちのごく一部にすぎない
&lt;&lt;
というところ。そんなにあるんだ....
</body>
</day>
<day date="2004-02-17" title="">
<body>
*&lt;a href=&quot;http://www.asahi.com/national/update/0216/010.html&quot;&gt;愛知万博デザイン、ロックウェル作品と「そっくり」の声&lt;/a&gt;
似てますね。人が増えるとかじゃないもう一工夫があったら、よかったのに。ほかの人には考えつかないような工夫さえあればよいんだろうけど、これじゃあ確かに真似しただけに見えてしまう。

*&lt;a href=&quot;http://www.asahi.com/business/update/0216/038.html&quot;&gt;海外生産の邦楽ＣＤ、国内への還流禁止　著作権法改正へ&lt;/a&gt;
当然っちゃー当然なんだろう。輸入業者は、発泡酒の酒税引き上げ時のビール会社ぐらい怒ってるのかな。
</body>
</day>
<day date="2004-02-18" title="">
<body>
*[net][ms]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/02/17/2118.html&quot;&gt;漏えいしたWindowsのソースコードから早くもIE 5の脆弱性が発見される&lt;/a&gt; (INTERNET Watch)
&gt;&gt;
この脆弱性は、Windows 2000上の「win2k/private/inet/mshtml/src/site/download/imgbmp.cxx」に存在しており、同社Webサイトではこの脆弱性のデモを公開している。
&lt;&lt;
根拠となるソースコードを示して、Windows の脆弱生を報告するなんて、なんだかすごくもの悲しい。そのうち、パッチが提供されたりして。

IE6では影響がないらしいです。つまり、IE6の開発中に誰かがバグを修正したけど、公にはなっていなかったから誰にも報告しなかったってことだろか。臭いものには蓋じゃないけど、メジャーバージョンアップするときに下のバージョンのバグフィックスが置き去りにされることはよくあることか。

</body>
</day>
<day date="2004-02-19" title="">
<body>
*&lt;a href=&quot;http://www.asahi.com/national/update/0218/026.html&quot;&gt;略称「アル中」はイヤ！　生徒の声受け校名変更&lt;/a&gt; (asahi.com)
&gt;&gt;
小池強村長ら７人の選考委員が選んだのは、「北アルプス中学校」。北アルプスは村のシンボル。山脈名やカタカナ名の中学校も珍しいと注目を浴びた。 

ところが、在校生からは反対の声が続出した。「略すと『アル中』。イメージが悪い」。結局、審議をやり直し「北稜（ほくりょう）中学校」に落ち着いた。
&lt;&lt;
地域のコミュニティーにおいては学校の略称がどうなるかは大事なんですよね。小中高校とこういった呼び方を多用していたころが懐かしい。

*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/02/18/2148.html&quot;&gt;ブログの認知度は6.3％、開設経験があるのは14％～NS総研調査結果&lt;/a&gt; (INTERNET Watch)
ま、そんなもんでしょう。PC雑誌を見ていても、Blogって言う言葉はなかなか出てこないように思えるし。やはり毎号毎号出てこないとインパクトはないでしょうね。NHK教育のPC講座で取り上げられて初めて世間に認知されたことになるんでしょう。

個人的にはHP作ろうとしている人を取り込んで、Blogの方向にもって行けたら楽しいと思います。BlogとWeb編集をどのようにリンクさせて取り込んでいくかが、これからのBlogを認知させていくキーだと思います。あとは、このはてなみたく、Blog運営サイトが群雄割拠してこないとね。

</body>
<comments>
<comment>
<username>cann</username>
<body>あの。唐突ですみませんが「にこよん」という日本語を発見しました。日雇い労働者の事ですう</body>
<timestamp>1077285940</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ほほー。しらなかった。衝撃的だーー！</body>
<timestamp>1077294360</timestamp>
</comment>
<comment>
<username>noise</username>
<body>差別語弾劾(ぉ)</body>
<timestamp>1077295953</timestamp>
</comment>
</comments>
</day>
<day date="2004-02-21" title="">
<body>
*p1*[pg]WSHでキーボードメッセージ送信
Win32 API でいう keybd_event にあたることを、VBScriptやJavaScript(JScript)でやるには、WScript.Shell の SendKeys を使うとよいらしい。

詳しくはこちら＜http://member.nifty.ne.jp/aya/wsh/wsh205.htm

*p2*[keitai]&lt;a href=&quot;http://it.nikkei.co.jp/it/news/cellphone.cfm&quot;&gt;ＮＴＴドコモ、データ通信に定額料金制――第３世代携帯電話向け&lt;/a&gt; (YOMIURI Online)
各所で話題になってますが一応。

これで、ケータイを利用したいろんなサービスが活性化してくはず。
</body>
</day>
<day date="2004-02-22" title="">
<body>
*p1*[html]microsoft.comのポップアップメニュー
microsoft.com のポップアップメニューはどのようにして実現されているかを調べてみた。

どうやら、スタイルシートで behavior を指定してるらしい（http://www.microsoft.com/library/flyoutmenu/default.cssより）。
&gt;|css|
.flyoutMenu {
    (snip)
    behavior: url(/library/flyoutmenu/default.htc);
}
||&lt;

behavior ってIE限定の機能じゃん。開発効率が上がるけど、クロスブラウザを考えると嫌ですな。この時点で、さすがMSのサイト！という雰囲気がぷんぷん。

気になったのが、ポップアップメニューに影がついているのはどうやっているか(上図参照)。若干後ろの画像が透けてます。デフォルトのfilterを使っただけじゃ、ああはならないはずなのに。調べてみて驚愕。影を表示する関数を抜粋するとこんな感じ（http://www.microsoft.com/library/flyoutmenu/default.htcより抜粋）。

&gt;|javascript|
function makeRectangularDropShadow(el, color, size)
{
    var i;
    for (i=size; i&gt;0; i--)
    {
        var rect = document.createElement('div');
        var rs = rect.style
        rs.position = 'absolute';
        rs.left = (el.style.posLeft + i) + 'px';
        rs.top = (el.style.posTop + i) + 'px';
        rs.width = el.offsetWidth + 'px';
        rs.height = el.offsetHeight + 'px';
        rs.zIndex = el.style.zIndex - i;
        rs.backgroundColor = color;
        var opacity = 1 - i / (i + 1);
        rs.filter = 'alpha(opacity=' + (100 * opacity) + ')';
        el.insertAdjacentElement('afterEnd', rect);
        global.fo_shadows[global.fo_shadows.length] = rect;
    }
}
||&lt;
el は親エレメント、colorが影の色、sizeが影のサイズ（4で固定みたい）として呼び出されます。なんと、div エレメントを影のサイズ分だけ作成し、それぞれの場所を1pxずつ右下に配置し、どんどん透明にしていっている模様。ひえー、無茶苦茶するなぁ！

</body>
</day>
<day date="2004-02-23" title="">
<body>
*&lt;a href=&quot;http://www.yomiuri.co.jp/net/news/20040220ij11.htm&quot;&gt;新型ＡＴＭ、手のひらかざし確認&lt;/a&gt; (YOMIURI ON-LINE)
ATMもついにここまで。うれしいニュース。大手が動くと、他も動く...かな。

*[ms][net]&lt;a href=&quot;http://itpro.nikkeibp.co.jp/free/ITPro/NEWS/20040220/140200/&quot;&gt;IEにパッチ未公開のセキュリティ・ホール，攻撃コードも出現している&lt;/a&gt;
もはやいっぱいありすぎて把握し切れません。
</body>
</day>
<day date="2004-02-27" title="">
<body>
*[ms][net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/02/27/2246.html&quot;&gt;IE 6 SP1に突然シャットダウンするなど複数の不具合&lt;/a&gt; (INTERNET Watch)
&gt;&gt;
マイクロソフトではこの問題を認識しており、調査を進めているという。同社が示している回避策は、「Windows XPスタイル」を「Windowsクラシックスタイル」に変更すること。
&lt;&lt;
XPの存在意義の20%ぐらい減るのでは。といっても、ユーザーにとっての意義じゃなくって、MS的に。MS さんは XP を発売するときに「画期的なユーザーインターフェースが うんぬん」と一番のウリにしてたんじゃなかったっけなぁ。

*和文フォント図鑑
http://ohkadesign.cool.ne.jp/wabunfont/freefont/freefont.html
</body>
</day>
<day date="2004-02-29" title="">
<body>
*秀丸エディタ最新ベータ版
秀丸エディタの 4.10β20 というベータ版を使ってみる。

な、なんと
-タブ機能
-関数一覧をお気に入りみたいに常時表示しておく機能
がついていた。これでだいぶ便利になったよ。
</body>
</day>
<day date="2004-03-03" title="">
<body>
*p1*[keitai]&lt;a href=&quot;http://ad.impress.co.jp/tie-up/firstpass0403/&quot;&gt;NTT DoCoMo の FirstPass&lt;/a&gt;
さすがDocomoさん、いろいろ考えていらっしゃる。社会人・企業向け戦略ばっちしですな。

もちろんこのカードを他のFOMA端末に突っ込んでも・・・端末固有IDが異なるからNGだよね。じゃあ、クローンケータイは・・・！

*p2*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/static/column/jiken/2004/03/03/&quot;&gt;第8回　裏名簿業者が証言！　Yahoo! BB事件にみる「流出名簿」の恐るべき実態&lt;/a&gt; (INTERNET Watch インターネット事件簿 2004/3/3)
&gt;&gt;
中でも最も高額で売買されるのは、「迷惑メールに反応を返した人の名簿」なのだという。たとえばアダルトビデオの販売業者が、迷惑メールを大量に送信する。最近では数百万単位で送信されることも珍しくない。100万通のメールを送り、それに対して返事をして、実際にアダルトビデオの購入にまで踏み切るのは、せいぜい10人程度。だがこの購買行動にまで踏み切った10人は、必ずほかのアダルト関係のダイレクトメールにも飛びつくと見なされるのである。
&lt;&lt;
１００万通送っても10人しか飛びつかないのか。そんなに効率悪かったとは。これって年末ジャンボで100万円以上が当たる確率よりすくないんじゃないのか。

*p3*[web]FLASHをプログラムから作成する方法
&lt;a href=&quot;http://www.openswf.org/links.html&quot;&gt;OpenSWF.orgのLinks&lt;/a&gt;にいろいろ載ってる。サーバーサイドでゴリゴリとFLASH生成したら、いろんなことができそうだなぁ。
</body>
<comments>
<comment>
<username>爬猫</username>
<body>某サーバに ming を入れたような入れなかったような...?</body>
<timestamp>1078495121</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ほぉ</body>
<timestamp>1078888388</timestamp>
</comment>
</comments>
</day>
<day date="2004-03-08" title="">
<body>
*&lt;a href=&quot;http://itpro.nikkeibp.co.jp/free/NC/NEWS/20040305/140989/&quot;&gt;2038年問題のチェック漏れで、KDDIが誤請求&lt;/a&gt; (IT Pro)
時間を２倍にするって、どういう状況だろう。だめプログラマの私には想像できません。
&gt;&gt;
問題が起きたシステムで利用しているソフトのなかに、時刻の2倍に足し合わせる処理があり、ちょうど1970年と2038年1月19日の2分の1を超えた2004年1月11日の朝から、2038年問題が顕在化。システムが正常に稼働しなくなった。
&lt;&lt;

*&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4255960291/249-7792320-4071549&quot;&gt;本: 文体練習&lt;/a&gt; (Amazon.co.jp)
おもしろいかも。誰か持ってたら貸してください。
</body>
<comments>
<comment>
<username>まーくん</username>
<body>日付で比較するルーチンがあってそれが2回実行されてしまったとか&gt;2倍</body>
<timestamp>1079107254</timestamp>
</comment>
</comments>
</day>
<day date="2004-03-09" title="">
<body>
*p1*[unix]ldd
WindowsでのDependencyWalkerみたいな機能のUnix版は ldd だそうで。
</body>
</day>
<day date="2004-03-12" title="">
<body>
*[pc]USBアーミーナイフ
&lt;a href=&quot;http://internet.watch.impress.co.jp/static/yajiuma/index.htm&quot;&gt;やじうまWatch&lt;/a&gt; を読むと、&lt;a href=&quot;http://www.swissbit.com/default57c2.html?spr=2&quot;&gt;スイス・アーミー・ナイフ USBメモリ内蔵タイプ&lt;/a&gt; が登場したらしい。これいいなぁ。

これからはUSBメモリをキーホルダーのようにして持ち歩くケースも増えてくるんだろうか。

*[ms][pg]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/03/12/2424.html&quot;&gt;プログラミング初心者向けの解説サイト「プログラミング☆簡単レシピ」&lt;/a&gt; (INTERNET Watch)
フリーで入手できる「ASP.NET Web Matrix Project 日本語版」なるものを使ったプログラミングを解説しているみたい。言語は VB を使うらしい。

プロジェクトを作るあたりで、初心者は違和感を感じるんだろうけど、まぁ、ここら辺が分からなくても最初は見よう見まねでなんとかなるかな。凝ったことがやりたくなったら、VB.NET を買いましょう・・・ってことなんでしょうかね。
</body>
</day>
<day date="2004-03-15" title="">
<body>
*[web][pg]&lt;a href=&quot;http://www2u.biglobe.ne.jp/~oz-07ams/prog/dom-notes/sort_rows.html&quot;&gt;HTMLのテーブルでJavaScriptを使ってソートする方法&lt;/a&gt;
素敵なノウハウです。Objectの使い方がまだ理解できてない。

*[web][pg]&lt;a href=&quot;http://www.tokumaru.org/JavaScript/index.htm&quot;&gt;オブジェクト指向プログラム言語としてのJavaScript&lt;/a&gt;
JavaScriptをオブジェクト指向として捉えるページ。これをよんでいると、JavaScriptってよくできているなぁ、と思ってしまう。
</body>
</day>
<day date="2004-03-18" title="">
<body>
*p1*&lt;a href=&quot;http://www.innotech.co.jp/gyration/index.html&quot;&gt;空中マウス&lt;/a&gt;
触ってみたい

*p2*[perl]Perl でひらがなをカタカナに変換する
EUC限定で全角のみに対応。
&gt;|perl|
sub hiragana2katakana{
    my $ascii = '[\x00-\x7F]';
    my $twoBytes = '[\x8E\xA1-\xFE][\xA1-\xFE]';
    my $threeBytes = '\x8F[\xA1-\xFE][\xA1-\xFE]';
    my @chars = $_[0] =~ /$ascii|$twoBytes|$threeBytes/og;
    
    my $ret;
    foreach(@chars){
        if(/^\xA4([\xA1-\xF3])$/){
            $ret .= &quot;\xA5&quot;.$1;
        }
        else{
             $ret .= $_;
        }
    }
    return $ret;
}
||&lt;

出力例
&gt;|perl|
print &amp;hiragana2katakana(&quot;出力例はこんな感じ&quot;);
# 出力例ハコンナ感ジ
||&lt;

参考にしたページは...
-&lt;a href=&quot;http://www.din.or.jp/~ohzaki/perl.htm#JP_Split&quot;&gt;文字単位に分割する&lt;/a&gt;＠&lt;a href=&quot;http://www.din.or.jp/~ohzaki/perl.htm&quot;&gt;Perlメモ&lt;/a&gt;
-&lt;a href=&quot;http://ash.jp/code/codetbl2.htm&quot;&gt;JIS X 0208 文字コード表&lt;/a&gt;
-&lt;a href=&quot;http://x68000.startshop.co.jp/~68user/webcgi/char-code-2.html&quot;&gt;文字コードとエンコーディング (2)&lt;/a&gt;＠ネットワークプログラミングの基礎知識

*p3*[ms]HDDを無意味なデータで埋める方法
セキュリティーホールMemoより。&lt;a href=&quot;http://www.atmarkit.co.jp/fwin2k/win2ktips/273diskwipe/diskwipe.html&quot;&gt;cipher.exe&lt;/a&gt; というコマンドを使えばHDDを無駄なデータで生めることができるらしい。

これで、削除してしまったファイルを復元するツールを使っても、復元されないはず。自分のHDDを中古で売り払うときには、cipher.exeしましょう。

</body>
</day>
<day date="2004-03-20" title="">
<body>
*[net]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0403/19/news021.html&quot;&gt;Bagle亜種、アルファベット制覇の勢い&lt;/a&gt; (ITMedia)
&gt;&gt;
新たにBeagleの亜種「Bagle.Q」「Bagle.R」「Bagle.S」「Bagle.T」が発見された。それも、わずか2日間で。
&lt;&lt;

ウイルス制作者もがんばるなぁ。Z まで行ったらどうするんだろう。α？
</body>
</day>
<day date="2004-03-22" title="">
<body>
*[net]&lt;a href=&quot;http://park5.wakwak.com/~tanaka02b/column/faq.htm&quot;&gt;「無断リンク禁止/直リンク禁止」命令に関する想定問答集&lt;/a&gt;
リンク禁止と言っているサイトは Web に公開するなよ、と思うけど、ディープリンク禁止は分からなくもない。

geocities なんかのフリーのWebスペースでも、カウンターを全ページにつけれたり、アクセス解析を利用できたら、個人サイトはもう少しリンクに寛容になったかもしれない。はてなを始めとする、多くのBlogサービスには、リファラーの解析がついているので、ディープリンクもOKという風潮になるかもね。

「直リンクされたくなかったらCGIを使え」と書いてあるけど、さすがにそれはスマートじゃないなぁ。技術的問題でできない人も多いだろうし。お互いにトラックバックするぐらいの感覚でリンク許可をとって、許可された人だけリンクをはれるようなシステムって作れないかなぁ。
</body>
</day>
<day date="2004-03-24" title="">
<body>
*&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0403/23/news001.html&quot;&gt;出先でノートPCが電池切れ、“窃盗”せずに使えるコンセントはあるか？&lt;/a&gt; (ITmedia)
許可を取ることが大事らしい。

*&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0403/23/news016.html&quot;&gt;Google、交流ネットワークを検索に統合へ&lt;/a&gt; (ITmedia)
ついに、Google が Orkut と合流しますか！
</body>
</day>
<day date="2004-03-25" title="">
<body>
*MSNメッセンジャー
&lt;h4&gt;ログを保存する方法&lt;/h4&gt;
すでにあるものを利用する篇
:&lt;a href=&quot;http://www.msgplus.net/&quot;&gt;メッセンジャープラス&lt;/a&gt;を利用する:&lt;a href=&quot;http://higaitaisaku.web.infoseek.co.jp/msnplus.html&quot;&gt;Messenger Plus!にはご注意&lt;/a&gt;によるとスポンサーを受け入れない設定をするとスパイウエアは導入されない。うっかり、acceptにしてしまいがちですな。&lt;br&gt;&lt;s&gt;&lt;a href=&quot;http://www.google.com/url?sa=U&amp;start=1&amp;q=http://www.komomo.net/dh/archives/000860.html&amp;e=747&quot;&gt;スパイウェアがもれなくついてくるらしい&lt;/a&gt;けど、便利そうではある&lt;/s&gt;
:Regnessem を利用する:よく落ちるんだよね...
:プロクシをかます:IRCのplumやpircみたいに、どこぞの常時稼動サーバーにプロクシとして常駐して、必要そうなものだけファイルに記録していくと便利そう。→ &lt;a href=&quot;http://sourceforge.net/projects/msnproxy/&quot;&gt;MSN Proxy&lt;/a&gt; なるソフトを発見。
:&lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winmessenger/winmessenger/messenger_entry.asp?frame=true&quot;&gt;Messenger Service API&lt;/a&gt;を利用する:通信ログを記録することはできそうだ。APIを使うサンプル記事を&lt;a href=&quot;http://www.codeproject.com/com/msn_messenger.asp&quot;&gt;The Code Project - Automating the MSN Messenger&lt;/a&gt;に発見。誰かがこれを元に開発するとなんとかなる？

&lt;h4&gt;MSNメッセンジャーにオフラインでログオンする方法&lt;/h4&gt;
:&lt;a href=&quot;http://www.joelbejarano.com/jnrz7/&quot;&gt;JNRZLOADER&lt;/a&gt;:対応するバージョンで
:&lt;a href=&quot;http://sourceforge.net/projects/msnproxy/&quot;&gt;MSN Proxy&lt;/a&gt;:試してないけど可能らしい。

&lt;h4&gt;おまけ&lt;/h4&gt;
関係ないけど、エクスプローラのシェルエクステンションを使って、メンバーリストがエクスプローラに表示されたら面白そう。

さらに&lt;a href=&quot;http://disense.org/fhw/hiki.cgi?msnmessenger-handwriting&quot;&gt;手書き&lt;/a&gt;なるものを発見。楽しそう。


</body>
</day>
<day date="2004-03-27" title="">
<body>
*p1*[perl]Perlで画像のサイズを取得する方法
PerlでJPEGやGIF、PNGのサイズを取得する方法で悩む。

&lt;b&gt;GDとGDモジュール&lt;/b&gt;を使う方法が一番シンプルだけどGDをインストールしなきゃならない。なかなかめんどくさい。

かといって自作でバイナリを解析するつもりは毛頭ない。

PHPがインストールされていて、外部プロセスを起動する負荷を厭わなければ、&lt;strong&gt;PHP のgetimagesize関数を使う&lt;/strong&gt;のが一番気楽だろう。この関数はGDがなくても動くのがうれしいところ。

で、PHPのスクリプトはこんな感じ。仮に getsize.php という名前で保存するとしよう。
&gt;|php|
&lt;?
if(is_file($argv[1]))
{
    list($w, $h) = getimagesize($argv[1]);
    print &quot;$w,$h&quot;;
}
?&gt;
||&lt;

Perl では、
&gt;|perl|
my ($w, $h) = split(/,/, `php -f getsize.php &lt;画像のパス&gt;`);
||&lt;
とすりゃーよいだけ。

蛇足ながら...
-php や getsize.php はフルパスで書きましょう。
-$w と $h が defined されているかチェックしましょう。
-画像へのパスを利用者に入力させるのであれば、; や &amp; など怪しい文字列が含まれていないかチェックしましょう

</body>
</day>
<day date="2004-03-29" title="">
<body>
*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2004/03/26/primopdf.html&quot;&gt;フォント埋め込み機能を備えたフリーのPDF文書作成ソフト「PrimoPDF」が公開&lt;/a&gt; (窓の杜)
便利そう。
</body>
</day>
<day date="2004-03-30" title="">
<body>
*p1*[soft]Media Player Classic
&lt;a href=&quot;http://edarapnug.hp.infoseek.co.jp/mpc_j/&quot;&gt;Media Player Classic&lt;/a&gt;

WMVやMPGだけでなく、DVDやRead Player形式も再生できるようで。ひじょーにいいですな。これで倍速再生があれば文句なしなんだけど。

ちなみに、任意の速度で再生できるのは&lt;a href=&quot;http://www.seera.jp/NaveTheBK/download_j.html&quot;&gt;nave Player&lt;/a&gt;。速度を変えても音の高さは変わりません。
</body>
</day>
<day date="2004-04-01" title="">
<body>
*p1*[web]エイプリルフール
今年もエイプリルフールがやって参りまして、いくつかのサイトが四月馬鹿をやってくれてます。

もはや王道なのが、&lt;a href=&quot;http://www.watch.impress.co.jp/headline/uocchi04/&quot;&gt;イソプレスうおっち&lt;/a&gt;。今年も素敵なネタで楽しませてもらいました。

去年、手書きで衝撃を与えた&lt;a href=&quot;http://www.mag2.com/&quot;&gt;まぐまぐ&lt;/a&gt;だけど、今年は水揚げ画像がトップに表示されているだけ。パワーダウンですな。変わって、おもしろいのが同業他社の&lt;a href=&quot;http://www.melma.com/&quot;&gt;melma!&lt;/a&gt;。去年、まぐまぐに負けたのが悔しかったのか、かなりの気合いの入りようです。レトロ調、かっこいい！
</body>
</day>
<day date="2004-04-02" title="">
<body>
*[ms]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/02/news015.html&quot;&gt;Longhornのβ版、2005年にずれ込み&lt;/a&gt; (ITmediaニュース)
関係ないけど、Avalon, WinFS, Indigo の実装例のサンプル動画が&lt;a href=&quot;http://msdn.microsoft.com/Longhorn/productinfo/conceptvid/default.aspx&quot;&gt;Longhorn Concept Videos&lt;/a&gt;にあります。おもしろいけど、英語のヒアリングがぜんぜんできなくてがっくし。

*[web]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/02/news037.html&quot;&gt;「Gmailはエイプリルフールの冗談ではない」とGoogle&lt;/a&gt; (ITmediaニュース)
1G はすごいよなぁ。
</body>
</day>
<day date="2004-04-04" title="">
<body>
*&lt;a href=&quot;http://abeshinzo.cocolog-nifty.com/&quot;&gt;安部幹事長のBlog&lt;/a&gt;
幹事長は美食をしているんでしょうか。お昼はどんなものなのかをのぞけるみたい。

夜は高級料亭で会食してたりするんだろうなぁ。

*トラックバック効果
安部幹事長のBlogにトラックバックしたおかげで、そっち経由のアクセスが７０件ほど。トラックバックは有名になる効果もあるわけですな。

関係ないけど、トラックバックをTバックと略すのは如何なものか。
</body>
<comments>
<comment>
<username>cann</username>
<body>コメントが短くてかわいらしかった　＞幹事長Blog</body>
<timestamp>1081419013</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>さすがに現在は休止中....</body>
<timestamp>1081526609</timestamp>
</comment>
</comments>
</day>
<day date="2004-04-07" title="">
<body>
*[web]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/04/06/2688.html&quot;&gt;「Movable Type 3.0」の新機能説明会&lt;/a&gt;
Typekeyなるもので利用者を識別するらしいけど、アカウント情報は中央のTypekeyサーバーが管理するようだ。

同一サイト内ならCookieで認証されたことを保存できるけど、複数サーバーにまたがるような場合は、どうやってセッション管理するんだろう。ページアクセスがあるたびに、MovableTypeがTypekeyサーバーに正規ユーザーかどうかを問い合わせに行くのかな。

トラックバックにしてもそうだけど、新機能の仕様を公開してくれるMovableTypeさんの姿勢は評価できるでしょう。アカウント管理の共通仕様としては、.NET Passport に比べて遙かに現実的ですよね。現時点では。
</body>
</day>
<day date="2004-04-12" title="">
<body>
*[ms]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/10/news008.html&quot;&gt;Longhorn、一部機能縮小により2006年出荷厳守へ&lt;/a&gt; (ITmedia)
一部を縮小しても、なお革新的らしい。

*[soft]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/09/news055.html&quot;&gt;IEを滅ぼすスーパーブラウザ&lt;/a&gt; (ITmediaニュース)
すごいソフトのようなノリで書かれているけど、単にIEコンポーネントを利用したタブブラウザなんだよね。

国内のタブブラウザが、英語のページをうまく作れば世界中に広がるかも？　外国の人は日本製のフリーウェアをあまり使いたがらないのかなぁ。

*[net]&lt;a href=&quot;http://www.hotwired.co.jp/news/news/business/story/20040412107.html&quot;&gt;値上げのプレッシャーにさらされるデジタル楽曲&lt;/a&gt; (HOT WIRED)
なかなか思うようにはいかないようで。
</body>
</day>
<day date="2004-04-13" title="">
<body>
*[net]&lt;a href=&quot;http://japan.cnet.com/news/media/story/0,2000047715,20065420,00.htm&quot;&gt;エキサイトがオンラインゲームのポータルサイトを開設&lt;/a&gt; (CNET Japan)
ネットゲームを情報配信に利用する試みのよう。そういうインターフェースの方がとっつきやすいのかもしれない。「Webブラウザって CUI だよねー」と言われる時代がくるのかも。
</body>
</day>
<day date="2004-04-14" title="">
<body>
*[net]&lt;a href=&quot;http://arena.nikkeibp.co.jp/news/20040413/108399/&quot;&gt;噂のGoogleの1GBメールサービス「Gmail」を最速レビュー！&lt;/a&gt; (デジタルARENA)
ショートカットキーが心憎いね。

*&lt;a href=&quot;http://www.itmedia.co.jp/lifestyle/articles/0404/14/news002.html&quot;&gt;画面内を泳動するインクが、紙をリアルに表現～読書端末「リブリエ」 (1/2)&lt;/a&gt; (ITmedia)
電子書籍の製品。ぜひ実物を見てみたい。

*&lt;a href=&quot;http://www.hotwired.co.jp/news/news/technology/story/20040414301.html&quot;&gt;脳－コンピューター直結インターフェース、臨床試験へ&lt;/a&gt;
記事読んでもよく理解できなかった。。。
</body>
</day>
<day date="2004-04-15" title="">
<body>
*[pc]&lt;a href=&quot;http://pcweb.mycom.co.jp/news/2004/04/14/014.html&quot;&gt;ノートPCを丸1日使える外付けバッテリー&lt;/a&gt; (MYCOM PC WEB)
2.8kg ということで、もはや持ち運びできない気がするのだが、屋外でのイベントや試験・実験などので利用されてるらしい。なるほどね。
&gt;&gt;
屋外でのイベントや試験・実験などの用途のほか、最近では、医師・看護師が病室を巡回する際にノートPCでカルテ情報を管理するために医療機関で採用された例もあるという。
&lt;&lt;

*[soft]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/14/news035.html&quot;&gt;Windows上でLinuxをネイティブに動かす「coLinux」&lt;/a&gt; (ITmediaニュース)
カーネルに１つのマシンで動いているように思いこましているのかな。Windows側には怪しいドライバが動いていて、ハードとの仲介をしているようだ。「カーネル移植版」と書いてあるけど、カーネルにも手を入れているのかな。
</body>
</day>
<day date="2004-04-18" title="">
<body>
*p1*[soft][pg]Microsoft Visual C++ Toolkit 2003
&lt;a href=&quot;http://www.kozuka.jp/tdiary/index.cgi?date=20040417#p03&quot;&gt;まーくん日記&lt;/a&gt;より。

VC++.NET 2003 の簡易版 &lt;a href=&quot;http://msdn.microsoft.com/visualc/vctoolkit2003/&quot;&gt;Microsoft Visual C++ Toolkit 2003&lt;/a&gt; が無償配布されている。
-最適化コンパイラやリンカは Visual C++ .NET と同等の機能を備えている。
-サンプルもついてくる。
-.NET CRL でも Windows でも動くバイナリを作れる。
-ライセンスも VC++.NET Pro と同じ。

弱点はこんな感じかな。
-IDE（統合開発環境）じゃない
-デバッガない

いずれにしても、CUIベースで開発する分にはまるで問題ないですな。一回インストールしてみよかなぁ。
</body>
<comments>
<comment>
<username>のいず</username>
<body>.NET バイナリを作るのであれば、Microsoft CLR Debugger ってのがあるょ：） http://sharpdevelop-jp.sourceforge.jp/index?%A5%C7%A5%D0%A5%C3%A5%B0%CA%FD%CB%A1</body>
<timestamp>1082277464</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ほほう。どうも。そこらへんのフリーでVC++プログラミングするテクニックをまとめたいなあ</body>
<timestamp>1082293627</timestamp>
</comment>
</comments>
</day>
<day date="2004-04-19" title="">
<body>
*[hatena]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/19/news012.html&quot;&gt;「はてなダイアリー」のキーワード、グループ限定で利用できる新機能&lt;/a&gt; (ITmediaニュース)
楽しそう。どうやってグループを設立するかにも興味がわくなぁ。やりようによっちゃぁ、ソーシャルネットワークになるよね。

*[hatena]アンテナの階層化
はてなアンテナには各サイトをグループに分ける機能はあるけど、グループの中にグループは作れない。サイトが増えてくると、どうしても階層化して利用したくなってくる。

昔考えたネタだけど、IEのお気に入りのページを定期的に巡回して、更新された順に並び替えるとおもしろいかなーと思った。誰か作ってほしいな。

ついでに、外部のアンテナから lirs なりのファイルを拾ってきて、そいつをお気に入りに表示したり。便利そうじゃん。

*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/04/16/2812.html&quot;&gt;米Amazon.com、噂のサーチエンジン「A9」をテスト公開&lt;/a&gt; (INTERNET Watch)
DHTMLバリバリです。触っていてなかなか楽しい。
</body>
</day>
<day date="2004-04-20" title="">
<body>
*[keitai]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0404/19/news011.html&quot;&gt;なくした携帯が戻ってくる？　遺失物発見通知＆回収代行サービス&lt;/a&gt;(ITmediaニュース)
初期投資は２千円で、1万円払えば無くしたケータイが戻ってくるわけですな。システムにしたのはおもしろいけど、どうなんだろう。使う人いるんだろうか。

連絡先のタグがあるから安心、というわけではなく、ケータイを無くしたのに気づいたら電話は止めた方がよいらしい。電話されまくって法外な料金を請求されてしまう事例もあるようですので。

*[soft]&lt;a href=&quot;http://www.forest.impress.co.jp/article/2004/04/16/okiniiri.html&quot;&gt;手話で使われる“指文字”フォント「ゆびもじフォント」&lt;/a&gt;(窓の杜【今日のお気に入り】)
ちょっと楽しいフォント
</body>
</day>
<day date="2004-04-22" title="">
<body>
*p1*[net]PuTTy のストアされたセッションをIPアドレス毎に自動で切り替える方法
PuTTy で特定のサーバーへの接続を、自分の現在のIPアドレス毎に切り替える方法を作ってみた。

というのも、自宅サーバーは、家からは直接 SSH できるけど、研究室からは SOCKS プロクシ経由じゃないと外に出られなくなったから。PuTTy は接続方法を記録できるけど、同じサーバーに接続するのに自分がいる場所によって接続方法を手動で切り替えるのがめんどくさく感じたから作ってみた。

**WSHスクリプト ip-exec.vbs
***注意点
-どのNICのIPアドレスを調べるかを指定するために、 InStr(Nic.Description, &quot;Realtek&quot;) &lt;&gt; 0 としています。複数のNICがないのならば、この部分は省略してもよいかも。
-IPアドレスがXX.YY.ZZから始まる場合のサンプルです。XX.YY.ZZかどうかを調べている部分を書き換えると、いろんな環境に書き換えられるはず。
-各自の環境に合わせて自由に使ってみてください。

&gt;|vb|
Set objWshShell = WScript.CreateObject(&quot;WScript.Shell&quot;)

' 引数がないときは終了
If WScript.Arguments.Count = 0 Then
    WScript.Quit
End If

' NIC を列挙
strComputer = &quot;.&quot;
Set objWMIService = GetObject(&quot;winmgmts:\\&quot; &amp; strComputer &amp; &quot;\root\cimv2&quot;)
Set NicSet = objWMIService.ExecQuery _
(&quot;Select * From Win32_NetworkAdapterConfiguration&quot;)

' １つずつ調べていく
For Each Nic In NicSet
    ' Realtek の NIC を調べる
    If Nic.IPEnabled = True And InStr(Nic.Description, &quot;Realtek&quot;) &lt;&gt; 0 Then
        ' IPアドレスが XX.YY.ZZ から始まっているか？
        If InStr(Nic.IPAddress(0), &quot;XX.YY.ZZ&quot;) = 1 Then
            objWshShell.Run WScript.Arguments.Item(0) &amp; &quot;-lab&quot;
        Else
            objWshShell.Run WScript.Arguments.Item(0)
        End If
        Exit For
    End If
Next
||&lt;

***使い方例
IPアドレスが XX.YY.ZZ で始まる文字列の時は、nitoyon-lab を使ってアクセス。そうでないときは、nitoyon を使ってアクセス。
&gt;|sh|
cscript.exe ip-exec.vbs &quot;putty.exe -load nitoyon&quot;
||&lt;

</body>
</day>
<day date="2004-04-23" title="">
<body>
*&lt;a href=&quot;http://www.forest.impress.co.jp/article/2004/04/22/google_cset.html&quot;&gt;“Google”検索の仕様変更で検索結果が文字化けしてしまうソフトが続出&lt;/a&gt; (窓の杜)
うちの Donut Rapt も被害を受けてしまいました。

アドレスバー検索は、設定の「アドレスバー検索」タブで
&gt;&gt;
http://www.google.com/search?hl=ja&amp;lr=lang_ja&amp;q=
&lt;&lt;
を
&gt;&gt;
http://www.google.com/search?hl=ja&amp;lr=lang_ja&amp;ie=sjis&amp;oe=sjis&amp;q=
&lt;&lt;
としたら動きました。

</body>
</day>
<day date="2004-04-26" title="">
<body>
*[pg][keitai]&lt;a href=&quot;http://kokogiko.net/&quot;&gt;ここギコ！&lt;/a&gt;
ケータイの位置情報を利用したサービスを行おうとしている人のサイト。

比較的オープンに進められていて、苦労がよく分かる。特に、&lt;a href=&quot;http://kokogiko.net/wiki%B3%C6%A5%B1%A1%BC%A5%BF%A5%A4%A4%C7%A4%CE%B0%CC%C3%D6%BC%E8%C6%C0%CA%FD%CB%A1.html&quot;&gt;各ケータイでの位置取得方法&lt;/a&gt;がよくまとまっていてうれしい限り。
</body>
</day>
<day date="2004-05-01" title="">
<body>
*p1*[soft]ランチャーで電卓
&lt;a href=&quot;http://www.vector.co.jp/magazine/softnews/040501/n0405013.html&quot;&gt;Sxac&lt;/a&gt;のニュースを見て、コマンドラインランチャーで電卓機能があると便利だなーと思った。電卓に限らず、何らかの外部アプリを実行して、その標準出力がランチャーに表示されるのはおもしろいかもしれない。

Sxac は作り込みが甘い印象だったので使いたくなかったのだが、CraftLaunch には電卓機能を追加できる &lt;a href=&quot;http://hp.vector.co.jp/authors/VA012411/craftcalc/index.html&quot;&gt;CraftCalc&lt;/a&gt; が提供されているらしい。なるほど、これはよいですな。

*p2*[soft]仮想デスクトップツール
ソフトウェアの仮想デスクトップツールでいいのがないか調べてみた。&lt;a href=&quot;http://sasapanda.com/toshi/archives/000124.html&quot;&gt;Orbium: 仮想デスクトップ&lt;/a&gt; さんによくまとまっていた。

個人的には、タスクバーがソフトでいっぱいになるのが嫌なので、デスクトップ切り替え時にタスクバーから消えてくれる機能を最優先で選んだ。結果、&lt;a href=&quot;http://www.yipton.demon.co.uk/content.html#DESKWIN&quot;&gt;DESKWIN&lt;/a&gt; を選んでみた。GPL で C++ なのもよいね。
</body>
</day>
<day date="2004-05-02" title="">
<body>
*p1*[soft]DESKWIN改造
使い勝手が悪かったので多少改造。

**ホットキーで Windows キーを使うための改造
Ctrl, Alt, Shift のどれも使わず単体でホットキーを指定したときは、Windows キーとの組み合わせと判断する。

例）
&gt;&gt;
Shift+C   -&gt; Shift+C
C         -&gt; Win+C
&lt;&lt;

TDeskwinOptions.cpp にて。
&gt;|cpp|
  void MakeRegisterHotkeyParam(THotkey aHotkey, int&amp; aVk, int&amp; aMod)
  {
        aVk = aHotkey &gt;&gt; 16;
        aMod = aHotkey &amp; 0xffff;
 +      if(aMod == 0)
 +            aMod = MOD_WIN;
  }
||&lt;

**デスクトップを切り替えるとき、きれいに切り替わるように
ウインドウを非表示にしていく順番が逆じゃないと汚い。

CDeskwinEngine.cpp にて。
&gt;|cpp|
 -for (TWindowList::iterator i=aWindowList.begin() ; i!=aWindowList.end(); i++)
 +for (TWindowList::iterator i=aWindowList.end() ; i!=aWindowList.begin(); i--)
||&lt;

</body>
</day>
<day date="2004-05-07" title="">
<body>
*p1*[ms]WinHECがらみの記事
Longhornについて少し分かってきた。
-&lt;a href=&quot;http://pc.watch.impress.co.jp/docs/2004/0506/mobile238.htm&quot;&gt;Microsoftの描く近未来型PCライフ&lt;/a&gt;
-&lt;a href=&quot;http://pc.watch.impress.co.jp/docs/2004/0506/mobile239.htm&quot;&gt;明らかになってきたAvalonの実装手法&lt;/a&gt;
</body>
</day>
<day date="2004-05-08" title="">
<body>
*p1*[ms]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0405/07/news015.html&quot;&gt;ITmediaニュース：マイクロソフト、Longhornでは3タイプのGUIを提供へ&lt;/a&gt;
Longhorn をち日記になっている予感もしますが。

&gt;&gt;
Microsoftは、こうした強力なグラフィックカードがないシステム用に「classic」インターフェースを提供する。これは、現在企業用デスクトップの主流であるWindows 2000を模したデザインになっている。
&lt;&lt;

classicを使うと、Avalonの御利益はないのかな。

*p2*デジカメのJPEGにコメントを記述したいよ
デジカメで写真を撮ると、Exif情報がたいてい付属するんだけど、同じようにコメントを保存したいと思った。

次のような２つの方法が一般的らしい。
&lt;dl&gt;
&lt;dt&gt;ExifのuserCommentを使う&lt;/dt&gt;
&lt;dd&gt;Exif形式の中でコメントを入力するのが「user Comment(ユーザーコメント)」。ここにコメントを入力できれば一番スマートなのだが、これを編集できるソフトは少ないのが難点。見つけたのは次のソフトを始めシェアウエアが大半。
-&lt;a href=&quot;http://member.nifty.ne.jp/h_c_yoda/ablecv/&quot;&gt;Able CV&lt;/a&gt;
ただ、カシミール３Ｄのデジカメプラグインを使うと、多少はなんとかなりそう。


なお、userComment を表示できるソフトは多数。
&lt;/dd&gt;
&lt;dt&gt;JPEGのコメントを使う&lt;/dt&gt;
&lt;dd&gt;JPEGのファイルフォーマットの中にコメントを格納できる場所がある。問題は表示できるソフトが少ないところ。&lt;a href=&quot;http://www.rysys.co.jp/exifreader/jp/&quot;&gt;Exif Reader&lt;/a&gt;は Exif と JPEG のコメントの両方を表示可能。&lt;/dd&gt;
&lt;/dl&gt;

IrfanView+Iptc.dll で JPEG ファイルに後者の方法でコメントを書き込めるようになるが、これで新規にコメントを書き込むと &lt;a href=&quot;http://www.rysys.co.jp/exifreader/jp/&quot;&gt;Exif Reader&lt;/a&gt; で Exif を解析できなくなった。コメントがファイルの最初の方にくるのだが、Exif Reader は APP1マーカーが JPEG ファイルの一番最初に来ることを想定しているのではないか、と思う。いちおう作者さんに報告出しておくかなぁ。

&lt;dl&gt;
&lt;dt&gt;リンク集（備防録）。&lt;/dt&gt;
&lt;dd&gt;
-技術的なこと
--&lt;a href=&quot;http://www.kanzaki.com/docs/sw/photo-rdf.html&quot;&gt;写真/画像とメタデータ -- EXIFを利用したJPEGとRDFの連動 (Image-metadata integration with Exif)&lt;/a&gt;
--&lt;a href=&quot;http://www2.airnet.ne.jp/~kenshi/exif.html&quot;&gt;Exifファイルフォーマット (けんしのページ)&lt;/a&gt;
--&lt;a href=&quot;http://park2.wakwak.com/~tsuruzoh/Computer/Digicams/exif.html#JpegMarker&quot;&gt;Exif file format&lt;/a&gt;
-ソフトウェア
--&lt;a href=&quot;http://www.rysys.co.jp/exifreader/jp/&quot;&gt;Exif Reader&lt;/a&gt;&lt;br&gt;おそらく一番有名なExif情報のリーダー。
--&lt;a href=&quot;http://member.nifty.ne.jp/h_c_yoda/ablecv/&quot;&gt;Able CV&lt;/a&gt;&lt;br&gt;シェアウエア(1,000円)。Exifを編集したり、Exif情報で検索可能。
&lt;/dd&gt;
&lt;/dl&gt;
</body>
</day>
<day date="2004-05-10" title="">
<body>
*[web]&lt;a href=&quot;http://pcweb.mycom.co.jp/articles/2004/05/08/gmail/&quot;&gt;1GBの衝撃! Googleの無料Webメールサービス「Gmail」&lt;/a&gt; (MYCOM PC WEB)
Gmail のレビュー記事。

メールに重要度を設定する機能は従来のメーラーにもあったけど、「ラベルによる柔軟な分類」には感心。１つのメールに対して、複数の属性をつけられると言う考え方は斬新に思えた。

&gt;&gt;
メールボックスによる分類と違って、ラベル分けはメール自体を移動させるのではない。メールは「受信箱」または「すべてのメール」に保存された状態で、該当する「ラベル」にも分類表示される。(中略)　ラベルによる分類には、ひとつのメッセージに対して、複数のラベルを付けられるというメリットがある。
&lt;&lt;

そもそも、メールをフォルダ分けで分類しきるのは無理な話で、そこらへんの要望をうまいこと取り入れていますね。MS さんも、ファイルをフォルダ分けで管理する限界を感じて、Longhorn で WinFS をもちだしてますし（WinFS のバックエンドがSQLだそうで）。これからはよりデータベース的な思考でファイルやメールを管理するようになっていくかもしれませんね。

さらに、この記事でおもしろいと思ったのが次の一節。
&gt;&gt;
オンラインサービスのあり方についても考えさせられた。例えば、給料を自宅に持って帰らずに、銀行の口座に入れてしまうように、将来的に重要なデータは外部の信用できるサービスに任せるようになるのかもしれない……というような所まで想像はふくらむ。
&lt;&lt;

お金と個人情報のどっちが大事かという議論はおいておくとして、「銀行にお金を預けられるんだから、ある程度の個人情報は外部に預けられるはずだ」という発想は正しそう。ディスクレスな時代の予感！

*[net]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0405/10/news008.html&quot;&gt;Winny開発者、逮捕&lt;/a&gt; (ITmediaニュース)
いちおう触れておかないといけない気がしてきた。

まず始めに、Winnyさんには、Pure に近い P2P が実用に耐えうることを教えていただき、自分の興味をそっちの方向に持っていっていただいたので、非常に感謝してます。

さて、本題。ソフト作者が逮捕されるってのは非常にきつい。ほう助なんていいだしたら、アップローダ作者もWebサーバー作者もほう助してるし、プロバイダも見て見ぬふりしてるし、ネットランナー系の雑誌なんてモロにもり立ててたし…。

逮捕された理由は次の３つかな。
+悪用されていることを知りつつバージョンアップし続けた
+悪用してもらうことを意図して開発した
+悪用を止める方法がなかった
１つ目だけだと、Webアップローダ作者もつかまっちゃうけど、２つ目があるのが大きいのだろう。ケーサツさんもその姿勢に腹が立って逮捕したんだろうし（asahi.com:&lt;a href=&quot;http://www.asahi.com/tech/asahinews/OSK200405100029.html&quot;&gt;「著作権法への挑発的態度」が逮捕理由　京都府警&lt;/a&gt;）。

３つ目が実はアップローダやその他のソフトとの大きな違いで、著作権者が流通されるのを停止できないところかな。アップローダなり掲示板なら削除要請したら（表向きは）消えてなくなるけど、Winny のような P2P ネットワークは一度流通始めたら止められないからね。

P2P 交換ソフト作者が逮捕されないようにするには、例えば、ACCS などと手を組んで、違法なファイルは交換できないような仕組みを作るとよいだろう。違法ファイルのハッシュを中央サーバーに保存しておいて、それにマッチするファイルは落とせないようにする。もちろん、クラックパッチが出回るだろうけど、それはクラックする人が違法な行為を行っているわけで、作者さんは悪くない。

ただ、合法にすることも中央サーバーを置くことも、Winny作者の47氏にとっては全然うれしくないことで、逆に世の中の価値観を変える方向に興味があったんだろうな。オンデマンド配信やオンラインレンタルが低価格で実現されたらいいんだけど、なかなかそうはいかないのかなぁ。

あと、余談だけど47氏まで２ホップだったことにびっくり。
</body>
<comments>
<comment>
<username>rarul</username>
<body>クラスタリングの基本は重複を許すことですな。</body>
<timestamp>1084199858</timestamp>
</comment>
<comment>
<username>noise</username>
<body>データ整理の話は BTRON のシェルっつうかファイルシステムっつうかそういうのをチェックすると膨らむかもよん(ぉ) http://pcweb.mycom.co.jp/news/2003/04/25/22.html</body>
<timestamp>1084208878</timestamp>
</comment>
</comments>
</day>
<day date="2004-05-11" title="">
<body>
*[hatena]Winnyキーワード
&lt;a href=&quot;http://d.hatena.ne.jp/keyworddiary/Winny#keyworddiary&quot;&gt;「Winny」を含む日記&lt;/a&gt; が5月10日 だけで 600件近く。皆さん感心がおありなんですね。
</body>
</day>
<day date="2004-05-13" title="">
<body>
*p1*[soft]Linarのキーコンフィグ
画像ビューワとしてLinarを使っているのだけど、外部アプリケーションで開く機能にショートカットを割り当てたくなった。開発自体はストップしているみたいなので、Resource Hackerを使って直接編集してみた。

SPY++ によると、外部アプリケーションで開くときのコマンドIDは「20000 + アプリケーションの番号」だと分かった。例えば、１番目のアプリケーションは「20000」、２番目は「20001」。

そこで、Resource HackerでLinarを開き、Acceleratorsの「128(おそらくメインウインドウのショートカットキーの設定)」を開き、次の設定を追加。
&gt;|
    VK_RETURN, 20001, NOINVERT, ALT, VIRTKEY
    VK_RETURN, 20002, NOINVERT, CONTROL, VIRTKEY
|&lt;
メニューの「Action→Update All Resources」を実行し、「File→Save」して上書きする。

これで、「Alt+Enter」で２番目の外部アプリを開き、「Ctrl+Enter」で３番目のアプリを開けるようになった。


</body>
</day>
<day date="2004-05-16" title="">
<body>
*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/05/14/3105.html&quot;&gt;米Six Apart、「Movable Type 3.0 Developer Edition」発表&lt;/a&gt;
試しにインストールしてみた。2.Xと手順はあまり変わらない。

+http://secure.sixapart.com/ の右の方にある 「MOVABLE TYPE FREE」 からリンクをたどる。
+利用規約に同意する
+https://www.typekey.com/t/typekey/ から[[TypeKey]]アカウントを取得する
+メールでダウンロード可能なURLが送られてくるので、ダウンロードする
+アーカイブを展開し、docs/mtinstall.html を元にインストール処理を行う
++mt.cfg を編集
++アップロード
++パーミションの設定
++mt-check.cgi を表示して調査。OKなら、mt-load.cgi を表示して、mt-load.cgi を削除する。
+mt.cgiへアクセスし、「Melody」「Nelson」でログイン

使い勝手もあまり変わらない。デフォルトのスタイルはちょっとかっこよくなったかな。
</body>
</day>
<day date="2004-05-17" title="">
<body>
*p1*[study]勉強開始
P2Pの自己組織化について研究する方向で決定。教授からお薦めの論文を３つほど頂戴する。

まずは、「Self organization of a massive document collection」という論文。まだ、読んでないので憶測で書くのはやめよう。有名な論文らしく、Googleでタイトルを検索したら、PDFが引っかかった。

&lt;a href=&quot;http://www31.ocn.ne.jp/~h_ishida/xdoc2txt.html&quot;&gt;xdoc2txt&lt;/a&gt; を使って、txt にしてから、&lt;a href=&quot;http://homepage3.nifty.com/TaN/pdic-download.html&quot;&gt;Doko Pop!&lt;/a&gt;＋英辞郎で読み進めようとおもったけど、xdoc2txtがいまいち使えなかった。

しばらく英語読んでなかったから、苦労しそう。だいぶ読みやすそうな英語だけど。

*p2*[study]自己組織化マップmemo
SOM(Self-Organization Map)の概要をつかむにはいいかと。
-http://www.mindware-jp.com/basic/
-http://www2.kanazawa-it.ac.jp/oyabu/som/somint.htm
-http://forest.kuee.kyoto-u.ac.jp/~khosaka/rs1012fig_t/node1.html
-http://mikilab.doshisha.ac.jp/dia/research/report/2003/0604/003/report20030604003.html
</body>
</day>
<day date="2004-05-18" title="">
<body>
*p1*[hatena]CSS更新
なんとなく前のに飽きたので新しくしてみた。写真は新風館からの夕焼け。

今回は、文章が読みやすいスタイルになるよう気を遣ったつもり。

ついでに日記名も変えてみた。
</body>
<comments>
<comment>
<username>みさ</username>
<body>でもリンクをたどってくるときの日記名が変わってないよ</body>
<timestamp>1085081310</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>変えたよー</body>
<timestamp>1085368714</timestamp>
</comment>
</comments>
</day>
<day date="2004-05-19" title="">
<body>
*p1*[study]論文検索
Googleで研究内容に関連しそうなサイトを探したら、この日記が引っかかった。クロール早すぎ。

*p2*[net]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0405/19/news051.html&quot;&gt;Google、PC内のデータを検索するツール立ち上げへ&lt;/a&gt; (ITmediaニュース)
ありがたやありがたや。

&gt;&gt;
インターネット検索会社のGoogleが、コンピュータ内に格納された情報を探すファイル・テキスト・ソフト検索ツールのリリースを計画している。
&lt;&lt;

しかし、これって検索アルゴリズムがバイナリで手に入ることを意味していて、どこぞの暇な人が解析しそうな気がする。さすがに、全てのファイルをアップロードしてGoogleのサーバー上でインデックス化する…なんてことはないだろうしさ。
</body>
</day>
<day date="2004-05-20" title="">
<body>
*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/05/20/3180.html&quot;&gt;NTT Com、OCN会員向けの楽曲ダウンロードサービス「OCN MUSIC STORE」&lt;/a&gt; (INTERNET Watch)
いよいよ日本でも楽曲ダウンロードサービスが始まりますか。

OCN会員だけじゃなく、一般にも開放して欲しいな。
</body>
<comments>
<comment>
<username>ikomaru</username>
<body>com社員にまかせなさい。（ウソウソ</body>
<timestamp>1085539931</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>エキサイトの件もあり、なかなか一筋縄ではいかなそうで自分では手を出したくない領域ですな。</body>
<timestamp>1085556842</timestamp>
</comment>
</comments>
</day>
<day date="2004-05-23" title="">
<body>
*[net]&lt;a href=&quot;http://slashdot.jp/articles/04/05/22/0259250.shtml?topic=52&quot;&gt;エキサイトが音楽ダウンロード販売を開始&lt;/a&gt; (スラッシュドット ジャパン)
今度はExiteが開始。コメントを見ているとだいぶ問題がありそうなんだけど、こういう流れには感謝しないと。

素敵なコメントを引用。
&gt;&gt;
&gt;&gt;
ダウンロード後、パソコンを買い換えたらどうなるの？

新しいパソコンに音楽ファイルをコピーしても、再生することはできません。著作権保護技術（SDMI）によりダウンロードしたパソコンでのみ再生が出来ることになっております。また、以下の場合も「異なるパソコン」と判断されるため再生できません

+OSの再インストール
+ハードディスク、CPUを交換
+リカバリー（初期化）
+OSのアップグレード
&lt;&lt;
消費者をなめきっています。いや、多分exciteはDRMをこんな風にするのは本分ではないでしょう。背後の某団体や某団体やレコード会社がこういうDRM付けないとこの値段で卸さないぞ、と言っていると推測。
&lt;&lt;

うーん。使い勝手悪いなぁ。日本の著作権はどういう方向に進むんだろう。輸入盤CD禁止の流れを見ても、鎖国の方向に向かいつつあるような…。
</body>
<comments>
<comment>
<username>rarul</username>
<body>輸入盤禁止の例からしても、ネットダウンロード販売が国際的になることはなさそうですな。国境を意識しないといけないなんて、ひどいインターネットですね。</body>
<timestamp>1085854681</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ダウンロードは個人輸入、という扱いにならないのかなぁ…。</body>
<timestamp>1085936987</timestamp>
</comment>
</comments>
</day>
<day date="2004-05-24" title="">
<body>
*[geino]飯田圭織と石川梨華が卒業
どうやらするらしい。いよいよ「モーニング娘。」が有名無実になるか！　卒業生の方が勢力強くなりそうだけど、ソロではインパクトないかもなぁ。

ということで、１年後には次のようなニュースが出てくると大胆予想。

&gt;&gt;
人気アイドルグループ「モーニング娘。」の卒業によるユニット「モーニング娘o.G.」（もーにんぐむすめ・じー）の結成が発表された。これまで、ハロープロジェクトからは数々のユニットが誕生してきたが、「モーニング娘。」卒業生によるユニットは今回が初めて。

「o.G.」は「モーニング娘。」の「。」とOG(オールドガール)を組み合わせた造語。後藤真希・安倍なつみ・石川梨華などのＯＧの参加が既に決まっているが、最終的なメンバーは現時点では未定のようだ。また、今回のユニットの目玉として、「モーニング娘。」最初の卒業生、福田明日香にも参加要請をしているが、現在調整中とのことだ。

発表の一報を耳にした「モーニング娘。」卒業生の保田圭は「(私には)話がありませんでした。私も元メンバーなのに…」と声を詰まらせた。色々な波乱を巻き起こしそうな今回のユニットに注目が集まっている。

メンバー・シングル発売時期ともに未定だが、「モーニング娘。」との売り上げバトルも気になるところだ。
&lt;&lt;
</body>
<comments>
<comment>
<username>noise</username>
<body>技術日誌?(ぉ)</body>
<timestamp>1085368617</timestamp>
</comment>
<comment>
<username>cann</username>
<body>むらさきになってる～～</body>
<timestamp>1085729164</timestamp>
</comment>
</comments>
</day>
<day date="2004-05-27" title="">
<body>
*[hard]&lt;a href=&quot;http://www.itmedia.co.jp/pcupdate/articles/0405/26/news047.html&quot;&gt;なんと、165万9000円――ソリッドアライアンス、12Gバイトコンパクトフラッシュ発売&lt;/a&gt; (ITmedia PCUPdate)
コンパクトフラッシュに12Gが入るのか。すごいなぁ。

誰か買って私にください。

*[ms][net]&lt;a href=&quot;http://japan.cnet.com/news/ent/story/0,2000047623,20068843,00.htm&quot;&gt;マイクロソフト、新たなシングルサインオン技術のデモを公開へ&lt;/a&gt; (CNET Japan)
なかなか思うようにいかないMSのシングルサインオン戦略。

TypeKeyはどうくいこむかな？

*[net]&lt;a href=&quot;http://hotwired.goo.ne.jp/news/news/culture/story/20040526204.html&quot;&gt;米大統領選のケリー候補に「グーグル爆弾」の洗礼&lt;/a&gt; (HOTWIRED Japan)
検索エンジンは、リンクを張るときの言葉も考慮に入れるため、次のようなGoogle爆弾というイタズラが可能になる。

&gt;&gt;
グーグル爆弾は、ウェブ上での悪ふざけとして急速に人気を集めている。ブロガーたちは、芳しくないレッテルになる言葉から個々のページにリンクを張ることによって、検索結果を操作できることに気づいたのだ。
&lt;&lt;

かといって、リンクを張るときの言葉を全然考慮に入れないと不便になるのは目に見えている。例えば、Googleで&lt;a href=&quot;http://www.google.com/search?hl=ja&amp;lr=lang_ja&amp;ie=sjis&amp;oe=sjis&amp;q=%89F%93c%91%bd%83q%83J%83%8b&quot;&gt;「宇田多ヒカル」で検索&lt;/a&gt;しても公式ページがトップにランクインするのはこの機能のおかげだ。

ケリーさんがAdWordsで対抗するあたりがなんともしゃれている。

*[net]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0405/26/news027.html&quot;&gt;「プロジェクトX」をVOD配信　J-COMの実験にNHKがコンテンツ提供&lt;/a&gt; (ITmediaニュース)
ついにコンテンツプロバイダがネット業界でも旋風を巻き起こすか！

煽り文句はいいとして、これからの時代はテレビとネットのボーダレス化が進み、いいコンテンツをもっている会社が生き残ると思います。プロバイダのようなインフラ業界は浮き沈みが激しいだろうけど、テレビ局のようなコンテンツ制作能力があるところは強いと思います。

もちろん、浮き沈みの多いインフラ業界で、いいものを開発するのにもおもしろさはかなりあるでしょう。ただ、コンテンツ保有者のほうが立場が上になるのは防げないと思います。インフラ屋さんは、コンテンツ保有者さんが喜んで流したくなるようなシステムをがんばって作らなきゃね！
</body>
</day>
<day date="2004-05-29" title="">
<body>
*[net]&lt;a href=&quot;http://slashdot.jp/articles/04/05/27/2115254.shtml?topic=71&quot;&gt;BBCが映像アーカイブをCCライクなライセンスで公開予定&lt;/a&gt; (Slashdot Japan)
いまさら引用するのはちょっと遅いんだけど、すごいニュース。この方向は世界的に進むんだろうかどうだろうか。
</body>
<comments>
<comment>
<username>akipponn</username>
<body>BBCといえばネットラジオがいいなりよ♪</body>
<timestamp>1085894345</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ほほぉ。ヒアリング訓練しなきゃなぁ...</body>
<timestamp>1085937024</timestamp>
</comment>
<comment>
<username>noise</username>
<body>音質で選べば VOA (ぉ)</body>
<timestamp>1085976223</timestamp>
</comment>
</comments>
</day>
<day date="2004-05-30" title="">
<body>
*&lt;a href=&quot;http://slashdot.jp/articles/04/05/30/105244.shtml?topic=1&quot;&gt;ナポリピザの標準仕様が策定&lt;/a&gt; (Slashdot JAPAN)
スラドをち日記カヨ、というつっこみは置いておいて…。

&gt;&gt;
イタリア政府によってナポリピザの標準仕様が策定されたらしい。仕様の詳細はピザの直径から厚さ、使用する材料まで細部に及んでいるそうで、これまでイタリア全国で「ナポリピザ」を扱っていた店舗約2万3000軒のピザ専門店のうち、現時点でこの仕様に準拠しているのは200軒程度しかないとのことだ。
&lt;&lt;

W3CのHTML仕様みたく、結局従わなくてもなんとかなったり、従わない方がいいものが提供できたり、と。仕様に従って味を犠牲にするぐらいなら、消費者にいいものを届けるためにはみ出すことは必要でしょう。

*初熱暴走
日中は30℃を超えたそうで、今年最初の熱暴走。今年も扇風機を独り占めするメインPC。

追伸。&lt;a href=&quot;http://d.hatena.ne.jp/keyworddiary/%c7%ae%cb%bd%c1%f6?week=20040530#keyworddiary&quot;&gt;熱暴走を含む日記&lt;/a&gt;もここ２日でそれまでの１～２件から一気に５～６件に増殖中。
</body>
</day>
<day date="2004-06-01" title="">
<body>
*[net]&lt;a href=&quot;http://docs.yahoo.co.jp/info/pr/release/2004/0531.html&quot;&gt;Yahoo! JAPAN、検索サービスを刷新&lt;/a&gt;
Yahoo! Japanの検索はGoogleを利用していたんだけど、ついに米Yahoo!開発のYST(Yahoo! Search Technology)を導入。

InktomiとAltaVistaとAlltheWebを吸収して作り上げた技術だそう。統合しすぎ。名目は統合だけど、実際のところは手に入れた人材に新たに一から作り直させたのかもしれない。あくまで推測だけど、実際に３つのエンジンを融合させることに尽力するよりも、最初から作った方が手っ取り早いような。

&gt;&gt;
検索エンジンの切り替えとともに、タレント名の検索結果にタレントの顔写真などを表示する機能を追加しました。(中略)。顔写真については、権利擁護のためすべて電子透かしの処理を施してあります。

また、「バイオリン」と「ヴァイオリン」、「引越し」と「引っ越し」といった日本語の表記の「ゆれ」に対して、同じ検索結果の表示を可能とする新機能も追加しました。現在対応しているのは、代用漢字（例：「諷刺」と「風刺」）、異体字（例：「國」と「国」）、カタカナ語（例：「ダイアモンド」と「ダイヤモンド」）、送り仮名（例：「受け取り」と「受取」）のほか、ひらがな、カタカナ、漢字の区別（例：「らーめん」、「ラーメン」、「拉麺」）などです。
&lt;&lt;

便利かも？　電子透かしとかがんばってるし、ゆれ対応もうれしい機能。Googleの知名度はアップしたものの、Yahooをメインの検索エンジンとして利用している人は依然多く、Yahooサーチエンジンと仲良くするためのノウハウを考えなきゃ。ありがたいことに、&lt;a href=&quot;http://kyoto.so-name.info/&quot;&gt;so-name&lt;/a&gt;はYSTでもそこそこのランクにいるようだ。
</body>
<comments>
<comment>
<username>noise</username>
<body>http://japan.cnet.com/column/search/story/0,2000050605,20067563,00.htm</body>
<timestamp>1086106635</timestamp>
</comment>
<comment>
<username>noise</username>
<body>知的財産権の調整がだるいから買収しまくって統合してみました、的な雰囲気を感じるのはワタクシだけでございましょうか(ぉ)つーか、リンク張れないの弾劾(ぉ)</body>
<timestamp>1086106727</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-02" title="">
<body>
*[net]&lt;a href=&quot;http://nikki-k.jp/&quot;&gt;日記系.jp&lt;/a&gt;
日記のカテゴリをある程度絞ったというところにおもしろさがあります。カテゴリ、筆者の年齢・性別・居住地などでどんどんと絞っていっておもしろそうな日記を見つけることができるわけです。こういうフリーの日記サイトって他の人に日記を見つけるのが面倒だったのだけども、これだといろいろあさってみたくなりますね。

参考までに、&lt;a href=&quot;http://nikki-k.jp/n.k?AreaNumber=5210&amp;GenreNumber=33&quot;&gt;京都市近辺のグルメな日記一覧&lt;/a&gt;

</body>
</day>
<day date="2004-06-03" title="">
<body>
*[pg]&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0406/01/news003.html&quot;&gt;Longhornアプリケーションの構築方法&lt;/a&gt; (ITmedia)
まだ詳細は読んでいませんがおもしろそうな記事。

読みました。XAMLよりも、プロジェクトファイルの仕様解説が大半でした。LonghornではプロジェクトファイルもXMLの模様。結局、手作業で書くのは無理でしょうし、IDEまかせになるんでしょうね。ただ、GUIでめんどくさいところを、手でちょちょっと変更できるのが利点の気もする。

ここまでXMLの時代になってきているのに、いいXMLエディタがあまり出てきていないような気がする。知らないだけなのかもしれないけど。
</body>
<comments>
<comment>
<username>re_Nao</username>
<body>XML面倒ですよねｗ　ナカナカ自力で作るのには苦労します。</body>
<timestamp>1086364017</timestamp>
</comment>
<comment>
<username>ikomaru</username>
<body>.NetのプロジェクトファイルＸＭＬだよ</body>
<timestamp>1086413890</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>.Net も XML なのか。やはり、.NET が分からないとなかなかダメだなぁ...</body>
<timestamp>1086429052</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-05" title="">
<body>
*p1*[soft]IEでソースを開けなくなったら
IEでソースを開けなくなるトラブルに見舞われました。右クリックして「ソースの表示」を選択しても、一切表示されない。

Temporary Internet Files が容量満タンになっていて、一時ファイルを作成できなかったのが問題のようでした。大きめの .swf や .zip を削除してやると、無事、ソースが表示されるようになりました。

めでたしめでたし。

*p2*[ms]NTFSの副次ストリーム
http://www.ipa.go.jp/security/awareness/vendor/programming/b08_03_main.htmlより。NTFSにこんな機能があったとは。

&gt;&gt;
ファイルシステムのファイルといえば「一つのいれもの」としてしばしば捉えられるが，実はNTFS のファイルはそれ以上の収容能力を持っている。NTFS のファイルは一つのファイルの下に複数のデータストリームを保持できるのである。いわば「ファイルの中に複数のファイルがある」といった構図だ

ふだんわれわれがデータをファイルに保存するとき，NTFS のファイルがもつことのできるデータストリームのうち一つしか使っていないのである。 

プログラムからはNTFSのファイルの各ストリームに対して入出力を行うことができる。ここのストリームは次のような形式のパス名で識別される。 
&gt;&gt;
d:\dir\file.ext:stream
（ここに，d:\dir\ = ディレクトリ，file.ext = ファイル名，stream = ストリーム名　である） 
&lt;&lt;
すなわち，ファイル名の後ろにコロン（:）で区切ってストリーム名をつければよい。 

(中略)Macintoshに対するファイルサーバ機能や，Windows 2000で各ファイルにさまざまなプロパティを記録できる機能がその少ない実例である。
&lt;&lt;
</body>
</day>
<day date="2004-06-06" title="">
<body>
*[pg][nt]&lt;a href=&quot;http://nienie.com/~masapico/secmemo.txt&quot;&gt;SIDやらSDやらACLやら...&lt;/a&gt;
Windows NT系の難しいアクセス権の話がよくまとまっている
</body>
</day>
<day date="2004-06-07" title="">
<body>
*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/06/04/3364.html&quot;&gt;米Amazon.com、ブログ似のサービス「Plog」のベータテスト開始&lt;/a&gt;
おすすめ商品の履歴を閲覧できたり、RSSで最新おすすめをチェックできたりするところがミソかな。
&gt;&gt;
投稿するのがユーザーではなく、Amazon.comであることがブログとは異なるところだ。 

Amazon.comがPlogに投稿する内容は、ユーザーがこれまで購入した商品データによって決まる。その意味で、Plogサービスは「おすすめ」とよく似ている。
&lt;&lt;

</body>
<comments>
<comment>
<username>akipponn</username>
<body>ぷろぐって読むのかな。かわいいね（笑）</body>
<timestamp>1086777918</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-10" title="">
<body>
*p1*[pg][Win32]プロセスの親子関係を知る
Windowsのプロセスにも一応親子関係が存在する。例えばタスクマネージャのプロセスタブで右クリックして「プロセスツリーの終了」を選択すると、子プロセスもろとも殺すことができる。プロセスツリーを見るには&lt;a href=&quot;http://www.sysinternals.com/ntw2k/freeware/procexp.shtml&quot;&gt;Process Explorer&lt;/a&gt;というツールが便利だろう。

あるプロセスＡが新規プロセスＢを作成すると、必ずＡはＢの子供になるようだ。そんなこともあり、通常、ほとんどのアプリケーションはexplorer.exeの子プロセスのようだ。また、何らかのランチャからプロセスを立ち上げていると、ランチャーから起動したプロセスはランチャーの子プロセスとなっている。他にも、サービスのプロセスは「services.exe」の子プロセスのようだ。ちなみに、services.exeはwinlogon.exeの子プロセスだ。
&gt;|
System Idle Process
 +System
   +smss.exe
     +csrss.exe
     +winlogon.exe
       +winlogon.exe
         +services.exe
           +svchost.exe
           +  :
Explorer.exe
  +IEXPLORE.exe
  + :
  +(ランチャー)
     +(ランチャーから立ち上げたアプリ)
|&lt;

プロセスＡの子プロセスがＢで、その子プロセスがＣのとき
&gt;|
TopLevelProcess.exe
  +Ａ
    +Ｂ
      +Ｃ
|&lt;
Ｂを殺すと、ＣはＡの子供にはならずに自動的にトップレベルのプロセスになるようだ。
&gt;|
TopLevelProcess.exe
  +Ａ
Ｃ
|&lt;

自作のアプリケーションで親子関係を知りたい場合は、CreateToolhelp32Snapshot関数を呼び出して、Process32First・Process32Nextなどを呼び出しながらPROCESSENTRY32構造体の「th32ParentProcessID」を参照するとよいようだ。なお、NT4.0ではToolHelp functionsが提供されていないため、この方法は使えないようだ(未確認)。

*p2*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/static/column/jiken/2004/06/09/&quot;&gt;インターネット事件簿13回：「ぼったくり」「氏ね」はどこまでが表現の自由？&lt;/a&gt; (INTERNET Watch)
「他の医療系予備校に比べてだと、少しはましなのでは？　何でもトーイシン2年目では、学費が30万円ぐらい安くなるらしい。個別は1時間で確か8000円。はっきりいってぼったくり。」が表現の自由だそうで。以下、判決文の一部を抜粋。

&gt;&gt;
『親の間に不信感が広まっている』『トーイシンの授業は役に立たなかった』『はっきりいってぼったくり』といった書き込みは東京医進学院の授業に対する不満や批判で、学院の社会的評価は一定の低下を免れない。しかし予備校として生徒を集めている以上、批判や意見は当然あり得るもので、公表されたからといって非難することはできない。またこうした内容や言葉づかいは、通常の批判や意見の域を出ているとは考えられず、表現の自由の範囲内として許容すべきである。
&lt;&lt;

どこまで削除するについては難しいけど、建設的な意見や事実を元にした批判なら残すべきなのかもしれない。

実際にプリンタやスピーカー選びで匿名掲示板を参考にしたことがあるけど、批判されていない商品なんてなかった。もちろん絶賛している書き込みもあるわけで、そこは批判と絶賛の両方から総合的に判断するしかない。あ、でも批判されまくっている商品だと遠慮しちゃうだろうけど…。
</body>
<comments>
<comment>
<username>爬猫</username>
<body>http://poe777.hp.infoseek.co.jp/trans/jp.html#pe こんなパッチがあります＜Process Explorer</body>
<timestamp>1086882408</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>最新版にはパッチ当てれませんでした。まぁ、英語でいいや。</body>
<timestamp>1086944394</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-11" title="">
<body>
*[soft]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/06/11/3459.html&quot;&gt;肌の色などからわいせつ画像ファイルを検知し、一括削除できるソフト&lt;/a&gt; (INTERNET Watch)
ネタかと思うようなソフト。黒人は大丈夫だろうか、とは某氏のつぶやき。「Ver 2.0　黄色人種以外のわいせつ画像に対応しました」などとプレスリリースがでてもネタとしか思えない。

*[net][soft]&lt;a href=&quot;http://www.nutch.org/docs/jp/faq.html&quot;&gt;オープンソース検索エンジン Nutch&lt;/a&gt;
ソースを公開する検索エンジン。一から実装しなくていいので、その分野を研究者しようとしている身にはありがたいですね。

インストール方法はこちら＜http://ueshin.happy-camper.st/wiki/index.jsp?pid=Nutch%B8%A1%BA%F7%A5%A8%A5%F3%A5%B8%A5%F3
</body>
</day>
<day date="2004-06-13" title="">
<body>
*[soft]&lt;a href=&quot;http://www.justsystem.co.jp/news/2004f/news/j06082.html&quot;&gt;「夏のATOKすいすい入力フェア」本日より開始&lt;/a&gt;
&gt;&gt;
今回無償提供する省入力データは、携帯電話用ATOKのダウンロード辞書として提供している最新の語彙を基に、「ATOK17 for Windows」「ATOK16 for Mac OS X」の推測変換用に作成したデータです。最初の数文字を入力するだけで、ATOKが使いたい言葉を推測して自動的に表示するため、入力作業が効率よく行えます。
&lt;&lt;
ATOK17ほしいなぁ。しかし、専門用語の種類がおもしろい。

ランドマークやスポーツはいいとして、ヨーロッパ料理データ・エスニック料理データ・ラーメン用語データというのがおもろい。ラーメンつよし。例：トンコツ醤油、香味野菜だそうで。

</body>
</day>
<day date="2004-06-14" title="">
<body>
*&lt;a href=&quot;http://www.itmedia.co.jp/lifestyle/articles/0406/14/news009.html&quot;&gt;「ストリーミングの覇者」になるのはAppleかMSか？&lt;/a&gt; (ITmedia)
QuickTimeのダウンロード数を張り合いに出すのはどうかと思いますが、AppleがH.264を前面に押し出しているのはおもしろい。MS独自規格 vs Apple+H.264ですか。

たとえ、Apple+H.264が勝ったとしても、MSがH.264に対応したキラーアプリを作れば起死回生できてしまいそう。商業的に見れば、MSの姿勢は正しいんだろうけど、消費者としては手っ取り早く標準に載ってほしい。

*[ms]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/06/14/3479.html&quot;&gt;IE6のセキュリティゾーン設定をすり抜けられてしまう脆弱性&lt;/a&gt; (INTERNET Watch)
探すのを楽しんでるかのようだなぁ。「パッチ作るよりも速い速度で新しい穴を見つけてやれ」みたいなノリ。
</body>
<comments>
<comment>
<username>hanazuhanazukin</username>
<body>mozillaMozullaも偽装されちゃうそうです。</body>
<timestamp>1087228259</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-15" title="">
<body>
*[pg]&lt;a href=&quot;http://nekop.programmers.jp/diary/?date=20040613#p01&quot;&gt;Programmers.jp コーディング規約&lt;/a&gt;
id:kmt-t:20040614#p3さんより。

よくある「メソッド名をこうした方が読みやすいですよ」程度のものだけではなく、「改行可能な場所」まで規定しているのがおもしろい。自由に記述していいはずのプログラミング言語を、ここまでがっちりと制約を強くするのもいいかもしれない。特にオープンソースなコミュニティーでは、こういうのが大事になってくるんだろうな。

こういう規約をBNFっぽく規定して、EmacsなりEclipsのマクロに変換して、この規約以外では書けないようにできたらおもしろい。いろいろな規約が乱立してしまうかもしれないけど、少なくともそのコミュニティーのコードを書く限りにおいては、その規約に従いながら書けるんだから安心ではある。
</body>
<comments>
<comment>
<username>まーくん</username>
<body>インデントぐらいならすでにあるんだろうけど、構造全体となるとさすがに今はないよねー。でも違いがあるからこそ、読む楽しみもあるのだとおもうんだけど(ぉ</body>
<timestamp>1087700640</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>自由にするか、不自由にするか。没個性か個性的か。色々試してみるとおもしろいかもしれませんね。</body>
<timestamp>1088337182</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-22" title="">
<body>
*&lt;a href=&quot;http://www.cnn.co.jp/science/CNN200406200012.html&quot;&gt;念じるだけでゲーム操作　米で実験成功&lt;/a&gt; (CNET Japan)
眉唾っぽいけど、本当ならすごい。
</body>
</day>
<day date="2004-06-23" title="">
<body>
*[net]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0406/23/news025.html?c&quot;&gt;「Winny」「WinMX」ネットワークをマップで可視化&lt;/a&gt; (ITmediaニュース)
ツリー構造に見えるとこから想像するとWinnyのネットワークかな。あれ、でもWinMXもツリーなのかな。よく考えたらあまりWinMXの仕組みを知らない。
</body>
<comments>
<comment>
<username>rarul</username>
<body>深い枝の先っこに参加した場合悲惨だね。深さに結構ばらつきがあるみたいだし。</body>
<timestamp>1088010060</timestamp>
</comment>
</comments>
</day>
<day date="2004-06-25" title="">
<body>
*[pg]&lt;a href=&quot;http://www.atmarkit.co.jp/farc/rensai/redge24/redge24.html&quot;&gt;アスペクト指向プログラミング オーバービュー&lt;/a&gt; (＠IT)
最近はやりのAOPについて勉強してみる。

関数呼び出しに対してフックをかけられる仕組みだと勝手に解釈した。ログ取りなどの特定の目的には非常に有用だろうし、色々な応用例も考えられそう。AOPを利用するファイルアップロードモジュールみたいなものがあれば、プログラマが通常のファイル出力をする感覚でネットワークにデータを書けそう。いくつもの既存のソースに対して、ファイルアップロードモジュールのアスペクトを適応してリビルドするだけで、ネットワーク対応のプログラムになってしまう。もちろん、OOPでも色々と工夫すれ同様のことはできるのだけど、「既存のソースは変更しない」という点が強みだろう。デザインパターンのDECORATOR(デコレータ)パターンを言語レベルで導入したような感じだろうか。

そんなこんなで、色々楽しそうではあるのだけど、十分に設計してからプログラミングしないととても解読できないようなプログラムになりそう。BASIC時代のGOTO文を多用したスパゲッティプログラムのさらに上を行きそう。バグの原因特定や切り分けも煩雑になるんじゃないでしょうか？

 .NETもJAVAも全然触ってないから時代から置いて行かれるような感じだ。 .NETプログラミングでGUIのアプリを１つぐらい作ってみようかなぁ。
</body>
</day>
<day date="2004-06-27" title="">
<body>
*[pc]&lt;a href=&quot;http://itpro.nikkeibp.co.jp/free/NC/NEWS/20040624/146343/&quot;&gt;機密情報を分散して保存できるソフト製品が登場&lt;/a&gt; (IT Pro ニュース)
これはおもしろい仕組みだ。ユビキタスな社会になると、さらにネットワークストレージが加わってもおもしろいだろう。サービス業者が中身を読めないことになるので、気持ち悪さはかなり減るのではないかな。
</body>
</day>
<day date="2004-06-28" title="">
<body>
*&lt;a href=&quot;http://www.asahi.com/tech/asahinews/TKY200406260341.html&quot;&gt;時計かざして社員食堂で支払い　ＪＣＢ来年度にも実用化&lt;/a&gt; (asahi.com)
JCBとソニーのICチップ、そしてカシオの共同プロジェクト。別に、DoCoMoとも組んで携帯電話にも埋め込むらしい。

携帯電話で支払いと聞くとＩＴ技術だなぁ、と思うけれど、時計で支払いとなるととＳＦっぽく聞こえてしまうのはわたくしだけでしょうか？
</body>
</day>
<day date="2004-06-30" title="">
<body>
*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/event/2004/06/28/3670.html&quot;&gt;Winny暗号化アルゴリズムの詳細が明らかに～Winnyワークショップ&lt;/a&gt; (INTERNET Watch)
意外と甘いらしいです。
</body>
</day>
<day date="2004-07-01" title="">
<body>
*p1*[ldap]LDAP勉強中
めもめも。
&lt;dl&gt;
&lt;dt&gt;エントリ&lt;/dt&gt;
	&lt;dd&gt;LDAPディレクトリでの１つのノード&lt;/dd&gt;
&lt;dt&gt;RDN (Relative Distinguished Name)&lt;/dt&gt;
	&lt;dd&gt;各エントリを一意に識別する名前。DNSに例えると、hatena, co, jp, comなどのそれぞれが該当。&lt;/dd&gt;
&lt;dt&gt;DN : 識別名 (Distinguished Name)&lt;/dt&gt;
	&lt;dd&gt;RDNの組み合わせによって作られる名前。DNSでいう、hatena.ne.jpなど。&lt;br&gt;DNは次のように表記する。&lt;code&gt;dn: cn=nitoyon, ou=people, dc=d, dc=hatena, dc=ne, dc=jp&lt;/code&gt;
&lt;/dd&gt;
&lt;dt&gt;LDIF&lt;/dt&gt;
&lt;dd&gt;ディレクトリ内のデータ内容を表すための標準的な保存形式。「属性:値」を行で区切り、空行がエントリの境目を表す。&lt;br&gt;
&gt;|
dn: dc=nitoyon, dc=com
objectClass: dcObject
objectClass: organization
dc: nitoyon
o:nitoyon.com

dn: ou=People,dc=nitoyon,dc=com
objectClass: organizationalUnit
ou: People
|&lt;
&lt;/dd&gt;
&lt;dt&gt;objectClass&lt;/dt&gt;
&lt;dd&gt;エントリが人なのか、集合なのか、ドメインなのかを決める種類（C++やJavaでいうクラスのようなもの）。objectClassによって、必ず設定しなければならない属性や設定できる属性が決まっている。objectClassの一覧は&lt;a href=&quot;http://www.hayagui.com/openldap02.html&quot;&gt;ここ&lt;/a&gt;が取っつきやすそう。&lt;/dd&gt;
&lt;dt&gt;スキーマ&lt;/dt&gt;
&lt;dd&gt;objectClassがどのような属性を設定しなければならないのか、設定できるのかを決めている。core.schemaやnis.schemaなどがある。userPassword属性を利用するためには、nis.schemaをインクルードしなければならない。&lt;br&gt;&lt;a href=&quot;http://solaris.bluecoara.net/servers/ldap/openldap2.phtml&quot;&gt;OpenLDAPの設定と動作実験&lt;/a&gt;の後半が分かりやすかった。&lt;/dd&gt;
&lt;/dl&gt;
</body>
</day>
<day date="2004-07-07" title="">
<body>
*p1*[ms]Longhornデモ
http://msdn.microsoft.com/seminar/shared/asp/view.asp?url=/msdntv/episodes/en/20031028lhorndb/manifest.xml&amp;rate=1&amp;WMPVer=9.0.0.3008
http://d.hatena.ne.jp/kmt-t/20040706#1089087124 より。Longhorn開発デモムービー。

AvalonやらXAMLって、すごいなぁー。HTMLを書く感覚でウインドウのデザインができちゃう。scale 3 3 とか rotate 30 には焦ってしまった。テキストボックスやボタンが拡大されたり回転したりしますよ。さすが、Flashの上を行こうとしているだけのことはある。いままでのGDIではかなり面倒だった、ウインドウの背景に動画を配置なんかもさくっとできてます。

ここまで簡単にデザインできちゃうと、センスの悪いアプリがいっぱい出てきそう。他のアプリのXAMLを置き換えるソフトがあったら重宝しそうだな。そしたら、プレーヤー系のアプリに多い「スキン」を簡単に作れるわけで。

ウインドウにIDを割り振って、id.Text = &quot;hogehoge&quot;; とかやっているのを見ると、JavaScript で id.innerHTML = &quot;hogehoge&quot;; とやっているのを思い出してしまう。それくらい簡単にプログラミングができちゃうのがうれしい。
</body>
</day>
<day date="2004-07-08" title="">
<body>
*p1*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/07/08/3832.html&quot;&gt;フレッツ向けの多チャンネル放送とVODサービス「4th MEDIA」&lt;/a&gt; (INTERNET Watch)
でかめのサービスがやってきました。多くのISPが対応してるし、とてもよさげ。あとは、値段がどこまでさがるかどうかですなぁ。

*p2*[pc]Cドライブのautorun.inf
Cドライブ直下にautorun.infをおいて、
&gt;|
[autorun]
open=xxxx.exe
|&lt;
と書いておいて、マイコンピュータからCドライブをダブルクリックすると、xxxx.exeが起動してしまいます。

CDドライブの自動実行のための機能のはずなんだけど、ローカルディスクでも機能してしまうのね。

Windowsプチトリビアでした。
</body>
</day>
<day date="2004-07-27" title="">
<body>
*p1*[linux]bsfilter で Argument list too long
スパムメールを除去するために、&lt;a href=&quot;http://bsfilter.org/&quot;&gt;bsfilter&lt;/a&gt; を使っているのだけど、公式で推奨されているように
&gt;|sh|
$ bsfilter --add-clean ~/Mail/inbox/*
||&lt;
とすると、メールの数が多いときに、「Argument list too long」というエラーが出てしまう。

これに対処するために xargs を使うとよいだろう。xargs はコマンドライン引数として与えられる最大長を超えたときには、自動で複数プロセスにわけて起動してくれる賢い人のようだ。
&gt;|sh|
$ find ~/Mail/inbox/ -type f|xargs bsfilter --add-clean
||&lt;

ただし、find は指定されたディレクトリ以下のファイルを全てリストアップしちゃうので注意。find で１階層だけ検索することって、できないんだろうか。

</body>
</day>
<day date="2004-08-08" title="">
<body>
*[soft]研究室で高校野球
ABCのサイトが、高校野球をストリーミング生中継しているので、それを見ながら研究やお仕事。

ただ、アウトカウントや出塁状況が表示されないので、http://koshien.asahi.co.jp/todo.htmlをIE6で小さめに表示して並べることにした。IE6は最前面に表示すれば、別の作業をしていても表示されるので問題なし。これを実現するには、SetWindowPos関数を呼び出せばよいわけだけど、&lt;a href=&quot;http://www.vector.co.jp/soft/win95/util/se074556.html?g&quot;&gt;ウィンドウエクスプローラ&lt;/a&gt;というソフトを利用している。

ついでに、Media Player のスキンも Classic の下部分を表示しないように改造してみる。
</body>
</day>
<day date="2004-08-10" title="">
<body>
*[net][ms]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0408/09/news006.html?nc10&quot;&gt;ユーザーがIE 7に求めるものは？&lt;/a&gt;
/.Jより。CSS2に対応してくれたら、かなりうれしいのになぁ。
</body>
</day>
<day date="2004-08-18" title="">
<body>
*p1*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/08/18/4270.html&quot;&gt;IEにまたもやURLを偽装できる脆弱性が発見される&lt;/a&gt;
JavaScript を解読したところ、こんな感じかな。
&lt;ol&gt;
&lt;li&gt;newwindow という名前をつけて新しいウインドウを開く
&lt;blockquote&gt;mywindow = window.open(&quot;res2res://nonexisting.dll/nonexisting&quot;,&quot;newwindow&quot;);&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;そっちでいろいろごにょごにょ。yahoo.com のページを開いたり、フォーカスを変更したり、not found な URL にアクセスしたり。&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&quot;/xxxx/&quot; target=&quot;newwindow&quot;&amp;gt; をクリックすると、アドレスバーに表示されていた URL が(yahoo.comから)変わらない&lt;/li&gt;
&lt;/ol&gt;

アドレスバーの文字列が変わらないと脆弱性になるわけです。ところが、手元の Donut RAPT #48 で実験したところ、ウインドウ名が有効ではなかったため、再現しませんでした。

*p2*[ms][pg]Microsoft Document Explorer(dexplore.exe)で Contents を表示できない
Document Explorer を使っていて次のようなエラーが表示されるようになった。
&gt;&gt;
Failed to show the Help Table of Contents.  Please reinstall Help on your system.
&lt;&lt;

メニューのTool-&gt;Options の International Settings でLanguage を日本語にして再起動したら表示されるようになりました。おそらく、以前は Platform SDK で英語のヘルプだったから問題なかったけど、.NET Framework は日本語だったから怪しくなったような気がします。

If you install Platform SDK Help(English) and next install .NET Framework(your locale), this problem will occur. Two different language help may be conflicting. Then, select &quot;Tool-&gt;Options&quot;, and select &quot;International Settings&quot; &quot;Language&quot; to your locale language. Restart Document Explorer, and the contects will appear!!

*p3*[ms][pg]Platform SDK と .NET Framework を同じヘルプに表示したい
以前の MS の開発ドキュメントは chm 形式で配布されていましたが、最近は Microsoft Help 2 Format という形式で配布されているようです。この形式のファイルは Microsoft Document Explorer(dexplore.exe) もしくは VS.NET の子ウインドウから表示することができます。

最近、.NET Framework をインストールしてから、Platform SDK のヘルプと .NET Framework のヘルプを別々のウインドウでしか表示できないのを不便に思いました。この２つを１階層に表示するにはどうしたらいいか色々調べていたのですが、いまいちいいドキュメントは見つかりませんでした。

どうやら VS.NET があったら簡単にできそうなのだけど、ない環境では難しそう。とりあえず、参考になりそうなページは&lt;a href=&quot;http://www.antonypranata.com/articles/helpvc7.html&quot;&gt;Integrating Symbian Help in Visual Studio .NET&lt;/a&gt;。
</body>
</day>
<day date="2004-08-19" title="">
<body>
*[net]&lt;a href=&quot;http://japan.cnet.com/news/sec/story/0,2000050480,20070525,00.htm&quot;&gt;暗号アルゴリズムに重大な欠陥発見の報告相次ぐ&lt;/a&gt; (CNET Japan)
まじっすか。
&gt;&gt;
今回見つかったMD5の欠陥を攻撃者が悪用すれば、普通のPCでも数時間でハッシュ衝突を引き起こせてしまう。ただし、悪質なコードを書き、それにねつ造したハッシュ値を持たせるには、多少の時間がかかる可能性がある。 
&lt;&lt;
</body>
<comments>
<comment>
<username>Edy カードを売った人</username>
<body>MD5 の欠陥ってかーなり前から指摘されてるような・・・。http://ja.wikipedia.org/wiki/MD5</body>
<timestamp>1092994541</timestamp>
</comment>
</comments>
</day>
<day date="2004-08-26" title="">
<body>
*[pc]&lt;a href=&quot;http://www.itmedia.co.jp/anchordesk/articles/0403/29/news002.html&quot;&gt;人はなぜテレビ番組を“録りためる”のか&lt;/a&gt; (ITMedia)
コレクションすることの喜びとは。ビデオに撮って見た気分になって満足する、というのはによくあることだ。「見ようと思えば見れる」という事実は安心感を与えてくれる。そういった感情を、この記事はうまいことまとめている。
</body>
</day>
<day date="2004-08-28" title="">
<body>
*[ms]&lt;a href=&quot;http://www.asahi.com/business/update/0828/020.html&quot;&gt;ＭＳの次期ＯＳ、発売は０６年後半&lt;/a&gt; (asahi.com)
別にこのニュース自体には驚かないんだけど、なんと28日昼頃、asahi.com のトップニュースになっていた。トップにするほど大きなニュースなんだろうか。

あと、WinFS が「ウィンＦＳ」と記されていて、ちょっとお茶目でした。
</body>
</day>
<day date="2004-09-01" title="">
<body>
*p1*[net][p2p]合法P2P
-&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/08/31/4434.html&quot;&gt;P2P技術で“２ちゃんねる効果”を軽減できる無料CDNが正式公開&lt;/a&gt;(INTERNET Watch)
-&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2004/09/01/4451.html&quot;&gt;米ベンチャーがP2P技術を使ったテレビ番組配信事業を発表&lt;/a&gt;(INTERNET Watch)

P2P をウリ文句にしたサービスが広がってきてます。前者はキャッシュ目的に、後者は配信目的に。特に、後者はデジタル著作権管理（DRM）技術との組み合わせでがんばるようです。がんばれがんばれ。

*p2*[ms]&lt;a href=&quot;http://japan.cnet.com/news/tech/story/0,2000047674,20071465,00.htm&quot;&gt;マイクロソフトもマネするサンの3Dデスクトップシステム、Looking Glass&lt;/a&gt; (CNET Japan)
この画像を見る限りではどこがおもしろいのかよく分からない。&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0407/01/news012.html&quot;&gt;「Project Looking Glass」が目指すものとは？&lt;/a&gt; のほうが分かりよいかな。オープンソースだそうで。９割のユーザーへの分かりやすさも大事だけど、残り１割のユーザーの手になじむかも大事です、と主張してみる。
</body>
</day>
<day date="2004-09-02" title="">
<body>
*p1*[ms]Windows XP SP2 インストールmemo
Windows Update から更新してみた。気になった点をリストアップ。

&lt;dl&gt;
&lt;dt&gt;セキュリティセンター&lt;/dt&gt;
&lt;dd&gt;アンチウイルスソフトをインストールしていないと、ログオンするたびに
-コンピュータが危険にさらされている可能性があります。
-ウイルス対策ソフトウェアがインストールされていない可能性があります
などと言われてしまう。

&lt;p&gt;アンチウイルスソフトを導入する予定がない場合は、「ウイルス対策」の警告が出ないように変更するべし。&lt;/p&gt;
+セキュリティーセンターの左側の「ヘルプ」から「セキュリティーセンターからの警告の方法を変更する」をクリック
+「ウイルス対策」のチェックをはずす
+「OK」ボタンを押す
&lt;p&gt;これで、ウイルス関係の警告は出なくなり、タスクトレイのアイコンも消える。自動更新やファイヤーウォールに関する警告は出るはずなので、安心安心。&lt;/p&gt;
&lt;/dd&gt;

&lt;dt&gt;パーソナルファイヤーウォール&lt;/dt&gt;
&lt;dd&gt;ほどよく使いやすそう。ただ、今まで動いていたソフトが動かなくなることはあるんだろうな。開発者やサポート泣かせの機能だ。&lt;/dd&gt;

&lt;dt&gt;ポップアップブロック&lt;/dt&gt;
&lt;dd&gt;IE にポップアップブロック機能がつく。実際に、ブロックさせてみると、レバーコントロールとIEコンポーネントの間にボタンコントロールが現れて警告が表示された。ということは、IEコンポーネントに新しい機能が追加されたわけではなく、IE6 がイベントを見張ってブロックするかどうか決定しているだけっぽい。
&lt;p&gt;タブブラウザを使っている人には無関係な機能。&lt;/p&gt;&lt;/dd&gt;

&lt;dt&gt;アイコンの変化&lt;/dt&gt;
&lt;dd&gt;タスクトレイに表示される「ワイヤレスネットワーク接続」のアイコンがワイヤレスっぽく変わって、他の「ローカルエリア接続」などと区別しやすくなった。&lt;/dd&gt;

&lt;dt&gt;オフラインファイル初期化(?)&lt;/dt&gt;
&lt;dd&gt;オフラインファイルを使う設定にしてたのに、ログオンするとオフラインで使えなくなっている。次にオンラインになったら、も一度使えるのかな？&lt;br&gt;→ マウントしてから同期を実行したら再度使えるようになりました。&lt;/dd&gt;
&lt;/dl&gt;
</body>
</day>
<day date="2004-09-06" title="">
<body>
*[net]&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0409/03/news034.html&quot;&gt;MSN Music、日本でも今秋スタート&lt;/a&gt; (ITmediaニュース)
MSN Music というのは Microsoft 版 iPod というか、iTunes でございます。ネットワークから有料で音楽をダウンロードして、聞くことができます。

米国では iTune の音楽ダウンロード数が大人気ですが、日本では著作権がガチガチなのでうまいこと進出できていないようです。

MSN Music がそこらへんの決着をどうつけるのかが見物です。&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0409/02/news026.html&quot;&gt;最大5台のコンピュータで再生できたり、楽曲のプレイリストを7回までCDに記録できたりする&lt;/a&gt;のはおそらく無理そうです。


</body>
</day>
<day date="2004-09-13" title="">
<body>
*p1*[C#]WinForms のショートカットキーで使えるキーを増やす方法
 .NET Framework では、MenuItem のプロパティでショートカットキーを選べるのだけども、この選択肢が現実的なアプリケーションで想定するものよりもかなり少ない。Ctrl や Alt と方向キー・Home・Enter などとの組み合わせすら存在しない（System.Windows.Form.Shortcut 列挙体 参照）。

これらのショートカットを利用できるようにするには、ソースコードレベルでショートカットを割り当てる必要がある。そのためには、親 Form の ProcessCmdKey をオーバーライドすればよい。

ProcessCmdKey は全てのコントロールに存在し、フォーカスのあるコントロールから順に親 Form までキーストロークが処理されるまで呼ばれ続けるらしい。

例えば、Alt+Home で特定のメニューをキックするなら次の通り。
&gt;|cs|
protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
{
	if(keyData == (Keys.Home | Keys.Alt))
	{
		menuXXXX_Click(this, null);
	}

	return base.ProcessCmdKey(ref msg, keyData); 
}
||&lt;

**参照ページ
- http://www.syncfusion.com/FAQ/WinForms/FAQ_c94c.asp#q961q
- http://pc2.2ch.net/tech/kako/1039/10396/1039646808.htmlの247-

*p2*[C#]WinForms のコントロールの枠
 .NET のコントロールは、「BorderStyle」プロパティで枠のスタイルを変更できるのだが、「None / FixedSingle / Fixed3D」の３パターンからしか選択することができなくて表現力が乏しい。

そこで、Paint イベントを捕まえてやって、その中で
&gt;|cs|
private void panel_Paint(object sender, PaintEventArgs e)
{
	Graphics g = e.Graphics;
	ControlPaint.DrawBorder3D(g, 0, 0,
		panel.Width, panel.Height, Border3DStyle.Etched);
}
||&lt;
などとすると、お好みのスタイルのボーダーを描画できる。（出展：twintailのソース）

</body>
</day>
<day date="2004-09-15" title="">
<body>
*p1*[C#][IEコントロール]AxWebBrowserをサムネール表示に使う
http://www11.plala.or.jp/acaccelerator/programming/cstips.html#DrawWebBrowserImage

このサンプルからはいくつかのTipsが分かった。
-C# の ActiveX ラッパー AxHost クラスには GetOcx() という関数があり、ActiveX コントロールを表すオブジェクトを取得できる。
-System.Runtime.InteropServices.Marshal のstatic関数 GetIUnknownForObject 関数を使えば、IUnknown を取得できる。
-System.Runtime.InteropServices.Marshal には他にも AddRef・QueryInterface・Release などがあって、生の COM を直接扱うことができそうだ。
-OleDraw 関数を使えば、ActiveX コントロールをHDCに描画できる

また、&lt;a href=&quot;http://www.microsoft.com/japan/msdn/library/ja/csref/html/vcwlkcominteroppart1cclienttutorial.asp?frame=true&quot;&gt;COM 相互運用性 第 1 部:C# クライアント チュートリアル&lt;/a&gt;(MSDN) によると、COM クラスラッパーさえ作っておけばキャストで QuerryInterface できたり、new で CreateInstance できるようだ。

&lt;font size=1&gt;&lt;s&gt;VC#.NET では、全ての ActiveX コントロールを AxHost の継承クラスとして扱えて便利だし分かりやすいのだけど、COM を直接扱うには生でするしかないのだろうか。例えば、AxHost クラスに GetUnknown とか QueryInterface が実装されていたら分かりやすかっただろうし、COM を表すオブジェクトをキャストすれば QueryInterface したことになってくれるなら分かりやすい。

この辺、調査できていないので、要調査。System.Runtime.InteropServices を眺めていると、あまりきれいに体系化されていなさそうで、嫌な予感がする・・・。解説はMSDNの「.NET Framework→.NET Frameworkを利用したプログラミング→アンマネージコードとの相互運用→高度なCOM相互運用機能」あたりにあるようだ。&lt;/s&gt;&lt;/font&gt;

*p2*[C#]VC# でプロパティを自動作成するマクロ
&lt;a href=&quot;http://www.reflectionit.nl/Macro.aspx&quot;&gt;Reflection IT Create Property Macro for Visual Studio.Net&lt;/a&gt;を試用してみる。

試しにVC#のエディタに
&gt;|cs|
string name
||&lt;
と入力して、選択状態でこのマクロを実行してみると
&gt;|cs|
private string _name;

public string Name
{
	get
	{
		return (this._name);
	}
	set
	{
		this._name = value;
	}
}
||&lt;
と展開された。_name の _(アンダーバー) が気に入らなかったので、マクロのソースのうち Const sPREFIX As String = &quot;_&quot; を &quot;&quot; に変更。

現在では、このマクロにショートカットキーを登録してうはうは生活を送っています。

*p3*[news]&lt;a href=&quot;http://www.itmedia.co.jp/lifestyle/articles/0409/15/news010.html&quot;&gt;Yahoo!、Musicmatch買収で音楽ダウンロードに参入&lt;/a&gt; (ITmedia ライフスタイル)

一瞬、Yahoo! が Macintosh を買収したのかと思ってびっくりしました。それはそうとして、音楽ダウンロードが熱くなってきそうですね。Apple vs MS vs Yahoo。あとは、Google あたりも参入しとく？

</body>
</day>
<day date="2004-09-16" title="">
<body>
*p1*[C#]TreeView や ListView のオーナードロー
Menu や ListBox は OwnerDraw できるのに TreeView や ListView はできない。Win32 の時代にはカスタムドローなる仕組みで実装できたのに不便だ。

同じことを思っている人はたくさんいるようで、The Code Project に記事が載っていた。現在は消されてしまっているようだけど、運良く web.archive.org に拾われていたのでリンクしておく。
-&lt;a href=&quot;http://web.archive.org/web/20030304203316/http://thecodeproject.com/cs/miscctrl/sortedlistview.asp&quot;&gt;C# Sorted ListView - C# Controls&lt;/a&gt;
-&lt;a href=&quot;http://web.archive.org/web/20030224185941/http://www.codeproject.com/cs/miscctrl/treeview.asp&quot;&gt;Custom draw TreeView (A companion to my Sorted ListView control) - C# Controls&lt;/a&gt;

いずれも、WndProc をオーバーライドして実現している。使っている技術は Win32 のテクニックそのままだ。ただし、GDI+ で描画できる分、ちょっとだけコーディングが楽な気はするが・・・。
</body>
</day>
<day date="2004-09-23" title="">
<body>
*[net]&lt;a href=&quot;http://www.itmedia.co.jp/lifestyle/articles/0409/22/news016.html&quot;&gt;“デジタルホーム”は、意外と不自由&lt;/a&gt; (ITmedia)
&gt;&gt;
LANの中でコンテンツを「移動」させることはできるが、「コピー」をすることはできなくなるのだ。例えば、リビングのPCで録画したコンテンツの複製を二つ作成し、一つは自室のPCで楽しみ、もう一つは家族がポータブルプレーヤーで楽しむ、といったことは不可能になるわけだ。

(中略)PCはその汎用性の高さ、言い換えれば“私的複製のしやすさ”が災いして、放送や音楽、映画などのコンテンツ業界からは“コピーマシン”のように見られてきた経緯がある。
&lt;&lt;

逆に、インターネットを超えて著作物の移動をすることができたなら、ＴＶキャプチャした動画ファイルを友達に貸すことができたり、貸したけど帰ってこないよ、とか又貸しされたよ、とかいう状況が出てきて楽しそう。ソフトウェアの不正コピーも同じようにしてできないようにすると、オークションももっともっと健全になるだろう。

複製できないパソコンを見てみたい。これができるようになったら、ツタヤも喜びそう。マイクロソフトさんも、WinFS とか言ってないで、そういうことが可能になるファイルシステムを作ってください！　ＯＳ売れなくなるよ！
</body>
<comments>
<comment>
<username>rarul</username>
<body>同じニュースを取り上げても、こうまで反応が違うのか・・・夢のない学生らるるでした。</body>
<timestamp>1096183751</timestamp>
</comment>
</comments>
</day>
<day date="2004-10-08" title="">
<body>
*p1*[C#]JScriptやVBScriptをプログラムから利用する
**COM では IActiveScript を利用する
サンプルは&lt;a href=&quot;http://www.geocities.co.jp/SiliconValley-PaloAlto/9251/ruby/c.html&quot;&gt;How to program RubyScript in C++&lt;/a&gt; とか。

**C# では Microsoft.Vsa.IVsaEngine を利用する
一番上が一番分かりやすかった。
-&lt;a href=&quot;http://msdn.microsoft.com/msdnmag/issues/02/08/VisualStudioforApplications/default.aspx&quot;&gt;Scripting and .NET: Visual Studio for Applications Provides Customized Scripting Facilities for Your .NET Project&lt;/a&gt; (MSDN Magazine)
-&lt;a href=&quot;http://www.csharphelp.com/archives/archive102.html&quot;&gt;C# and VSA&lt;/a&gt;
-&lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnclinic/html/scripting06112001.asp&quot;&gt;Welcome to the MSDN Library&lt;/a&gt; (MSDN)
-&lt;a href=&quot;http://www.soho-works.net/BLOG/273.asp&quot;&gt;BLOG&lt;/a&gt; (VB.NET で中国語だけど)
-&lt;a href=&quot;http://www.gotdotnet.com/community/messageboard/Thread.aspx?id=212303&amp;Page=1#212576&quot;&gt;C# で eval を実現するために JScript を利用&lt;/a&gt; (GotDotNet)

-JScript のグローバルな関数は Reflection を使って呼ぶのは難しい（不可能ではなさそうだが、仕様変更の可能性はある）(http://www.dotnet247.com/247reference/msgs/1/5596.aspx)


**C# では System.CodeDom を利用してもよい
-&lt;a href=&quot;http://www.west-wind.com/presentations/DynamicCode/DynamicCode.htm&quot;&gt;Executing Dynamic Code in .Net&lt;/a&gt;
</body>
</day>
<day date="2004-10-19" title="">
<body>
*[net]&lt;a href=&quot;http://www.itmedia.co.jp/anchordesk/articles/0410/14/news024.html&quot;&gt;サーバ型放送～異なるNHKと地上波民放の思惑（後編）&lt;/a&gt; (ITMedia)
おもしろいと思った部分を勝手に引用。
&gt;&gt;
一番便利な“オンデマンド”は、昨日やっていた番組を見逃したから、ちょっと見たいとか、一週間くらい前にやった番組を、評判になっているから見てみたいとか、そういうことなのではないかと思う。

しかし、この場合の問題は、そうしたサービスがあまり便利に使えるようになってしまうと、今の民放が行っている放送事業の枠組みそのものが、要らなくなることだ。視聴者からすると、「何も急いで家に帰って見る必要はない」ということになってしまうから、民放の立場からすると、そこに本気で踏み込むのには、かなり高度な経営判断が必要になるだろう。

ただ、あまりグズグズしていると、外付けのHDD付きDVDレコーダーにEPGを組み合わせれば、後から自分の見たいものだけつまみ出して見るということはできてしまう。ユーザーからすればそれで十分だと思われてしまったら、サーバ型放送不要論も出てくることになりかねない。それゆえ、放送業界もあまり遅らせたくないと考えているようだ。
&lt;&lt;

HDDレコーダの登場により、テレビの視聴形態は変わりつつある。HDDレコーダが民放の全ての番組を常時、録画し続けるようになってしまうと尚更だろう。そうなる前に、同じ仕組みをテレビ局主導で実現しないと、VOD のうまみがなくなってしまうだろう。

逆に、もし VOD 用の個人の嗜好をもとにした新しい広告モデルが完成すれば、広告業界を一変させることになるだろう。インターネットはその便利さ故に爆発的に広まってはいるが、広告モデルと言えばバナー広告ぐらいしか登場していない。

VOD の広告モデルが持つ情報さえあれば、インターネットよりも便利な双方向通信が可能になるのではないか。テレビでお店の広告を見て、実際にお店のページを表示すると思考情報を元にお薦め商品を表示して、購入する段になったら個人情報を送信して自動引き落としを行う・・・。もちろん、プライバシーの問題はあるものの、VOD の広告モデルが一端、嗜好情報や個人情報を手にしてしまうと、そこではインターネットを包括するような双方向通信の舞台が広がっているような気がする。
</body>
</day>
<day date="2004-10-27" title="">
<body>
*[memo]研究メモ
メモです、すません。

&lt;dl&gt;
&lt;dt&gt;scale free network&lt;/dt&gt;
&lt;dd&gt;スケールフリーネットワーク（はてなキーワード）&lt;/dd&gt;
&lt;dd&gt;http://eie507.eie.polyu.edu.hk/ss-submission/A3%20Scale-Free%20Network.htm&lt;dd&gt;
&lt;/dl&gt;

**作り方
０秒で m 個のノードを置く。１秒経つごとに、１つのノードが m0 (≦m) 個の枝と共に参加する。このとき、枝が接続する相手がノード i である確率は k&lt;sub&gt;i&lt;/sub&gt; / Σk&lt;sub&gt;i&lt;/sub&gt; で与えられる。ただし、k&lt;sub&gt;i&lt;/sub&gt; はノード i が接続している枝数である。

-なんか、この通りに作ったら１～２個のノードに接続が集中しすぎたんだけど、そんなものなんだろうか。作り方にコツがありそう・・・。
</body>
</day>
<day date="2004-11-01" title="">
<body>
*p1*SNSやBlogもリッチになる。Macromedia CTOインタビュー (ITmedia)
&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0411/01/news007.html&quot;&gt;SNSやBlogもリッチになる。Macromedia CTOインタビュー&lt;/a&gt; (ITmedia)

Macromedia Flex と言う製品が販売されるにあたってのインタビューとなってます。

このソフト、プログラマ向けの FLASH 作成ソフトだそうです。デザイナーが作成する見た目にとらわれず、アプリケーションの実装を行える点が肝の模様。例えば、JavaScript でインタラクティブにしようとすると、プログラマはかなりのコードをHTMLの構造に依存してしまうため、デザイナーの気まぐれに足を引っ張られることとなってしまうでしょう。CSS もデザインと構造を分離すると宣言しててある程度の効果は上げているものの、結局ブラウザのバージョンごとの解釈の違いに悩まされることが多いのが実情です。

そこで、Flash ならプラグインもそれなりにインストールされているし、デザイナーは山ほどいるし HTML より表現力は明らかに豊かだし、あとはプログラマさえ揃えば素敵なサイトを構築できることでしょう。

プログラマの視点からすると、デザインができあがらなくても仕様さえ定まっていれば開発を開始できそうなのがうれしい。適当なテスト用の GUI を作っておいて、そいつを使ってコンポーネントの作成をちゃっちゃとできますよね。なんだか、XP(eXtreme Programming)のテストファーストみたい。もしくは MVCモデルでいう V と MC の分離も実現している。

デザインと実装の分離は遙か昔から言われ続けているけど、ここに来てやっとそういったことを実現しやすい環境ができつつあるようですね。さて、MS の XAML-Avalon がどれほど対抗できるかがみどころです。どのサーバーでも使える分だけ、Flash が有利にも思えるけど・・・。
</body>
</day>
<day date="2004-11-09" title="">
<body>
*p1*&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0411/05/news082.html&quot;&gt;ラジオ録音にもタイムシフトをもたらした「RadioShark」&lt;/a&gt; (ITmediaニュース)
最近、めっきりラジオを聞く機会がなくなったのだけど、こう言うの日本でも発売されれば、聞きたい番組をどんどん保存できていいだろうなぁ。NHK英会話入門をとりだめてみたり。。。

*p2*[unix]gcc にて __gxx_personality_v0のエラー
UNIXに関しての知識はきわめてへぼいわたくしなので、こういうエラーで悩んだりします。

&gt;|sh|
$ gcc test.cpp
Undefined                       first referenced
 symbol                             in file
__gxx_personality_v0                ./cc1l169s.o
std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; 
&lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;
&amp;, char const*)./cc1l169s.o
||&lt;

gcc を使わずに、g++を使えば問題なくコンパイルできました。
&gt;|sh|
$ g++ test.cpp
||&lt;
はぁ。g++ は C++ をコンパイルするオプションをつけて gcc を起動してくれるラッパーのようです。

</body>
<comments>
<comment>
<username>siio</username>
<body>エラーメッセージをgoogle検索してここにたどり着き、解決しました。ありがとうございました。助かりました。</body>
<timestamp>1124879735</timestamp>
</comment>
</comments>
</day>
<day date="2004-11-14" title="">
<body>
*p1*[C#]IDocHostUIHandlerの設定方法
IEコンポーネントでIDocHostUIHandlerを設定する方法が詳しく書いてあります。

http://www.codeproject.com/books/0764549146_8.asp?df=100&amp;forumid=13574&amp;exp=0&amp;select=719227

このページは本の記事の一部で、おそらく広告用なのでサンプルはアップロードされてません。ただ、http://www.faisoncomputing.com/samples/programming_samples.htm にてこっそり転載されてますので、ダウンロードできちゃいます。
</body>
</day>
<day date="2004-11-24" title="">
<body>
*p1*[C#]Microsoft.mshtml.dllの怪
 .NET アプリで mshtml をいじることはよくあるけど、実行するためには Microsoft.mshtml.dll 必要になります。このファイル、開発環境 .NET SDK には付属しているのに、 .NET Framework をインストールしただけでは導入されないくせ者らしい。じゃあ、パッケージに一緒に含めたらいいや、と思ったら、なんと7.8Mのファイル。こんなんパッケージに含めた日にゃー、Web サーバーがパンクしちゃいます。

そこで、このDLLを使わずに、mshtml を InvokeMember を使って呼び出す方法があるようです。
-&lt;a href=&quot;http://tdiary.seesaa.net/article/396477.html&quot;&gt;「旅行びと日記」日記: .NETでのMicrosoft.mshtml.dll問題&lt;/a&gt;
-&lt;a href=&quot;http://homepage3.nifty.com/midori_no_bike/CS/sample.html#257&quot;&gt;緑のバイク ★ 初めてのC# プログラム全般&lt;/a&gt;

ラッパーを書くか、Web サーバーにがんばらせるか...

追記：そんなことをしなくても、インターフェースを定義すればよさそう。
-&lt;a href=&quot;http://www.syncfusion.com/FAQ/WinForms/FAQ_c100c.asp#q841q&quot;&gt;29.2 How can I enable editing for the WebBrowser? [Windows Form FAQ]&lt;/a&gt;
</body>
<comments>
<comment>
<username>rarul</username>
<body>twintailはMicrosoft.mshtml.dllを同封してますな。lzh圧縮でほぼ1/5のサイズになってるようで。それでもtwintailの2.5MBのうちの1.7MBですか。</body>
<timestamp>1101310046</timestamp>
</comment>
</comments>
</day>
<day date="2004-12-02" title="">
<body>
*p1*[memo]Windows Update で 0x80070570 エラー
XP SPを当てた直後に出ました。v5 になってから再起動していなかったからかな？　再起動すると直ったよ。after reboot, this error disappears.
</body>
</day>
<day date="2004-12-05" title="">
<body>
*p1*[pc]&lt;a href=&quot;http://www.itmedia.co.jp/anchordesk/articles/0411/29/news008.html&quot;&gt;「仮想敵」と、今そこにあるホームネットワークの現実&lt;/a&gt; (ITMedia)
１人暮らしであればテレビとビデオが１箇所にあるだけで不便には思わないのだけど、いくつかの部屋がある家だとすると、各部屋やお風呂・トイレにモニターがあって、そこから家庭内ストレージサーバーに蓄積されている映像や音楽を楽しめたら非常に素敵だろうな、と思う。

それを解決するかもしれないのが、ここで紹介されている DiXiM。サーバーとなる PC にインストールすると、 DiXiM クライアントをインストールしたPCや UPnP AV に対応した AV 機器はサーバーの持っているコンテンツを一覧表示して、ストリーミングで再生することができるらしい。

個人的には、当面は サーバー：[PC＋DVD-ROM＋TVキャプチャ]、クライアント：PC、相互接続は Samba でいいかなーと思ってます。まだまだ、市販製品には自由度で負けてない。手軽さで負けるようになってきたら、考えるかもしれない。
</body>
<comments>
<comment>
<username>らるる</username>
<body>DLNAは、たとえばWMAの著作権保護されたようなコンテンツでもホームネットワーク越しに再生できるようなのを目標にしてるそうな。暗号化されたストリーム形式の提案っすね。http://bb.watch.impress.co.jp/cda/shimizu/7629.html こんな風にPC上のコンテンツをテレビで見られたら最高。</body>
<timestamp>1102256175</timestamp>
</comment>
</comments>
</day>
<day date="2004-12-15" title="">
<body>
*p1*[soft]PuTTY で dynamic application-level port forwarding
セキュリティーホールmemoさんにのっていた &lt;a href=&quot;http://www.ku3g.org/negi/diary/?20041211#200412111&quot;&gt;ssh を SOCKS proxy として使う&lt;/a&gt;(ねぎ式さん) が便利そう。

ssh のポートフォワーディングにはリモート・ローカル・ダイナミックの３種類があって、前の２つはよく知られているけど、ダイナミックはいまいち知られていない。これは、なんと、ssh を Socks Proxy として使うことができるのです。localhost の Socks Proxy 経由でアクセスすると、ssh でログインした先からコネクションがはられているように見える訳です。

**PuTTYでの設定方法
さて、ssh のコマンドラインなら -D オプションを使用すればダイナミックポートフォワーディングできますが、PuTTY でこれを実現するにはどうしたらよいでしょう。まず、バージョンが 0.54(2004年02月12日公開) 以上を用意しましょう。このバージョンから、ssh の設定の 'Tunnels'(トンネル) パネルに 'Dynamic'(ダイナミック)が追加されています。

+'Tunnels'(トンネル) パネルを表示して'Dynamic'(ダイナミック) を選択
+'Source port'(源ソース) にローカルのポート番号(1080など)を指定。'Destination'(送り先) には何も入力する必要がありません。
+接続する

**クライアント(ブラウザ・メッセンジャーなど)の設定
例えば、IE から Socks サーバーを使うには次のようにします。
-インターネットオプションの「接続→LANの設定」で「プロクシサーバーを使用する」にチェック
-詳細設定ボタンを押し、「Socks」に「localhost」「1080」と入力。「Socks」以外はからにする
これで、ssh 先からアクセスしているように見えます。

メッセンジャーなんかでも同様。個人的には、大学のSocksサーバーが糞で、ファイル送信ができなかったり、メッセージのロストが多かったのですが、ssh socks server 経由なら無問題になってウハウハです。
</body>
</day>
<day date="2004-12-20" title="">
<body>
*p1*[net]gree.jpのパスワード埋め込み問題
ソーシャルネットワークの gree に穴（？）らしきものを発見。

http://www.gree.jp/?mode=common&amp;act=edituser ではパスワードを変更できるのだけど、このページにパスワードが生で埋め込まれている
&gt;&gt;
&amp;lt;input type=&quot;password&quot; name=&quot;user_password&quot; size=&quot;20&quot; value=&quot;XXXXXXX&quot;&amp;gt; (6文字以上,20文字以内,半角英数のみ)
&lt;&lt;

普通は、パスワードの変更をするときだけ新しいパスワードを入力するようにするんじゃないだろうか。

パスワードの確認入力がないのもひどい。

パスワードの生データがそのままデータベースにつっこまれているのも気持ち悪い。パスワードは MD5 みたいに不可逆な形式で保存していてほしいよ。
</body>
</day>
<day date="2004-12-23" title="">
<body>
*p1*[soft]Acrobat Reader 7.0 雑感
http://d.hatena.ne.jp/ROMman/20041223#p4 によると
&gt;&gt;
最初の起動は今まで通りかなりかかります。

一度起動してしまえばメモリに常駐して次からの起動が速くなるだけだし、その常駐ソフトAcroRd.exeは今見たら48Mものメモリを占有しています。
&lt;&lt;

だそうです。非常にダメだよ、これ。

PDF リーダーのライト版がほしい。PDF の仕様は公開されているので、一回、作ってみようかと思ったのだけど、PDF の仕様書がなんと1000ページぐらいある。これは厳しい。生半可な気持ちでは作れない。

ブラウザで動くときに Flash プレーヤーぐらい軽かったら文句いいません。フォントは制作者の意図したものじゃなくてもいいです。印刷したくなったときにだけ Adobe Reader を起動できたら文句言わないよ。文章の雰囲気だけを見たい、ってことはありますもの。Google の検索結果が PDF だと、表示するかどうか、本当にためらうんだよなぁ。
</body>
<comments>
<comment>
<username>rarul</username>
<body>そんなにとよんにhttp://www.forest.impress.co.jp/article/2004/01/13/adobereaderspeedup.html</body>
<timestamp>1103825435</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>補足ありがとうございます。そのソフトのことは存じ上げております。</body>
<timestamp>1103847132</timestamp>
</comment>
</comments>
</day>
<day date="2004-12-29" title="">
<body>
*p1*[c++][dev]C++.NET でクラス宣言するときの注意点
C++ で他クラスを含めるには、そのクラスの宣言をインクルードする必要があるけど、他クラスへのポインタだけでいい場合は、次のようにすればよい。
&gt;|cpp|
class A;

class B
{
private:
    A* objectA;
}
||&lt;


C++.NET でマネージドクラスをポインタとして含むには次のようにする。
&gt;|cpp|
public __gc class A;

public __gc class B
{
    A* objectA;
}
||&lt;

こうしないと、マネージドクラスであることが伝わりません。名前空間の宣言がある場合は、ちゃんと同じ名前空間の中で宣言してやらないとダメ。
&gt;|cpp|
namespace sample
{
    public __gc class A;

    public __gc class B
    {
        A* objectA;
    }
}
||&lt;

</body>
</day>
<day date="2005-01-02" title="">
<body>
*p1*TVとPCの連携がしたいぞ
**Linux + TVキャプチャ
MythTV というソフトがある
-&lt;a href=&quot;http://pcweb.mycom.co.jp/special/2004/linuxrec/&quot;&gt;【特集】Linuxで作るHDDレコーダ&lt;/a&gt; (MYCOM PC WEB)
-&lt;a href=&quot;http://www.devicehackers.com/&quot;&gt;devicehackers.com&lt;/a&gt; : MythTV を搭載した既製PC

**Windows + TVキャプチャ
-機能はTVキャプチャと付属ソフトの性能に依存
-豊富なカスタマイズ性
-Windows をサーバーとして常時起動するのは抵抗あり(?)

**TOSHIBA DVD HDD Recorder(ネットdeダビング) + Virtual RD
ネットdeダビング対応機から、PC へのダビング（ファイルのコピー）が LAN で行えるようです。これは便利。
-&lt;a href=&quot;http://hobby7.2ch.net/test/read.cgi/av/1102123611/&quot;&gt;東芝HDD＆DVDレコ ネットdeダビング解析 3&lt;/a&gt;
-&lt;a href=&quot;http://www.roy.hi-ho.ne.jp/masao/rd/&quot;&gt;「VirtualRD for Windows」と「番組ナビゲータ」の配布所&lt;/a&gt;
</body>
</day>
<day date="2005-02-06" title="">
<body>
*p1*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2005/01/28/6250.html&quot;&gt;米A9.com、街の風景まで映し出す“次世代イエローページ”公開&lt;/a&gt;
アメリカはローカル検索が盛んで楽しそう。

個人的には、京都でこれと同じ構想のものをやってみたくて &lt;a href=&quot;http://kyoto.so-name.info/&quot;&gt;kyoto.so-name.info&lt;/a&gt;(以下、so-name) を立ち上げてみたのだけど、個人の力では大手にはかなわぬ。so-name の目標としていたのは、地図とお店情報の連携。地図上に１つのお店の位置を表示するのは他のサイトで既に実現されているのだけど、掲載されているお店を地図上にずらずらっと並べるインターフェースは見たことがなかったのでやってみたのです。ところが、そのインターフェースが、A9 では軽々と実現されていて、しかも so-name よりユーザビリティがよかったので、かんなりがっくし。

so-name の今後は、Wiki＋Map という Wikipedia のような方向や、さらに SNS を絡めた方向も考えています。でも、記事を書いてくれる人ってそんなに出てくるのかなぁ。
</body>
<comments>
<comment>
<username>rarul</username>
<body>お店を登録するフェーズと、お店の評判をカキコるフェーズとに分けた方がいいのかなぁ。とりあえず、Wikiと地図を絡めるという案に期待。</body>
<timestamp>1107706105</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>確かに，登録と書き込むのは分けた方がいいかもしれないですな．blogmap（地図の方）が斬新だったなぁ．http://dsj.s32.xrea.com/map/guestmap.cgi?mode=frame</body>
<timestamp>1107708089</timestamp>
</comment>
<comment>
<username>rarul</username>
<body>「blogmap」っていう同名サービスがやたら多くて困ったものだ。。っと愚痴ってみる。</body>
<timestamp>1107713193</timestamp>
</comment>
<comment>
<username>rarul</username>
<body>旧上林研の「京都サーチ」で似たようなのやってたことを思い出したのではっておこうっと。http://www.db.soc.i.kyoto-u.ac.jp/research/KyotoSEARCH/v3.0b/</body>
<timestamp>1107713258</timestamp>
</comment>
<comment>
<username>akippooonn</username>
<body>これはまた違うかな？？自転車マップ。こんなだったら書き込みしやすいなーと。一時期好きで書き込んでた。&lt;br&gt;http://www.kankyoshimin.org/bicycle/map/</body>
<timestamp>1108656610</timestamp>
</comment>
<comment>
<username>akippooonn</username>
<body>京都関連だとこんなのもあるよん。http://www.kyoto-tv.com/map/map.html&lt;br&gt;&lt;br&gt;&gt;個人の力では大手にはかなわぬ&lt;br&gt;わかる。。やりたいけど、リピートしようにも、一日に食べられる数が…資金が… って違いますかね。。みんなで書き込めたら補えのかなあ。&lt;br&gt;&lt;br&gt;にとよんの東京グルメマップに期待～♪</body>
<timestamp>1108656741</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>なるほど。国土地理院の許可をもらったら、地図を使ってもいいものなんかねぇ・・・。</body>
<timestamp>1108693926</timestamp>
</comment>
</comments>
</day>
<day date="2005-02-18" title="">
<body>
*p1*[ms][soft][net]いまさらだけどIE7
&lt;a href=&quot;http://slashdot.jp/articles/05/02/16/029257.shtml?topic=41&quot;&gt;スラッシュドット ジャパン | IE7ベータが今夏登場予定&lt;/a&gt;

asahi.com のトップニュースにもなってました。はてさて、どのような新機能でみなさまから注目を浴びることになるのでしょうか。blog が注目を浴びている情勢を反映して、CSS の解釈がまともになることを信じるのみです。
</body>
<comments>
<comment>
<username>rarul</username>
<body>セキュリティがとかいってるので、CSS周りの強化はない予感。&lt;br&gt;WinXPSP2オンリー向け提供の模様。</body>
<timestamp>1108755556</timestamp>
</comment>
</comments>
</day>
<day date="2005-02-22" title="">
<body>
*p1*[net]&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2005/02/21/6535.html&quot;&gt;NHK、テレビやラジオ番組のインターネット配信を計画&lt;/a&gt; (INTERNET Watch)
ここまで大々的に始まるのは素敵なことだ。

&gt;&gt;
ニュース・気象情報番組をはじめ、学校放送番組、語学番組、福祉情報番組、生活情報番組のテレビ放送映像やラジオ放送の音声で、スポーツ中継時の得点情報や地上デジタルデータ放送番組の提供も予定する。また、教育、福祉、医療、生活、気象の5分野に関しては、テレビやラジオ放送の内容を補完する関連情報も掲載していくという。 
&lt;&lt;

プロジェクトX は配信されませんか。

*p2*&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2005/02/21/6516.html&quot;&gt;NTT、触れるだけで高速通信できる新技術「レッドタクトン」&lt;/a&gt; (INTERNET Watch)
asahi.com でも取り上げられていましたが、インパクト強すぎ。おもしろいなぁ。

電子鬼ごっこ、とかいうアホな応用例しか思いつきませんでした。すいません。
</body>
</day>
<day date="2005-03-29" title="">
<body>
*p1*業務連絡
うっかりと nitoyon.com のドメイン有効期限が切れちゃいました。
http://nitoyon.so-name.info/ に一時的に避難しましたので、こちらからご覧下さい。
</body>
<comments>
<comment>
<username>nitoyon</username>
<body>復活した模様です。めでたい。</body>
<timestamp>1112260356</timestamp>
</comment>
</comments>
</day>
<day date="2005-07-04" title="">
<body>
*p1*&lt;a href=&quot;http://www.itmedia.co.jp/mobile/articles/0507/04/news010.html&quot;&gt;見えてきたWiMAXと携帯、融合のシナリオ（前編）&lt;/a&gt;

&gt;&gt;
ソフトバンクは、「ADSL開始当時からFMCを見据えていた」とアピールする。具体的には、ADSLモデムに無線LANモジュールを挿し込むスペースを用意していた。各ユーザーに無線LANパックに加入してもらい、無線LANカードが挿さったモデムにネットワーク側からソフトウェア更新を行う。するとある瞬間に「スイッチオン」で400万超のユーザーが「点在するアクセスポイント群」に変わる――。これがソフトバンクの主張するFMCの姿だった。
&lt;&lt;

えぇぇ、すごい。livedoorどころじゃないような気もする。
</body>
</day>
<day date="2005-07-28" title="">
<body>
*p1*[dev]PHP 4.3 と MySQL 4.1 の接続性
PHP から MySQL に接続しようとすると
&gt;&gt;
Client does not support authentication protocol requested by server; consider upgrading MySQL client
&lt;&lt;

などと言われてしまう問題がある。

**原因
これは PHP 4.3 の MySQL ライブラリの問題があるようだ。PHP 4.1 なら接続できる、という話もある。
http://oshiete1.goo.ne.jp/kotaeru.php3?q=1121173

もしくは、MySQL 4.1 では、パスワードの暗号化方法が変わったという問題もあるようだ。MySQL 4.1 以前と PHP 4.3 なら接続できるのかもしれない。
http://dev.mysql.com/doc/mysql/ja/old-client.html
&gt;&gt;
MySQL 4.1 では、パスワードハッシュアルゴリズムに基づく認証プロトコルが使用されていますが、これは旧クライアントが使用しているものと互換性がありません。 サーバを 4.1 にアップグレードすると、旧クライアントで接続しようとした場合に、以下のエラーメッセージが発生する可能性があります。 
&lt;&lt;


**解決策
- --old-passwords オプションで MySQL を起動する
-旧パスワードを設定する。
&gt;|
mysql&gt; UPDATE user SET Password = OLD_PASSWORD('mypass')
    -&gt; WHERE Host = 'some_host' AND User = 'some_user';
mysql&gt; FLUSH PRIVILEGES;
|&lt;
-PHP で 改良版MySQL拡張サポート(mysqli) を利用する。
</body>
</day>
<day date="2005-09-01" title="">
<body>
*p1*[net]ITmedia +D
ITmedia のサイトの一部コンテンツが ITmedia +D として&lt;a href=&quot;http://plusd.itmedia.co.jp/&quot;&gt;独立した&lt;/a&gt;。去年ぐらいからだろうか、ITmedia に家電のニュースが出始めてきて、いまいち意図が分からなかったのだけど、中川編集長の「&lt;a href=&quot;http://plusd.itmedia.co.jp/lifestyle/articles/0509/01/news021.html&quot;&gt;オープンにあたって&lt;/a&gt;」の記事を読んでやっと理解できた。今回独立したカテゴリは、デジタル家電・ポータブルプレイヤー・ケータイ・ゲームなど。いずれも PC ではないけれど PC 的な機能を持ち始めている製品達だ。これらのジャンルに敏感なコンシューマー層は、PC ニュースを読んでいた人とは違う。そういった層にアピールするために、あえて PC 系ニュースと隔離することで、新しい読者層を獲得しようとしているのだ。

ITmedia +D では他にも注目すべきポイントがある。まずは RSS 配信。ITmedia がやっと重い腰を上げてくれたのがうれしい。個人的には本家も対応してほしいが。もう１つは、サイトがCSSデザインである点。軽く試したところ、IE6 でも Firefox でもきちんと表示された。CSS でクロスブラウザを気にしながらここまで段組する労力は大変だろう。アイコンも写真も素敵にレイアウトされている。凝ってるなぁ。ただ、ソースを見ていて気になる点が。id 属性が同じ値が１つのページに何箇所も出てくる。HTML 的にはダメだよね・・・。
</body>
</day>
<day date="2005-09-05" title="">
<body>
*p1*[JavaScript][web]JavaScriptでリストビュー
http://www.activewidgets.com/grid/

すごい。よくここまで実装するな。Windowsのリストビューそっくり。エクスプローラの「詳細」と言えば分かっていただけるだろうか。これを使えば面白いWebアプリケーションが作れそうだ。Ajax ばりばりで。

利用するにはGPL必須。嫌ならば金を払え、ということらしい。

さらに、&lt;a href=&quot;http://www.activewidgets.com/general.faq.releases/2-0.html&quot;&gt;2.0 のサンプル&lt;/a&gt;を見るとタブビューやツリービューとかグリッドビューがある。リストビューの動的ローディングなんかもある。気になる存在だ。
</body>
</day>
<day date="2005-09-06" title="">
<body>
*p1*&lt;span class=&quot;tag&quot;&gt;[pc][ms]&lt;/span&gt;&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0509/02/news078.html&quot;&gt;ITmedia エンタープライズ：Windows Vistaに“フリーズドライ”機能&lt;/a&gt;
パッチあてには再起動がつき物だ。たとえば、IEコンポーネントのレンダラである mshtml.dll にパッチを当てようとしても、この DLL が利用されている最中にはファイルを上書きすることができない。となると、アウトルックやタブブラウザなどのIEコンポーネントを利用しているアプリケーションが起動しているとパッチが当てれないわけだ。、再起動直後にファイルを更新する手法を利用するしかない。

Windows Vista のフリーズドライ機能を使えば、再起動する必要はないらしい。記事によると、こういうことになっているらしい。
&gt;&gt;
更新しなくてはならないファイルをどのアプリケーションが使っているかを判断し、そのデータを保存してアプリケーションを閉じ、ファイルをアップデートしてからそのアプリケーションを再起動する
&lt;&lt;
気になるのは、「データを保存して」の部分だ。どうやってデータを保存するんだろう。もし、編集中のファイルを保存する、というだけの機能なんだったら不良品になってしまう。あとでやり直し（アンドゥ）をできるという保険の元で実験しながらファイルを編集することはよくある。そんな実験中に再起動がかかってしまったらどうだろう。アンドゥの情報が消えてしまったままアプリケーションが起動してくるようなら、それは欠陥品となってしまう。

記事中では、Windows 評論家エド・ボット氏の想像で
&gt;&gt;
そのインフラは既に、Windows XPの全バージョンに含まれているハイバネーション機能にあるようだ
&lt;&lt;
と述べられている。しかし、ハイバネーション機能を実現するとしていると、ダイナミックローディング中の DLL もメモリ中のデータとして一緒にメモリダンプのデータに含まれてしまうような気がする。アプリケーションのメモリ空間だけをダンプできるんだろうか。たとえそれができたとしても、ネットワークプログラムだと、TCP の通信が一瞬途切れてしまうことになるので、やはり完璧には実現できないんじゃないだろうか。

一介の開発者としては、別の点に注目が行く。Freeze Dry 機能を API から実現できるようになると、アプリケーションのサスペンド・レジュームを容易に実装できるようになるのだ。これは非常に魅惑的だ。OS 全体のサスペンド・レジュームなら今までもあったのだが、アプリケーションごとにできるのは素敵だ。大きい動画のエンコーディングをしているときには PC の電源を落とせないのは不便に感じていた。もし、API が提供されるのならば、×ボタンの横に△ボタンを追加する「なんでもサスペンド」なるフリーソフトを作ってみたくなるよ。
</body>
</day>
<day date="2005-09-12" title="">
<body>
*p1*&lt;a href=&quot;http://japan.cnet.com/news/media/story/0,2000047715,20087083,00.htm&quot;&gt;マイクロソフトのウェブ戦略、来週の開発者会議で明らかに&lt;/a&gt; (CNET Japan)
MS vs Google が分かりやすくまとまってますね。

いよいよ、MS がデスクトップサーチ・Virtual Earth・メッセンジャーの API を公開しにかかるようだ。よくよく考えてみれば、Google は既に公開していて、後追い感はあるものの、MS が公開することで開発者の幅が広がることは素直に喜びたい。

これらの API をうまく利用すれば、一昔前に描いた .NET Passport の夢も実現できるような気がしないでもない。&lt;s&gt;Typepad&lt;/s&gt; TypeKey みたいな利用法ができるんじゃないかな。Web 一元化 ID としては面白そうじゃないかな。

Yahooはといえば、&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0509/07/news031.html&quot;&gt;サイトの信頼性を守るために、サービス開発が停滞&lt;/a&gt;しているようだ。普通そうだよな。尋常じゃない開発速度を保てる MS と Google を尊敬。技術会社同士の決闘は面白い。
</body>
</day>
<day date="2005-09-17" title="">
<body>
*p1*[ms]Excel でカーソルキーを押すとスクロールしてしまう問題が起こったら
Excel を利用していて、カーソルキーを押したらその方向に画面がスクロールしてしまう状況に陥ることがある。ヘルプを見てもそれらしい解説はなかなか見つからない。

そんなときは、キーボードの「ScrollLock」がONになっている可能性がある。Excel は ScrollLock に機能を割り当てている数少ない、そして代表的なアプリケーション。ただ、分からないままこの状態になってしまうと、かなり悩んでしまうのでご注意を。

*p2*[GoogleMapsAPI]display:none の状態で初期化するとバグる Google Maps API さん
**症状
Google Maps を表示させる div タグのスタイルに &quot;display : none&quot; が設定された状態で GMap オブジェクトを作成するとマップの中心がずれてしまう。具体的には次のような症状が発生する。
-コントロールが描画されなかいことがある。
-地図の一部分がロードされないことがある。ロードされていない部分をドラッグしても地図は移動しない。
-地図上でダブルクリックすると、通常はダブルクリックした場所が中心になるが、変な場所に移動する（こちらの環境では中心が地図の左上に移動した）。

通常は、&quot;display : none&quot; のまま作成させるようなことはないかもしれないが、Google Maps の表示・非表示を動的に切り替えようと思っている人は注意。

**対処法
初期化する前に div タグを表示してやる。これだけ。

・ダメな例
&gt;||
&lt;div id=&quot;map&quot; style=&quot;display : none&quot;&gt;&lt;/div&gt;

&lt;script&gt;
var mapElement = document.getElementById(&quot;map&quot;);

new GMap(mapElement);
// その他 Google Map 初期化処理

mapElement.style.display = &quot;block&quot;;
||&lt;

・いい例
&gt;||
&lt;div id=&quot;map&quot; style=&quot;display : none&quot;&gt;&lt;/div&gt;

&lt;script&gt;
// 先に表示する
var mapElement = document.getElementById(&quot;map&quot;);
mapElement.style.display = &quot;block&quot;;

new GMap(mapElement);
// その他 Google Map 初期化処理
||&lt;

**追記
&lt;a href=&quot;http://blog.mogya.com/2009/09/load-googlemaps-on-hidden-object.html&quot;&gt;[GoogleMapsAPI]GoogleMapを非表示でロードする - もぎゃろぐ&lt;/a&gt; によると、
&gt;&gt;
GMap2だと、sizeプロパティを指定できるので、非表示のままロードすることも可能になっています。
&lt;&lt;
だそうです。

</body>
</day>
<day date="2005-09-22" title="">
<body>
*p1*[pc]デジタルメモ帳あれこれ
はてなブックマークでデジメモ A-501があったので類似商品を色々調べてみた。

文字列情報ならデジタルでメモをとったほうが早いが、頭の中のイメージを整理しながら書いたり、ちょっとした図をメモする場合はどうしてもアナログなノートには負けてしまう。デジタルではちょちょっと矢印をしてコメントを書くのもめんどくさかったりする。

デジタルメモ帳のソリューションには大きく分けて２種類あって、台座が座標を読み取るタブレットタイプと、ペンが座標を読み取るデジタルペンタイプがあるようだ。

**&lt;a href=&quot;http://www.acecad.com.tw/digimemo/dm-a501.htm&quot;&gt;デジメモ A-501&lt;/a&gt; (&lt;a href=&quot;http://www.vshopu.com/dma501/index.html&quot;&gt;日本販売元&lt;/a&gt;) [タブレットタイプ]
値段の安さが魅力的。フラッシュメモリ内蔵なので持ち運べる。

:販売元:ACECAD
:値段:12,000円ぐらい
:サイズ:A5 (309 mm (長さ) x 209 mm (幅) 厚さ 9.8 mm (最薄部)、15.7 mm (最厚部))
:重量:512g (電池含まず)
:記録:CF。大きすぎると問題があるらしい
:記録形式:独自形式。付属ソフトで、JPEG やビットマップに変換できる。Perl で PostScript に変換するスクリプトが&lt;a href=&quot;http://www.etes.de/opensource/digimemo_a501_converter_linux/download&quot;&gt;公開されている&lt;/a&gt;。
:電池:電池の持ち時間は本体100時間、ペン14ヶ月。
:記事:http://www.lablab.jp/~sunday_blog/ja/archives/17-DigiMemo-A501.html http://db.ascii24.com/akiba/news/2005/02/24/654485-000.html
:まとめサイト:http://www.xucker.jpn.org/pc/digimemo/index.html


**&lt;a href=&quot;http://www.airpen.jp/&quot;&gt;airpenストレージノート EA1&lt;/a&gt; [タブレットタイプ]
ベースボードをはずして気軽に使えるのが魅力的(&lt;a href=&quot;http://www.airpen.jp/gaiyou/faq.html#a05&quot;&gt;使用例参照&lt;/a&gt;)。気軽さがよい。高いだけはある。

:販売元:ぺんてる
:値段:25,000円ぐらい
:サイズ:232×252×40mm
:重量:約730g (ベースボードをはずせば約100g)
:記録形式:独自形式もしくはビットマップ。SDK が無料で公開されているので、開発できる人なら事実上形式は自由。
:記事:http://k-tai.impress.co.jp/cda/article/todays_goods/22236.html http://www.plathome.co.jp/camp/airpen/ http://pc.watch.impress.co.jp/docs/2003/0203/pda12.htm


**&lt;a href=&quot;http://www.maxell.co.jp/products/industrial/digitalpen/index.html&quot;&gt;無線デジタルペン&lt;/a&gt; [デジタルペンタイプ]
:販売元:MAXCEL
:値段:34,000円ぐらい
:記事:http://www.nikkei.co.jp/topic6/onoff/01_12.html http://pc.watch.impress.co.jp/docs/2003/0723/maxell.htm

法人向けで現在は一般発売していないようだ。専用紙が必要なのが難点か。
</body>
</day>
<day date="2005-10-01" title="">
<body>
*p1*[dev]Smarty リンク集
PHP のテンプレートエンジンとして人気の高い Smarty。まとまったドキュメントが Web 上にはなかったので、リンク集を作っておく。

:本家(英語):http://smarty.php.net/
:和訳マニュアル:http://sunset.freespace.jp/smarty/
:Smartyの良さ:http://phpj.jugem.cc/?eid=10
:Windows インストール方法:http://www.kashioka.net/blog/archives/000219.html

**使い方
イメージがわきやすいように使い方を。

-test.php
&gt;|php|
&lt;?php
require 'Smarty.class.php';

$smarty = new Smarty;

//$smarty-&gt;debugging = true;
$smarty-&gt;assign(&quot;name&quot;,&quot;nitoyon&quot;);
$smarty-&gt;assign(&quot;option&quot;, array(&quot;osaka&quot;,&quot;kyoto&quot;,&quot;tokyo&quot;));
$smarty-&gt;assign(&quot;option_output&quot;, array(&quot;大阪&quot;,&quot;京都&quot;,&quot;東京&quot;));
$smarty-&gt;assign(&quot;option_selected&quot;, &quot;kyoto&quot;);

$smarty-&gt;display('test.tpl');
?&gt;
||&lt;

-templates/test.tpl
&gt;|html|
&lt;html&gt;
&lt;body&gt;
&lt;p&gt;My name is {$name}&lt;/p&gt;
&lt;p&gt;MY NAME IS {$name|upper}&lt;/p&gt;

&lt;form&gt;
&lt;select name=states&gt;
{html_options values=$option
 selected=$option_selected output=$option_output}
&lt;/select&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
||&lt;

-出力HTML
&gt;|html|
&lt;html&gt;
&lt;body&gt;
&lt;p&gt;My name is nitoyon&lt;/p&gt;
&lt;p&gt;MY NAME IS NITOYON&lt;/p&gt;

&lt;form&gt;
&lt;select name=states&gt;
&lt;option label=&quot;大阪&quot; value=&quot;osaka&quot;&gt;大阪&lt;/option&gt;
&lt;option label=&quot;京都&quot; value=&quot;kyoto&quot; selected=&quot;selected&quot;&gt;京都&lt;/option&gt;
&lt;option label=&quot;東京&quot; value=&quot;tokyo&quot;&gt;東京&lt;/option&gt;

&lt;/select&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
||&lt;

これを見たらなんとなく雰囲気が分かるはず。assign で変数を定義すると、テンプレートから参照できるようになる。テンプレート中には {if}{/if} などの条件分岐も書けるので表現の幅は広がるわけ。

テンプレートエンジンは、MVC でいうところの V と C の分離ができるのがうれしいところ。泥臭い Web アプリばっかり書いていた人はやみつきになるでしょう。Perl の CGI.pm も HTML のパーツを出力するのが便利にはなるが、HTML の内容を完全に別ファイルに分離できるのはぜんぜん違う。

MVC 分離は Web アプリでも真価を発揮する。なにより、分離の方法を与えてくれるので悩むことが少なくなる。.NET Framework や Java のライブラリが充実してくるにつれて、Web 開発にもこういったツールが流行りつつあるようだ。ということで、以下で多言語での人気をまとめてみる。この辺の情報は、id:naoya さんをウォッチしていて手に入れた情報。

:Perl:HTML::Template や TT がテンプレートエンジンとして人気らしい。
:Ruby:Ruby On Rails もしくは Rails と呼ばれるフレームワークが人気のようだ。海外で Ruby の知名度をあげているほどに人気らしい。

</body>
</day>
<day date="2005-10-05" title="">
<body>
*p1*&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0510/04/news004.html&quot;&gt;ITmedia エンタープライズ：エキサイト、週刊誌見出しやキーワード情報をRSS配信&lt;/a&gt;
ブログでの言及をランキングするサービスもおもしろいが、世の中の流行り廃りを見る上では雑誌の見出しは参考になる。インターネットと既存メディアのよさを取り入れた面白いサービスに思える。

キーワード別にRSS 配信しているのも見逃せない。気になる芸能人の名前を入れてRSSリーダーに入れてチェックしておいて、学校帰り会社帰りにコンビニで立ち読みする、なんていう生活パターンも可能だろう。
</body>
</day>
<day date="2005-10-07" title="">
<body>
*p1*&lt;a href=&quot;http://reader.goo.ne.jp/web/index.html&quot;&gt;goo ウェブ版RSSリーダ&lt;/a&gt;
かなり便利。BloglinesよりもはてなRSSよりも直感的。

BloglinesはRSSを開いたときに全てのアイテムが既読になってしまうのがかなりいや。あと、動作がもっさりしてる。

はてなRSSはまだ発展段階なのだけど、階層構造を作るのがめんどくさいのがいや。

goo ウェブ版RSSリーダは Ajax でさくさく動くし、未読既読も変更しやすい。レイアウトが自由に変更できるのがかなり楽しい。ただ、データの保存がいつ行われるのかがよく分からなくて、仕方なく利用終了時に毎回ログアウトしている。これで外部APIを提供してくれたら言うことないのだけど。
</body>
</day>
<day date="2005-10-08" title="">
<body>
*p1*&lt;span class=&quot;tag&quot;&gt;[web]&lt;/span&gt;&lt;a href=&quot;http://www.google.com/reader/&quot;&gt;Google RSS リーダが公開&lt;/a&gt;
機能、goo の RSS リーダが使いやすいのでみんな使おうよ、と書いたのだけれど、Google RSSリーダのβ版が公開されたようです。

特徴はこんな感じ。
-Google お得意のスターとラベル付け
-それに付いてくる検索機能
-未読既読管理
-opml でのインポート/エクスポート
-キーボードショートカットによるマウスレスな操作

こっちのほうが便利じゃないですか。

PS でもRSSを登録してもすぐにYour Subscriptionに反映されなかったり、動作がなんか変・・・。
PS2 Firefoxだとさっくり動くなぁ。
PS3 goo RSS リーダーがメジャーバージョンアップで使いにくくなったので、最近は Google Personal を RSS リーダーとして活用してます。(2006.12.04追記)
</body>
</day>
<day date="2005-10-14" title="">
<body>
*p1*iPod＋iTunes＋iMac に想う
Appleがついに動画iPodを発表した。同時に iMac と iTunes も発表した。この3つを敢えて同時に発表した理由を想像しながら、Apple の戦略を予想してみた。

そしたら、突如 iTunes のすごさに今更ながらに気づいた。iTunes といえば音楽ファイルの一元管理と iPod とのデータ受け渡しができたわけだが、iMac のデータも参照できるようになるんだろう。これってブラウザじゃん。家庭内コンテンツのブラウザじゃん。iTMS(iTunes Music Store)は世界中のコンテンツのブラウザじゃん。世の中がAJAXに浮かれて、MS が Avalon とかいってるうちに、先進的なブラウザができちゃってますよ。コンテンツブラウザですよ。

既存の Web コンテンツが見れないようじゃブラウザとは言えない、と思う人もいるかもしれない。いやいや、ポッドキャスティングがあるじゃないか。ポッドキャスティングは RSS に音声ファイルの在りかを記述して、ユーザーに聞いてもらう仕組みだったんだけど、iPod にカラー液晶がついたら何も音楽に限ることはない。世間ではビデオポッドキャスティングに注目が集まってるが、RSS で HTML を配信してもいいよね。それってつまり Blog の RSS を iTunes に登録して iPod で読むことを意味する。iPod がポータブル RSS リーダになわけよ。ほら、ブラウザでしょ。IE7がRSSに対応するよーとかいってる間に、Google が Web 上に RSS リーダーを作り上げている間に、Apple は HTML の制約を乗り越えた RSS リーダーを作り上げてたわけだ。

さて、ビデオ販売にも触れておかねばなるまい。ついに、iTunes がオンラインで音楽・ビデオを買えるようになった。さらに、レビュー機能おやお勧め機能までついた。Amazon に喧嘩うってるよな。Amazon と iTMS を比較してみると、両者ともに音楽や映像を売っている点は一緒なのだが、Amazon は CD や DVD を売るのに対し、Apple は実体がないデータを売っている。データの利点は即座に手元に届くところだ。iTMS のこの手軽さ速さは Amazon よりも魅力的だ。Amazon に残る強みといえば本なんだけれど、もし Apple が電子ブックにも対応したら・・・。液晶が大きくなったんだから不可能じゃないよね。Apple が乗り出す前に、クリエイティブコモンズな書籍を iPod で読めるようにするパワーユーザーが出てくるんじゃないかな。そして、iPod を本を読む文化ができて、Apple が万を辞して電子ブック販売に本気で参入したら、Google や Yahoo の &lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0510/03/news062.html&quot;&gt;書籍スキャン計画&lt;/a&gt; を凌駕しちゃう恐怖すらある。

さて、iPod、iTunes と同時に発表された iMac であるが、この iMac で Apple はホームサーバーを巡る争いに参入した。ホームサーバーを巡る争いは派手で、MS は Windows MCE(Media Center Edition) でがんばっている。ただ、ホームサーバーを語る上で、対になるクライアントがいないと説得力が薄れてしまう。MS にはいない。X Box もサーバー寄りだ。余談だが、ゲイツ氏はタブレットPCを一押ししているが、実はタブレットPCを MCE のクライアントに据える算段だったんじゃないかなーと想像してしまう。

その点、Apple には iPod がいる。iMac のホームサーバーと iPod のクライアント。なんと強力タッグなんだ。たとえば、大画面 iMac で映画を見ていて、眠いから続きは翌日の電車の中で iPod で見る、なんてのもありじゃないか。

ホームサーバー－クライアントの路線は、PS3－PSP も有力なんだけど、やはりゲーム機だから中途半端だ。ソニーは他にも &lt;a href=&quot;http://www.vaio.sony.co.jp/Products/VGX-XL70S/&quot;&gt;VAIO type X Living&lt;/a&gt; などの製品でホームサーバーを狙ってるのだけど、いきなりここまでのものを一般消費者に買ってもらうのは厳しいんじゃないだろうか。また、似たような製品群が多くて戦略がぼやけてしまうソニーに比べ、iMac－iTMS－iPod の三本柱の戦略はなんと明瞭なことか！

話が色んなところに飛んでしまったが、一気にまとめよう。iMac はホームサーバーとして、iTunes はコンテンツブラウザとして、iPod はポータブルなクライアントとして、次世代のコンテンツを支えるインフラとなる。iPod と iTunes が爆発的に普及している Apple だからこそ、次なる今回の一手のインパクトは大きい。
</body>
</day>
<day date="2005-11-21" title="">
<body>
*p1*[hatena]Text::Hatena のバグ報告
&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/texthatena/download.html&quot;&gt;JavaScript に移植する過程&lt;/a&gt;で、いくつかバグを見つけたので報告します。バージョン0.04について。id:jkondo さーん、とかやると気づいてもらえるのかな。

ちなみに、Text::Hatena JavaScript版を使えば、&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/texthatena/wordpro/&quot;&gt;はてな記法ワープロ&lt;/a&gt;みたいにリアルタイムに変換できる WYSWYG な Wiki も作れちゃいますよ。

**ListNode.pm の２階層目問題
&gt;||
-1
--1-1
||&lt;
とすると
&gt;||
&lt;ul&gt;
  &lt;li&gt;1
  &lt;li&gt;   ← !!!ここ!!!
    &lt;ul&gt;
      &lt;li&gt;1-1
    &lt;/ul&gt;
  &lt;/li&gt;  ← !!!ここ!!!
&lt;/ul&gt;
||&lt;
と出力されるのですが ul タグを li で囲う必要ないのでは（!!!ここ!!!の部分）。事実、はてなダイアリーでは上の li がない状態で出力される。

24行目の
&gt;||
$c-&gt;htmllines(&quot;$t\t&lt;li&gt;&quot;);
||&lt;
と30行目の
&gt;||
$c-&gt;htmllines(&quot;$t\t&lt;/li&gt;&quot;);
||&lt;
が不要だと思う。

**ListNode.pm の ol と ul の切り替え問題
&gt;||
-hoge
+fuga
||&lt;
と書くと
&gt;|
・hoge
1.fuga
|&lt;
のように箇条書きと番号付き箇条書きが出力されてほしいのだけど、
&gt;||
&lt;ul&gt;
  &lt;li&gt;hoge
  &lt;li&gt;fuga
&lt;/ul&gt;
||&lt;

となる。これは、本家はてなダイアリーでも同じ。仕様と言えば仕様か。

</body>
<comments>
<comment>
<username>jkondo</username>
<body>次版で直します。有難うございます（ListNode）</body>
<timestamp>1132635305</timestamp>
</comment>
<comment>
<username>yukatti</username>
<body>＞ul タグを li で囲う必要ないのでは&lt;br&gt;この部分ですが、HTML4.01の仕様ではUL要素の直下はLI要素しか含み得ず（http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/struct/lists.html#edef-UL）入れ子にする場合は現在の&lt;br&gt;&lt;ul&gt;&lt;br&gt;  &lt;li&gt;1&lt;br&gt;  &lt;li&gt;   ← !!!ここ!!!&lt;br&gt;    &lt;ul&gt;&lt;br&gt;      &lt;li&gt;1-1&lt;br&gt;    &lt;/ul&gt;&lt;br&gt;  &lt;/li&gt;  ← !!!ここ!!!&lt;br&gt;&lt;/ul&gt;&lt;br&gt;で正しくて（つまりはてなダイアリーの出力が間違っている）、ただし終了のliは省略可能なので&lt;br&gt;&lt;ul&gt;&lt;br&gt;  &lt;li&gt;1&lt;br&gt;  &lt;li&gt;   ← !!!ここ!!!&lt;br&gt;    &lt;ul&gt;&lt;br&gt;      &lt;li&gt;1-1&lt;br&gt;    &lt;/ul&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;としてもよい、というものなのではないでしょうか。JavaScriptではまた違うのですか？（JavaScriptには詳しくないので勘違いしていたらすみません）</body>
<timestamp>1132636309</timestamp>
</comment>
<comment>
<username>iwadon</username>
<body>HTMLの仕様や、JavaScriptとは関係なく、単にUL要素の外側にあるLI要素が余分である、という話なのではないかと思いました。</body>
<timestamp>1132679896</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; jkondo 様&lt;br&gt;了解です。&lt;br&gt;&lt;br&gt;&gt; yukatti 様&lt;br&gt;仕様を確認しましたが、LIタグの中にはブロック要素もインライン要素も含められるようですよ。ULタグの下にはLIしか含められないようですが。</body>
<timestamp>1132722540</timestamp>
</comment>
<comment>
<username>facet</username>
<body>はじめまして(^^)。素晴らしいjsをありがとうございます。いつか使わせていただきたいと思っています。&lt;br&gt;&lt;br&gt;ところで、ご指摘のliタグですが、これはul直下（子要素の位置）の話なので、yukattiさんのコメント通り、少なくとも開始タグは必要だと思います。&lt;br&gt;&lt;br&gt;つまり、これって、最初のli要素の終了タグが省略されているんですよね…。&lt;br&gt;&lt;br&gt;ということで、逆に、終了タグを全て吐き出すようにした方がいいんじゃないでしょうか。&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;br&gt; &lt;li&gt;1&lt;/li&gt;←これと&lt;br&gt; &lt;li&gt;&lt;br&gt;  &lt;ul&gt;&lt;br&gt;   &lt;li&gt;1-1&lt;/li&gt;←これ&lt;br&gt;  &lt;/ul&gt;&lt;br&gt; &lt;/li&gt;&lt;br&gt;&lt;/ul&gt;</body>
<timestamp>1132764929</timestamp>
</comment>
<comment>
<username>yukatti</username>
<body>あ、そうです、わたしが言いたかったのはfacetさんのお書きになっている通りのulの入れ子の話です。終了タグを全部いったん書けばわかりやすかったですね。liにインライン要素とブロックレベル要素が含められることは承知しています。</body>
<timestamp>1132801686</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>なるほど。理解しました。確かに、li タグは閉じなければなりませんね。facet さん、ありがとうございます。</body>
<timestamp>1132838326</timestamp>
</comment>
<comment>
<username>facet</username>
<body>いえいえ、どういたしまして。おせっかいついでにもう一つ。jkondo氏が誤解したままだとマズイような気がするので、よろしくお願いします。（既に対処済みでしたら失礼しました）</body>
<timestamp>1132851229</timestamp>
</comment>
</comments>
</day>
<day date="2005-12-14" title="">
<body>
*p1*はてなダイアリーのヘッダに自由に色をつける方法
CSSを変更しました。&lt;a href=&quot;http://tech.nitoyon.com/&quot;&gt;tech.nitoyon.com&lt;/a&gt; とデザインをあわせてみましたよ。

ヘッダの色をあえて変えてみました。利用規約に抵触するかちょっと怖いのですが、はてな利用規約６条 3.6. によると 
&gt;&gt;
本サービス内でのページデザイン変更により、当社が標準的に表示しているヘッダ、フッタ、広告及び著作権表示を当社の許諾なく&lt;b&gt;非公開にする行為&lt;/b&gt;
&lt;&lt;
らしく、非表示にはしていないのでたぶん大丈夫でしょう。

このページのヘッダ色を変えるCSSはこんな感じです（抜粋）。
&gt;|
body table{
	margin-left: 30px;
	width: 770px;
	border-left:1px solid #ccc;
	border-right:1px solid #999;
	border-bottom:0px;
}

body table tr td{ /* 背景色を変えるため */
	background-color: #d9eced;
}

body table input{ /* 一列目の高さを広くするため */
	margin: 21px 0 21px 0;
	height: 20px;
}

div table{ /* ２列目の調整 */
	font-size:80%;
	width: 100%;
	border:0;
	border-top: 3px solid #42b8d4;
	border-bottom:1px dashed #ccc;
	margin:0;
}

div table tr td{ /* ２列目の背景色を変える */
	background-color: #eee;
	border:0;
}
|&lt;
ヘッダ部分は table タグで実現されてます。さらに、２列目の「ようこそ〇〇さん」の部分は入れ子の table。div タグに囲まれてます。要点だけ抜き出したらこんな感じ。上の CSS と見比べると納得していただけるかと。
&gt;||
&lt;table&gt;
  &lt;tr&gt;/* 一列目 */&lt;/tr&gt;
  &lt;tr&gt;/* 高さ 3px のスペース*/&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width=&quot;100%&quot;&gt;
      &lt;div align=&quot;center&quot;&gt;
        &lt;center&gt;
          &lt;table&gt;/* 二列目 */&lt;/table&gt;
        &lt;/center&gt;
      &lt;/div&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
||&lt;

１つだけ注意。本文内でテーブルを用いている場合は、div.day table のスタイルが body table のスタイルの影響を受けてしまうので、初期化する必要がありますよ。

</body>
</day>
<day date="2006-02-14" title="">
<body>
*p1*FlashでActionScriptを利用したアニメーション
Flash でアニメーションを作成する方法は、
+タイムラインにそってトゥイーンを利用する
+ActionScript を使って動きをつける
の２つのパターンがあるようだ。

トゥイーンでエフェクトを作っていくのはプログラマの頭にはちょっと堪え難い。１つのエフェクトを適用するためだけに、トゥイーンを作っていくのが手間に感じてしまうし美しくない。ムービークリップを使えば多少OOPっぽく管理できるが、インスタンスでいじれるのが色ぐらいなのは寂しい。もっとOOP的にエフェクトを実現したい、と思うのがプログラマ的発想。

そこでこんなクラスを定義してみた。
&gt;|javascript|
class Appear{
	var elm;
	var delay:Number;
	var counter:Number;

	function Appear(_elm:MovieClip, d){
		this.elm = _elm;
		this.elm._alpha = 0;
		this.delay = d;
		if(d == undefined){
			this.delay = 10;
		}

		this.elm.onEnterFrame = appearClosure(elm, delay);
	}

	function appearClosure(mc, d){
		var delay = d;
		var diff = 100 /d;
		var count = 0;
		return function(){
			mc._alpha = Math.min(100, mc._alpha + diff);
			count++;
			if(count &gt; delay){
				delete mc.onEnterFrame;
			}
		}
	}
}
||&lt;

ムービークリップ mc_name に対して、new Appear(mc_name, 10); というスクリプトを書くだけで 10フレームつかってフェードインしてくれる。

と思ったら、Flash のヘルプにこんなサンプルが。うーん、単純・・・。
&gt;|javascript|
img1_mc.onEnterFrame = function() {
    img1_mc._alpha -= 5;
    if (img1_mc._alpha &lt;= 0) {
        img1_mc._visible = false;
        delete img1_mc.onEnterFrame;
    }
};
||&lt;

ActionScript2.0はECMAScriptだから、script.aculo.us から知恵を拝借しつつ、互換のライブラリを組んだらおもしろいかな。

</body>
</day>
<day date="2006-03-18" title="">
<body>
*p1*ソフトバンクのVodafone買収で日本のSNSが一変する！？
ソフトバンクがボーダフォンを買収して、価格破壊が起こるのか世間では興味深々のようだけども、現時点で会員数は多いんだし、LOVE定額なども魅力的だし、これ以上安くする必要はないんじゃないかと思う。ADSL 参入時は会員数０からのスタートだったから無理したけど、今回は既に150万人いるんだし。

いわくつきの街頭での勧誘に関しても、ケータイではやらないんじゃないかねぇ。だって、ケータイってすでに町中のいたるところで売ってるから、広告効果も販売機能も期待できる。ADSL は街中で販売スペースがかったから仕方なく拠点を作ったわけで、ケータイではそれをする必要もない。既存メディアでの広告と街中のケータイショップで十分インパクトあるしさ。

技術者視点からいけば、値下げどうこうよりかも、ケータイとYahooがどう相乗効果を生み出すかを妄想するほうが数十倍楽しい。Yahoo の路線案内とかブログとかオークションをケータイ経由で（しかも通信料無料で）利用できるれば便利だろうなぁ。Yahooウォレットがケータイ料金から引き落とされたら強力だしなぁ。

中でも、Yahoo! の SNS、Yahoo! 360 とケータイが混ざった場合の妄想が一番楽しい。

Yahoo! 360 は使ってないから mixi 用語で説明するけど、アドレス帳がマイミクシィと連携していて、アドレス交換がマイミクになってもらうのと等値になるわけ。

メッセージの送信は、ケータイメールと等値になる。何がうれしいって、ケータイメールを送ったら、PCから Yahoo! 360でもメールを見れちゃう。

ブログってインターネットの世界のもの過ぎて一般人に広まらないけど、ケータイに日記を書く機能を入れちゃったら広まるかもしれない。マイミクの友達がコメントを書いてくれたりして交換日記っぽいイメージ。そのまんま SNS の機能を移植してるんだけど、ケータイにネイティブに実装されてるだけで見え方がぜんぜん違う。女子高生を中心に一気にブレイクしそうに思えてしまう。ミクシーなんて目じゃない。

Yahoo が SNS で mixi を抜く日も近いかもしれないよ。
</body>
</day>
<day date="2006-06-25" title="">
<body>
*p1*SWFファイルを動画ファイルに変換する方法
swf.vfp＋AviUtilを使う方法しかないようだ。
-[http://q.hatena.ne.jp/1140791710:title]
-[http://oshiete1.goo.ne.jp/kotaeru.php3?q=1114992:title]

ただ、swf.vfp 自体、人柱版なのであまり期待しないほうがいい。試しに使ってみたが、MC の再生速度がおかしかったりした。

*p2*FLAファイルを動画ファイルに変換する方法
自作の Flash などで FLA ファイルが手元にある場合、手順はもう少し簡単になる。ただし、製作上の制約があるので注意が必要。制約の多いほうから順に紹介していく。

環境は Windows 版 Flash MX 2004。

**AVI書き出し
***手順
+「ファイル→書き出し→ムービーの書き出し」
+ファイル形式は「AVI」を選択

***注意
MC（ムービークリップ）や AS（ActionScript）が動かない。タイムライン上で再生したときと同じような出力になる。

***利点
AVI 出力さえしてしまえば、その後のエンコードはやりたい放題。

**mov書き出し
***手順
+「ファイル→書き出し→ムービーの書き出し」
+ファイル形式は「MOV」を選択

***注意
インストールされているQuickTimeのバージョンには、このタイプのMacromediaFlashムービーのハンドラがありません。」と表示された場合には、[http://q.hatena.ne.jp/1150359840:title]を参考に、出力 Flash のバージョンを５以下にする。５以下、ということは、つまり、AS2.0 は使えない。古式ゆかしき AS1.0 で記述すること。当然、外部 AS ファイルも使えない。

また、mov で出力されるため、そのあとのエンコードには少し工夫が必要になる。[http://www.geocities.com/SiliconValley/4942/svcd.html:title] にある QTReader.vfp をつかって TMPGEnc や AviUtil で読めるようにするか、MOV2AVI をつかって AVI ファイルに変換するとよいだろう。

***利点
MC および AS1.0 が利用できるのは魅力的。

**何も考えたくない
[http://admn.net/groove/fg2/special_09/page_01.html:title]にあるように、悩みたくなければ SWF2Video というソフトを購入したほうがよさそう。$79 なのでべらぼうに高いわけではない。
</body>
</day>
<day date="2006-07-30" title="">
<body>
*p1*TeX ワープロ
ちょっと前に「&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/texthatena/wordpro/&quot;&gt;はてなワープロ&lt;/a&gt;」なるものを公開して少しだけ話題になりましたが、それの亜種、TeX ワープロなるものを作ってみました。

TeX のソースをリアルタイムプレビューできる WYSIWYG なエディタです。長い数式を入力するときに、トライアンドエラーでコンパイルする必要なんてありません。TeX 入力の時間を大幅に短縮できます。

**使い方
以下のソースを「texwordpro.html」という名前で PC に保存して、IE なり Firefox なりで開いてください。JavaScript を有効にするのをお忘れなく。

テキストボックスにいろいろ入力すると、リアルタイムに TeX のコンパイル結果が画像で出力されます。

**ソース
&gt;|html|
&lt;html&gt;
&lt;head&gt;&lt;title&gt;てふわーぷろ&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;

&lt;div id=&quot;output&quot; style=&quot;height: 60px&quot;&gt;&lt;/div&gt;

&lt;textarea onkeyup=&quot;txt_changed(this.value)&quot; cols=&quot;50&quot; rows=&quot;20&quot;&gt;
x^2+y^2=1
&lt;/textarea&gt;

&lt;script&gt;
var timer_id;
var prev_param;
function txt_changed(src){
  if(timer_id){
    clearTimeout(timer_id);
  }

  timer_id = setTimeout(function(){
    var param = escape(src);
    if(param != prev_param){
      var a = document.getElementById(&quot;output&quot;);
      a.innerHTML = &quot;&lt;img src='http://d.hatena.ne.jp/cgi-bin/mimetex.cgi?&quot;
         + param + &quot;'&gt;&quot;;
      timer_id = null;
      prev_param = param;
    }
  }, 700);
}
txt_changed(&quot;x^2+y^2=1&quot;);
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
||&lt;

**仕組み
テキストボックスが更新されたら はてな の mimetex.cgi に投げてるだけです。たいしたことはやってません。（問題あったら公開停止します＞はてなの中の人）

便利だなーと思って満足していたら、既に &lt;a href=&quot;http://www.forkosh.com/mimetex.html&quot;&gt;mimetex のサイト&lt;/a&gt; にはボタンを押したら画像が更新されるものがありました…。「TeX ワープロ」は、それのリアルタイム版だと考えてください。

インタラクティブだとサーバーに負荷をかけまくってしまうので、負荷対策として700msだけキーボードがタイプされるか待ってからサーバーに問い合わせてます。

ローカルに保存しなきゃいけないのは、mimetex.cgi が別サイトからのリファラつきのリクエストをはじいてしまうからです。

</body>
</day>
<day date="2006-08-27" title="">
<body>
*p1*IEerBug 公開
FireBug のコンソール機能が便利だったので、IE でも使えるようにしてみました。

FireFox と IE で同じ方法でデバッグできるため、開発効率があがるのではないでしょうか。

&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/ieerbug/&quot;&gt;こちらからどうぞ&lt;/a&gt;。
</body>
</day>
<day date="2006-09-20" title="">
<body>
*p1*「Google Earth でドライビング」公開
楽しいよ。
http://tech.nitoyon.com/javascript/application/racing/2.html
</body>
</day>
<day date="2006-10-01" title="">
<body>
*p1*Google Earth API（β版）がこっそり公開されていた
Google Earth の API に関する Google 公式のドキュメントが 9月26日ごろに公開されたようです。（ネタ元：&lt;a href=&quot;http://bbs.keyhole.com/ubb/showflat.php/Cat/0/Number/613507/&quot;&gt;key hole bbs&lt;/a&gt;, &lt;a href=&quot;http://www.ogleearth.com/2006/09/google_earth_co.html&quot;&gt;Ogle Earth&lt;/a&gt;）
&gt;|
http://earth.google.com/comapi/
Google Earth COM API Documentation
|&lt;

どういうことができそうなのか、いろいろ妄想してみてください。
&gt;|
http://earth.google.com/comapi/functions.html
|&lt;

COM 経由の API なので Windows 限定の機能です。スタンドアロンなインストールアプリケーション専用となります。セキュリティ上の制限から Web から叩けません。セキュリティーゾーンを変更すれば可能かとは思いますが、あまり現実的ではないでしょう。((Google Earth をブラウザに埋め込めるようにした &lt;a href=&quot;http://www.googleearthairlines.com/&quot;&gt;GEAirlines&lt;/a&gt; もあります。COM の中継をしてくれます。原理はフック＋COM。))

Google Earth は今までも COM インターフェースを提供していたのですが、公式にドキュメント化されたのは大きな進歩だと思います。

この API を使ったサンプルは...私が作った &lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/2.html&quot;&gt;Google Earth でドライビング&lt;/a&gt; をご覧ください。（このサンプルを作ったときには この COM API は Undocumented だったので苦労しました）

**技術的に細かい話
4.0.2080β 以降で導入された IApplicationGE に関するドキュメントとなっております。

以前から存在していた IKHInterface は、現在は後方互換性があるようですが、将来的には約束されないらしいです。IApplicationGE は IKHInterface の機能をすべて含んでいる上に、バージョン情報やネットワーク状態の取得、Feture の操作などができるようになっています。それに加えて、今回のドキュメント化があるわけですから、IApplicationGE を使ったほうがよいでしょう。

**Mac では？
なお、Mac では Apple Script を使って Google Earth とごにょごにょする方法があるようです。→&lt;a href=&quot;http://www.ogleearth.com/2006/09/google_earth_fo_6.html&quot;&gt;このへん参照&lt;/a&gt;。
</body>
</day>
<day date="2006-10-11" title="">
<body>
*p1*Selenium IDE でテストにパスワードを埋め込まない方法
**前置き
Web アプリのテストツールとして有名な Selenium ですが、テストの中にパスワードを生で書くことに抵抗がある場合があります。そこで、Selenium IDE 限定ですが、テストが開始されるとパスワード入力ダイアログが登場し、そのパスワードを使ってログインするような方法を探しました。

どういうときに便利かというと、例えば、楽天のアフィリエイトのレポートを開くのを自動化できます。このページ、１日ごとにクッキーが初期化されてしまいます。パスワードマネージャに記録させる手もあるのですが、買い物までできてしまうパスワードを可逆な形で PC に保存するのには抵抗があります。

自動化以外にも、サービスインしてしまった Web サービスのテストを自動化する場合にも応用できるかもしれません。


**やり方
まずは、パスワード入力画面を表示して、その内容を変数に保存します。

コマンドに store、値にはパスワードを保存する変数名（例えば、&lt;font color=blue&gt;password&lt;/font&gt;） を指定します。そして、対象には長くなりますが次の値を設定します。
|*コマンド|*対象|*値|
|store|(以下の値)|&lt;font color=blue&gt;password&lt;/font&gt;|
&gt;&gt;
javascript{var p={value:&quot;&quot;};PROMPT = Components.classes['@mozilla.org/embedcomp/prompt-service;1'].getService(Components.interfaces.nsIPromptService);PROMPT.promptPassword(window, &quot;Enter Password&quot;, &quot;Enter password.&quot;, p, null, {}); p.value;}
&lt;&lt;
パスワード入力画面は FireFox の Components を使って表示しています。入力した文字が *(アスタリスク) で表示されるので安心です。

あとは、このパスワードをフォームに流し込むだけです。パスワード入力欄の名前が &lt;b&gt;p&lt;/b&gt; だとすると、こうなります。
|*コマンド|*対象|*値|
|type|p|&lt;font color=blue&gt;${password}&lt;/font&gt;|

**応用例
パスワードは Selenium IDE のメモリ空間に保存され続けます。これを応用して、同じパスワードのサイトで入力の手間を省く技があります。変数名はパスワードの種類に応じて変更してください。
&gt;&gt;
javascript{if(storedVars['&lt;font color=blue&gt;password&lt;/font&gt;']){storedVars['&lt;font color=blue&gt;password&lt;/font&gt;'];}else{var p={value:&quot;&quot;};PROMPT = Components.classes['@mozilla.org/embedcomp/prompt-service;1'].getService(Components.interfaces.nsIPromptService);PROMPT.promptPassword(window, &quot;Enter Password&quot;, &quot;Enter password.&quot;, p, null, {}); p.value;}}
&lt;&lt;
分かりやすく整形すると、こういう構文になってます。
&gt;|
&lt;font color=&quot;green&quot;&gt;// 既に入力していた場合には&lt;/font&gt;
if(storedVars['&lt;font color=blue&gt;password&lt;/font&gt;'])
{
	&lt;font color=&quot;green&quot;&gt;// 前の値を利用&lt;/font&gt;
	storedVars['&lt;font color=blue&gt;password&lt;/font&gt;'];
}
else
{
	&lt;パスワード入力ダイアログを表示&gt;
}
|&lt;

メモリ上に変数にパスワードの値が保存されたままなことに抵抗がある方は次のようにして上書きしてください（メモリ上から消されることを保証しているわけではありません。あくまで気慰み程度に...）。
|*コマンド|*対象|*値|
|store| |&lt;font color=blue&gt;password&lt;/font&gt;|


</body>
</day>
<day date="2006-11-09" title="">
<body>
*p1*[JavaScript]prototype.js 1.4.0 の Enumerable.min のバグ
script.aculo.us をいじっていて気づいた Enumerable.min のバグ。

実証コードはこんな感じ。配列の最小値 0 を返すべきなのに...なぜか 1 が返ってきます。
&gt;|
&gt;&gt;&gt; [0,1,2,3].min()
1
|&lt;

該当部分のソースコードはこうなってます。
&gt;|
  min: function(iterator) {
    var result;
    this.each(function(value, index) {
      value = (iterator || Prototype.K)(value, index);
&lt;font color=&quot;blue&quot;&gt;      if (value &lt;= (result || value))&lt;/font&gt;
        result = value;
    });
    return result;
  },
|&lt;

バグの原因は each の２回目で if (value &lt;= (result || value)) が if (1 &lt;= (0 || 1)) すなわち if (true) となってしまうところにあるようです。

prototype.js では undefined かどうかを調べるのに || 演算子を使ってることが多いのですが、0 や &quot;&quot; が false になってしまうことに注意しなければならないですね。

なお、この部分のコードは 1.5.0 rc1 で次のように修正されてます。
&gt;|
  min: function(iterator) {
    var result;
    this.each(function(value, index) {
      value = (iterator || Prototype.K)(value, index);
      &lt;font color=&quot;red&quot;&gt;if (result == undefined || value &lt; result)&lt;/font&gt;
        result = value;
    });
    return result;
  },
|&lt;

多くの人が使ってる prototype.js 1.4 にこんなバグが潜んでいたとは。恐ろしい。1.5 を正式リリースしたら、1.4.1 を出してほしいものです。
</body>
</day>
<day date="2006-11-17" title="">
<body>
*p1*jsoncpp を試す
C++ で JSON を扱う必要があったので、jsoncpp というライブラリを試した。VC++ 2003/2005 で警告なしでビルドできた。すばらしい。

パース簡単。
&gt;|cpp|
std::string str = &quot;{\&quot;key1\&quot;:\&quot;value\&quot;, \&quot;key2\&quot;:true}&quot;;

Json::Reader reader;
Json::Value root;
bool b = reader.parse(str, root);
||&lt;

オブジェクトの参照も簡単。厳密にやったらこうなる。
&gt;|cpp|
if(root.type() == Json::objectValue){
    if(root.isMember(&quot;key1&quot;)){
        Json::Value key1 = root[&quot;key1&quot;];
        if(key1.type() == Json::stringValue){
            printf(key1.asCString());
        }
    }
}
||&lt;

いい加減にも書ける。
&gt;|cpp|
printf(root[&quot;key1&quot;].asCString());
||&lt;

json_value.cpp にて変換に失敗したときには assert 関数が実行されるよう定義されているが、ここで例外を投げるように修正すれば、上のいい加減なコードは
&gt;|cpp|
try{
   printf(root[&quot;key1&quot;].asCString());
}
catch(...){
}
||&lt;
と書けて幸せなんだけど、どうも警告がいっぱいでてしまう。そのへんは微妙にうれしくない感じ。

他にも、配列は size() が使えたり、getMemberNames() でハッシュの全部のキーを取得できたり、なかなか便利。もちろん、オブジェクトの書き出しもサポート。C++ で IO 扱うには実はかなり便利なライブラリかもしれない。

ライブラリの詳細は &lt;a href=&quot;http://jsoncpp.sourceforge.net/index.html&quot;&gt;JsonCpp Documentation&lt;/a&gt; にて。

</body>
</day>
<day date="2006-12-02" title="">
<body>
*p1*[JavaScript]JavaScript の角丸ライブラリまとめ
JavaScript の角丸ライブラリについて調べていたら、&lt;a href=&quot;RUZEE.Borders - Steffen Rusitschka’s Place in the Web&quot;&gt;RUZEE.Borders&lt;/a&gt; というのを見つけました。

こいつがかなりすごかったのですが、ついでに他の角丸ライブラリとも比較してまとめておきます。どれも画像は使用せず、div タグなどをいっぱい作成して丸く見せている力技のライブラリです。

他にもいいのがあったら教えてください。

**&lt;a href=&quot;http://www.html.it/articoli/niftycube/&quot;&gt;Nifty Cube&lt;/a&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://www.html.it/articoli/niftycube/&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot; hspace=&quot;4&quot; vspace=&quot;4&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;
→&lt;a href=&quot;http://www.html.it/articoli/niftycube/nifty12.html&quot;&gt;サンプル&lt;/a&gt;
-Nifty Corners の後継。
-9KB (+CSS 2KB)
-角のサイズは 10px, 5px, 2px の３つから指定
-border は指定不可能 (div の入れ子により border っぽく見せることはできる)
-背景画像への対応不明
-CSS セレクタ(一部)で指定可能

**&lt;a href=&quot;http://inviz.ru/moo/transcorners/&quot;&gt;transcorners&lt;/a&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://inviz.ru/moo/transcorners/&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot; hspace=&quot;4&quot; vspace=&quot;4&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;
→サンプルは &lt;a href=&quot;http://inviz.ru/moo/transcorners/&quot;&gt;transcorners のサイト上部&lt;/a&gt;
-mootools 必須。prototype.js との組み合わせムリ（たぶん）
-4KB (+mootools)
-角のサイズ自由
-border 指定可能
-背景画像への対応不明
-CSS セレクタは mootools の getElementsBySelector との組み合わせにより(一部)可能

**&lt;a href=&quot;http://www.ruzee.com/blog/ruzeeborders&quot;&gt;RUZEE.Borders&lt;/a&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://www.ruzee.com/blog/ruzeeborders&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot; hspace=&quot;4&quot; vspace=&quot;4&quot; align=&quot;right&quot; border=&quot;0&quot;&gt;
→サンプルは &lt;a href=&quot;http://www.ruzee.com/blog/ruzeeborders&quot;&gt;RUZEE.Bordersのサイト全体&lt;/a&gt;
-角丸だけでなく、影付き、アンチエイリアス(というよりも、ぼかし)、光彩が可能。
-18KB
-角、影、ぼかし、光彩のサイズが自由自在。複数の効果を同時に適用可能。
-border、背景画像にも対応
-付属の cssquery2-p.js (6KB) と併用することで、CSS セレクタでの指定可能。cssQuery を使用しない場合は ID のみでの指定

**まとめ
|*名前|*機能|*手軽さ|
|Nifty Cube|&lt;font size=+3&gt;△&lt;/font&gt;&lt;br&gt;サイズ固定|&lt;font size=+3&gt;◎&lt;/font&gt;&lt;br&gt;試すには一番手ごろ|
|transcorners|&lt;font size=+3&gt;○&lt;/font&gt;&lt;br&gt;サイズ可変|&lt;font size=+3&gt;×&lt;/font&gt;&lt;br&gt;mootools必須|
|RUZEE.Borders|&lt;font size=+3&gt;◎&lt;/font&gt;&lt;br&gt;影・ぼかし・光彩|&lt;font size=+3&gt;○&lt;/font&gt;&lt;br&gt;ファイルサイズと表示の重さにやや難|

手軽に試すには Nifty Cube、機能を求めるなら RUZEE.Borders、mootools を使ってるなら transcorners。

**追記
-&lt;a href=&quot;http://www.curvycorners.net/&quot;&gt;curvyCorners&lt;/a&gt; というライブラリもあるようです。画像を各丸にする機能が特徴的です。詳細は未調査です (2006.12.24)
-JavaScript を利用しない方法については、&lt;a href=&quot;http://hyper-text.org/archives/2006/12/collect_rounded_corners.shtml&quot;&gt;角丸に関するあれこれ (WWW WATCH)&lt;/a&gt; がうまくまとまっています。
</body>
</day>
<day date="2006-12-31" title="">
<body>
*p1*[as]ActionScript を薦める５つの理由
最近 ActionScript 3.0 はじめました。

ActionScript がすごいこと気づいてしまいました。

JavaScript の多くの限界を簡単に克服できちゃいます。

そこで、ActionScript 3.0 の魅力を JavaScript と比較しながらまとめてみました。
====
**1. 何も考えなくてもクロスブラウザ
JavaScript を書く上で避けられないのがクロスブラウザ化です。IE や FireFox 専用、などと言い切ってしまうのは簡単なのですが、対応ブラウザを増やすためには、初期開発と同等、もしくはそれ以上の時間がかかってしまいます。

１年ほど前の情報ですが、Google Maps のソースコードは Safari だけ別の JavaScript ファイルをロードしていました。あの Google が１つのブラウザを特別扱いしてしまうぐらいにクロスブラウザ化は面倒なのです。

それに比べ、Flash はどのブラウザでも動きます。クロスブラウザを意識しながらコーディングするストレスから開放されます。これは予想以上に幸せなことでした。

-Flash Player のバグで特定の機能が使えない、といった問題もあるようですが、JavaScript に比べればはるかに楽でしょう
-ケータイで動かすには Flash Lite で開発することになります。Cybozu の&lt;a href=&quot;http://labs.cybozu.co.jp/blog/kamoshida/&quot;&gt;鴨志田さん&lt;/a&gt;の&lt;a href=&quot;http://labs.cybozu.co.jp/blog/kamoshida/2006/12/binary_20.html&quot;&gt;資料&lt;/a&gt;がよくまとまっています。

**2. DOM をいじるのに比べて描画表示が速い
JavaScript には DIV タグを使ったり、canvas と VML などを組み合わせて力技で図形描画するテクニックがありますが、ActionScript を使えば円でもなんでも好きに描画できます。もともと Flash はベクター画像が得意なわけですから、描画も高速！　ブラウザに負荷をかけることはありません。

Flash でグラフ描画するツール &lt;a href=&quot;http://www.amcharts.com/&quot;&gt;amCharts&lt;/a&gt; や &lt;a href=&quot;http://www.maani.us/xml_charts/&quot;&gt;XML/SWF&lt;/a&gt; を見れば、表現力は一目瞭然ですね。

Flash で作った Photoshop もどきの &lt;a href=&quot;http://fauxto.com/&quot;&gt;Fauxto&lt;/a&gt; も最近話題になりましたが、ActionScript 3 / Flex 2 に手を出している私としては、あーできるできる、と思ってしまいました。

**3. ECMAScript ベース、むしろ未来の JavaScript が見えてくる
AS 3.0 は ECMAScript なので JavaScript で蓄えたノウハウが使えます。Date や Array はそのまんま。prototype 拡張のテクニックも使えてしまいます。
-(例) IT戦記さんとこ [http://d.hatena.ne.jp/amachang/20061220/1166635804:title=ActionScript の Object.prototype を拡張する実用的な例 - IT戦記]

現在、ECMAScript は 3.0 まで策定されているのですが、AS 3.0 は ECMAScript 4.0 をベースにしていることになっています。実際、AS 3.0 の実行エンジンが Mozilla に寄贈され、FireFox の次世代の JS エンジンは AS 3.0 と同じものになるようです。

-参考：&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2006/11/adobe_mozilla_t.cfm&quot;&gt;akihiro kamijo: Adobe と Mozilla のオープンソースプロジェクト（Tamarin）&lt;/a&gt;

Adobe は Mozilla を取り込んで、AS 3.0 をデファクトスタンダードにする気満々なんでしょうね。

**4. E4X 実装
E4X が実装されてます。E4X は XML を DOM 経由でいじるめんどくさいのを解消してくれる素晴らしい仕様。

例えば、こんな XML でも
&gt;|xml|
&lt;order&gt;
    &lt;item id='1'&gt;
        &lt;menuName&gt;burger&lt;/menuName&gt;
        &lt;price&gt;3.95&lt;/price&gt;
    &lt;/item&gt;
    &lt;item id='2'&gt;
        &lt;menuName&gt;fries&lt;/menuName&gt;
        &lt;price&gt;1.45&lt;/price&gt;
    &lt;/item&gt;
&lt;/order&gt;
||&lt;

こんな風に XML を Object として扱えちゃいます。

&gt;|javascript|
trace(myXML.item[0].menuName); // 出力 : burger
trace(myXML.item.(@id==2).menuName); // 出力 : fries
trace(myXML.item.(menuName==&quot;burger&quot;).price); // 出力 : 3.95
||&lt;

JavaScript で例えると、XML2JSON なサービスがネイティブに実装されているイメージ、Perl で例えると XML::Simple みたいなのりです。

詳しくは &lt;a href=&quot;http://livedocs.macromedia.com/flex/2_jp/docs/00001912.html&quot;&gt;公式ドキュメント&lt;/a&gt; を参照あれ。

**5. コマンドラインで SWF を作れる
Flex SDK を導入すれば、エディタ＋コマンドプロンプトで SWF を作れます。もちろん無料。使い慣れたエディタでの開発できるのは魅力的です。

作成した SWF をサーバーにアップロードするだけで公開できます。Flex は、バージョン 1.5 まではサーバー側で SWF を吐くための技術でしたが、Flex 2 からは一般人でも SDK を触って、簡単に SWF を作れるようになりました。

クラスライブラリも分かりやすく、JAVA・C#・MFC などで GUI アプリの開発経験があれば、マニュアルをみればだいたいの使い方は分かると思います。

また、SDK に Flex ライブラリのソースコードが付属しているのも魅力的です。ちょっと挙動が気になったときにソースを読みたくなる人にはうれしいところでしょう。

**おまけ：ActionScript の嫌なところ
いいところばかりを書いてみましたが、いかがだったでしょうか。

褒めちぎるのもあれなので、嫌なところも簡単にまとめてみます。
:Flash Player 9 必須:まだ、8 の人が多いと思います。そのうち、解消されるでしょうが、不安要素ではあります。
:デバッグ環境:JavaScript は FireBug を使えば恐ろしいぐらいに開発効率がよくなりますが、Flash の開発補助ツールはまだまだ発展途上です。Adobe 純正の Flex Builder を使えばそれなりの効率はでますが、6万円という値段は個人では敷居が高いところです。
:Flex のファイルサイズでかい:MXML をはじめとする Flex ライブラリは便利でなのですが、Flex を使うとファイルサイズが100KB超えてしまいます。ActionScript 3 だけでビルドすれば軽量ですが、Flex も使いたい…微妙な心境です。
:ActionScript の言語仕様への不満:ブロックスコープなし、抽象クラスなし、eval なし、１ファイル１クラス...など
:ドキュメント不足:Adobe は積極的に情報を公開してくれているのですが、自発的にノウハウを公開する開発者がほとんどいません。国内は皆無、海外にはちょぼちょぼいますが、JavaScript のそれに比べると、「うわーこいつすげー」というブログはなかなか見かけません。

**リンク
-公式
--&lt;a href=&quot;http://livedocs.macromedia.com/flex/2_jp/&quot;&gt;Flex 2 LiveDocs&lt;/a&gt;：日本語によるリファレンスおよびチュートリアル。
--&lt;a href=&quot;http://www.adobe.com/support/documentation/jp/flex/&quot;&gt;Flex ドキュメンテーション&lt;/a&gt;：上記ドキュメントへのダウンロード版。一番下の「ドキュメンテーション zip ファイル」で一括ダウンロード可能。
-非公式
--&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/&quot;&gt;akihiro kamijo blog&lt;/a&gt;：社員さんのブログ
--&lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/as30/&quot;&gt;AS3.0 メモ &lt;/a&gt;：入門には最適
--&lt;a href=&quot;http://d.hatena.ne.jp/sato-shi/&quot;&gt;Flex Coder&lt;/a&gt;：外国の Flex 技術を紹介する国内のブログ
--&lt;a href=&quot;http://www.fxug.net/&quot;&gt;FxUG&lt;/a&gt;：国内のユーザーが集うユーザーグループ
-&lt;a href=&quot;http://b.hatena.ne.jp/nitoyon/actionscript/&quot;&gt;nitoyon のはてなブックマーク (actionscript タグ)&lt;/a&gt;：自分のブックマークの宣伝。最近は ActionScript のネタを積極的に集めています。

</body>
</day>
<day date="2007-01-07" title="">
<body>
*p1*[as]Sprite のコンストラクタから stage を確実に取得する方法
Sprite を継承したクラスのコンストラクタから、stage プロパティを参照するときの注意点。
====
次のような Test.as を単体でコンパイルして SWF を生成すると問題なく動きます。
&gt;|javascript|
package{
    import flash.display.Sprite;

    public class Test extends Sprite
    {
        public function Test()
        {
            trace(stage.stageWidth);
        }
    }
}
||&lt;

ところが、Test.as を別のクラスから作成すると実行時エラーとなってしまいます。
&gt;|javascript|
    function foo():void
    {
        // !!! Error !!!: stage is null
        var test:Test = new Test();
    }
||&lt;

理由は単純。別のクラスから test インスタンスが作成された段階では、test インスタンスはステージ上に存在しないため、stage プロパティは null が返されるのです。

stage プロパティが null でなくなるのは、test インスタンスが addChild されてステージ上に現れた後になります。

そこで、次のように addChild されたときに通知を受けられるよう、Test.as を書き換えれば、無事問題は解決します。
&gt;|javascript|
package{
    import flash.display.Sprite;
    import flash.events.Event;

    public class Test extends Sprite
    {
        public function Test()
        {
            if(stage)
            {
                trace(stage.stageWidth);
            }
            else
            {
                addEventListener(Event.ADDED, addedHandler);
            }
        }

        private function addedHandler(e:Event):void
        {
            removeEventListener(Event.ADDED, addedHandler);
            trace(stage.stageWidth);
        }
    }
}
||&lt;

root や parent を取得する場合も、このテクニックが使えますね。

頻繁に追加・削除される表示オブジェクトの場合には、この Event.ADDED および Event.REMOVED のお世話になりそうです。

Flex の場合は、UIComponent の mx.events.FlexEvent.ADD イベントをハンドルしたほうがいいのかもしれません。 このへんはよく分かってないので、コメントいただければ幸い...

**補足 (2007.06.09)
add で待機せずに stage を取得する方法があるようです。なるほど、確かにこれなら動きますね。
-&lt;a href=&quot;http://blog.nium.jp/flash/actionscript3/stageroot.php&quot;&gt;blog.nium.jp | stageとrootを参照する方法&lt;/a&gt;
-&lt;a href=&quot;http://fladdict.net/blog/2007/02/as3_stage.html&quot;&gt;fladdict.net blog: AS3 で stageを参照する場合の注意点&lt;/a&gt;

</body>
</day>
<day date="2007-01-16" title="">
<body>
*p1*[as]AS3で１ファイルに複数のクラスを定義する方法
ActionScript 3.0 で１つの as ファイルにつき、複数クラスを定義する方法について調べてみました。

パッケージ宣言内にはクラス・関数・変数・名前空間のうち、１つしか含められません。そして、その名前はファイル名と同じでなければなりません。


具体的な例を元に説明してみましょう。

&gt;|javascript|
// test/SampleClass.as
package test
{
	public class SampleClass
	{
		// SampleClass の定義
	}
}

class foo
{
	// foo の定義
}

function bar():void
{
	// bar の定義
}
||&lt;

この例では、package test{...} の中に１つのクラスがあり、クラス名 SampleClass がファイル名の SampleClass.as と同じです。package test{...} の中に他のクラスや関数、変数、名前空間を含めることはできません。

残りの定義は package test{...} の外で行っています。foo クラスや bar 関数のように、いくつでも定義できますが、ファイル外からは一切参照できない点に注意してください。


まとめると、
-別ファイルに公開するクラスや関数は、パッケージ宣言に書く
-パッケージ宣言は１つのソースファイルにつき、クラス・関数・変数・名前空間のうち、ただ１つの定義しか含めることができない
となります。


パッケージの public や internal も絡みあうと複雑なので、図にまとめてみました。

[f:id:nitoyon:20070115021349j:image]

|&lt;font color=&quot;orange&quot; size=&quot;+3&quot;&gt;&lt;b&gt;&amp;larr;&lt;/b&gt;&lt;/font&gt;|パッケージ内の public なクラスはどこからでも参照できる|
|&lt;font color=&quot;#993300&quot; size=&quot;+3&quot;&gt;&lt;b&gt;&amp;larr;&lt;/b&gt;&lt;/font&gt;|パッケージ内では public/internal のクラスで相互参照できる|
|&lt;font color=&quot;#3366FF&quot; size=&quot;+3&quot;&gt;&lt;b&gt;&amp;larr;&lt;/b&gt;&lt;/font&gt;|同じファイル内のクラスは参照できる|

注意すべきは...
:class _I から class I は参照できない:class _I は package sample とは別のパッケージに存在するため、package sample の internal なクラスの参照に失敗する。
:別のパッケージ(Test.as)からは class P のみ参照できる:internal なクラスおよびパッケージ宣言外で宣言されたクラスは参照できない。


続編を書きました。
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070118/p1&quot;&gt;AS3の１ファイル複数クラスを応用してファクトリーメソッドを実装&lt;/a&gt;

</body>
</day>
<day date="2007-01-18" title="">
<body>
*p1*[as]AS3の１ファイル複数クラスを応用してファクトリーメソッドを実装
前回の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070116/p1&quot;&gt;AS3で１ファイルに複数のクラスを定義する方法&lt;/a&gt; を応用して、デザインパターンのファクトリーメソッドを実現してみます。
====

まずはインターフェースの定義。雑煮インターフェース IZouni を定義します。
&gt;|javascript|
// sample/IZouni.as
package sample
{
    public interface IZouni
    {
        function get soup():String;
        function get mochi():String;
    }
}
||&lt;

次に雑煮ファクトリー、および IZouni の実装です。

IZouni を実装した TokyoZouni, KyotoZouni は ZouniFactory.as 以外からは参照することがでません。
&gt;|javascript|
// sample/ZouniFactory.as
package sample
{
    // 雑煮ファクトリー
    public class ZouniFactory
    {
        public function create(place:String):IZouni
        {
            place = place.toLowerCase();
            switch(place)
            {
                case &quot;tokyo&quot;:
                    return new TokyoZouni();
                case &quot;kyoto&quot;:
                    return new KyotoZouni();
                default:
                    throw new ArgumentError(&quot;not implemented&quot;);
            }
            return null;
        }
    }
}

// 以下、雑煮インターフースの実装
import sample.IZouni;
class TokyoZouni implements IZouni
{
    public function get soup():String{return &quot;醤油&quot;}
    public function get mochi():String{return &quot;角焼&quot;}
}

class KyotoZouni implements IZouni
{
    public function get soup():String{return &quot;白味噌&quot;}
    public function get mochi():String{return &quot;丸煮&quot;}
}
||&lt;

これで準備完了。次のように使います。
&gt;|javascript|
// Test.as
package
{
    import sample.*;
    import flash.display.Sprite;
    import flash.utils.getQualifiedClassName;

    public class Test extends Sprite
    {
        public function Test()
        {
            var factory:ZouniFactory = new ZouniFactory();
            var z:IZouni;

            z = factory.create(&quot;Tokyo&quot;);
            trace(z.soup); // 醤油

            z = factory.create(&quot;Kyoto&quot;);
            trace(z.soup); // 白味噌

            trace(getQualifiedClassName(factory)); // sample::ZouniFactory
            trace(getQualifiedClassName(z));       // ::KyotoZouni
        }
    }
}
||&lt;

TokyoZouni や KyotoZouni クラスのメソッドに Zouni インターフェース経由でアクセスできていることが分かるかと思います。

getQualifiedClassName で KyotoZouni クラスの完全修飾クラス名を取得してみると、::KyotoZouni となっています。無名パッケージ空間にいるのでしょうか。ちなみに、Test クラスの完全修飾クラス名は Test となるため、KyotoZouni クラスは Test とも ZouniFactory とも違う名前空間で定義されているようです。


まとめます。

この方法の一番のメリットは「TokyoZouni」「KyotoZouni」のためにファイルを作らなくてよい、という点です。JavaScript のように１つのファイルに実装を詰め込むスタイルに慣れた人にはうれしい方法ではないでしょうか。

TokyoZouni や KyotoZouni の実装が込み入ってくれば、internal なクラスとしてファイルを分けてやれば OK。ただし、同一パッケージの別クラスからファクトリーを経由しなくともインスタンス生成が可能になる点には注意が必要です。通常はあまり問題にならないとは思いますが。

</body>
<comments>
<comment>
<username>racconti</username>
<body>Luogo molto buon:) Buona fortuna! http://www.canaxe.org/racconti</body>
<timestamp>1172689388</timestamp>
</comment>
</comments>
</day>
<day date="2007-01-25" title="">
<body>
*p1*[hatena][css]はてブのCSSをカスタマイズしてみた
毎日使っているのにデフォルトのスタイルのままになっていた「はてなブックマーク」の CSS を変えました。

こんな感じです。
&gt;&lt;center&gt;&lt;a href=&quot;http://b.hatena.ne.jp/nitoyon/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070126/20070126013315.jpg&quot; width=&quot;450&quot; height=&quot;319&quot;&gt;&lt;br&gt;気になるネタを気ままにブックマークしてますよ&lt;/a&gt;&lt;/center&gt;&lt;
====
「はてブ」の何となく分かりにくい部分を、分かりやすく見せることを目標に作ってみました。

以下では、今回のデザインでこだわった「タイトル部分のアイコン」と「コメントのふきだし」について簡単に説明してみたいと思います。


**タイトル部分のアイコン
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070126/20070126011207.gif&quot; border=&quot;1&quot; width=240 height=274 align=&quot;right&quot;&gt;まずは、タイトル部分。

デフォルトのタイトル部分のアイコンや数字の羅列は意味が分かりにくいですよね。マウスを乗せたらツールチップで説明が表示されるのですが、なんか直感的じゃない。この部分の数字の意味を分からずにはてブを使ってるひとも多いのでは…。


なので、画像を書き換えて分かりやすくしてみました。

RSS の青くてかっこ悪いアイコンも、オレンジ色のおしゃれなやつに。

いろんな人にお気に入りにいれてほしいので、お気に入りに追加ボタンも大きめに配置してみましたよ。


画像入れ替えの実現方法ですが、簡単にいうと、&amp;lt;a href=&quot;...&quot;&amp;gt;&amp;lt;img src=&quot;...&quot;&amp;gt;&amp;lt;/a&amp;gt; となっているところの img を hidden にして、a の background 画像を表示しちゃってます。

お気に入り追加アイコンの方は input タグだったので、もっとひどいことをして変更してるのですが、気になる人は CSS を見て「ひどー」と思ってください。

**コメントのふきだし
次に手をいれたのはコメント部分です。

デフォルトのスタイルって、せっかくコメントを書いても「俺はこう思うんだぜ」感が前面に出てない。


そこで、アバターもどきを配置して、しゃべらせてみました。こんな具合。

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070126/20070126012355.jpg&quot; border=&quot;1&quot;&gt;

さらに、左側に他のユーザーをあらわすキャラクタを配置することによって、いろんなユーザーと共有している雰囲気をかもしだしてみました。

キャラクタから線を伸ばして「○○ users」と表示することで、ユーザー数の意味も明確になりました。


ちなみに、コメントを書いていないときには「…」としゃべります。
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070126/20070126012949.jpg&quot; border=&quot;1&quot;&gt;

仕組みは単純。タグやコメントがあるときには「…」の上に重ねて表示するようにしてます。だから、タグやコメントがないときには、下の「…」が表示されるわけです。


**まとめ
ということで、CSS だけで「はてブ」の見た目をがらっと変えてみました。

タグ一覧なんかもカスタマイズしたいのですが、それはまた別の機会に。

**おまけ
次の CSS をあなたのはてブに書き加えるだけで、はてブトップページの RSS の画像がオレンジのものになります。
&gt;|css|
div.header ul.bookmarkinfo li.rss a {
  background: url('http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070123/20070123094932.png') no-repeat top;
}

div.header ul.bookmarkinfo li.rss a img {
  visibility: hidden;
  -moz-opacity:0;
  opacity:0;
}
||&lt;

こんな感じになります。

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070126/20070126223918.jpg&quot; width=&quot;370&quot; height=&quot;160&quot; border=&quot;1&quot;&gt;

ちょっと幸せでしょ？

</body>
</day>
<day date="2007-01-31" title="">
<body>
*asc_authoring*[as]asc_authoring.jar で遊んでみた
&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070130/1170144721&quot;&gt;ActionScript の勉強会で話してキタ！ - IT戦記&lt;/a&gt; のプレゼンで、asc_authoring.jar を使った開発が紹介されていたので早速ためしてみました。
====
**asc_authoring.jar の入手
プレゼンにもあるように、まずは Flash 9 Alpha をインストールして asc_authoring.jar を入手します。

**バイトコードを作ってみる
プレゼンをたよりに実験します。

&gt;|javascript|
// Test.as
package {
  public class Test {
    public function Test() {
      trace(&quot;Test&quot;);
    }
  }
}
||&lt;

という Test.as があったとして
&gt;|
java -jar asc_authoring.jar \
  -import global.abc \
  -import playerglobal.abc \
  Test.as
|&lt;
とすれば、コンパイルは完了。バイトコードに相当する Test.abc ができます。abc という拡張子は ActionScript ByteCode の略なんだろうな。

**SWF を作ってみる
SWF を作るには、Sprite クラスを継承したクラスを用意する必要があります。
&gt;|javascript|
// MySprite.as
package {
  import flash.display.*;
  import flash.text.*;
  public class MySprite extends Sprite {
    public function MySprite() {
      var test:Test = new Test();
      var text = new TextField();
      text.width = 400;
      text.text = 'MySprite';
      addChild(text);
    }
  }
}
||&lt;
手始めに mxmlc でコンパイルする場合を紹介します。
&gt;|
mxmlc -default-size 400 300 MySprite.as 
|&lt;
これだけで MySprite.swf が出力できます。

MySprite.as で Test.as を参照しているのですが、そのへんも自動的に判別してリンクしてくれています。


では、次に本題の asc_authoring.jar でのコンパイルをしてみましょう。SWF を作るには -swf でルートになる Sprite クラスを指定します。
&gt;|
&lt;font color=&quot;red&quot;&gt;# !!実行時エラー!!&lt;/font&gt;
java -jar asc_authoring.jar \
 -import global.abc \
 -import playerglobal.abc \
 &lt;strong&gt;-swf MySprite,400,300&lt;/strong&gt; \
 MySprite.as
|&lt;
これで MySprite.as はできるのですが、Test クラスが SWF に含まれていないため、実行時に参照エラーになります。

実行時エラーがいやん、という人は -strict をつければコンパイル時にエラーになります。
&gt;|
&lt;font color=&quot;red&quot;&gt;# !!コンパイル時エラー!!&lt;/font&gt;
java -jar asc_authoring.jar \
 &lt;strong&gt;-strict&lt;/strong&gt; \
 -import global.abc \
 -import playerglobal.abc \
 -swf MySprite,400,300 \
 MySprite.as

[Compiler] Error #1180: Call to a possibly undefined method Test.
   MyScript.as, Ln 7, Col 27:
         var test:Test = new Test();
   ..........................^

1 error found
|&lt;

さてさて、参照エラーを解決するには -in パラメータを使って、必要なクラスを列挙してやる必要があります。ここでは、Test.as があればいいので、-in Test.as ですね。
&gt;|
java -jar asc_authoring.jar \
 -import global.abc \
 -import playerglobal.abc \
 &lt;strong&gt;-in Test.as&lt;/strong&gt; \
 -swf MySprite,400,300 \
 MySprite.as
|&lt;
これで成功。


ソースコードからではなく ByteCode をリンクしてみたい気もします。直感的には -import Test.abc を使って次のようにできそうなんですが....
&gt;|
&lt;font color=&quot;red&quot;&gt;# !!実行時エラー!!&lt;/font&gt;
java -jar asc_authoring.jar \
 -import global.abc \
 -import playerglobal.abc \
 &lt;strong&gt;-import Test.abc&lt;/strong&gt; \
 -swf MySprite,400,300 \
 MySprite.as
|&lt;
コンパイルもできるんだけど、実行時に参照エラーになっちゃう。

MySprite.swf をバイナリエディタで覗いてみると、確かにこの場合だと Test.abc の中身が MySprite.swf には含まれていないご様子。

ByteCode のリンクはできないんだろうか・・・。

**strict について補足
strict の話がでたのでついでに補足。mxmlc はデフォルトで strict オン、asc_authoring.jar はオフになってます。切り替えるにはこうします。
|*|*ON|*OFF|
|asc_authoring.jar|-strict|(デフォルト)|
|mxmlc|(デフォルト)|-strict=false|

**まとめ
mxmlc と asc_authoring の違いを感覚的にまとめてみるとこんな感じ。
-mxmlc
--依存関係を自動的に探して、まとめてコンパイル・リンクしてくれる賢い人
--吐けるのは .swf のみ
--Sprite クラスを継承した ActionScript や MXML 以外はコンパイルできない
-asc_authoring.jar
--コンパイルやリンクはできるけど、手取り足取り依存関係を教えてあげなきゃいけない面倒な人
--.swf だけでなく、.abc も吐ける
--どんなクラスでもコンパイルできる

asc_authoring.jar は手間はかかるけど、ネイティブに近い分だけかわいい。Tamarin の avmplus.exe から直接 .abc を扱えるから余計にかわいく見えるのかな。

</body>
</day>
<day date="2007-02-01" title="">
<body>
*tamarin_trial*[as][tamarin]Tamarin と遊んでみた
&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070130/1170144721&quot;&gt;ActionScript の勉強会で話してキタ！ - IT戦記&lt;/a&gt;  のプレゼンに影響されてさらに遊んでみた。

前回は &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070131/asc_authoring&quot;&gt;こちら&lt;/a&gt;。
====
**avmplus.exe 作成
まずは Windows 環境で avmplus.exe をビルドしてみる。

Mozilla の CVS から &lt;a href=&quot;http://lxr.mozilla.org/mozilla/source/js/tamarin/&quot;&gt;mozilla/source/js/tamarin&lt;/a&gt; と &lt;a href=&quot;http://lxr.mozilla.org/mozilla/source/modules/zlib/&quot;&gt;mozilla/modules/zlib&lt;/a&gt; を持ってくる。CVS の設定は &lt;a href=&quot;http://developer.mozilla.org/ja/docs/Mozilla_Source_Code_Via_CVS&quot;&gt;Mozilla Source Code Via CVS - MDC&lt;/a&gt; を参考にした。

VS2003 で platform\win32\avmplus.sln を開いてみると、４つのプロジェクトが存在した。ざっとソースを眺めて役割はこんなところ。
:avmplus:ActionScript の実装。ActionScript ByteCode のパーサー、ECMAScript の仕様にあるオブジェクト(Array, String, Date...)の実装、E4X の実装などが入っている。avmplus.lib を出力。
:MMgc:名前から想像するにガベコレ。MMgc.lib を出力する。
:shell:avmplus.lib, MMgc.lib, zlib.lib をリンクして、avmplus.exe を出力する。avmplus.* を実装。
:zlib:説明不要。zlib。

依存関係が設定されているので、shell プロジェクトをビルドするだけで、avmplus.exe ができあがる。もちろん、バッチビルドしてもいいけど。

**お試し
プレゼンにもあったソースを試してみた。
&gt;|javascript|
// hoge.as : 正規表現で grep
import avmplus.*;
var re = RegExp(System.argv[0]);
var line;
while (line = System.readLine()) 
  if (line.match(re))
    System.write(line + '\n');
||&lt;

プレゼン通りに asc_authoring.jar で ByteCode を生成して、avmplus.exe で実行できました。すばらしい。
&gt;|sh|
$ java -jar asc_authoring.jar -import global.abc hoge.as

hoge.abc, 220 bytes written

$ avmplus.exe hoge.abc var &lt; hoge.as
var re = RegExp(System.argv[0]);
var line;
||&lt;

で、この &lt;strong&gt;import avmplus.*&lt;/strong&gt; って何？

**avmplus パッケージの謎
avmplus パッケージは ActionScript の言語仕様ではなく、shell プロジェクトで定義されている。

例えば、avmplus.System.write の実体は tamarin/shell/SystemClass.cpp の中で次のように定義されている。
&gt;|cpp|
  void SystemClass::write(Stringp s)
  {
    if (!s)
      toplevel()-&gt;throwArgumentError(kNullArgumentError, &quot;string&quot;);
    core()-&gt;console &lt;&lt; s;
  }
||&lt;

つまり、ActionScript ByteCode な世界から呼び出すパッケージを C++ で実装できる、というわけ。

shell プロジェクトは高々5,000行なので、解読も比較的簡単。自分オリジナルの avmplus.exe を作れちゃう！？

avmplus.Win32.CreateWindow とか avmplus.Win32.COM.CreateObject(&quot;InternetExplorer.Application&quot;) とか、avmplus.exe 側で実装さえすればできちゃうわけですよ。楽しそう！

**他の楽しいこと
Tamarin の中身を探索するだけでわくわく。

-test フォルダの中に大量の ActionScript テストコードがある。undocumented な細かい仕様が分かるかも。
-util フォルダの中に abcdump.as なる怪しげな ActionScript が...
-core/abcFormat.txt という ByteCode の仕様書(?)のようなものが...

注意したほうがいいのは、Tamarin の中には flash.* パッケージの定義はないので、SWF は実行できない。あくまで ActionScript の VM というわけですな。

しばらく楽しめそう！

</body>
</day>
<day date="2007-02-11" title="">
<body>
*p1*[web]新デザイン移行計画
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070125/p1&quot;&gt;はてブのCSSカスタマイズ&lt;/a&gt;に引き続き、このサイト(tech.nitoyon.com) のデザインも変更したくなってきました。

まず、tech.nitoyon.com という名前が SEO 的にも覚えやすさ的にもダメだよね、ということにやっと気づいたので、サイト名を変えることにしました。

とはいえ、ドメイン名や URL は変えたくない。じゃあ、tech.nitoyon.com を平仮名にしてみよう…。
&gt;&gt;
tech.nitoyon.com → てっくにとよん → &quot;てっく煮&quot; と ４
&lt;&lt;
「てっく煮」！！　なんかかわいい響き！


響きに悩殺された勢いで、ロゴを作ってみました。初めてまともにイラストレーター使った…。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070212/20070212022306.jpg&quot; width=&quot;400&quot; height=&quot;150&quot;&gt;&lt;/center&gt;

煮じゃなくて、椀じゃないか、という突っ込みも聞こえてきそうだけど気にしない(笑)。煮物の絵を描くのって難しそうだし。


次は、ロゴに合わせてサイト全体のデザインを固めていかなくちゃ。
</body>
</day>
<day date="2007-02-13" title="">
<body>
*p1*[as][tamarin]Tamarin の avmplus.exe に独自関数を実装
「&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070201/tamarin_trial&quot;&gt;Tamarin と遊んでみた&lt;/a&gt;」の続きです。

今回は、avmplus.exe にビルトイン関数を追加してみます。
&gt;|javascript|
// hoge.as
import avmplus.*;
System.alert(&quot;hoge&quot;);
||&lt;

avmplus.System パッケージには exit などの関数がありますが、alert 関数は実装ありません。そのため、この hoge.as を実行すると
&gt;|
$ avmplus.exe hoge.abc
ReferenceError: Error #1065
|&lt;
参照エラーになってしまいます。

これを動かすのが今回の目標です。
====
**toplevel.as の実装
toplevel.as を覗いてみましょう。
&gt;|
&lt;span class=&quot;synComment&quot;&gt;// toplevel.as&lt;/span&gt;
package avmplus 
{
    public class System
    {
        public native static function exit(status:int):void
        public native static function exec(command:String):int
        public native static function getAvmplusVersion():String
        public native static function trace(a:Array):void
        public native static function write(s:String):void
        public native static function debugger():void
        public native static function isDebugger():Boolean
        public native static function getTimer():uint
        private native static function getArgv():Array
        public static const argv:Array = getArgv();
        public native static function readLine():String
    }
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
|&lt;
avmplus.System パッケージの関数が宣言されていますね。

native キーワードがついていますが、これらの関数が C++ で関数が実装されていることをあらわします。

alert 関数も native で実装してみたいところですが、まずは ActionScript で実装してみましょう。


ということで、toplevel.as を書き換えます。System.write 関数をそのまんま使っちゃいます。
&gt;|
&lt;span class=&quot;synComment&quot;&gt;// toplevel.as&lt;/span&gt;
package avmplus 
{
    public class System
    {
        &lt;strong&gt;public static function alert(text:String):void&lt;/strong&gt;
        &lt;strong&gt;{&lt;/strong&gt;
            &lt;strong&gt;System.write(text);&lt;/strong&gt;
        &lt;strong&gt;}&lt;/strong&gt;
        public native static function exec(command:String):int
        public native static function getAvmplusVersion():String
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
|&lt;

**toplevel.as のコンパイル
さて、avmplus 側は、どう修正すればよいのでしょうか。

答えは、簡単。shell/toplevel.cpp の中にあります。
&gt;|cpp|
/* shell/toplevel.cpp */
const int toplevel_abc_length = 4403;
const int toplevel_abc_method_count = 137;
const int toplevel_abc_class_count = 15;
const int toplevel_abc_script_count = 13;
static unsigned char toplevel_abc_data[4403] = {
0x10, 0x00, 0x2e, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xef, 0x41,
0x86, 0x01, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x0d, 0x74, 0x6f, 0x70, 0x6c,
0x65, 0x76, 0x65, 0x6c, 0x2e, 0x61, 0x73, 0x24, 0x31, 0x00, 0x07, 0x61, 0x76, 0x6d, 0x70, 0x6c,
// ...
||&lt;

この16進数の羅列が toplevel.as のバイトコードなんです。toplevel.as をバイトコードに変換して、toplevel.cpp を作れば動きそうです。

ということで、toplevel.as をコンパイルしてみます。-in を指定して、他の AS もまとめてコンパイルするのを忘れずに。
&gt;|
java -jar asc_authoring.jar ^
    -import global.abc ^
    -in shell\ByteArray.as ^
    -in shell\Domain.as ^
    -in shell\DoubleArray.as ^
    -in shell\Endian.as ^
    -in shell\FloatArray.as ^
    -in shell\IntArray.as ^
    -in shell\Java.as ^
    -in shell\ShortArray.as ^
    -in shell\StringBuilder.as ^
    -in shell\UIntArray.as ^
    -in shell\UShortArray.as ^
    -in extensions\Dictionary.as ^
    shell\toplevel.as

toplevel.abc, 3850 bytes written
|&lt;

toplevel.abc が生成されました。

さらに、なんと toplevel.cpp と toplevel.h も自動的に更新されました。
&gt;|
&lt;span class=&quot;synType&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; toplevel_abc_length = &lt;span class=&quot;synConstant&quot;&gt;&lt;strong&gt;3908&lt;/strong&gt;&lt;/span&gt;;
&lt;span class=&quot;synType&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; toplevel_abc_method_count = &lt;span class=&quot;synConstant&quot;&gt;&lt;strong&gt;122&lt;/strong&gt;&lt;/span&gt;;
&lt;span class=&quot;synType&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; toplevel_abc_class_count = &lt;span class=&quot;synConstant&quot;&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/span&gt;;
&lt;span class=&quot;synType&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; toplevel_abc_script_count = &lt;span class=&quot;synConstant&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt;;
&lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;char&lt;/span&gt; toplevel_abc_data[&lt;span class=&quot;synConstant&quot;&gt;&lt;strong&gt;3908&lt;/strong&gt;&lt;/span&gt;] = {
&lt;span class=&quot;synConstant&quot;&gt;0x10&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x2e&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x02&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x02&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0xe0&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0xff&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0xff&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0xff&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0xef&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x41&lt;/span&gt;,
&lt;span class=&quot;synConstant&quot;&gt;0x79&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x08&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x72&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x65&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x61&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x64&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x4c&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x69&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x6e&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x65&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x0d&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x74&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x6f&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x70&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x6c&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x65&lt;/span&gt;,
&lt;span class=&quot;synConstant&quot;&gt;0x76&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x65&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x6c&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x2e&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x61&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x73&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x24&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x31&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x07&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x61&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x76&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x6d&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x70&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x6c&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0x75&lt;/span&gt;,
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
|&lt;
どうも、ActionScript 内に native 宣言された関数があると、cpp と h が書き出されるようです。

toplevel_abc_class_count と toplevel_abc_script_count の値が減ってしまっていますが、ひとまずは気にせずに先に進むことにします。

**いざ、実行
toplevel.cpp と toplevel.h が更新されたところで、avmplus.exe をビルドします。

いざ、実行！
&gt;|
$ avmplus.exe hoge.abc
hoge
|&lt;

やったー！

地味ですが、System.alert() が実行できたことが分かります。

**alert 関数を native 実装
さて、ActionScript で実装していた alert 関数を C++ での実装に切り替えてみましょう。

まずは、toplevel.as の編集です。alert 関数を native 宣言にします。
&gt;|
&lt;span class=&quot;synComment&quot;&gt;// toplevel.as&lt;/span&gt;
package avmplus 
{
    public class System
    {
        &lt;strong&gt;public native static function alert(text:String):void&lt;/strong&gt;
        public native static function exec(command:String):int
        public native static function getAvmplusVersion():String
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
|&lt;

toplevel.as をバイトコードに変換すると、toplevel.cpp と toplevel.h が更新されます。

native 部分の実装は System.exit 関数を参考に、shell/SystemClass.cpp と shell/SystemClass.h を修正してみます。
&gt;|
&lt;span class=&quot;synComment&quot;&gt;/* shell/SystemClass.h */&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;namespace&lt;/span&gt; avmshell
{
    &lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt; SystemClass : &lt;span class=&quot;synStatement&quot;&gt;public&lt;/span&gt; ClassClosure
    {
        
        &lt;span class=&quot;synComment&quot;&gt;//#define PERFORMANCE_GETTIMER&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;        #ifdef PERFORMANCE_GETTIMER&lt;/span&gt;
        uint64 initialTime;
&lt;span class=&quot;synPreProc&quot;&gt;        #else&lt;/span&gt;
        &lt;span class=&quot;synType&quot;&gt;double&lt;/span&gt; initialTime;
&lt;span class=&quot;synPreProc&quot;&gt;        #endif&lt;/span&gt;

    &lt;span class=&quot;synStatement&quot;&gt;public&lt;/span&gt;:
        SystemClass(VTable* cvtable);
        ~SystemClass();

        &lt;span class=&quot;synComment&quot;&gt;// set by shell&lt;/span&gt;
        &lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; user_argc;
        &lt;span class=&quot;synType&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;char&lt;/span&gt; **user_argv;

        &lt;strong&gt;&lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; alert(Stringp text);&lt;/strong&gt;

        &lt;span class=&quot;synComment&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;         * Implementation of System.exit&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;         * AS usage: System.exit(status);&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;         * Exits the VM with OS exit code specified by  status.&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; exit(&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; status);
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
|&lt;

&gt;|
&lt;span class=&quot;synComment&quot;&gt;/* shell/SystemClass.cpp */&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;#include &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&quot;avmshell.h&quot;&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;#include &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&lt;stdlib.h&gt;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;namespace&lt;/span&gt; avmshell
{
    BEGIN_NATIVE_MAP(SystemClass)
        &lt;strong&gt;NATIVE_METHOD(avmplus_System_alert, SystemClass::alert)&lt;/strong&gt;
        NATIVE_METHOD(avmplus_System_exit, SystemClass::exit)
        &lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
    END_NATIVE_MAP()

    &lt;strong&gt;&lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; SystemClass::alert(Stringp text)&lt;/strong&gt;
    &lt;strong&gt;{&lt;/strong&gt;
        &lt;strong&gt;MessageBoxW(&lt;span class=&quot;synConstant&quot;&gt;NULL&lt;/span&gt;, text-&gt;c_str(), &lt;span class=&quot;synConstant&quot;&gt;L&quot;avmplus&quot;&lt;/span&gt;, MB_ICONEXCLAMATION);&lt;/strong&gt;
    &lt;strong&gt;}&lt;/strong&gt;

    &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; SystemClass::exit(&lt;span class=&quot;synType&quot;&gt;int&lt;/span&gt; status)
    {
        ::exit(status);
    }
&lt;span class=&quot;synComment&quot;&gt;// ...&lt;/span&gt;
|&lt;

avmplus_System_alert は、先ほどの toplevel.as のコンパイル時に toplevel.h に生成されています。バイトコード中の native 宣言と C++ の中継ぎをするのが、この BEGIN_NATIVE_MAP であり、avmplus_System_alert であるわけです。

SystemClass::alert では、C++ らしく MessageBoxW 関数を呼び出しています。Win32 プログラミングではおなじみのメッセージ表示用の関数です。W は Unicode 版をあらわします。

**いざ、実行 (2)
avmplus.exe をビルドして、hoge.abc を実行してみます。

&gt;|
$ avmplus.exe hoge.abc
|&lt;

メッセージが表示されました。

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070213/20070213090152.gif&quot;&gt;

hoge.abc の再コンパイルしなくても、avmplus.exe の実装を変えるだけで挙動が変わるのがおもしろいですね！

</body>
</day>
<day date="2007-02-14" title="">
<body>
*p1*[as]ExternalInterface.addCallback で定義された関数は apply できない
ActionScript の関数を JavaScript から呼び出すときに、ExternalInterface.addCallback で関数を使うと便利なのですが、ここで公開された関数は apply, call, toString といったメソッドが定義されていません。
====
実験した ActionScript はこんなの。要は draw 関数を ExternalInterface を使って公開してます。
&gt;|javascript|
package
{
    import flash.display.*;
    import flash.external.ExternalInterface;

    public class ExtTest extends Sprite
    {
        public function ExtTest()
        {
            draw(0);
            ExternalInterface.addCallback(&quot;draw&quot;, draw);
        }

        private function draw(color:int):void
        {
            graphics.beginFill(color);
            graphics.drawCircle(0,0,50);
            graphics.endFill();
        }
    }
}
||&lt;

HTML は swfobject.js を使って楽チンに。
&gt;|html|
&lt;script src=&quot;swfobject.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
window.onload = function(){
	var so = new SWFObject(&quot;ExtTest.swf&quot;, &quot;ExtTest&quot;, &quot;300&quot;, &quot;300&quot;, &quot;9&quot;, &quot;white&quot;);
	so.write(&quot;box&quot;);
}
&lt;/script&gt;
&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;
||&lt;


準備ができたところで、FireBug のコンソールでいろいろ実験してました。
&gt;|
&lt;span class=&quot;synComment&quot;&gt;# 関数は定義されている&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&gt;&gt;&gt; $(&quot;ExtTest&quot;).draw&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;function()&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 呼び出しもできる&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&gt;&gt;&gt; $(&quot;ExtTest&quot;).draw(0)&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# でも、toString(), call(), apply() は失敗&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&gt;&gt;&gt; $(&quot;ExtTest&quot;).draw.toString()&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;$(&quot;ExtTest&quot;).draw.toString is not a function&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&gt;&gt;&gt; $(&quot;ExtTest&quot;).draw.call()&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;$(&quot;ExtTest&quot;).draw.call is not a function&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&gt;&gt;&gt; $(&quot;ExtTest&quot;).draw.apply()&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;$(&quot;ExtTest&quot;).draw.apply is not a function&lt;/span&gt;
|&lt;
apply, call, toString が定義されていないことが分かりますね。

toString と call はいいとして、apply がないのはちょっと不便です。


そこで、私は次のような実装ラッパー関数を作ってます。
&gt;|javascript|
function applySwf(swf, method, args){
    if(swf &amp;&amp; typeof swf[method] == &quot;function&quot;){
        switch(args ? args.length : 0){
            case 0: return swf[method]();
            case 1: return swf[method](args[0]);
            case 2: return swf[method](args[0], args[1]);
            case 3: return swf[method](args[0], args[1], args[2]);
            case 4: return swf[method](args[1], args[1], args[2], args[3]);
            default: throw &quot;argument too many&quot;;
        }
    }
}
||&lt;

ちょっとかっこ悪すぎな実装ですが、いちおう呼び出せます。
&gt;|javascript|
applySwf($(&quot;ExtTest&quot;), &quot;draw&quot;, [0xff0000])
||&lt;
SWF をロードした直後に、$(&quot;ExtTest&quot;).call = function(){...} としてやってもできそうなのですが、SWF 側で ExternalInterface.addCallback するタイミングは実装依存なので難しそうです。

**追記
上のへぼ実装版 applySwf 関数をかっこよくする方法が &lt;a href=&quot;http://la.ma.la/blog/diary_200702152107.htm&quot;&gt;最速インターフェース研究会 :: Functionコンストラクタを使ってJavaScriptネイティブじゃない関数をラッピングする方法&lt;/a&gt; にて紹介されています。ma.la さん、ありがとうございます。 (2007/02/16 23:00)

</body>
</day>
<day date="2007-02-20" title="">
<body>
*p1*[as]getter/setter のアクセス制御指定子は同じでなければいけない？(1)‐AS で自己カプセル化&lt;/span&gt;
次のコードはコンパイルできる。
&gt;|javascript|
package
{
	import flash.display.Sprite;

	public class Test extends Sprite
	{
		private var _sample:String;
		public function get sample():String
		{
			return _sample;
		}
		public function set sample(v:String):void
		{
			_sample = v;
		}

		public function Test()
		{
			sample = &quot;hoge&quot;;
		}
	}
}
||&lt;

でも、setter を private にした瞬間…
&gt;|
		&lt;span class=&quot;synStatement&quot;&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;function&lt;/span&gt; set sample(v:&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;):void
|&lt;

エラーになる。
&gt;|
&gt;mxmlc Test.as
設定ファイル &quot;C:\flex\frameworks\flex-config.xml&quot; をロードしています
N:\program\as\Test.as(20): col: 4 エラー: sample への参照があいまいです。

                        sample = &quot;hoge&quot;;
                        ^
|&lt;

参照が曖昧ってなぜ？　よく分からん。 &lt;font color=&quot;red&quot;&gt;(2007.2.28追記、理由が分かりました。詳しくは &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070228/p1&quot;&gt;解決編&lt;/a&gt; 参照。)&lt;/font&gt;


クラス内部のみ setter を使えるようにはできないんだろうか。もちろん、_sample を直接いじればいいんだけど、_sample という変数が存在すること自体、クラス全体に秘密にしたいこともある。

これをリファクタリング業界では &lt;strong&gt;自己カプセル化&lt;/strong&gt; というらしい。自己カプセル化を行う上で、setter だけを private にしたい、という要望は往々にしてでるはずなんだろうけど、ActionScript3 では無理なようだ。

setter の中で argument.caller から呼び出し元のクラス内を取得すればいけるかな、と思ったら、AS3 では argument.caller が定義されていないし。ううむ。


もちろん、private function setSample(s:String):void というメソッドを作ったら、やりたいことは満たされるんだけど、あんまりきれいじゃない。

</body>
</day>
<day date="2007-02-28" title="">
<body>
*p1*[as]getter/setter のアクセス制御指定子は同じでなければいけない？ (2) － 解決編
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070220/p1&quot;&gt;第1回&lt;/a&gt;の続き。

&lt;a href=&quot;http://subtech.g.hatena.ne.jp/cho45/20070223/1172228876&quot;&gt;subtech - 冬通りに消え行く制服ガールは、夢物語にリアルを求めない。 - AS3 名前空間&lt;/a&gt; さんによると、getter/setter のアクセス指定子が異なる場合は、名前空間を明示して呼び出してやれば動くようになるそうです。
====

前回のソースを修正すると、こうすれば動くようになるわけです。（id:cho45:detail さん、ありがとうございます）
&gt;|javascript|
package
{
	import flash.display.Sprite;

	public class Test extends Sprite
	{
		private var _sample:String;

		// getter は public
		public function get sample():String
		{
			return _sample;
		}

		// setter は internal
		internal function set sample(v:String):void
		{
			_sample = v;
		}

		// コンストラクタ
		public function Test()
		{
			internal::sample = &quot;hoge&quot;;
			trace(public::sample);
		}
	}
}
||&lt;

上のコードで動くようになった理由を簡単に解説します。

AS3 では private や public も特殊な名前空間として定義されている。クラスのフィールドやメソッドごとにこれらの名前空間を指定して、どの名前空間に所属させるかを決定できるわけ。

独自に名前空間を定義することもできるが、この辺の説明は割愛。詳しくは prog_actionscript30.pdf の名前空間を参照。独自名前空間としては AS3 や mx_internal が有名どころでしょうか。


今回は getter が public、setter が internal だったため、public::sample と internal::sample の２つがクラス内に定義されていたのです。

そのため、単に sample と記述すると、どっちの名前空間を参照するのかが曖昧になってしまっていたわけです。

setter なのか getter なのかを文脈で判別して、自動的に名前空間も割り当てて欲しいところなのですが、そうもいかないようです。


そこで、気になった。

名前空間が異なるなら、同じ名前の関数を作れるはず？

これはもちろんOK。
&gt;|javascript|
package
{
	import flash.display.Sprite;

	public class Test extends Sprite
	{
		public function a():void{}
		AS3 function a():void{}
	}
}
||&lt;

じゃあ、これは？？？？
&gt;|javascript|
package
{
	import flash.display.Sprite;

	public class Test extends Sprite
	{
		public function a():void{}
		private function a():void{}
	}
}
||&lt;

やっぱりダメだった。
&gt;|
Test.as(8): col: 20 エラー: オーバーライドに対応していません。
                private function a():void{}
                                 ^

Test.as(8): col: 20 エラー: 関数の定義が重複しています。
                private function a():void{}
                                 ^
|&lt;

private や public はあくまで名前空間のようなんだけど、ちょっと違うらしい。このあたりの仕様を細かくあたるなら、Tamarin のソースを見るしかないのかな…。

</body>
</day>
<day date="2007-03-05" title="">
<body>
*hateda_new_css*[web]新デザイン移行完了
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070125/p1&quot;&gt;はてブ CSS カスタマイズ&lt;/a&gt; に引き続き、ダイアリーの見た目も大幅にいじってみました。

といっても、はてなダイアリー自体はヘッダとフッタの HTML を好き勝手いじれるので、さほど苦しむことはありませんでした。むしろ、逆に自由にできる分、デザインセンスが問われて困ってしまったのですが、結局は背景画像や枠線をなくして、華美な装飾なしに読みやすくする方向にしてみました。

ヘッダやフッタはさておき、ハック心を書き立てるのが日付やカテゴリ分けの部分です。はてダの日付フォーマットに &amp;lt;span&amp;gt; タグを入れれると勘違いしていて、手元の環境でこんなデザインを作っていたのです。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070305/20070305085901.jpg&quot; width=&quot;340&quot; height=&quot;200&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

がんばって作りこんだあとに、いざ日付フォーマットに &amp;lt;span&amp;gt; と入力すると、&amp;amp;lt;span&amp;amp;gt; とエスケープされてしまい、このデザインはボツになってしまいました。無念。

*design_catalog*[css]CSS をリニューアルするときに参考にしたいページ
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070305/20070305093549.jpg&quot; width=&quot;410&quot; height=&quot;140&quot;&gt;&lt;/center&gt;&lt;
今回の CSS リニューアルでネタ出しに使ったサイトをまとめておきます。
====
-&lt;a href=&quot;http://www.smashingmagazine.com/2007/02/09/83-beautiful-wordpress-themes-you-probably-havent-seen/&quot;&gt;83個のきれいな Wordpress のテーマ集&lt;/a&gt;：83 Beautiful Wordpress Themes You (Probably) Haven’t Seen
-&lt;a href=&quot;http://www.smashingmagazine.com/2007/01/13/30-dark-designs-you-shouldve-seen/&quot;&gt;絶対見ておくべき30個の暗めのサイト&lt;/a&gt;：30 Dark Designs You Should've Seen
-&lt;a href=&quot;http://www.smashingmagazine.com/2007/01/09/css-based-footers-modern-solutions/&quot;&gt;CSS による最近のフッターデザイン&lt;/a&gt;：CSS-Based Footers: Modern Solutions
-&lt;a href=&quot;http://www.smashingmagazine.com/2006/12/19/50-beautiful-css-based-web-designs-in-2006/&quot;&gt;CSS による 2006 年の美しいサイト50選&lt;/a&gt;：50 Beautiful CSS-Based Web-Designs in 2006
-&lt;a href=&quot;http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/&quot;&gt;53個の必須 CSS テクニック53選&lt;/a&gt;：CSS-Techniques You Couldn’t Live Without&lt;/a&gt;

かっこいいデザインのサイトがサムネールつきでいっぱいなので、煮詰まったときに見るといろいろアイデアが出てきます。

実は、これ全部 &lt;a href=&quot;http://www.smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt; というブログの記事なのです。どれも はてブ では日本での紹介記事がトップにホットエントリにランクインしているので、どこかで見たことあるやつも多いかもしれません。

個人的には、この smashing magazine の &lt;a href=&quot;http://www.smashingmagazine.com/feed/&quot;&gt;RSS&lt;/a&gt; を購読すると、国内のサイトが漏らした良記事を発見できておすすめです。例えば &lt;a href=&quot;&lt;a href=&quot;http://www.smashingmagazine.com/2007/02/21/printing-the-web-solutions-and-techniques/&quot;&gt;印刷用の CSS テクニック集&lt;/a&gt; とか。もう１つの利点(?)は、あーこのサイト、また smashing magazine のネタでホットエントリ入ってるよ、とニヤリとすることもできます。


ちなみに、半分ネタばれになりますが、今回一番影響を受けたサイトは国内のこの２つのブログ。
-&lt;a href=&quot;http://hyper-text.org/&quot;&gt;WWW WATCH&lt;/a&gt;
-&lt;a href=&quot;http://saladbowl.org/&quot;&gt;ネットのサラダボウル&lt;/a&gt;
どちらもデジパという会社の社員の個人ブログです。読みやすくて洗練されていて好きなデザインなので、かなり参考にさせてもらいました。インスパイア…むしろ劣化コピーになってしまっていますが…。
</body>
<comments>
<comment>
<username>hideyor</username>
<body>はじめまして。&lt;br&gt;ネットのサラダボウルの両見です。&lt;br&gt;そういっていただいて非常にうれしいです :-)</body>
<timestamp>1173065055</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>両見さま、コメントありがとうございます。恐縮です。</body>
<timestamp>1174525455</timestamp>
</comment>
</comments>
</day>
<day date="2007-03-13" title="">
<body>
*p1*[as][tamarin]Tamarin でマルチスレッド(挫折)
Tamarin が Windows でも Mac でもビルドできるようになってるようですね。
-&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070312/1173696872&quot;&gt;IT戦記 - Linux で tamarin のビルドできた&lt;/a&gt;
-&lt;a href=&quot;http://subtech.g.hatena.ne.jp/cho45/20070312/1173713224&quot;&gt;subtech - 冬通りに消え行く制服ガールは、夢物語にリアルを求めない。 - Tamarin Mac OS&lt;/a&gt;

ということで、久々の Tamarin ネタ。

先日の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070213/p1&quot;&gt;Tamarin の avmplus.exe に独自関数を実装&lt;/a&gt; のノリで、Tamarin でマルチスレッドを実装してみました。

このコードを動かすのが目標でした。
&gt;|javascript|
import avmplus.*;

function proc():void
{
	for(var i:int = 0; i &lt; 1000; i++)
	{
		System.write(i + &quot; &quot;);
	}
}

System.threadCreate(proc);
System.threadCreate(proc);
||&lt;

avmplus に System.threadCreate 関数を実装して、意気揚々と動かしてみたところ、こんな警告が出力されてしまいました。
&gt;|
Unsafe access to GC from wrong thread!
|&lt;

Tamarin のソースを grep してみると、MMgc\GC.cpp に該当部分発見。
&gt;|
    void GC::CheckThread()
    {
#ifdef _DEBUG
#ifdef WIN32
        GCAssertMsg(disableThreadCheck || m_gcThread == GetCurrentThreadId(), &quot;Unsafe access to GC from wrong thread!&quot;);
#endif
#endif
    }
|&lt;

つまり、&lt;strong&gt;Tamarin のガベコレはマルチスレッドをサポートしていない&lt;/strong&gt;、ということらしい。ActionScript の仕様上、マルチスレッド対応で作る必要はないから考えてみれば当たり前ですね。

ちなみに、Tamarin のソースには ECMAScript の仕様で出てくる Internal Method の Function.[[Call]] が native に定義されていて、実際に呼び出すこともできます。いや、内部的にあるのは知ってましたが、実際に呼べるという事実にワクワクしてしまいますね。

</body>
</day>
<day date="2007-03-17" title="">
<body>
*gmail_atom*GMail の未読メールを自作スクリプトから読むための方法まとめ
諸般の事情で GMail の未読メールの本文を取得して、ごにょごにょ するスクリプトを作ってみたので、やり方をまとめます。

====
**1. 未読メール一覧の取得
これはご存知の方も多いとは思います。GMail の&lt;a href=&quot;http://mail.google.com/support/bin/answer.py?answer=13465&amp;topic=1574&quot;&gt;ヘルプにもある通り&lt;/a&gt;、未読メール一覧は https://mail.google.com/mail/feed/atom/ から ATOM 形式で取得できます。atom/ のあとにラベル名をつけたら、特定ラベルの未読メール一覧だけを取ってくることもできます。

認証はどうなってるかというと、Google のアカウント情報が Cookie に保存されていれば普通に表示できます。Cookie がないと HTTPS で BASIC 認証して、OK なら表示できるようになります。シンプルな仕様ですね。

取得できる ATOM はこんな感じ。ちゃんと個別のメールへアクセスするための URL も埋め込まれています。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; 
&lt;feed version=&quot;0.3&quot; xmlns=&quot;http://purl.org/atom/ns#&quot;&gt;
  &lt;title&gt;Gmail - Inbox for xxxx@gmail.com&lt;/title&gt;
  &lt;tagline&gt;New messages in your Gmail Inbox&lt;/tagline&gt;
  &lt;fullcount&gt;3&lt;/fullcount&gt; 
  &lt;link rel=&quot;alternate&quot; href=&quot;http://mail.google.com/mail&quot; type=&quot;text/html&quot; /&gt;
  &lt;modified&gt;2007-03-17T16:16:04Z&lt;/modified&gt; 
  &lt;entry&gt;
    &lt;title&gt;Subject&lt;/title&gt; 
    &lt;summary&gt;本文少し&lt;/summary&gt; 
    &lt;link rel=&quot;alternate&quot; href=&quot;http://mail.google.com/mail?account_id=xxxx%40gmail.com&amp;message_id=123456789abcdefg&amp;view=conv&amp;extsrc=atom&quot; type=&quot;text/html&quot; /&gt; 
    &lt;modified&gt;2007-03-15T00:00:00Z&lt;/modified&gt; 
    &lt;issued&gt;2007-03-15T00:00:00Z&lt;/issued&gt; 
    &lt;id&gt;tag:gmail.google.com,2004:XXXXXXXXXXXXX&lt;/id&gt; 
    &lt;author&gt;
      &lt;name&gt;差出人&lt;/name&gt; 
      &lt;email&gt;xxxx@xxxx.co.jp&lt;/email&gt; 
    &lt;/author&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;title&gt;....
||&lt;

**2. メール本文の取得
&lt;strong&gt;(追記) 2008/05/08 現在、この方法は使えなくなっています…。&lt;/strong&gt;

上の ATOM から個別のメールを表示するための URL は入手できました。

この URL にアクセスすれば、メール本文を取得できそうです。実際にブラウザで開けば本文を表示できるのですが、スクリプトから取得するとなると話は別になります。ためしに Firebug で覗いてみると、HTML の中身はこんな具合になってます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070318/20070318021700.jpg&quot; width=&quot;400&quot; height=&quot;303&quot; alt=&quot;GMail 個別メール表示のDOM構造&quot;&gt;&lt;/center&gt;&lt;

ごちゃごちゃしてますね。フレームあり、Ajax あり…。スクリプトから解析するとなると気が重くなります。


じゃあ、どうすればいいかというと、簡易 HTML 表示の URL を叩けばいいのです。簡易 HTML 形式というのは、JavaScript が使えない環境のために用意されたインターフェースです。まさに打ってつけですね。

簡易 HTML 表示のための URL の作り方はこうなります。

&gt;&lt;ol&gt;&lt;li&gt;ATOM から取得した URL のうち、message_id を抜き出す。
&lt;pre&gt;
http&amp;#x003A;//mail.google.com/mail?account_id=xxxx%40gmail.com&amp;&lt;strong&gt;message_id=123456789abcdefg&lt;/strong&gt;&amp;view=conv&amp;extsrc=atom
&lt;/pre&gt;
&lt;li&gt;message_id の前に「http://mail.google.com/mail/h/mail?view=cv&amp;search=all&amp;th=」をつける。
&lt;pre&gt;
http&amp;#x003A;//mail.google.com/mail/h/mail?view=cv&amp;search=all&amp;th=&lt;strong&gt;message_id=123456789abcdefg&lt;/strong&gt;
&lt;/pre&gt;
&lt;/ol&gt;&lt;

これだけです。なんとも簡単。

あとはこの URL に対して HTTP GET をはたけばいいだけです。レスポンスにはメール本文が含まれているので、必要な部分を正規表現で取り出すなり、XPath 使うなり、好きにスクレイピングしましょう。

**注意点
-ATOM で取得できるのは未読メールだけ
-メール本文を取得すると既読になる（次に ATOM 取得したときにはそのメールは ATOM から消えている）

**サンプル
HTA+JavaScript で作ってみました。ATOM で未読メールを取得して表示して、クリックしたら本文を取得しにいきます。

HTA にしたのは、Ajax のドメイン制限を取り除くためです。ただし、HTA からはプロセス起動もできてしまうので、セキュリティチェックは入念にしてください。このサンプルは悪意のある Subject からの攻撃は防いでいますが万全ではないかもしれません。
&gt;|javascript|
&lt;body&gt;
&lt;script&gt;
var label = &quot;&quot;;
window.onload = function(){
    var ajax = new ActiveXObject('Microsoft.XMLHTTP');
    if(!ajax) return;

    ajax.open('GET', 'https://mail.google.com/mail/feed/atom/'+label+&quot;?&quot;+(new Date()).getTime(), true);
    ajax.onreadystatechange = function(){
        if(ajax.readyState == 4 &amp;&amp; ajax.status == 200) {
            parseXML(ajax.responseXML);
        }
    }
    ajax.send(null);
}

function $(id){return document.getElementById(id);}

function parseXML(xml){
    if(!xml) return;
    var entries = xml.getElementsByTagName(&quot;entry&quot;);
    for(var i = 0; i &lt; entries.length; i++){
        var entry = entries[i];
        var title = entry.getElementsByTagName(&quot;title&quot;)[0].firstChild.nodeValue;
        var link = entry.getElementsByTagName(&quot;link&quot;)[0].attributes;
        var url = link.getNamedItem(&quot;href&quot;).nodeValue;
        if(!title || !url) continue;
        title = title.replace(/&lt;/g, &quot;&amp;lt;&quot;).replace(/&gt;/g, &quot;&amp;gt;&quot;);

        if(url.match(/message_id=([0-9a-zA-Z]+)/)){
            url = &quot;http://mail.google.com/mail/h/mail?view=cv&amp;search=all&amp;th=&quot; + RegExp.$1;
            $(&quot;mail_list&quot;).innerHTML += '&lt;a href=&quot;' + url + '&quot; onclick=&quot;return _link_click(this)&quot;&gt;' + title + '&lt;/a&gt;&lt;br&gt;';
        }
    }
}

function _link_click(elm){
    var ajax = new ActiveXObject('Microsoft.XMLHTTP');
    if(!ajax) return;

    var url = elm.href;
    ajax.open('GET', url, true);
    ajax.onreadystatechange = function(){
        if(ajax.readyState == 4 &amp;&amp; ajax.status == 200) {
            // ajax.responseText に本文が入ってる
            //alert(ajax.responseText);
        }
    }
    ajax.send(null);
    return false;
}
&lt;/script&gt;
&lt;div id=&quot;mail_list&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
||&lt;

おわり。
</body>
<comments>
<comment>
<username>かんた</username>
<body>非常に参考になりました！ありがとうございます！&lt;br&gt;ためさせてもらった際、&lt;br&gt;簡易HTMLのmessage_idを付与するところの囲み&lt;br&gt;&gt; http://mail.google.com/mail/h/mail?view=cv&amp;search=all&amp;th=message_id=123456789abcdefg&lt;br&gt;は&lt;br&gt;http://mail.google.com/mail/h/mail?view=cv&amp;search=all&amp;th=123456789abcdefg&lt;br&gt;ですね。</body>
<timestamp>1185506387</timestamp>
</comment>
<comment>
<username>sbtn</username>
<body>参考にさせてもらいました。Vista用ガジェットにして使ってます。</body>
<timestamp>1200048795</timestamp>
</comment>
</comments>
</day>
<day date="2007-03-20" title="">
<body>
*apollo_preview1*Apollo 触ってみた。すごすぎ。
&lt;a href=&quot;http://labs.adobe.com/technologies/apollo/&quot;&gt;Apollo のα版がリリースされた&lt;/a&gt;ので、さっそく触ってみました。

初日はランタイムをインストールしてサンプルを動かしてみました。コンパイルは時間がなくてまだ試せてません。
-2007.2.24追記：&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/html-js.html&quot;&gt;HTML+JS版 Apollo アプリを作ってみる&lt;/a&gt; で解説文章を書きはじめています

Apollo を知らない人のために、おおざっぱにざっくり説明しておくと、Apollo は Web アプリを作るようにローカルアプリケーションを作れるようになるステキなライブラリです。Flash だけに縛られているわけではなく、Flash, Flex, HTML, Ajax などを統合して利用することができます。イメージはこんな感じ（Adobe の apollo_docs_alpha1_031907.zip からの引用）。

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070322/20070322093759.gif&quot; width=&quot;428&quot; height=&quot;316&quot; alt=&quot;Apollo イメージ&quot;&gt;

図からもわかるように、HTML/JavaScript だけで Apollo API を利用してローカルアプリを作ることもできます。さらに、HTML/JavaScript で作ったアプリの中に Flash を表示できるのはもちろん、その逆、Flash から HTML/JavaScript で作ったコンポーネントを利用、といったことも簡単にできます。既存の JavaScript のライブラリを活用しつつ、CSS でレイアウトするのは面倒なので、レイアウトだけ Flex で、といった開発もできるようになりそうです。

**サンプルアプリ６つ起動してみた
apollo_docs_alpha1_031907.zip には６つのサンプルが付属していたので、全部インストールして起動してみました。((&lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Apollo:Applications:Samples&quot;&gt;Apollo:Applications:Samples&lt;/a&gt; でも別のサンプルが公開されていますが、記事執筆時点ではサイトが落ちていて試せませんでした。これらのサンプルについては &lt;a href=&quot;http://www.atmarkit.co.jp/news/200703/19/apollo.html&quot;&gt;アルファ公開したアドビ「Apollo」を早速使ってみた － ＠IT&lt;/a&gt; が詳しいです。))

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070320/20070320092019.jpg&quot; width=&quot;450&quot; height=&quot;360&quot; alt=&quot;サンプル6つ&quot;&gt;&lt;/center&gt;&lt;

それぞれにいろいろ特徴ありそう。左上から順にソースを流し読みしてみました。
====

***左上：Pixel Perfect
半透明が美しい定規アプリです。ソースコードはわずか合計13KB。

なにがうれしいって、このアプリ、ActionScript だけで書かれています。MXML や Flex の力を借りることなく、ActionScript で class Hoge extends Sprite とするだけで GUI アプリが書けるのは魅力的です。

***中央上：PrefsXML Demo
ウインドウの表示位置を XML で保存する、というだけのアプリなのですが、一番夢を感じました。この手のプロファイル保存って、GUI アプリのめんどくさいところの１つなのですが、この XML を作るソースにはしびれてしまいます。
&gt;|javascript|
private function createXMLData():void 
{
	prefsXML = &lt;preferences/&gt;;
	prefsXML.windowState.@width = stage.window.width;
	prefsXML.windowState.@height = stage.window.height;
	prefsXML.windowState.@x = stage.window.x;
	prefsXML.windowState.@y = stage.window.y;
	prefsXML.saveDate = new Date().toString();
}
||&lt;

E4X 万歳、ECMAScript 万歳、といったところでしょうか。情報保存用のクラスを用意する必要はなく、XML を変数のように扱って気軽に突っ込んでいってます。あとは、prefsXML.toXMLString() とするだけで、XML を出力できるわけです。

.NET Framework もびっくりの手軽さです…。

***右上：File Search
ローカルファイルにアクセスできますよ、というのを実証するための検索ツールです。特定のディレクトリ以下をファイル名で検索できます。見た目は Flex そのものですね。

***左下：Text Editor
Flex で作られたテキストエディタです。ファイルのロード・セーブができます。日本語は UTF-8 なら開けるようです。そのうち誰かが Encode.as を作ってくれて、文字コードなんでもいけるようになるはず！

***中央下：Text Editor (HTML-based)
こちらは Text Editor の HTML 版です。HTML と JavaScript でできています。HTML/JavaScript だけで Apollo アプリを作れているのがよく分かりますね。

ActionScript で書いたこういうコードは
&gt;|javascript|
import flash.filesystem.*;

function fileOpen():void
{
	stream = new FileStream();
	stream.open(&quot;c:\\foo.txt&quot;, FileMode.READ);
}
||&lt;
JavaScript だとこうなります。
&gt;|javascript|
function fileOpen():void
{
	stream = new runtime.flash.filesystem.FileStream();
	stream.open(&quot;c:\\foo.txt&quot;, runtime.flash.filesystem.FileMode.READ);
}
||&lt;

どちらからも同じライブラリを使っているのがよく分かりますね。

***右下：WeatherStation
米 Yahoo の天気予報 API を叩いて、Y! から取得した画像を組み合わせて表示してます。いかにもガジェットっぽい見た目ですね。

Apollo アプリはどのドメインからでもデータを取ってくることができるので、いろんなサイトの API をフル活用することができます。もちろん、E4X で XML との親和性も抜群、REST でも SOAP でもなんでもこい。複数のサイトの API でマッシュアップ、なんてこともサーバーレスで実現できそうです。

**サンプルのインストール
さて、先ほどサンプルをインストールした、と簡単に書きましたが、インストーラについても簡単に触れておきましょう。

Apollo のインストーラは全て拡張子が .air になっています。この .air は Apollo ランタイムを入れた段階で Adobe Apollo Application Installer (C:\Program Files\Common Files\Adobe Apollo\Versions\1.0.M3\apollo.exe) に関連付けられており、Apollo アプリケーションのインストールを一元管理するようです。

.air を起動すると、まずはこんな画面が登場。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070320/20070320091307.jpg&quot; width=&quot;300&quot; height=&quot;225&quot; alt=&quot;インストーラ1&quot;&gt;&lt;/center&gt;&lt;

アプリケーションの製作者の情報や実行権限の情報が表示されます。信頼できそうにないベンダーのアプリだけどファイルの読み書きは行わいならインストールしよう、とか、この会社のアプリならファイルの読み書きは認めよう、とか、Adobe 社が認めるならインストールしよう、といった判断が行えるわけです。マニュアルによると、将来的にはアプリケーションにどれだけのアクセス権限を与えるか選べるようになるようです。

「Install」を選ぶと次の画面。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070320/20070320091306.jpg&quot; width=&quot;300&quot; height=&quot;225&quot; alt=&quot;インストーラ2&quot;&gt;&lt;/center&gt;&lt;

よくあるインストーラの設定ですね。「スタートメニューに追加する」「デスクトップにショートカットを置く」をどうするか選べます。インストール先のパスは今のところ C:\Documents and Settings\&lt;username&gt;\Program Files\&lt;publisher&gt;\&lt;name&gt; で固定のようです。&lt;publisher&gt; と &lt;name&gt; というのは Apollo アプリ製作者が application XML と呼ばれる XML ファイルで指定する値です。

「Continue」を選ぶとインストールが進み

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070320/20070320091305.jpg&quot; width=&quot;300&quot; height=&quot;177&quot; alt=&quot;インストーラ3&quot;&gt;&lt;/center&gt;&lt;

無事、インストール完了です。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070320/20070320091304.jpg&quot; width=&quot;300&quot; height=&quot;158&quot; alt=&quot;インストーラ4&quot;&gt;&lt;/center&gt;&lt;

開発者からの視点で見ると、application XML を書くだけで、自動的にインストーラまで作ってくれるのは非常に魅力的です。サンプルについていた XML はこんな具合でした。シンプルですよね。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;application appId=&quot;com.adobe.apollo.samples.FileSearch&quot; version=&quot;1.0&quot; xmlns=&quot;http://ns.adobe.com/apollo/application/1.0.M3&quot;&gt;
	&lt;properties&gt;
		&lt;name&gt;File Search&lt;/name&gt;
		&lt;description&gt;A sample Apollo application.&lt;/description&gt;
		&lt;publisher&gt;Apollo Samples&lt;/publisher&gt;
		&lt;copyright&gt;&amp;copy; 2007&lt;/copyright&gt;
	&lt;/properties&gt;
	&lt;rootContent systemChrome=&quot;none&quot; transparent=&quot;false&quot; visible=&quot;true&quot;&gt;[SWF reference is generated]&lt;/rootContent&gt;
	&lt;icon&gt;
		&lt;image16x16&gt;icons/ApolloApp_16.png&lt;/image16x16&gt;
		&lt;image32x32&gt;icons/ApolloApp_32.png&lt;/image32x32&gt;
		&lt;image48x48&gt;icons/ApolloApp_48.png&lt;/image48x48&gt;
		&lt;image128x128&gt;icons/ApolloApp_128.png&lt;/image128x128&gt; 
	&lt;/icon&gt;
&lt;/application&gt;
||&lt;

-(追記) この XML ファイルのことを「ADF(Apollo Descriptor File)」と呼ぶそうです。
-(追記) インストール後に .air を実行すると、アンインストールできるようです。それもすごい。（ネタ元：&lt;a href=&quot;http://d.hatena.ne.jp/miya2000/20070320/p0&quot;&gt;Adobe Apollo で Hello World - m2&lt;/a&gt;）

おわり。

</body>
<comments>
<comment>
<username>ｐｌ</username>
<body>http://spitnews.blog96.fc2.com/blog-entry-222.html</body>
<timestamp>1174407761</timestamp>
</comment>
</comments>
</day>
<day date="2007-03-21" title="">
<body>
*p1*Apollo コンパイルではまった...
無駄につまづきました。メモ代わりに。
&gt;&lt;ul&gt;
&lt;li&gt;Flex SDK 2.0.1 が必須。2.0.0 ではダメ。2.0.0 が既に入っている場合は、上書きインストールではなく、新規インストールのほうが無難。
&lt;li&gt;Flex SDK 2.0.1 を入れた上に、Apollo SDK を上書きコピーする。&lt;/li&gt;
&lt;li&gt;apollo_docs_alpha1_031907.zip にあるサンプル「Create your first Flex-based Apollo application using the Apollo」がそのままだと動かない。XML で visible=&quot;false&quot; となっているが、これを visible=&quot;true&quot; にしなければならない。
&lt;li&gt;appId が同じアプリケーションは２重起動できない。visible=&quot;false&quot; で表示されないアプリを作ってしまうと、何度コンパイルして実行しても表示できない状態になってしまう。これははまった...
&lt;li&gt;trace の出力先が Debug Player 9.0.28 (2006/11/14 リリース)からは &lt;pre&gt;C:/Documents and Settings/[username]/Application Data/Macromedia/Flash Player/Logs/flashlog.txt&lt;/pre&gt;に固定になっている。mm.cfg で TraceOutputFileName を設定してもきかない。mm.cfg の設定は次のようにすべし。
&lt;pre&gt;
ErrorReportingEnable=1
TraceOutputFileEnable=1
MaxWarnings=0
&lt;/pre&gt;
&lt;/ul&gt;&lt;
</body>
</day>
<day date="2007-03-23" title="">
<body>
*p1*Apollo チュートリアル執筆中
予想以上に Apollo の注目が高くて驚いていますが、Apollo アプリの作り方をまとめはじめています。そこそこ大ネタなので本家のほうに掲載していきます。

本日、第１回分をアップロードしました。３回ぐらいに分けて書いていく予定です。
-第１回：&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/html-js.html&quot;&gt;HTML+JS版 Apollo アプリを作ってみる&lt;/a&gt;
-第２回：&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/as_apollo.html&quot;&gt;ActionScript 版 Apollo アプリを作ってみる&lt;/a&gt;
-第３回：ActionScript 版を修正してみよう
ご期待ください。

&lt;strong&gt;(2007.3.24 2:00追記) 第１回のサンプルに重大なセキュリティ上の問題があることが発覚いたしました。現在は修正済みですが、万が一インストールされた方がいらっしゃいましたら、直ちにアンインストールしていただくようお願いいたします。&lt;/strong&gt;現在は問題を修正したバージョンを公開しています。

(2007.4.1 3:30追記) 第２回、公開しました。
</body>
</day>
<day date="2007-03-27" title="">
<body>
*p1*あまり語られていない Apollo のセキュリティについてまとめてみた
(2007年10月追記) &lt;strong&gt;この記事は、Adobe AIR と呼ばれている技術のα版時点でのセキュリティについて述べています。2007年10月現在での最新版についての情報は、以下のページを参照してください。&lt;/strong&gt;
-&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/10/adobe_air_2_1.cfm&quot;&gt;akihiro kamijo: Adobe AIR ベータ 2 セキュリティ関連の変更点&lt;/a&gt;
-&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/10/adobe_air_1.cfm&quot;&gt;akihiro kamijo: Adobe AIR のデジタル署名機能について&lt;/a&gt;
(追記ここまで)


&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/03/apollo.html&quot;&gt;void element blog: いろんな意味でしゃれにならないApollo&lt;/a&gt; にて Apollo はセキュリティ的に危ないよ、という話が出ていたので、ちょっと調べてみました。

Web 技術を使っているとはいえ、ローカル環境で動くので、ある程度の覚悟をもってインストールする必要があります。今回は、その心構え（？）のようなものをまとめてみました。セキュリティは専門ではないので、つっこみは大歓迎です。
====
**Apollo アプリはローカル アクセス自由
Apollo はアプリケーションとして動くわけですから、ローカル ファイルの読み・書き・追加・削除は自由にできます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070328/20070328001744.jpg&quot; width=&quot;377&quot; height=&quot;264&quot; alt=&quot;自由にアクセスするよ&quot;&gt;&lt;/center&gt;&lt;

**どう対策するか？
冒頭に紹介した &lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/03/apollo.html&quot;&gt;void element blog: いろんな意味でしゃれにならないApollo&lt;/a&gt; では、簡単に作れるから誰でも悪用できる、という主張がされていますが、その危険性は今に始まったことではありません。

Firefox の Greasemonkey や拡張機能 (.xpi) にも同様の危険性はあります（参考：&lt;a href=&quot;http://d.hatena.ne.jp/nazoking/20050701/1120190176&quot;&gt;nazonoDiary - Greasemonkeyは恐ろしい&lt;/a&gt;）。拡張機能に及んでは、ローカルファイルにもアクセスできます。どちらも Web 技術を応用しています。

我々がとれる対策は１つだけです。&lt;strong&gt;信頼できる人が作っているか&lt;/strong&gt;で判断するしかありません。フリーソフトが流行っていた昔も、Web サービスが人気の今も、ローカル アプリが流行るかもしれない今後も変わらない対策方法です。

**Apollo ランタイムの今後の流れ
とはいえ、信頼できないアプリを安全に実行するための仕組みもほしいところです。&lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Apollo:Documentation:Understanding_Apollo_security&quot;&gt;Apollo:Documentation:Understanding Apollo security - Adobe Labs&lt;/a&gt; には次のような記述があります。

&gt;&gt;
α版では Apollo アプリはローカル ファイルへのアクセスは自由だよ。でも、今後のバージョンでは、Apollo アプリ自体の設定やインストール時の設定によって、アクセスの自由度は変わってくると思うよ(意訳)。
&lt;&lt;

将来的には Apollo アプリが「俺、ローカル ファイルは読みとらへんから、インストールしてーな」などと主張してくるようになるわけです。それを見て、あなたはインストールするのか、しないのか、それとも制限つきでインストールするのかを選べるのです。

たとえ名も知らぬ信頼できそうにない作者のアプリだったとしても、アクセス範囲が狭ければ気軽にインストールできます。もしくは、動作イメージをしるために、ファイルの読み書きを禁止した上で、動かしてみることだってできるようになるのです。


**実はリモート ファイルからもローカル アクセス自由
これはちょっとびっくりです。

インターネットから JavaScript や SWF をダウンロードして表示すると、その&lt;strong&gt;インターネット上のファイルから Apollo API 経由でローカル アクセスできてしまう&lt;/strong&gt;のです。

HTML 版 Apollo アプリでも、

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070328/20070328001743.jpg&quot; width=&quot;377&quot; height=&quot;209&quot; alt=&quot;HTML 版ロード&quot;&gt;&lt;/center&gt;&lt;

SWF 版 Apollo アプリもそうです。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070328/20070328001742.jpg&quot; width=&quot;377&quot; height=&quot;249&quot; alt=&quot;SWF 版ロード&quot;&gt;&lt;/center&gt;&lt;

図にも描きましたが、１つだけ例外があります。SWF 版 Apollo アプリから HTML を表示するときには、exposeRuntime というフラグで「ロードする HTML にローカル アクセスを認めるか」を制御できます。しかも、デフォルト値は false（認めない）と安全側に倒れています。


Apollo のマニュアル(&lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Apollo:Documentation:Understanding_Apollo_security&quot;&gt;Apollo:Documentation:Understanding Apollo security - Adobe Labs&lt;/a&gt;)には次のような注意書きが載っています（日本語は意訳）。
-セキュリティ ホールを作らないために一番気をつけなきゃいけないのは、外部のデータを読み取るときだよ
--信頼できないページへのリンクを張っちゃダメ
--信頼できない SWF をロードしちゃダメ
--JSON をロードしたら、実行されるかもしれないよ (訳注：JSONP のことかな？)
--外部ソースからのデータを読み取ってファイル書き込みするときは、必ず validate しようね
-まだα版だから、潜在的な脆弱性つながりそうなところがあったら教えてね

つまり、善意のつもりで作ったはずの Apollo アプリが、インターネット上の悪意のあるファイルをロードしてしまった段階で、危険な行動をしてしまうかもしれないのです。

正式版がでるまでには、ローカルアクセスを禁じた上で外部リソースを表示するような仕組みがほしいものです。パッケージに含まないファイルをロードするときには、デフォルトで安全側に倒れているような設計なら最高です。

**自作サンプルに紛れていたセキュリティー ホール
恥ずかしながら、先日公開した、&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/html-js.html&quot;&gt;HTML+JS版 Apollo アプリを作ってみる&lt;/a&gt; のサンプルにはセキュリティ ホールが紛れていました。

簡単な RSS リーダーを作ってみよう、という企画だったのですが、RSS で取得した URL を Apollo アプリ中で素直に &amp;lt;a&amp;gt; タグでリンクしてしまっていたのです。リンクをクリックした先のページに悪意があれば、ローカル ファイルにアクセスができてしまう状態でした。

現在は、リンクはしないバージョンに修正していますが、これじゃ RSS リーダーというよりも、ただのヘッドライン リーダーです。flash.net.navigateToURL 関数を使えば、ブラウザで開くこともできるのですが、サンプルのソースが複雑になるので掲載は諦めました。

危険なコードを排除してから表示する、といった方法も考えられますが、そこまでやるのはさすがに馬鹿馬鹿しい気分です。安全な Sandbox でページを表示するための仕組みの登場が望まれます。

**まとめ
まとめるとこうなります。

-Apollo のα版はセキュリティ的には怖い。
-正式版では改善されるはず。
-でも、結局は他人のアプリをインストールするなら自己責任で。

Apollo の今後のバージョンにおいて、セキュリティ機能がどのように強化されるのか、興味を持って見ていきたいと思います。

セキュリティ機能が複雑になれば、その分、開発の手間が増えてしまうかもしれません。しかし、このままセキュリティー的にずぶずぶなままリリースされると、Apollo＝危険という図式ができあがってしまって、Active X の二の舞になってしまいかねません。

設計にセンスを問われる部分ですが、Apollo 開発陣が優秀なことを信じて、α版のセキュリティ解説はひとまず終わりにします。

**おまけ：サンプル ソース
***HTML+JavaScript 版 Apollo アプリでの危険性テスト
Apollo アプリとして利用する HTML
&gt;|html|
&lt;body&gt;
&lt;a href=&quot;http://www.example.com/test.html&quot;&gt;test&lt;/a&gt;
&lt;/body&gt;
||&lt;

サーバーにおいておく HTML
&gt;|html|
&lt;script&gt;
var file = runtime.flash.filesystem.File.desktopDirectory.resolve(&quot;test.txt&quot;);
var stream = new runtime.flash.filesystem.FileStream();
stream.open(file, runtime.flash.filesystem.FileMode.WRITE);
stream.writeUTFBytes(&quot;hello world&quot;);
stream.close()
&lt;/script&gt;
test
||&lt;

リンクをクリックすると、デスクトップに test.txt が作成される。

***SWF 版 Apollo アプリでの危険性テスト
Apollo アプリとして利用する mxml
&gt;|xml|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;&gt;
  &lt;mx:SWFLoader source=&quot;http://www.example.com/test.swf&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;/mx:Application&gt;
||&lt;

サーバーにおいておく SWF の元になる ActionScript。
&gt;|javascript|
package {
    import flash.display.*;
    import flash.filesystem.*;
    
    public class sec_test extends Sprite {
        public function sec_test():void {
            var file:File = File.desktopDirectory.resolve(&quot;test.txt&quot;);
            var stream:stream = new stream();
            stream.open(file, FileMode.WRITE);
            stream.writeUTFBytes(&quot;hello world&quot;);
            stream.close()
        }
    }
}
||&lt;

Apollo アプリを起動すると、デスクトップに test.txt が作成される。
</body>
<comments>
<comment>
<username>dyo</username>
<body>とても気になっていたので参考になりました。&lt;br&gt;ありがとうございました。&lt;br&gt;とてもいい構想なだけにセキュリティーをしっかりして欲しいですね。</body>
<timestamp>1175844582</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-03" title="">
<body>
*twitter*[twitter]twitter はじめました
世間で流行しはじめてる雰囲気のある &lt;a href=&quot;http://twitter.com/&quot;&gt;twitter&lt;/a&gt; をはじめてみました。
-http://twitter.com/nitoyon

メッセンジャーの名前で「＠なになに中」とかって書いてるのを１つのサービスにしてしまったようなイメージです。自分が何してるよ、ってのを、ゆるーくみんなに伝えられるのが楽しい。

状態変更は twitter にログインして入力すればできますが、何より楽しいのが IM 連携。IM を登録すれば、IM からも更新できるようになるのです。IM にお友達の状態変更も通知されるのが、リアルタイム性を煽って面白い。

IM として GTalk を登録すると GMail のチャット機能を使って更新できるようになるので、普段から GMail を使ってる人は手になじんだツールで状態更新できて本当にお手軽。その上、お友達の状態変更を GMail で受け取れるし、オフラインのときの変更履歴は GMail で閲覧できちゃう。

もちろん、RSS で購読できたり、API で変更したり、いろんなインターフェースに対応していて、しばらく遊べそう。

IM との連携が予想外に楽しいなぁ！

※ 日本語がたまに通らないけど &lt;a href=&quot;http://www.akiyan.com/blog/archives/2007/04/twitter.html&quot;&gt;Twitterで日本語を入力する方法 : akiyan.com&lt;/a&gt; を参考にしたらだいぶいけるようになりました。

-(2007.04.04 15:00 追記) twitter が重い。しかも、IM 機能が使えないから面白さが半減してる...
-(2007.04.05 14:00 追記) IM 機能復活。末尾に ' .'(SPACE + dot) をつけると、IM からでも確実に更新できる模様。
</body>
<comments>
<comment>
<username>uzu-flat</username>
<body>はじめてコメントいたします。twitterおもしろそうですね！私も登録してみました。楽しい使い方をされているご様子なので、参考にさせていただきますｍ（＿ ＿）ｍ</body>
<timestamp>1176427883</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-04" title="">
<body>
*flash_cs3_review*Flash CS3 で開発者とデザイナの連携・分業が簡単になりそうだ
先日、Flash CS3 (Flash 9) が発表されました。発表されるまでは、Adobe が開発者とデザイナの連携方法をどのように思い描いているのかが分からなかったのですが、今回の発表でだいぶ見えてきました。

と、その前に Flash CS3 の新機能をざっとサーベイしてみます。
====
**Flash CS3 の新機能
情報源は &lt;a href=&quot;http://www.adobe.com/products/flash/features/&quot;&gt;Adobe Flash CS3: Features&lt;/a&gt; と &lt;a href=&quot;http://www.adobe.com/devnet/flash/articles/introducing_flash_cs3.html&quot;&gt;Introducing Adobe Flash CS3 Professional&lt;/a&gt; あたりです。
:Photoshop, Illustrator からのインポートが便利に:Adobe と Macromedia 合併の成果ですね。.psd や .ai からレイヤーを選択してインポートしたり、ベクターデータをそのままインポートしたり、文字列を編集可能なままインポートしたりできるようになりました。
:Adobe CS 3 共通の UI:折りたたんで省スペース化できる新しいパネル、パネルの配置を複数保存できるワークスペース機能が登場します。この UI は Adobe CS 3 ですべて共通です。
:新しいシェイプ:角丸や同心円が簡単に作れるようになりました。また、ベクターデータは Illustrator と同じようにいじれるようになりました（好き嫌いは出るでしょうが...）。
:ActionScript 3.0 対応:ActionScript 3.0 を使えるようになりました。デバッグ機能も Flex Builder 2 と同等のものを装備しているようです。
:タイムラインアニメーションを ActionScript 3.0 に変換:すぐあとで説明します。

他にもビデオエンコード機能の進化、Adobe Device Central CS3 と呼ばれる携帯端末のシミューレータ、Quick Time サポートの向上などなど、いろいろな目玉はあるようですが、中でも &lt;strong&gt;タイムラインアニメーションを AS3 に変換&lt;/strong&gt; という機能がおもしろいです。
====
**タイムラインアニメーションを AS3 に変換する機能!?
いったいどんな機能なのでしょうか。

&lt;a href=&quot;http://www.adobe.com/products/flash/features/&quot;&gt;Adobe - Adobe Flash CS3: Features&lt;/a&gt; の動画に変換後のソースコードが映っていたので書き写してみました。(分からないところは ... で省略しています)
&gt;|javascript|
import fl.motion.Animator;
var can_animation_xml:XML = &lt;Motion duration=&quot;25&quot; xmlns=&quot;fl.motion.Animator&quot;&gt;
  &lt;source&gt;
    &lt;Source frameRate=&quot;30&quot; x=&quot;-16.4&quot; y=&quot;138.1&quot; scaleX=&quot;1.6&quot; ...
      &lt;dimensions&gt;
        &lt;geom:Rectangle left=&quot;-15&quot; top=&quot;-7&quot; width=&quot;120&quot; ...
      &lt;/dimensions&gt;
      &lt;transformationPoint&gt;
        &lt;geom:Point x=&quot;0.5&quot; y=&quot;0.49772&quot;/&gt;
      &lt;/transformationPoint&gt;
    &lt;/Source&gt;
  &lt;/source&gt;

  &lt;Keyframe index=&quot;0&quot; tweenSync=&quot;true&quot;&gt;
    &lt;filters&gt;
      &lt;filters:BlurFilter blurX=&quot;120&quot; blurY=&quot;0&quot; quarity=... /&gt;
    &lt;/filters&gt;
  &lt;/Keyframe&gt;

  &lt;Keyframe index=&quot;1&quot; tweenSync=&quot;true&quot; x=&quot;91.85&quot; y=&quot;-0.009999&quot; ....
    &lt;filters&gt;
      &lt;filters:BlurFilter blurX=&quot;110.00...&quot; ...
    &lt;/filters&gt;
  &lt;/Keyframe&gt;
||&lt;

アニメーションの情報が XML 形式で書き出されているのが分かります。E4X で直接 can_animation_xml 変数に XML を流し込んでいます。

&amp;lt;geom:Rectangle&amp;gt; や &amp;lt;geom:Point&amp;gt; といったタグがあるので、SVG や VML みたいに使えるのかと思ったのですが、そうではなく、単にアニメーションを行う領域を定義しているだけのようです。

&amp;lt;Keyframe&amp;gt; タグでそれぞれのフレーム（24fps なら 1/24秒）での表示方法を指定しています。このサンプルは移動しながら blur 値が変わっていくものだったのですが、まさにそのような XML になっていますね。

fl.motion.Animator というクラスを import しているのも気になりますが、いまのところ Animator クラスに関する情報は公表されていません。


複雑なアニメーションを ActionScript だけで実現するのは面倒ですが、Flash CS3 を使って手軽にアニメーションデータを作れるようになりそうです。


**開発者がやること、デザイナがやること
さて、冒頭にも軽く述べましたが、開発者とデザイナの連携方法です。今後、Flash を活用したウェブサービスや Apollo アプリケーションの開発では、開発者とデザイナが連携して開発を進める機会は増えていくでしょう。

Flash 8 までは、お世辞にも共同開発しやすい環境とはいえなかったのですが、Flash CS3＋ActionScript 3.0 の登場により、だいぶ状況は改善してきそうです。

今回のアニメーションの AS3 書き出し機能の発表から、１つの連携方法を想像してみました...

-デザイナは全体のパーツとなる部分をそれぞれ SWF や画像で作る
-開発者がアニメーションの細かな動きを ActionScript から制御したい場合は、デザイナは別途タイムラインアニメーションを XML 形式で書き出す。
-デザイナがアニメーションのパラメータを変更したとしても、プログラマが再コンパイルするだけで対応できる。

アプリケーションの魅力を左右するアニメーション部分をデザイナの管理下に置けるのは大きな利点でしょう。これは、MVC モデルでいうところの、&lt;strong&gt;V を完全にデザイナに任せてしまえる&lt;/strong&gt;ことを意味します。

さらに、Flash 8 までは ActionScript を SWF 化するためには Flash でパブリッシュしなければならなかったのが、Flash CS3 での ActionScript 3.0 採用により、コマンドラインでビルドできるようになりました。つまり、Flash CS3 をデザイナが素材作りのために使うツールとして位置づけてしまい、アプリケーション全体はプログラマが ActionScript で管理することが可能になります。いいかえれば、MVC モデルでいうところの、&lt;strong&gt;M と C をプログラマの手中に収められる&lt;/strong&gt;ことを意味します。

けっこう幸せそうですよね。

**それでもやっぱり分からない
とはいえ、SWF の中に ActionScript を埋め込んでコンポーネント化したほうが、アプリケーションの設計としてはシンプルな気もします。しかし、そうするためには、今までどおり、開発者が Flash CS3 を触らなければなりません。Flash CS3 から ActionScript をインクルードすることはできるでしょうが、デザイナが作った各 MovieClip の名前を意識して ActionScript のコーディングをする必要が出てきますし、動作検証をするためには Flash CS3 でパブリッシュしなければなりません。

そうなると、ファイルの排他処理やバージョン管理が煩雑になりますし、デッドロックが発生してしまうことも出てくるでしょう。

結局、昔と変わってない悲しい状況...

いまだに情報がはっきりしておらず、このあたりのノウハウを確立できるのは Flash CS3 が発売されて、実際に触ってからになりそうです。

</body>
</day>
<day date="2007-04-08" title="">
<body>
*twitter2*[twitter]Twitter が面白い
Twitter にすっかりはまってしまって、ここのブログのネタになりそうなことは何も手についていません。

初めのうちは、ゆるーく自分がしてることを伝えるのが楽しかったのですが、Friends が増えてくると、ゆるーくコミュニケーションする感じが面白くなってきました。つぶやくも自由、話しかけるも自由、放置するも自由。そんな空気感が居心地いいです。

AS 界や CSS 界のブロガーさんが Friends になってからは、ちょくちょく素敵な話をしたり、いろんな話が漏れ聞こえてきたりして刺激されまくりです。やりたいネタがどんどん浮かんできます。すごい効果！

Twitter ネタは [http://twitter.g.hatena.ne.jp/nitoyon/:title] で書いていってるので、よかったら見てやってください。

*hatebu_fav_minus_hot*[それPi]はてブ お気に入り マイナス 人気エントリ
ずっと前に作ったまま放置していたので、正式に公開。はてなアイデアで要望が出ていた「[&lt;a href=&quot;http://i.hatena.ne.jp/idea/8548&quot;&gt;自分の「お気に入り」から、「注目エントリー」や「人気エントリー」に入ったエントリを除外した、マイナーなエントリーだけを表示する機能&lt;/a&gt;]」を Y! Pipes で実現してみました。

-http://pipes.yahoo.com/pipes/pipe.info?_id=PvfmAAnK2xGG3G0lr8cPhQ

はてな id を入力するだけで OK。あとは RSS でも JSON ででも取得できます。

仕組みはこう。
+人気エントリの RSS の後ろに お気に入りの RSS を結合。順番が大事（後述）
+link つまりエントリの URL が同じものを Unique で束ねる
+Filter で dc:creator があるもののみ表示する。

３つ目がかなりハックっぽいのですが、Unique には複数のアイテムを束ねるときに、２つ目以降のデータを捨てる、という仕様を利用しました。人気エントリのアイテムには dc:creator は含まれておらず、お気に入りには必ず含まれています。そのため、人気エントリに存在せず、かつ、お気に入りに存在するアイテムのみに、dc:creator がある、ということになります。１つ目の手順で順番が大事と書いたのは、逆ならこの性質は利用できないからです。かなり複雑です。自分で書いてても分からなくなりそうです…。

さて、これでだいぶ幸せにはなるのですが、Pipes には RSS 出力すると、タグのデータが削られたり、content:encoded の HTML がエスケープされてしまう、といった問題があります。このへんが解決したら、だいぶ便利になりそうなんですが。

*feed_filter_by_url*[それPi]RSS を URL で絞り込み
検索したけど見当たらなかったので Y!Pipes で作ってみました。

-http://pipes.yahoo.com/pipes/pipe.info?_id=4JQiVNPl2xGFZdnxqGIyXQ

RSS の中から、URL に特定の文字列を含むものだけを抽出する Pipe です。

どう便利かというと、サイト全体の RSS しか提供していないサイトで、特定のディレクトリ以下のコンテンツだけを購読できます。

例えば、
-http://pipes.yahoo.com/pipes/pipe.info?url=http%3A%2F%2Fwww.atmarkit.co.jp%2Frss%2Frss.xml&amp;permit=fwcr&amp;_id=4JQiVNPl2xGFZdnxqGIyXQ&amp;_run=1
は、@IT から http://www.atmarkit.co.jp/fwcr/ 以下のコンテンツ（リッチクライアント情報）のみを取り出す例です。

悲しいのは、出力する RSS のタイトルが変えられないところ。この Pipe から RSS をたくさん作って RSS Reader につっこんだら、全部同じタイトルになって区別がつきません...　対策方法はないのかなぁ。Livedoor Reader はタイトルが変えられないので悲しいことになる。
</body>
</day>
<day date="2007-04-10" title="">
<body>
*hidemaru_outline*秀丸でJavaScriptのアウトライン解析する定義ファイル
私はエディタとして秀丸を愛用しています。秀丸 Version 6.0 からはアウトラインのツリー表示機能がついていて、かなり便利です。

prototype.js を利用した JavaScript がきれいに解析される定義ファイルを作ったので公開します。Class.create とか Object.extend を使ったクラス定義を正しく解析してくれます。ためしに prototype.js 自身を解析するとこんな具合。
&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070410/20070410091422.jpg&quot; width=&quot;445&quot; height=&quot;310&quot;&gt;&lt;
左側にツリーでアウトラインが出てますね。

私はキー割り当てで [アウトライン解析の枠切り替え] に Alt-X キーを割り当てています。Alt-X を押してアウトラインにフォーカスして、カーソルキーや PageUp/Down で関数を選んで、Enter を押す、という手順によって比較的大きなソースでも移動が楽々です。

定義ファイル：
&gt;|
/&lt;TreeWord&gt;
/0000,0002,0000,00000000,00010153,&quot;^(var +)?[\\$\\.a-zA-Z0-9_]+ *= *Class\\.create&quot;,&quot;Class&quot;
/0000,0002,0000,00000000,00012513,&quot;^(var +)?([\\$\\.a-z_0-9A-Z]+) *= *&quot;,&quot;Object&quot;
/0000,0002,0000,00000000,00012153,&quot;[\\$a-zA-Z_0-9]+\\.prototype *= *&quot;,&quot;prototype&quot;
/0000,0002,0000,00000000,00012113,&quot;^Object\\.extend&quot;,&quot;override&quot;
/0000,0002,0000,00000000,00012111,&quot;^/\\*&quot;,&quot;comment&quot;
/0000,0002,0000,00000000,00012553,&quot;function +[a-zA-Z0-9_]+ *\\([^\\)]*\\)&quot;,&quot;function&quot;
/0001,0002,0000,00000000,00010553,&quot;^[ \\t]*[\\$a-zA-Z0-9_]+ *: *function *\\([^\\)]*\\)&quot;,&quot;Method&quot;
/0001,0002,0000,00000000,00012513,&quot;^[ \\t]*[\\$a-zA-Z0-9_]+ *:&quot;,&quot;Field&quot;
|&lt;

設定方法：
+ファイルタイプ別の設定で、JavaScript に関連付けた設定を開く
+[アウトライン]-&gt;[解析] を選択
+[アウトライン解析の方法] として [ツリー表示 - 通常]を選択
+[読み込み] ボタンを押して、上のデータをファイルから読み取る
+[レベルの見せ方] を [相対的] にする

</body>
</day>
<day date="2007-04-14" title="">
<body>
*p1*Trace Rabbit がおかしい？
ActionScript の trace を眺めるために、&lt;a href=&quot;http://bitmap.dyndns.org/blog/archives/001306.html&quot;&gt;Trace Rabbit&lt;/a&gt; というソフトを導入してみたけど、なんか変。簡単な for 文が
&gt;|javascript|
package{
    import flash.display.Sprite;
    public class tracerabbit extends Sprite{
        public function tracerabbit(){
            for(var i:int = 0; i &lt; 10; i++){
                trace(i);
            }
        }
    }
}
||&lt;
そこそこの確率でこんな風に歯抜けになる。
&gt;||
0
1
8
9
||&lt;
しかも、大元の flashlog.txt も同じ内容になってしまってる。Trace Rabbit が起動してないときはちゃんと出力されることは確認済み。9,0,28,0 と 9,0,45,0 の両方で発生してます。

他に何かいいツールはないものかなぁ。やはり ExternalInterface(&quot;cosole.log&quot;, &quot;fuga&quot;) が最強なんだろか。それとも fcwrap か。

</body>
<comments>
<comment>
<username>Tanabe</username>
<body>はじめまして！Trace Rabbitの作者です。&lt;br&gt;デバッグツールにバグがあるとは、なんとも情けないです……。&lt;br&gt;おそらくflashlog.txtの書き込みと読み込みに衝突が起きているのだと思いますが。正直、その辺の例外処理をかなり適当に実装してまして……。&lt;br&gt;&lt;br&gt;tailなんかどうでしょうかー。&lt;br&gt;http://www.vector.co.jp/soft/dl/winnt/util/se241763.html&lt;br&gt;他に何かいいツールあったら教えてください！</body>
<timestamp>1176529438</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>はじめまして。&lt;br&gt;Trace Rabbit 、便利なんで問題なくなることを期待してます！&lt;br&gt;tail 試してみたんですが、flashlog.txt が毎回初期化されるので、対応しきれないことが多いようです。</body>
<timestamp>1176563987</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-15" title="">
<body>
*fabridge*[as]FABridge を試してみた
FABridge を触ってみて、なかなか便利だったので本家のほうにまとめ記事を書いておきました：
-&lt;a href=&quot;http://tech.nitoyon.com/as/fabridge/intro.html&quot;&gt;JavaScript から Flash を楽々操作できる FABridge [てっく煮]&lt;/a&gt;

FABridge の出発点は id:brazil さんの &lt;a href=&quot;http://d.hatena.ne.jp/brazil/20060726/1153884951&quot;&gt;FlashProxy&lt;/a&gt; でした。これを汎用化すべく AS3.0 で書き直していたのですが、途中で FABridge の存在を思い出してソースを見てみたら、あら不思議、自分の設計とほとんど同じ、しかも高機能！　というわけで、結局 FABridge を触ったり、ソースを眺めたりしてました。

JS/AS の両側にキャッシュがあったり、参照カウントがあったり、ソースもおもしろかったです。基本的な設計思想は FlashProxy と同じなので、ややこしければ FlashProxy を見てみるといいかもしれません。

</body>
</day>
<day date="2007-04-16" title="">
<body>
*p1*Flex 勉強会に行ってきました
&lt;a href=&quot;http://www.trick7.com/&quot;&gt;trick7&lt;/a&gt; さん主催の &lt;a href=&quot;http://www.trick7.com/blog/2007/03/23-120857.php&quot;&gt;第2回：寺子屋（仮）&lt;/a&gt; という勉強会に参加してきました。

Flex/ActionScript について話す相手が周りにいなかったので、そういう話ができるだけでも楽しかったです。さらに、参加者も豪華で DARAO の&lt;a href=&quot;http://saqoosha.net/&quot;&gt;中の人&lt;/a&gt;とか、&lt;a href=&quot;http://www.f-site.org/&quot;&gt;F-site&lt;/a&gt; の中の人とか、TRICK 7 さんとか、他にも Flash 作成を業務としてる人が集まってて、ためになる話がいっぱい聞けました。

個人的な今日のテーマはデザイン業界・広告業界での Flash の位置づけを知ろう、ということだったのですが、その辺の内容もがっつり聞き出せて有意義でした。書けそうな範囲でおもしろかった話をまとめていきます。
====
**業界動向
***Flash のバージョン
ここ最近、Flash 8 を認めてくれるお客さんが増えてきた。Flash 9 はもっての他で、よほど先進的なお客さんじゃないと許してくれない。

***Flash の共同開発
複数人で Flash 案件をやる場合は .fla ファイルを分けて、ActionScript で連携する。
***.fla 納品の罠
.fla 納品のときは外部ファイルが嫌がられることがある。ライブラリや外部 ActionScript が使えなくて悲しい。

***Flash 開発の現実
内部のスクリプトがきれいかどうかよりも開発速度が優先されるので、昔作った ActionScript の使いまわしで作っていくことが多い。

***プログラマ40歳定年説ってあるけど、デザイン業界はどう？
デザイン業界は紙媒体をやってた人が職にこまりつつあるらしい。Web 業界に流れてくると、Web デザイン・UI デザインと雑誌のレイアウトは根本的に違うので、製作に回るのは厳しいのが現状。ディレクションでうまく立ち回れる人ならやっていける。

(感想) 年とったらディレクションができないと食えないのは、プログラマと一緒だなぁ。

***Flash 広告の現状
紙媒体などの別メディアに Flash が連動する形の仕事がほとんど。雑誌用の原稿を渡されて、これをベースに Flash 作ってね、というケースもあるぐらい。Flash 主導の案件で企画含めてできたら楽しいけど、結局下請け...

(感想) 消費者立場から見ても、Web 限定のプロモーションはほとんどしらない。バイラルマーケティングと絡めるのが流行なんだろうけど、まだまだ未成熟か。

***Apollo ってどうよ
以下、全て私見。

ローカルアプリの見た目もゴージャスでないとダメだよね、という日がきっと来る。Web だけで全部やるのは制約あるし、ちょっとクライアントの力を借りるだけで、サーバーの負荷が劇的に減るサービスも多そう。

そのときの本命は JavaScript＋ブラウザではない。制約もクロスブラウザ問題も大変。IDE があって、デザイナも使えるツールがあって初めて世間の平均的な会社の人が開発できるようになる。それを満たしてるのは、現時点では .NET Framework 3.0(XAML) か Apollo だけ。

開発者業界で考えると、VB バリバリなベンダーさんは .NET にいくだろうし、Java なベンダーさんは Apollo がやりやすいんじゃないかな。

デザイン会社的には、その日がくるのを見越して Expression か Flash のノウハウを蓄えておけば、そういう時代がきたときに、そういう案件が回ってきてウハウハになるはず。

***海外の Flash 動向
海外の Flash は ActionScript は使わず、タイムラインで組んでいるサイトが多い。

日本の fps は 30 がデフォルトだけど、海外では fps を 60～80 ぐらいに設定するサイトが増えつつある。fps を 60～80 にすると、モーショントゥイーンを設定したときの嬉しさが違う、らしい。

***Flex は仕事で使えるのか
現状でのためになる資料は fladdict さんの、&lt;a href=&quot;http://fladdict.net/blog/2007/03/flex2.html&quot;&gt;Flex2で広告系のサイトとか実装する話&lt;/a&gt; という記事。Flex Builder は最強だけど、Flex SDK はうーん、という反応。

Flex でどこまで見た目をいじれるか、については &lt;a href=&quot;http://examples.adobe.com/flex2/consulting/styleexplorer/Flex2StyleExplorer.html&quot;&gt;Flex 2 Style Explorer&lt;/a&gt; でできるレベルのカスタマイズは簡単にできる。

さらに、背景画像とか背景 SWF(?) を指定すれば、それなりに見た目は変わりそう。ProgrammaticSkin を使えば、ActionScript からかなりいじれるようだけど、それじゃ、デザイナの出る幕はなくなっちゃう。

去年の Adobe MAX の資料を見ると、将来的には Illustrator や Fireworks で Flex のスキンを作れるようになるらしい。そのあたり、後日まとめたいんだけど、とりあえずは現状で参考になりそうなリンクだけのっけておく。
-&lt;a href=&quot;http://www.atmarkit.co.jp/fwcr/rensai/wcrwatch17/wcrwatch17.html&quot;&gt;デスクトッププラットフォームを制するのはApolloかWPF/Eか - @IT&lt;/a&gt; ：Adobe MAX 06 での Workflow 製品について
-&lt;a href=&quot;http://www.dopejam.com/shownewsitem.cfm?NewsID=267&quot;&gt;Adobe Max 06 - Day 1 Key Note Session Notes&lt;/a&gt; ：Adobe MAX 06 のログ（英語）

***Flash 9 時代のデザイナと開発者の連携は？
以前 &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070404/flash_cs3_review&quot;&gt;Flash CS3 で開発者とデザイナの連携・分業が簡単になりそうだ&lt;/a&gt; という記事を書いたけど、上の Adobe MAX 06 の資料を眺めていると、もっと面白い世界が見えてくるかもしれぬ。

ただし、現状ではデザイナと開発者の連携については、MS の Visual Studio + Expression のほうが方向性がはっきりしてるように見える。今年の Adobe MAX は日本も開催されるし、ぜひとも生で聞いてみたいところ。

***その他、フレームワーク・サーバー環境など
いろいろ出てきたのでザックリと。
-サーバ
--Cold Fusion
---勉強会の本では一押し。データベースと Flex の連携はできる模様
---でも、Cold Fusion 高い
---Developer 版をローカルで動かす限りは無料なので、遊ぶにはいいかも
--&lt;a href=&quot;http://www.osflash.org/red5&quot;&gt;Red5&lt;/a&gt;
---Cold Fusion と似たようなことができるオープンソース版
-AMF がらみ
--&lt;a href=&quot;http://www.adobe.com/jp/products/flex/dataservices/&quot;&gt;Flex Data Services&lt;/a&gt;
---Adobe 純正。
---既存 Java 環境と仲良くできる
---高いよね
--&lt;a href=&quot;http://www.seasar.org/s2flex.html&quot;&gt;S2Flex&lt;/a&gt;
---Seasar の人が作ってる。
---これがあったら FDS いらないかも。
--&lt;a href=&quot;http://www.loveloveheart.com/flash/flashremoting/amfphp.php&quot;&gt;AMFPHP&lt;/a&gt;
---PHP と仲良くできる。
---PHP できる人が社内にいるなら、これでいいんじゃね？
-Flash に組み込むライブラリ
--&lt;a href=&quot;http://www.mosessupposes.com/Fuse/&quot;&gt;Fuse Kit&lt;/a&gt;
---ActionScript 2.0 と組み合わせると便利
---Flash 作る人の中では、基本
---Blur Glow とかができる。簡単に動きを実装できる
---最新版は重い(?)
---ActionScript 3.0 版の開発は最近動き始めたらしい
--&lt;a href=&quot;http://casaframework.org/&quot;&gt;CASA&lt;/a&gt;
---ユーティリティ系のクラスが便利らしい
---イベント周りが楽になる

さくーしゃさんの &lt;a href=&quot;http://saqoosha.net/2007/04/01/538/&quot;&gt;ActionScript 2.0 用 Framework まとめ&lt;/a&gt; が詳しい。

**勉強会の感想
[asin:1590597338:title] を読みながら勉強する、という内容でした。

本に誤植やダウンロードできるサンプルとの不整合があったりしてちょっと悲しかったけど、Flex の概要を知る上ではお薦めできる本です。

英語だけど、写真がたくさんあって、英語をあまり読まなくても写真を見ながら、手元で試せます。たまに、どのファイルを編集していいのか迷子になるけど、そのときは英語の中からファイル名らしきものを探しだせばなんとかなりました。

ただ、ActionScript のコーディングがけっこう多くて、プログラム書く人じゃないと嬉しさは分からないかも。

個人的には、今まであまり深入りしていなかった Repeater、Bindable、DataProvider、State の正体が分かったのが収穫でした。

あと、MXML を書く上で、予想以上に Flex Builder の補完機能が便利でした。使ってて気持ちいい。さすが、Dreamweaver を作ってる会社！


以下では、勉強会で即答できなかった質問を補足しときます。

***package に関数は含められる？
ExternalInterface.call なんかは、パッケージに関数が入っているいい例。パッケージに関数を含めるには、１関数につき１ソースファイルを作ることになる。

パッケージに関数を含めるならこんな感じ。
&gt;|javascript|
// foo.as
package{
	public function foo():void{
		// ....
	}
}
||&lt;

***trace 中の \r \n は？
ちゃんとそのまま出力される。でも、trace の最後には自動的に \r\n が追加されるので、あまり明示的に \r や \n を使うことはなさそう。

***Bindable って何
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070416/bindable_intro&quot;&gt;別エントリ&lt;/a&gt;にまとめてみた。

***プロパティの作り方
p322の誤植がひどかったので、正しい例を。
&gt;|javascript|
private _myAge:Number;

public function get myAge():Number
{
	return _myAge;
}

public function set myAge(age:Number):void
{
	_myAget = age;
}
||&lt;

以上、やたら長くてまとまりないけどおわり。

第３回も近々やるそうなので、顔出したいです。
-(2007.4.17 00:00 追記) &lt;a href=&quot;http://saqoosha.net/2007/04/16/562/&quot;&gt;さっそく募集が始まってます&lt;/a&gt;。興味のある人はぜひ！

*bindable_intro*Flex の Bindable 入門
GUI アプリを書くときの今までの流れはこう：
-監視したいデータに対して「値が変わったら教えてね」とハンドラを登録しておく。addEventListener みたいなイメージ。
-ハンドラ内部では、状態変更に応じて表示内容を変更するコーディングを行う。

これが基本的な Model-View もしくは MVC の作り方。でも、これってめんどくさい。

それを解決するために Flex SDK が提供しているのがデータバインディングという仕組み。

-監視したいデータに [Bindable] をつける。
--値が変わったときに自動的にイベントが発行されるようになる。
-データが変わったら変更を反映させたい場所に {mySlider.value} のように中括弧で値を設定する。
--コンポーネントがイベントをハンドリングして、自動的に表示内容が書き換わる

これで煩雑なコーディングから開放されて幸せ。もちろん、凝ったことをするには限界があるんだけど、ほとんどのケースはこれで解決！

まとめ。
-変更を他のコンポーネントに通知したいときに [Bindable] をつける
-変更を受け取る場所には {mySlider.value} のように書く。

技術的な視点からは id:secondlife さんの &lt;a href=&quot;http://d.hatena.ne.jp/secondlife/20070326/1174904664&quot;&gt;mxmlc コンパイラのメタデータタグを利用する - [Bindable] 篇&lt;/a&gt; という記事が詳しいので、そちらを参照あれ。

(2007.4.17 00:30 追記) この説明だけだとイメージがわきにくそうだったので、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070417/binding_example&quot;&gt;具体例を書いてみました&lt;/a&gt;。

</body>
<comments>
<comment>
<username>れん</username>
<body>お疲れ様でした。&lt;br&gt;れんと申します。覚えてます？むらけんさんの前に座っていた輩です。（今回は１回目よりおとなしかったと思うので。）&lt;br&gt;&lt;br&gt;エントリすっげーまとまっていて敬服です。&lt;br&gt;関西のWeb業界盛り上げたいっすね。&lt;br&gt;&lt;br&gt;またどこかでお逢いした際はよろしくです。(o^ー’)b</body>
<timestamp>1176654075</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-17" title="">
<body>
*ria_gekidou*RIA 業界で動きありすぎな4月16日
ニュースを３つほどピックアップ。

**Flash CS3 出荷
Adobe CS3 英語版の出荷が始まりました。ということは、もちろん Flash CS3 も。
-&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0704/16/news082.html&quot;&gt;ITmedia News：Adobe、「Creative Suite 3」を提供開始&lt;/a&gt;
-&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/04/adobe_cs3.cfm&quot;&gt;akihiro kamijo: Adobe CS3 英語版出荷開始&lt;/a&gt;

すぐにでも試したい、という人もいるかとは思いますが、試用版（英語）の配布開始は、今から６～８週間後だそうです。
&gt;http://www.adobe.com/downloads/&gt;
We expect trial versions of each of the Adobe Creative Suite 3 editions and component products to be available within six to eights weeks of the product’s shipping.
&lt;&lt;

日本語版の発売日はまだ未定なので、６～８週間後を楽しみにするか、もっと待てない人はなんとかして手に入れるしかありません・・・。

**WPF/E の正式名称決定 「Silverlight」
ラスべガスの National Association of Broadcasters で発表になったようです。
-&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0704/16/news044.html&quot;&gt;ITmedia News：MS、Flash対抗「Silverlight」発表&lt;/a&gt;
-&lt;a href=&quot;http://japan.cnet.com/news/media/story/0,2000056023,20347201,00.htm&quot;&gt;MS、「Flash Player」に対抗する「Silverlight」を発表 - CNET Japan&lt;/a&gt;

あわせて公式サイトもオープンしてます（&lt;a href=&quot;http://www.microsoft.com/silverlight/&quot;&gt;http://www.microsoft.com/silverlight/&lt;/a&gt;）。microsoft.com の直下に置くあたり、気合が現れてます。

XAML を編集するデザイナ向けのツール Expression Design の発売はまだまだ先です。ということで、XAML を作るための環境が Visual Studio という状況では、Flash と張り合えるようになるのはまだまだ先でしょう。

個人的には、XAML ファイルにはベクターのデータなんかも中の生テキストで入っているのが面白いと思います。SWF に比べての利点ってその辺かなぁ・・・。あくまで個人的な意見。

**Adobe Media Player 発表
こちらも National Association of Broadcasters で発表。
-&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0704/16/news074.html&quot;&gt;ITmedia News：Adobe、次世代Webビデオソフト発表&lt;/a&gt;
-&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/04/philo.cfm&quot;&gt;akihiro kamijo: Adobe Media Player のアナウンス&lt;/a&gt;

何で Adobe がプレーヤを？　いまさら無理じゃない？　と思った人も多いとは思いますが &lt;a href=&quot;http://blog.thebadtiming.com/archives/1092&quot;&gt;thebadtiming.com ≫ Flash Player で Peer-to-Peer&lt;/a&gt; という記事を読んでおくと、このニュースの聞こえ方も変わってくるかもしれません。

個人的には Adobe Media Player を略すと AMP で、Winamp の地位が危ういと思いました。嘘。

ちなみに、Adobe Media Player は Apollo ベースだそうです（akihiro kamijo さんのページ参照）。

**おまけ
&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070416/1176679557&quot;&gt;IT戦記 - CSS Nite Shuffle で確認しておきたいこと一覧&lt;/a&gt; の結果報告が気になる！　Apollo と WPF について切り込んでくれたものと期待。わくわく。
-さっそくアップされました。&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070417/1176784277&quot;&gt;IT戦記 - CSS Nite Shuffle に行ってきた&lt;/a&gt;。ありがとう、amachang。

*binding_example*[flex]Flex の Binding 具体例と内部事情の覗き見
昨日の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070416/bindable_intro&quot;&gt;Flex の Bindable 入門&lt;/a&gt; の続きです。

Binding を MXML で具体的に説明してみます。

**データバインディングを使わなかったら
データバインディングを使わない場合を MXML で書いてみました。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;
  applicationComplete=&quot;init()&quot;&gt;
    &lt;mx:Script&gt;
    private function init():void
    {
        input1.addEventListener(&quot;change&quot;, onchange);
    }

    private function onchange(e:Event):void
    {
        label1.text = &quot;Input text: &quot; + input1.text;
    }
    &lt;/mx:Script&gt;

    &lt;mx:TextInput id=&quot;input1&quot; /&gt;
    &lt;mx:Label id=&quot;label1&quot; /&gt;
&lt;/mx:Application&gt;
||&lt;
applicationComplete は JavaScript でいう onload みたいなものです。このなかで init 関数を呼び出して初期化を行います。

init 関数の中は、input1 に対して addEventListener でイベント登録してます。「input1 の中身に変化があったら onchange 関数に通知してね」とお願いしてるわけです。

ハンドラ(onchange 関数)の中では、input1 に入力された文字の前に &quot;Input text: &quot; を加えて、label1 に表示してます。

テキストボックスに入力した内容が、即座に表示される、という簡単な SWF です。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070417/20070417001453.jpg&quot; width=&quot;300&quot; height=&quot;134&quot; alt=&quot;動作イメージ&quot;&gt;&lt;/center&gt;&lt;

**データバインディングを使ってみる
これを Binding を使って書き直してみるとこうなります。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;
  applicationComplete=&quot;init()&quot;&gt;
    &lt;mx:Script&gt;
    private function init():void
    {
    }
    &lt;/mx:Script&gt;

    &lt;mx:TextInput id=&quot;input1&quot; /&gt;
    &lt;mx:Label id=&quot;label1&quot; text=&quot;Input text: {input1.text}&quot; /&gt;
&lt;/mx:Application&gt;
||&lt;
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070416/bindable_intro&quot;&gt;Flex の Bindable 入門&lt;/a&gt; では、監視したいデータに [Bindable] をつけましょう、と説明しました。ここでは、input1 の text プロパティを監視したいのですが、実は text プロパティは [Bindable] がついた状態で定義されています。text プロパティは、変更を他に通知する前提で作られている、ということです。

このことはFlex リファレンス ガイドでも確認できます。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070417/20070417002125.jpg&quot; width=&quot;285&quot; height=&quot;212&quot; alt=&quot;リファレンス&quot;&gt;&lt;/center&gt;&lt;

次は通知を受け取る側です。受け取る側は中括弧をつけて {mySlider.value} のようにやる、と説明しました。ここでは、input1 の text プロパティを label1 の text プロパティに反映させるわけですから
&gt;|xml|
    &lt;mx:Label id=&quot;label1&quot; text=&quot;Input text: {input1.text}&quot; /&gt;
||&lt;
となります。

いかがでしょう。１箇所だけだとあまり効果ははっきりしませんが、複数個所になってくると効果は歴然です。中括弧の中では関数呼び出しや演算などもできるので、自由度はかなり高いです。

**技術的に掘り下げてみる
ここからはプログラマ向け。

中括弧で囲んだ場所では、いったいどういうことになってるんでしょうか。

mxmlc のコンパイルオプションに -keep をつけると、MXML がどういう ActionScript に変換されているのかを知ることができます。

MXML のファイル名が test.mxml だとすると generated/test-generated.as に MXML の変換結果が出力されます。

データ変更のイベントを受け取る部分を抜粋してみます。
&gt;|javascript|
    private function _test_bindingsSetup():void
    {
        // 中略

        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = &quot;Input text: &quot; + (input1.text);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
                label1.text = _sourceFunctionReturnValue;
            },
            &quot;label1.text&quot;);
        _bindings[0] = binding;
    }
||&lt;
mx.binding.Binding クラスが出てきて複雑ですが、イベントを受け取ったときの処理を Binding クラスを使ってと登録しています。処理内容は第２引数の関数を実行して、その戻り値を第３引数に渡す、という流れです。

ソースをさらに追うと、第４引数は mx/binding/BindingManager.as の中で力技でパースしていたりして面白いのですが、なにせ Flex SDK のソースは分量も多くて複雑なので、なかなか全体像は把握しきれません。興味のある人は SDK の frameworks/source/mx の中にソースがあるので、ぜひ挑戦してみてください。

</body>
</day>
<day date="2007-04-22" title="">
<body>
*flex_ui_customize*[flex]Flex の見た目カスタマイズについて調べてみた
**前置き
出発点は &lt;a href=&quot;http://www.adobe.com/designcenter/video_workshop/&quot;&gt;Adobe Design Center - Video workshop&lt;/a&gt;。

このページ、CS3 のチュートリアル ビデオがいっぱいあって、CS3 の新機能を予習できたりもする。ネタ元は &lt;a href=&quot;http://www.popxpop.com/archives/2007/04/adobevideo_workshop.html&quot;&gt;POP*POP&lt;/a&gt;。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070423/20070423021239.jpg&quot; width=&quot;408&quot; height=&quot;172&quot; alt=&quot;dobe Design Center - Video workshop&quot;&gt;&lt;/center&gt;&lt;

と、表向きの紹介はこの辺でおいといて、気になったのが「このページ、Flex だよね」ということ。DataGrid そのまんま。標準のデザインと色が違ってるだけなんだけど、ちょっとかっこいい。

今までは Flex 使ったら機能的になるけど見た目は微妙だよなー、と思っていたんだけどどうやらそうでもないらしい。

で、調査してみた。

**Flex で Napkin Look and Feel
まず面白かったのが、Flex で Napkin Look and Feel を実現するページ。キャプチャを見たら分かるけど、かなり見た目が変わってる。（Napkin Look and Feel に関しては &lt;a href=&quot;http://www.aoky.net/articles/kathy_sierra/dont_make_the_d.htm&quot;&gt;デモではものができあがっているように見せない&lt;/a&gt; が詳しいのでそちらを参照あれ）

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070423/20070423021240.jpg&quot; width=&quot;450&quot; height=&quot;125&quot; alt=&quot;Napkin skins in Flex&quot;&gt;&lt;/center&gt;&lt;

全３回のチュートリアル形式になっている：
:第１回：&lt;a href=&quot;http://onreflexion.blogspot.com/2007/01/napkin-skins-stage-one-css-styles-and.html&quot;&gt;Napkin skins, stage one：CSS styles and graphical skins&lt;/a&gt;:CSS だけで見た目を変えてみる。背景や枠線の色・太さは変えられる。
:第２回：&lt;a href=&quot;http://onreflexion.blogspot.com/2007/01/napkin-skins-stage-two-programmatic.html&quot;&gt;Napkin skins, stage two：programmatic skins&lt;/a&gt;:プログラムスキンを使って ActionScript で UI の描画方法をいじる。
:第３回：&lt;a href=&quot;http://onreflexion.blogspot.com/2007/01/napkin-skins-stage-three-current-limits.html&quot;&gt;Napkin skins, stage three：the (current) limits of skinning&lt;/a&gt;:CSS とプログラムスキンではいじれなかった部分を、サブクラス化によってカスタマイズする。ここまでくると、かなり泥臭い。

このサンプルのおかげで、見た目を変えるときの当たりのつけ方が分かった気がする。全部ソースがついてるので、手元でコンパイルしながら確認できるのもうれしい。

via: &lt;a href=&quot;http://www.noridon.net/weblogs/archives/2007/04/addressbooknapk.html&quot;&gt;AddressBookにNapkinSkinを適用してみる：nod::ぶろぐ&lt;/a&gt;

**自分で書いてみた
MXML で CSS をカスタマイズしてみる。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot; &gt;
    &lt;mx:Style source=&quot;test.css&quot; /&gt;
    &lt;mx:Panel title=&quot;My Application&quot;&gt;
        &lt;mx:Label text=&quot;Hello World!&quot; fontWeight=&quot;bold&quot; fontSize=&quot;24&quot; /&gt;
    &lt;/mx:Panel&gt;
&lt;/mx:Application&gt;
||&lt;
でも、これ、コンパイル時に test.css がないとエラーになる。

コンパイル後にダイナミックにスタイルを書き換えられないのかなぁ、と思って Flex 2.0.1 から導入された Runtime CSS について調べてみた。
-&lt;a href=&quot;http://www.fxug.net/modules/xhnewbb/viewtopic.php?topic_id=708&quot;&gt;スタイルシートの動的切り替え - フォーラム - Flex User Group&lt;/a&gt;
-&lt;a href=&quot;http://shigeru-nakagaki.com/flex_samples/Style/RuntimeCSS/RuntimeCSS.html&quot;&gt;Runtime CSS Sample&lt;/a&gt; （ソースつき）
コンパイル済み CSS を StyleManager.loadStyleDeclarations でロードするらしい。

でもこれ、CSS 変更→CSS コンパイル→テスト という手順になる。MXML のコンパイルの代わりに CSS のコンパイルするだけで、あまりうれしくはない。

HTML+CSS みたく、CSS 変更→テスト にしたいよね…。

**リアルタイム CSS アップデータ ツール
不便だなぁ、と悶々としていたら、ちょうどリアルタイムに fladdict さんところで、&lt;a href=&quot;http://fladdict.net/blog/2007/04/flexcss.html&quot;&gt;Flexで外部からリアルタイムにCSSを更新できるエディター&lt;/a&gt; が紹介されていた。ナイスタイミング。

-&lt;a href=&quot;http://shigeru-nakagaki.com/index.cfm/2007/3/22/20070322-RealTime-CSS-Updater-JP&quot;&gt;Shigeru-Nakagaki.com: リアルタイム CSS アップデータ ツール&lt;/a&gt;

この記事、以前も見た記憶があったけど、そのときはありがたみに気づかなかった。やっと需要が理解できるところまでいった。

Flex2 Style Explorer の変更をリアルタイムに自分の Flex アプリに適用できるようになる。仕組みは単純。Flex2 Style Explorer が出力する CSS を LocalConnection で自分の Flex アプリに転送して、Flex 側でパースして SetStyle しまくる。

**以下、まとめ。むしろ、妄想
-FABridge を使えば、JavaScript 経由で eval・Inspect・関数呼び出しできる
-リアルタイム CSS アップデータ ツールを使えば、リアルタイムで CSS を書き換えられる

ってことは
-あと一息がんばれば、Flex 版の Firebug もどき作れるってことじゃね？
-Apollo でやるのか、Firefox エクステンションでやるのか、Firebug をいじっちゃうのか、どういう手法がいいか分からないけど、すごく楽しそう...
-１人でやるにはあまりにも時間が足りないから、誰か賛同してくれないかなぁ

(追記:2007/4/23 23:50) secondlife さんに &lt;a href=&quot;http://subtech.g.hatena.ne.jp/secondlife/20070423/1177293159&quot;&gt;「誰か賛同してくれないかなぁ」をつっこまれてしまった&lt;/a&gt;。確かにその通り。言い訳すると、今のところ AS/Flex やってる人はコアな人ばかりな気がするので、共同でやるなら今のうちかな、と思って書いてみたのでした。ま、ぼちぼち調査しながら設計していきます。

</body>
</day>
<day date="2007-04-24" title="">
<body>
*bookmarked_summary*[それPi][pipes]サイトの最新被ブックマークを livedoor Reader で読むための Pipes
はてなブックマーク経由でもらうコメントが気になるので、livedoor Reader に
&gt;||
http://b.hatena.ne.jp/bookmarklist?mode=rss&amp;url=[自分のサイトのURL]
||&lt;
を登録してます。この RSS は、サイト全体の新着ブックマークが入っているので大変重宝してるのですが、&amp;lt;content:encoded&amp;gt; にページの要約が入ってるのがうれしくない。自分のサイトなんだから要約はなくても分かるし、むしろ、ないほうが見やすい。

**そこで、「それ Pipes でできるよ」。
どーーーーん。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070424/20070424005544.jpg&quot; width=&quot;450&quot; height=&quot;348&quot; alt=&quot;livedoor Reader で読む&quot;&gt;&lt;/center&gt;&lt;

ページの要約を消してスリムになりました。さらに、ブックマークした人のアイコンを付け足して、はてブっぽい雰囲気を演出。

ご利用はこちらから：&lt;a href=&quot;http://pipes.yahoo.com/pipes/pipe.info?_id=0olatt_u2xGUHo7_qGIyXQ&quot;&gt;http://pipes.yahoo.com/pipes/pipe.info?_id=0olatt_u2xGUHo7_qGIyXQ&lt;/a&gt;

**仕組み
+入力された URL に http://b.hatena.ne.jp/bookmarklist?mode=rss&amp;url= と合体させて RSS 取得
+dc:creator に「はてなID」が入っているので、これを Rename で一時変数 tmp にコピー
+正規表現で tmp を置換して、アイコン＋コメントに変換&lt;br&gt;^([0-9a-zA-Z_]{2}).* → &amp;lt;img src=&quot;http://www.hatena.ne.jp/users/$1/${dc:creator}/profile_s.gif&quot;&amp;gt;&amp;lt;a href=&quot;${rdf:about}&quot;&amp;gt;${dc:creator}&amp;lt;/a&amp;gt; ${description}
+正規表現で tmp を description にコピー
+content:encoded を正規表現で削除

正規表現、応用がききまくりです。すばらし。

**タグが消えてる件
ちなみに、この Pipes が出力する RSS からはタグの情報が消えてしまってます。

これは Pipes が RSS を出力するときの仕様のようで、Pipes への要望ページにも &lt;a href=&quot;http://suggestions.yahoo.com/detail/?prop=Pipes&amp;fid=15228&quot;&gt;Categories not available on final feed&lt;/a&gt; という要望が挙がってます。私は vote しておきました。みなさんもぜひ vote しておいてください（笑）。

</body>
<comments>
<comment>
<username>lomo_lomo</username>
<body>これイイ!!&lt;br&gt;Voteもしときました :-)</body>
<timestamp>1177345541</timestamp>
</comment>
</comments>
</day>
<day date="2007-04-27" title="">
<body>
*p1*刺激的な一日
&lt;a href=&quot;http://www.milliontimes.net/index.html&quot;&gt;ミリオンタイムズスクウェア インターンシップセミナー&lt;/a&gt; というイベントに参加しました。

第１部の Google 及川さんの話は本当に面白かったです。中でも印象に残ったのが、「不思議なことは放置しておかない」という教訓。私自身、C++ より下の話はついついブラックボックスと考えて思考停止してしまうのですが、その苦手意識を克服しなきゃ一流にはなれないな、と痛感しました。

「百聞はデモにしかず」という格言にもノックアウトされました。仕様書を書いて説得するぐらいなら、デモとして動くものを見せた方が百倍評価されるわけです。エンジニアたるもの、ごちゃごちゃ言わずにまず手を動かせ、ということです。&lt;a href=&quot;http://blog.inasphere.net/2007/04/hatena_seminar.html&quot;&gt;はてな伊藤直也さんのセミナーに行ってきた&lt;/a&gt; で語られている「いきなり大量のトラフィックが来たら…」という杞憂にも当てはまるなぁ、と思いました。頭でっかちにならないよう、精進します。

第２部のパネルディスカッションも大変興味深かったのですが、これよりもすごかったのが打ち上げです。スタッフとして参加させていただけて、本当にありがたかった。スタッフといっても、当日ほんのちょっとの雑用をしただけなんですけどね。

打ち上げでの会話は、もう、言葉には言い表せないぐらいすごかったです。怒涛のように面白い話が流れていき、頭がオーバーフローしてしまいました。ベンチャーの話、大企業の話、創業者の影響力の話、経営者の話、某社の話、某社の話、某社の話、などなど、生き字引な皆様の話、ただただ感心するだけでした。

もう刺激うけまくり。いろいろと聞きたかった話も聞けたし、大満足でした。

(追記2007.4.28 00:00)ドワンゴの溝口さんにトラックバックいただいたので、こちらからも仕返しておきました。運営側や参加者の反応へのリンク集も貴重です。
-&lt;a href=&quot;http://coji.s9.xrea.com/article.php?id=23&quot;&gt;coding my life : パネル討論:キャリアへつなげる働き方@京都&lt;/a&gt;

さて、明日は &lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?Flex2%CA%D9%B6%AF%B2%F1%C2%E815%B2%F3%A1%F7%C2%E7%BA%E5%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;Flex2勉強会第15回＠大阪 (FxUG)&lt;/a&gt; に参加してきます。こちらも楽しみだ！
</body>
<comments>
<comment>
<username>きむち～</username>
<body>いろいろ、ありがとうございました！&lt;br&gt;今後ともよろしくです～</body>
<timestamp>1177809168</timestamp>
</comment>
<comment>
<username>takoratta</username>
<body>当日はお世話になりました。私の20代のころと違い、今はインターネットが普及しているので、可能性は無限だと思います。これからも楽しいことをし続けましょう！ 及川</body>
<timestamp>1177817902</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; きむち～ さん&lt;br&gt;今後もよろしくお願いします。&lt;br&gt;&lt;br&gt;&gt; 及川さん&lt;br&gt;ありがとうございます。探究心を常に持ち続けて日々精進していきたいとおもいます！</body>
<timestamp>1178027905</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-01" title="">
<body>
*p1*AIR でニコニコメソッド プレゼン
&lt;a href=&quot;http://labs.cybozu.co.jp/blog/takesako/2007/04/nicovideo.html&quot;&gt;プレゼンしているその画面の上に、聞いている人達のコメントがニコニコ動画風に流れるのが楽しそう&lt;/a&gt;。ということで、それ、AIR でできるよ、と作ってみました。

ドキュメントフォルダの niconico.txt を監視し続け、新たな行が登場したら、行の中身をニコニコ動画風に表示します。

&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070502/20070502014451.jpg&quot; width=&quot;412&quot; height=&quot;267&quot; alt=&quot;ニコニコ動画メソッドプレゼン&quot;&gt;&lt;

Flash を使ってるので本家と似た表示になるのがポイントです。
-ダウンロード：&lt;a href=&quot;http://tech.nitoyon.com/misc/niconico.air&quot;&gt;niconico.air&lt;/a&gt; (要 AIR ランタイム β版)
-ソースコード：&lt;a href=&quot;http://tech.nitoyon.com/misc/niconico.as&quot;&gt;niconico.as&lt;/a&gt; (176行)

このアプリケーション単体の機能はテキストの中身を出力するだけですが、次のような活用法を想定しています。
-ローカルに Web サーバーを立てて、CGI 経由でコメントを niconico.txt に出力する
--→ ニコニコメソッドプレゼンが可能に！
-Plagger で取得した内容を niconico.txt に吐き出す
--→ ニコニコメソッド RSS リーダー！

&lt;s&gt;なお、文字が他のウインドウの背後に隠れてしまうので、最前面に表示するソフト（&lt;a href=&quot;http://www.forest.impress.co.jp/article/2002/03/04/acewindow.html&quot;&gt;Ace-Window&lt;/a&gt; や &lt;a href=&quot;http://www.forest.impress.co.jp/article/2006/04/03/toppy.html&quot;&gt;Toppy!&lt;/a&gt; など)を使えば、Powerpoint でのプレゼンでも利用できます。&lt;/s&gt; (AIR β版の stage.alwaysInFront を利用するようにしたので不要です)

どうぞご利用ください。

関連ページ：&lt;a href=&quot;http://labs.cybozu.co.jp/blog/nakatani/2007/05/lingrtickr.html&quot;&gt;LingrTickr - 誰でもニコニコメソッドプレゼン (nakatani @ cybozu labs)&lt;/a&gt;

**CGI のソース
post.html
&gt;|html|
&lt;form action=&quot;post.cgi&quot; method=&quot;post&quot;&gt;
&lt;input name=&quot;comment&quot; type=&quot;text&quot; size=&quot;30&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;つっこみ&quot;&gt;
&lt;/form&gt;
||&lt;

post.cgi
&gt;|perl|
use CGI;

my $q = new CGI;

if($q-&gt;param(&quot;comment&quot;) ne &quot;&quot;){
	open(FILE, &quot;&gt;&gt;C:\\Documents and Settings\\nitoyon\\My Documents\\niconico.txt&quot;) or die;
	print FILE $ENV{&quot;REMOTE_ADDR&quot;}.&quot;:&quot;.time.&quot;,&quot;.$q-&gt;param(&quot;comment&quot;).&quot;\n&quot;;
	close(FILE);
}

print &quot;Content-type: text/html\n\n&quot;;

open(FILE, &quot;post.html&quot;) or die;
while(&lt;FILE&gt;){print}
close(FILE);
||&lt;

Active Perl で動作確認済み。

**おまけ。
実装で苦労したところ。
-文字の外側に枠をつけるために、DropShadowFilter を使っているのだけど、2880px より大きいオブジェクトにはフィルタをかけられない。
--2880px を超えないよう、分割して TextField を配置した
-文字が実際に表示されるサイズを取得するために、Flash の default-size や実際に表示されているサイズを取得する必要があった
--表示されているサイズは stage.stageWidth(or stageHeight) で取得
--default-size は loaderInfo.width(or height) で取得
---nium さんに Twitter で教えてもらいました。ありがとうございます。→&lt;a href=&quot;http://blog.nium.jp/flash/actionscript3/post_15.php&quot;&gt;関連エントリ&lt;/a&gt;
-ファイル読み取り時の重複チェック方法。
--１行をカンマで id と text に分割して、id で判別する仕組みを導入している。id が省略されているときは、text の内容で重複チェック。
ソースは勢いで書いたので、あまりじっくり見ないように…。

</body>
<comments>
<comment>
<username>nisyu</username>
<body>はじめまして。FlexBuilder3を使っているのですが、mxmlの方のサンプルなどあるでしょうか？・・・なぜかエラーが出てしまって、うまく作れなくって・・・</body>
<timestamp>1189825013</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>Flex 2.0.1 のものですが、http://www.adobe.com/support/documentation/jp/flex/ が参考になります。Flex 3 でも基本は変わっていません。&lt;br&gt;どうしても分からなくなったら FxUG で質問してみるのもよいと思いますよ。</body>
<timestamp>1190125072</timestamp>
</comment>
<comment>
<username>nisyu</username>
<body>ありがとうございます。ここのところ、そのドキュメントとにらめっこの日々でした（汗&lt;br&gt;問題点を絞ってからFxUG行ってみます。</body>
<timestamp>1190156679</timestamp>
</comment>
<comment>
<username>G___orz</username>
<body>はじめまして、Flex3でやってみたのですが、ソースコード的にうまくいかないのか、コンパイルエラーが出ました。&lt;br&gt;window部分とFileの宣言がうまくいかなかったので、その部分を直しました。&lt;br&gt;(AS初めてなので自信ないですが・・・)&lt;br&gt;コンパイルは通ったのですがどうしても文字列の表示が&lt;br&gt;できないです。&lt;br&gt;他に何か問題があるのでしょうか？</body>
<timestamp>1198644207</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-03" title="">
<body>
*flex_based_yahoo_web_messenger*[flex]米 Y! のウェブメッセンジャーは Flex ベース
米 Yahoo! が &lt;a href=&quot;http://jp.techcrunch.com/archives/yahoo-launches-browser-version-of-messenger/&quot;&gt;ブラウザ版Messengerをローンチ&lt;/a&gt; しました。業界動向的には &lt;a href=&quot;http://webmessenger.msn.com/&quot;&gt;MSN Web Messenger&lt;/a&gt; が既にありますし、目新しくもなんともないのですが、なんと 米Yahoo! 版は Flex ベースです。

証拠はこのキャプチャ。

コンボボックスのところが、いかにも Flex ですね。Flex を使ったことある人には、理解していただけるはず。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070503/20070503215158.jpg&quot; width=&quot;376&quot; height=&quot;297&quot;&gt;&lt;/center&gt;&lt;

ついに、米 Y! というメジャーな Web 企業も Flex を一般向けサービスに導入したわけで、仕事で Flex を使ってみたい人は上司やお客さんの説得材料に使えるかもしれません。
</body>
</day>
<day date="2007-05-07" title="">
<body>
*hash*[JavaScript]&lt;a href=&quot;http://www.ic-net.or.jp/home/takaken/nt/slide/hash.html&quot;&gt;最小完全ハッシュ関数の作り方&lt;/a&gt; を JavaScript で
ActionScript/Flex ネタが続いているので、たまには JavaScript ネタを。

はてブ経由で知った &lt;a href=&quot;http://www.ic-net.or.jp/home/takaken/nt/slide/hash.html&quot;&gt;最小完全ハッシュ関数の作り方&lt;/a&gt; が面白そうだったのだけど、「最小完全ハッシュ関数」が何か分からないまま読み進めたら、やっぱり話が分からなくなってしまった。

**分からないまま JavaScript に移植。
&gt;|javascript|
/* 順列型の最小完全ハッシュ関数 */
function ChangeNumber(arr)
{
    var work = arr.concat();
    var hash = 0;

    // 階乗値テーブル作成
    var FACTOR = [1];
    for(var i=0; i &lt; arr.length-1; i++){
        FACTOR.unshift(FACTOR[0] * (i+1));
    }

    for(var i=0; i &lt; arr.length-1; i++) {
        hash += work[i] * FACTOR[i];
        for (j=i+1; j &lt; arr.length-1; j++)
            if (work[i] &lt; work[j]) work[j]--;
    }
    return hash;
}
||&lt;

で、呼び出してみる。
&gt;|javascript|
&gt;&gt;&gt; ChangeNumber([0,1,2,3]);
0 // 0,1,2,3 の並べ方の中で一番小さい並べ方なので 0
&gt;&gt;&gt; ChangeNumber([0,1,3,2]);
1 // 0,1,2,3 の並べ方の中で2番目に小さい並べ方なので 1
&gt;&gt;&gt; ChangeNumber([0,2,1,3]);
2 // 3番目に小さいので2
&gt;&gt;&gt; ChangeNumber([0,2,3,1]);
3 // 4番目に小さいので3
&gt;&gt;&gt; ChangeNumber([0,3,1,2]);
4 // 5番目に小さいので4
||&lt;
これでやっとわかった。

最小完全ハッシュ関数は「N個のデータが入力されるときに、入力された値を 0 から N - 1 に変換するハッシュ関数」ということらしい。変換結果の集合が最小限に収まる、ということだ。

で、「順列型の最小完全ハッシュ関数」というのは「0～N-1 までの N 個の数字を順列として並べたとき、それぞれに 0～(N!-1) までの番号を割り当てる」という問題になるわけだ。

それを、このページは「0～N-1 までの N 個の数字を並べたとき、その数字が全部の並べ方の中で何番目に小さいか」を求めることによって解こうとしている。

ハッシュという言葉からハッシュキーのようなものを想像して混乱してしまった。

**学んだこと
アルゴリズムの挙動は頭で考えるよりも、実際に手を動かしたほうが理解しやすい。

特に、JS＋Firebug は手軽に試せるからうってつけ。

コンソールで右下の ^ ボタンを押して「Larger Command Line」にして関数定義しておいて、１行コマンドラインにして、ばしばし実験できる。分からない変数があったら、console.log しちゃえばよい。

Firebug さまさま。

</body>
</day>
<day date="2007-05-08" title="">
<body>
*p1*[as]AS3 は FLASHer には使いにくい？
FLASH ばりばり使ってる人たちのブログを読んでいると、AS3 が使いにくい、という文句が出てきてるようです。

例えば
&gt;http://www.muraken.biz/?p=20:title&gt;
特に一番不便なのが宣言なしに気軽にSpriteとかにプロパティつけれないとこ。
も～いちいちなにがpublic privateだgetだsetだ！ｗ
&lt;&lt;
とか
&gt;http://fladdict.net/blog/2007/04/processingas3.html:title&gt;
AS3って、２時間ぐらいでインタラクティブスケッチ作るとか、超不向きじゃね？
&lt;&lt;
といった感じで。

プログラマ的な感覚からいくと、AS1、AS2 の createEmptyMovieClip で new + addChild するところとか、_x のアンダースコアなところのほうが許せず、私は AS3 になってやっと触れるようになりました。

でも、確かに気軽にごにょごにょっとアニメーション作るには AS3 はめんどくさいところが多そうです。

それを解決するために fladdict さんが &lt;a href=&quot;http://fladdict.net/blog/2007/04/processingas3.html&quot;&gt;構想中のフレームワーク&lt;/a&gt; と、それに触発された &lt;a href=&quot;http://void.heteml.jp/blog/&quot;&gt;void element blog&lt;/a&gt; さんの &lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/05/as1movieclip.html&quot;&gt;AS1MovieClipクラス&lt;/a&gt; がおもしろいので、ちょっと見てみました。

**&lt;a href=&quot;http://fladdict.net/blog/2007/04/processingas3.html&quot;&gt;fladdict さん製&lt;/a&gt;を見てみた
http://twitter.com/fladdict/statuses/43108192 から開発中のコードがのぞけます。

DynamicSprite クラスの
&gt;|javascript|
package sketchbook.display
{
	import flash.display.Sprite;
	
	dynamic public class DynamicSprite extends Sprite
	{
	}
}
||&lt;
という実装が素敵。前出の「Sprite にプロパティつけれない」という問題は解決しますね。

他にも、_global を実現するためのクラスがあったり、描画が簡単になりそうだったり、色を扱うためのクラスライブラリがあったりします。

SpriteHelper はブログの記事にもあるとおり、Sprite を継承するのではなく、クラス内部に変数として保持しています。&lt;strong&gt;オブジェクト指向用語でいう委譲&lt;/strong&gt;になります。

**&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/05/as1movieclip.html&quot;&gt;AS1MovieClip&lt;/a&gt; (void element さん製)を見てみた
AS1 や AS2 と同じように使える、という点に主眼をおいて作成されています。

深度管理も今まで通り。

createEmptyMovieClip や attachMovie、swapDepths のメソッドはもちろん、_x などのアンダースコアつきのプロパティも使えます。

AS3 ではα値は 0～1 ですが、_alpha では AS1・AS2 時代と同様 1～100 で指定できるようになってます。

バリバリの FLASHer さんは嬉しいんじゃないでしょうか。


AS1MovieClip は MovieClip クラスを&lt;strong&gt;継承して実装&lt;/strong&gt;されています。委譲として実装している fladdict さんと対照的でおもしろい。

&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/05/as1movieclip2.html&quot;&gt;delete mc.onEnterFrame できない&lt;/a&gt; という話ですが、記事にもある通り Proxy クラスを継承するしかないでしょうが、その場合、継承ではなく委譲で実装する必要が出てきますね。

**継承と委譲
それぞれの利点など。

Sprite や MovieClip のことをあえて MC と略します。

-継承（void element さん）
--new で作成したインスタンスを CS3 や AS3 の MC に addChild できる
--でも、CS3 や AS3 が生成した MC に適用することはできない
--MovieClip の派生クラスを機能拡張することもできない
-委譲（fladdict さん）
--MC (とその派生クラス）に一皮かぶせることができる
--でも、mc is Sprite や mc is MovieClip が false になる。
--かぶせた中身を取り出すためには、mc.target と書かなきゃならない。

継承や委譲の使い分けについては、オブジェクト指向を語る上では議論が尽きないところで、それぞれにメリット・デメリットがあって難しいところです。

**(追記)2007/5/9 0:25
secondlife さんに &lt;a href=&quot;http://subtech.g.hatena.ne.jp/secondlife/20070508/1178588402&quot;&gt;subtech - Pink Blossom Diary StrikerS - SpriteHelper&lt;/a&gt; にて補足してもらってます。stash 案もおもしろいですね。この辺は本当に好みの世界になってきそう。

&lt;a href=&quot;http://progression.libspark.org/&quot;&gt;Progression&lt;/a&gt; 開発者の nium さんが、&lt;a href=&quot;http://blog.nium.jp/flash/actionscript3/_flasher_as30.php&quot;&gt;で、結局 FLASHer 的に AS3.0 って・・・ (blog.nium.jp)&lt;/a&gt; にて、AS3 の本当にめんどくさいところを書いてくれています。こちらも、かなり同意。特に、イベント登録と、navigateToURL が煩雑になる、あたりは今後も、ライブラリが色々でてきそうな予感。

</body>
<comments>
<comment>
<username>むらけん</username>
<body>&gt;&gt;も～いちいちなにがpublic privateだgetだsetだ！ｗ&lt;br&gt;きゃ～！！お恥ずかしい！ｗ</body>
<timestamp>1178603304</timestamp>
</comment>
<comment>
<username>fladdict</username>
<body>&gt;かぶせた中身を取り出すためには、mc.target と書かなきゃならない&lt;br&gt;あぁ、なるほど。&lt;br&gt;こういう使い方もあるっすね。&lt;br&gt;&lt;br&gt;ボク的には、DynamicSpriteインスタンスに直接、dynamicSprite.h = new SpriteHelper(dynamicSprite)&lt;br&gt;みたいに、自身のヘルパーを定義するような使い方を考えてました。&lt;br&gt;扱うのはあくまでスプライトで、そのスプライトになにか実行する場合に、mySprite.h でヘルパーにあくせすするみたいな感じがいいんじゃないかと。</body>
<timestamp>1178636899</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; むらけんさん&lt;br&gt;どうもです。素直な感想が素敵だったので、思わずのせてしまいました！&lt;br&gt;&lt;br&gt;&gt; fladdict さん&lt;br&gt;Sprite と SpriteHelper の両方を引数に渡すようなケースができてしまうぐらいなら、SpriteHelper だけを渡して、.target でアクセスしたほうがきれいだと思います。&lt;br&gt;もしくは、Sprite を渡された側でも、SpriteHelper を作成するのも悪くないですかね。</body>
<timestamp>1178638351</timestamp>
</comment>
<comment>
<username>fladdict</username>
<body>僕自身色々と使い方を模索中なんですが、あとよくやるのは&lt;br&gt;・Spriteサブクラスのコンストラクタでhelperを作成。&lt;br&gt;・nitoyonさんの言うとおり外部からSpriteを弄りたいときに、ローカル変数で使い捨てでHelperを作る。&lt;br&gt;の２つでしょうか。特に１番は、AS1MovieClipサブクラスのコンストラクタで作成とかして、他のフレームワークと組み合わせる場合を意図してます。&lt;br&gt;targetは指摘されるとおり冗長なんですが、実感としてはHelperだけを受け渡す場合以外には特に使わなくてすむんじゃないかと。</body>
<timestamp>1178641847</timestamp>
</comment>
<comment>
<username>munegon</username>
<body>記事にあるようにAS1やAS2とほぼ同じ書き方でMCを扱えるようにしたかったので、委譲ではなく継承にしました。&lt;br&gt;スケッチ的な使い方が前提のクラスです。&lt;br&gt;&lt;br&gt;実際AS3の記述に慣れていかないとこの先しんどいしｗ</body>
<timestamp>1178645989</timestamp>
</comment>
<comment>
<username>taka:nium</username>
<body>単に記述がめんどくさいだけであればいいんですが、イベントリスナーなんかの管理がめんどくさい系はやっかいですね。&lt;br&gt;&lt;br&gt;&gt; munegonさん&lt;br&gt;AS1的に記述したいユーザーの場合、クラスを作るのもめんどくさい、フレームアクションに記述したいという人が多そうなので、そうなると継承だと外部クラス必須になる点が悩みどころですね。</body>
<timestamp>1178690518</timestamp>
</comment>
<comment>
<username>taka:nium</username>
<body>↑訂正です。&lt;br&gt;CS3だとシンボルに対してベースクラスを設定できるようになってるんですね。&lt;br&gt;それだと普通に継承で問題ないですね。</body>
<timestamp>1178710532</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-09" title="">
<body>
*p1*[twitter]Adobe CS3 解禁 と Twitter な１日
5月8日は Adobe CS3 で大きな動きがありました。

**日本版発表
まず、&lt;a href=&quot;http://www.adobe.com/jp/aboutadobe/pressroom/pressreleases/200705/20070508creativesuite.html&quot;&gt;CS3 日本版の価格と発売時期が発表&lt;/a&gt;されました。

CS3 Design Premium/Standard が Adobe CS2 の上位に相当し、CS3 Web Premium/Standard が 旧 Macromedia MX2 の上位と考えられます。

Adobe GoLive と Macromedia FreeHand はいなくなりました。それぞれ、Dreamweaver と Illustrator と競合していたので、当然といえば当然でしょうか。

Fireworks は生き残っています。Photoshop と競合しているようにも見えますが、Web 用のちょっとした素材を作るなら、Fireworks の方が簡単だったりします。

**英語版 Trial 開始
&lt;a href=&quot;http://www.adobe.com/downloads/&quot;&gt;Adobe - Downloads&lt;/a&gt; から CS3 英語版の試用ができるようになりました。早めに触ってみたい人には嬉しいニュースです。

**Twitter すごいなぁ
この２つの速報は、どちらも Twitter 経由で教えてもらいました。

そう考えると、Twitter の情報伝達速度は尋常じゃありません。

そして、Flash CS3 試したよー、とか、Dreamweaver CS3 試したよー、とか、Illustrator CS3 試したいー、といった声がリアルタイムに聞こえてきます。

みんな好奇心、旺盛すぎ。

この人たちは自分のブログに体験記やレビューをアップロードするわけで、その手前の肉声を聞けるのはハイソな感じがします。

みんなの声は &lt;a href=&quot;http://twitter.1x1.jp/search/?keyword=CS3&amp;lang=&quot;&gt;Twitter検索 : CS3&lt;/a&gt; で見ることができます。新しい物好きな人たちの反応を知るなら、Twitter 検索が最強かもしれません。Google で調べてもここまでの精度では出てこないと思います。

Twitter にどんどん人が流入してくれば、ここまでの精度は保てないでしょうから、楽しむなら今のうちですよー。
</body>
</day>
<day date="2007-05-10" title="">
<body>
*flash_on_twitter*[twitter][as]すごく楽しかった Flash 談義のログをまとめてみたよ
Twitter には Flash 界のブロガーさんが続々参入しているのですが、9日の 20:30 ごろから突発的に Flash 談義が始まり、２～３時間ほど盛り上がっていました。

この内容があまりに素敵だったので、勝手にまとめちゃいました。

みんな、それぞれ問題意識や思いを持っていて、それが伝わってきてドキドキしてきます。

ちょっと話はそれますが、JavaScript の面白いところって、Unix の人も、Mac の人も、Windows の人も、平等に議論できるところにあると思うんですよ。今まで、それぞれの分野でやってた「スゴイ人」が、共通の話題を持って交流できる場、それが JavaScript なんです。

で、Flash になると、今度は OS の縛りがないどころか、開発者だけじゃなくてデザイナーさんとも議論や意見交換できちゃう。この世界の広がりっぷりは只者じゃない。すごく素敵なことじゃないでしょうか。

前置きが長くなりましたが、それでは Flash 談義の始まり始まりー。

(補足)Twitter をやってない人のために補足。
-「@id」は、id さんに対する返信を意味します。「&lt;b&gt;a:&lt;/b&gt; @b」は a さんが b さんに返信している、ということです。
-それぞれの発言者のプロフィールは http://twitter.com/ のあとに名前を入れれば見れます。わたくし nitoyon の場合は、http://twitter.com/nitoyon/ です。

**ASer と FLASHer
&lt;b&gt;fladdict:&lt;/b&gt; 確実にAS3はDEVから参入した人の天下になったっぽいわけだけど、この世界でオイラはどうすれば生き残れるのだろうか。
&lt;b&gt;fladdict:&lt;/b&gt; コーディングそのものの技術的優位性ではもはや太刀打ちできない
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict ビジュアルのかっこいいエフェクトでは太刀打ちできません＞＜
&lt;b&gt;munegon:&lt;/b&gt;  @fladdict Flashらしさを心がけておけばなんとかなると思う。同じ土壌で勝負は避けるってことで。
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict 勝負ではなく、協力の道を探っていけたら素敵ですね。
&lt;b&gt;fladdict:&lt;/b&gt; にゃるほどー、やっぱり苦手な分野では戦わないに限るかぁ。
&lt;b&gt;fladdict:&lt;/b&gt; @nitoyon ですねぇ。ボクライブラリ使う役がいーかも。作るのは大変だと自覚しました。
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict AS 使ってかっこいい SWF を作れない私からすると、そもそも AS3 のどこが不便かすら分からないわけですよ。
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict ということで、ライブラリ作るにしても、やっぱり協力していけるといいものができると思うのです。
&lt;b&gt;fladdict:&lt;/b&gt; @nitoyon なるほどです。コードでのビジュアル表現も、文法みたいのがあって、それさえ抑えればセンスとか関係なくキレイなものとか作れたりします。
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict その文法を教えてください＞＜
&lt;b&gt;fladdict:&lt;/b&gt; @nitoyon そういう異文化交流したいっすね。変化が早いのでFlashも情報シェアの時代へ。
&lt;b&gt;nium:&lt;/b&gt; @nitoyon Flash向けとFlex向けで、ライブラリの作り方もかなり変わってきそうですし、協力は必須っぽいですね。

.

&lt;b&gt;nium:&lt;/b&gt; @fladdict ライブラリ使う役に同意・・・サイト作ってるつもりがライブラリの完成度ばっかり上がってサイトが出来ないｗ
&lt;b&gt;nitoyon:&lt;/b&gt; @nium FLASHer さんは &lt;a href=&quot;http://progression.libspark.org/&quot;&gt;Progression&lt;/a&gt; にかなり注目しているようなので、開発やめたら泣かれると思いますよｗ
&lt;b&gt;nium:&lt;/b&gt; @nitoyon Progressionの恩恵だけで食べていけるようになるまでがんばりますｗ 

**Flash の世界をオープンにしたい
&lt;b&gt;fshin2000:&lt;/b&gt; @fladdict 世界レベルは知らないけど、国内では誰も成果物をアウトプットしてないよーな。
&lt;b&gt;fladdict:&lt;/b&gt; @fshin2000 印象として海外のコーダは、自分がデザイン専門でなくてもビジュアルなアウトプットに手を出す気がする。
&lt;b&gt;fladdict:&lt;/b&gt; ボクのボキャブラはそんな多くないですが、知ってることならいくらでも
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict いいですねぇ。FLASHer でブログやってる人が少ないのは何でなんだろう、と munegon さんの&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/05/as3_complex.html&quot;&gt;エントリ&lt;/a&gt;読んでて思いました。（知らないだけ？）
&lt;b&gt;fladdict:&lt;/b&gt; @nitoyon 表現の独自性＝独占技術なので、みんなネタ出しに慎重なんじゃないかと。逆にパクリ＝タブーですし。
&lt;b&gt;fladdict:&lt;/b&gt; @nitoyon けどここ２年ぐらいで良fla blogは５倍近く増えた印象かも
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict なるほど。難しいですねぇ。JSやCSS界隈のブログがオープンなのは、どちみちソース読めちゃうからなのかもしれませんね。
&lt;b&gt;ll_koba_ll:&lt;/b&gt; @nitoyon そうかー　ソースが読めないからオープンになっていかないのかなー

.

&lt;b&gt;ll_koba_ll:&lt;/b&gt; FLASHerのブロガーを増やそうキャンペーン
&lt;b&gt;nitoyon:&lt;/b&gt; @ll_koba_ll 増やしてほすぃー
&lt;b&gt;nitoyon:&lt;/b&gt; @ll_koba_ll どうせ逆コンパイルしたら簡単に見えるんだから、オープンにしていこうキャンペーン
&lt;b&gt;trick7:&lt;/b&gt; @ll_koba_ll ソースが読めない分、そこを公開してくれてるFlasherは、リアルで本当にいい人が多い。そんな気がしてます。

.

&lt;b&gt;otsune:&lt;/b&gt; @nitoyon pickles.tvのタナカミノルとかと「.flaはオープンにして情報交換しないと」という話はよくしてたなぁ
&lt;b&gt;nitoyon:&lt;/b&gt; @otsune オープンな方向になっていったらいいんですが。タナカミノルさんが先導したら、なんとか・・・ならないかなぁ。
&lt;b&gt;fladdict:&lt;/b&gt; @nitoyon タナカさん忙しそうだからなぁ &lt;a href=&quot;http://www.be-interactive.org/&quot;&gt;yossy君&lt;/a&gt;と&lt;a href=&quot;http://www.bascule.co.jp/&quot;&gt;バスキュール&lt;/a&gt;と&lt;a href=&quot;http://level0.cuppy.co.jp/&quot;&gt;クーピーブログ&lt;/a&gt;に期待期待。
&lt;b&gt;fladdict:&lt;/b&gt; @otsune ３年前からブログでオープン主張してるけど、みんな賛同してくれないの（涙
&lt;b&gt;otsune:&lt;/b&gt; @fladdict Perl ArtisticでもGPLでも「メンツ」「上手・下手」「パクリ・フリーライド論争」の段階を超えないと、ソースを公開するメリットが出ないから、.flaも早くその概念超えたらよさそう

.

&lt;b&gt;munegon:&lt;/b&gt; とりあえず無難な範囲でソース公開していくかなあ。この流れは大事にしたい。
&lt;b&gt;nium:&lt;/b&gt; @munegon 僕がSparkに参加した理由はだいたいそんな感じでしたねー。ほぼイキオイですがｗ
&lt;b&gt;nitoyon:&lt;/b&gt; @munegon ソース公開すると、いろいろ突っ込まれて（情報が集まってきて）面白いですよね。突っ込んだほうが言うのもなんですが...
&lt;b&gt;munegon:&lt;/b&gt; PV3Dなんかは明らかに使いました感漂う作品になるからいいんですが、ちょっとしたコードを使いました宣言ってなかなかできなさそー
&lt;b&gt;beinteractive:&lt;/b&gt; @munegon 確かに。だからこそ、1ヵ所に集めてしまおうという野望が。
&lt;b&gt;nium:&lt;/b&gt; @munegon そのくらいの宣言であれば、なくても気にならないくらいのオープンっぷりだといいんでしょうねー。 

**良サイトと良書
&lt;b&gt;fladdict:&lt;/b&gt; flashのオプソ神としては、http://levitated.net/daily/index.html のヤレド・ターベルが最強
&lt;b&gt;fladdict:&lt;/b&gt; このレベルまでくるとパクリ様がないというか、パクルほど理解できたらきっとが自力で作れるようになっちゃう
&lt;b&gt;jmblog:&lt;/b&gt; @nitoyon まさにそのようなことを John Allsopp氏がインタビューで語ってました。http://videocast.mitsue.co.jp/archives/2006/000049.html （今日ちょうど見たところだったので、つい反応をしてしまった。）
&lt;b&gt;jmblog:&lt;/b&gt; @nitoyon （補足）Videoの15:50あたりです。
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict @jmblog おお、ありがたや。とても貴重な情報です。
&lt;b&gt;fladdict:&lt;/b&gt; あとインタラクティブデザインの文法というとシフマンとか心の師匠 http://www.shiffman.net/teaching/nature
&lt;b&gt;fladdict:&lt;/b&gt; flaは、WEBデザイン会社がサイト作って色々公開すべきなんすよね。その点前述のバスキュールやクーピーは素敵。あぁいうことやると人が集まると思う。
&lt;b&gt;trick7:&lt;/b&gt; @fladdict 皆さんで日本版「Flash Math Creativity」を出してくださいませ。
&lt;b&gt;fladdict:&lt;/b&gt; @trick7 FMC良い本っすよね。それはやってみたい。
.
&lt;b&gt;trick7:&lt;/b&gt; Flashへの愛はあると思うのですが、最近の流れに完全についていけてないです。そんな僕でも救われる情報もお願いします。
&lt;b&gt;fladdict:&lt;/b&gt; @trick7 &lt;a href=&quot;http://www.trick7.com/blog/&quot;&gt;trick7の人&lt;/a&gt;情報メッチャはやいじゃないですか。最近おかげでボク&lt;a href=&quot;http://www.fladdict.net/blog/&quot;&gt;ブログ&lt;/a&gt;かかなくなりましたもの。
&lt;b&gt;trick7:&lt;/b&gt; @fladdict 速いのは暇だからですw。僕は自重してでも fladdict さんの記事の方が読みたいです。

**公開とパクリ
&lt;b&gt;fladdict:&lt;/b&gt; 過去になんかのエフェクトをオプソにしたら、100%流用サイトが一杯出て一気に、その表現が陳腐化したみたいな話とか聞いたことある。
&lt;b&gt;nium:&lt;/b&gt; @fladdict 結局オープンにしたとしても利用した分だけ還元する上昇スパイラルが出来ないと意味ないんですよね。
&lt;b&gt;nitoyon:&lt;/b&gt; @nium オープンにすればするほど、仕事が来るようになればいいんですけどね。JS業界はそれに近くて、Ajax/JSのいい本を書いてる人は、ほとんどブログもってる人だったり。
&lt;b&gt;nitoyon:&lt;/b&gt; @fladdict Flashは見た目やエフェクトの美しさがお金に直結するけど、JS/CSSは案件ベース、というのも影響しているのかもしれませんね。
&lt;b&gt;ll_koba_ll:&lt;/b&gt; @fladdict 納品するときに.flaは納品しないみたいなこともあるから、その辺からも.flaをオープンにしない文化ができちゃってるのかなー
&lt;b&gt;nium:&lt;/b&gt; オープンにするとしても、散在しているとパクられて終了になっちゃうので、ある程度まとまったコミュニティは必要ですね。

**どんなコミュニティがいいのか
&lt;b&gt;trick7:&lt;/b&gt; @ll_koba_ll いっそのことFlashブロガー限定twitter希望。反発ありそだけども、オープンマインドのために。
&lt;b&gt;trick7:&lt;/b&gt; @nuim こういう感じの集金コミュあればいいのですが、実際成功しているのかなぁ？http://www.trick7.com/blog/2006/11/14-083605.php
&lt;b&gt;nium:&lt;/b&gt; @trick7 直接課金ではなくて、オープンにせざるを得ない、その方がメリットがある状況に持っていった方がいい気がしますねー。 
&lt;b&gt;trick7:&lt;/b&gt; @nuim 「オープンにした方がメリットがある」は、皆さんのブログを見てたら十分伝わっていると思うんですけどね。
&lt;b&gt;trick7:&lt;/b&gt; @nuim 「リスペクト」でつながり合えている印象をお受けします。
&lt;b&gt;beinteractive:&lt;/b&gt; &lt;a href=&quot;http://www.libspark.org/&quot;&gt;Spark project&lt;/a&gt;の合言葉は「オープン・共有・集まろう！」（今勝手に考えた）
&lt;b&gt;beinteractive:&lt;/b&gt; 今はどっちかっていうとASer向けのプロジェクトが多いから、もう少しFLASHerに嬉しいプロジェクトを増やしたいよね。Progressionとかね。 
&lt;b&gt;beinteractive:&lt;/b&gt; ライブラリというよりは、Tips的なものをもっと沢山共有したい。AS1MovieClipしかり。

**やるならどこで？
&lt;b&gt;zk33:&lt;/b&gt; 実は以前「actionscript.jp」というドメインを取得しまして、長らく放置状態なのですが…
&lt;b&gt;zk33:&lt;/b&gt; もしFlasherの皆様の交流に活用できそうだったらぜひとも使ってやってください。 
&lt;b&gt;zk33:&lt;/b&gt; 何か、Flashな皆さんのBlog記事をRSSでひっぱって、
&lt;b&gt;zk33:&lt;/b&gt; タグ付けとかして分類・整理して見やすくするだけでもそれなりに便利そうかなぁ、とか。
&lt;b&gt;ll_koba_ll:&lt;/b&gt; flasher.jpがあいていた
&lt;b&gt;trick7:&lt;/b&gt; 何かこう、ブログ同士でもうちょっと連携がとれるブログパーツ・・・
&lt;b&gt;ll_koba_ll:&lt;/b&gt; スニペットの共有サイトあった。http://snipplr.com/ AS特化バージョンとかどーだろ
&lt;b&gt;beinteractive:&lt;/b&gt; @ll_koba_ll それいいっすねー！

&lt;b&gt;beinteractive:&lt;/b&gt; ちなみに、何かやるのにサーバーが欲しければSparkの鯖無料提供しますよ。さくらの専用サーバ。
&lt;b&gt;trickstar_os:&lt;/b&gt; みんなで http://twitter.com/fla 宛てにしゃべるようにすれば、まとめやすくなるかな？
&lt;b&gt;nium:&lt;/b&gt; @trick7 使うかどうか分からないですが、flaアカウントとってみました。　http://twitter.com/fla

**まとめ
ログをそのままのっけたらあまりに雑然としそうだったので、話の方向別にグループ分けしました。話つながってなかったらすいません。ちょうど、このとき Twitter が重くて、漏らしてしまってる発言があるかもしれませんが、とりあえずこんなところです。公開するな、とか、俺のこの発言も加えろや、といったツッコミがあれば、適宜修正したいと思います。

にしても、皆さんの発言は示唆に富んでいます。それぞれの立場、経験からの発言には考えさせられます。情報をどう公開していくか、公開した人にメリットがあるようにするにはどうするか、難しそうですが、少しずつでもオープンになって、Flash 業界がどんどん活性化していくといいですね。

FLASHer の皆さん、ぜひぜひブログ書きましょう！！

(追記) http://twitter.com/fla で Flash 談義が随時継続中です。&lt;a href=&quot;http://twitter.1x1.jp/search/?keyword=@fla&amp;lang=&quot;&gt;Twitter 検索: @fla&lt;/a&gt; から読むのが便利そうです。RSS は &lt;a href=&quot;http://twitter.1x1.jp/rss/search/?keyword=%40fla&quot;&gt;こちら&lt;/a&gt;。
</body>
<comments>
<comment>
<username>fladdict</username>
<body>後半、電車の中で追えてなかったので多謝っす。&lt;br&gt;すごい話が膨らんでるっすね！</body>
<timestamp>1178750563</timestamp>
</comment>
<comment>
<username>ikomaru</username>
<body>これって、どっちがnitoyonの発言なん？&lt;br&gt;＠以下はなんか意味あるん？</body>
<timestamp>1178755634</timestamp>
</comment>
<comment>
<username>akipponn</username>
<body>あ　いこだ&lt;br&gt;&lt;br&gt;会社でにとよんのこのエントリについて言及されてたよ　－－－ほ！</body>
<timestamp>1179361759</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-20" title="">
<body>
*as_for_flasher1*[as]ActionScript for Flasher(1) 資料公開
大阪での Flash 勉強会（寺子屋（仮）第3回）で発表しました。資料を公開しておきます。

-&lt;a href=&quot;http://tech.nitoyon.com/misc/as_for_flasher1/&quot;&gt;プレゼン資料：ActionScript for Flasher(1)&lt;/a&gt;
-&lt;a href=&quot;http://tech.nitoyon.com/misc/as_for_flasher1/images/sample.fla&quot;&gt;サンプルファイル：sample.fla&lt;/a&gt; (166KB) [要Flash MX以上]

タイムライン vs ActionScript という Flash 界の永遠の課題(?)に切り込んでみたつもりです。サンプル用に作った関数は、文字のセンタリングに対応するために泥臭くなっていますが、もうちょっと汎用化してみたいかな。

*terakoya3*Flash 勉強会＠大阪参加しました
5/20 13:30～ 寺子屋（仮）第3回「さくーしゃの Flash なんでも相談室」

クオリティよりもリアルタイム性を重視して実況中継。

====

**OOPはどうか
-プロモーションサイト(数週間～数ヶ月)のような一発物じゃらタイムラインに書いていったほうがよいのでは
-今後バージョンアップや長年の運営が予定されているサービスは、OOP で設計したほうがよさげ

-プロモーションサイト(数週間～数ヶ月)のような一発物じゃらタイムラインに書いていったほうがよいのでは
-今後バージョンアップや長年の運営が予定されているサービスは、OOP で設計したほうがよさげ

-Singleton
--全部クラス化するなら、Singleton は有用
--格言：parent するぐらいなら Singleton にしろ

**ライブラリは？
-使わない派
--メンバー全員が理解しないと使えない
--スケジュール的に学習に時間を裂けない
-使おうよ派
--全体をのスケジュールをみて、使ったほうが早いなら使おう
--Cairngorm ぐらい大きくなるとコストが多いけど、static なクラスは入りやすい

pixLibというのがあるよ
-小回りが利いて使いよい
-ドキュメントはそろってないので、ソース嫁

**Gainer を使って Flash で組み込み
-http://technote.gabocoy.com/archives/000322.php
-Flash でボタンを押すと Gainer が光る
-Gainer のボタンを押すと Flash が変わる

-Java のサーバーがUSBとの仲介を行う
-XMLSocket で通信している

組み込みFlash！

**仕事スタイルは
***基本1人で 
-得意な分野を前に（スター プレーヤーが頑張ってる）
--イラスト＋Flash
--映像＋Flash
--Web＋Flash-Flash 自体が共同開発に向いていない
-まとめる人に仕事が回ってきてしまう
-共通言語が違う
--プログラム系とデザイン系で話が通じない
--タイムラインな人に AS の話はできない

***共同作業のしかた
-書き方や階層化のしかたをドキュメント化
-グラフィックシンボルでシングルフレームにしてもらう
-TRAC の導入を検討

***個人的に熱いもの
-Adfestのインドの象がすごい
-パプリカがすごい

**さくーしゃさん
***Away3D
-Alexander 氏が開発中の PV3D からの派生
-ポリゴンの前後関係(z-order)を解決
--大きいポリゴンと小さいポリゴンの前後関係がおかしくなる問題
--描画速度が速い
-将来的に PV3D にマージされるらしい

***Wiiflash
-難しいことはライブラリが担当
-Mac 版を Saqoosha さんが作った！
-今夜ソース公開！

***Blender
3D データは知り合いに作ってもらって、Blender でインポート。

**&lt;a href=&quot;http://heteml.jp/&quot;&gt;hetemlサーバー&lt;/a&gt; で swf Font Generator

-&lt;a href=&quot;http://search.cpan.org/dist/SWF-Builder/&quot; title=&quot;Yasuhiro Sasama / SWF-Builder - search.cpan.orgへ&quot;&gt;SWF-Builder&lt;/a&gt;
--root権限なくてもインストールできる
--MING より重い(?)
-フォントはどうする？
--参考資料：&lt;a href=&quot;http://www.fladdict.net/blog-jp/archives/2005/04/post_30.php&quot;&gt;fladdict.net blog: サーバに上げられそうなフォントを探してみたよ&lt;/a&gt;
--GT は非営利限定
--M+ は漢字部分がIPAなので、そこの権利が微妙
--結局、どこもダメ。個別交渉が必要
-&lt;a href=&quot;http://www.jt-roots.com/&quot;&gt;Roots のサイト&lt;/a&gt;で使ってる？
--入力した文字を独特な字体で表示してくれる
--サイズがでかいので、フォントを埋め込んでそう
--埋め込みの場合も、権利関係は問い合わせているはず

**見ごたえのあるサイト
-&lt;a href=&quot;http://www.beaconcom.co.jp/recruit2008/&quot;&gt;ビーコンコミュニケーションズの2008年度のリクルートページ&lt;/a&gt;
-&lt;a href=&quot;http://www.weavetoshi.co.jp/webc3/&quot;&gt;Weave Toshi Collection Vol.3 - DAYDREAM -&lt;/a&gt;

**最近の動向
-FlashDevelop で Apollo開発できるよ
-&lt;a href=&quot;http://www.adobe.com/jp/newsletters/edge/may2007/articles/article3/index.html#FW4&quot;&gt;Fireworks から MXML 出力&lt;/a&gt;
-&lt;a href=&quot;http://www.adobe.com/jp/newsletters/edge/may2007/articles/article2/index.html#FL7&quot;&gt;スキンの入れ替えもできるユーザインタフェイスコンポーネント&lt;/a&gt;

**ActionScript vs タイムライン
使ってみなきゃ、違いは分からない
-無理にスクリプト使う必要はない
-たくさんのものを動かすときにはスクリプト
-教材で、正確にアニメーションしなければならないケースには必須だった

**ActionScript の OOP 化
-ActionScript でがつっと書けるなら、下手に OOP する必要はない
-全体の設計を OOP でやるのではなく、細かいアニメーションなどにライブラリを使っていけばよい
-MC に内部処理に関するスクリプトを実装してしまって、全体の統括部分のみステージに書く設計がオススメ

*flex_and_wpf*Flex と WPF の概要について発表しました
お仕事で東京に来ることになっていたので、id:amachang:detail さんに「勉強会したいです！」とお願いして開催してもらいました。

せっかく集めてもらっておいて、しょぼい発表はできないぞ、ということで気合入れて資料を作りました。
-&lt;a href=&quot;http://tech.nitoyon.com/misc/flex_and_wpf/&quot;&gt;RIAと呼ばれるものまとめ (勉強会資料 2007/5/19)&lt;/a&gt;

RIA っぽいものに注目は集まってきているものの、意外に Flex と WPF の共通点や違いをまとめた資料は見かけないので、個人的な感想を交えながら発表してみました。WPF 歴は１週間なので、間違いが含まれてたらすいません。ツッコミ、コメントは大歓迎です。


ちなみに、先日公開した &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070501/p1&quot;&gt;Apollo でニコニコメソッド プレゼン&lt;/a&gt; を実践してみました。かなり好評！　みんなのツッコミで笑いが取れる上に、フィードバックも得られるし、補足もしてもらえるし、言うことなしです。

**レポート
あとで

</body>
</day>
<day date="2007-05-22" title="">
<body>
*p1*勉強会×２ 雑感
２日連続の勉強会で軽くバーンアウト状態。感想を書きなぐってみた。

&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070519/1179592450&quot;&gt;19日の amachang に集めてもらった方&lt;/a&gt; は、参加者の豪華さにプレッシャーを感じていたので、かなり気合入れて資料を作った。

ただ、発表するときには、もう少し観客の反応を見ながらやりたかったものだ。これは次回への反省。

ニコニコメソッドプレゼンについて。

見ている人も参加できる仕組みがよい。こういう回りくどいコミュニケーションって、いかにも日本人向き。

これから使ってみる人に経験者から１点ばかり注意点を。頭の中で次に発する言葉を構築している最中にツッコミが流れてくると、軽くパニックになる。しかも長い発言は速く流れるという、本家を忠実に再現してしまった仕組みのせいで、パニックはさらに加速度を増す。それ以外はいいことずくめなので、ぜひご利用ください。PC 持ってる人が多くて、ネットワーク繋がらないと使えないけど。

プレゼンの動画がニコニコ動画で公開されるらしいので、錯乱してる私をみて楽しんでやってください…。

新発見だったこと。

タイトル一覧を見ていて、知らない言語(Ruby・Lua)やバイナリーの話を楽しめるか不安だった。自分で自分の可能性を狭めてはいけないのは分かってはいるんだけど、やっぱり苦手意識ってあるわけですよ。

ところが、実際に聞いてみると、発表者は自分の好きなことを発表するわけで、すんごく楽しそうに説明してくれる。だから、自然と聞いてるこっちまで楽しくなってくる。来てる人のレベルも高いから、みんな「へー」とか「ふー」とか言って目をキラキラさせてる。何この素敵空間。

そんな素敵空間のおかげなのか、苦手だと思ってた内容を楽しめた。これは知識を得る以上の収穫。

その後は懇親会。

発表者のレベルも高かったけど、来てる人もすごいわけ。どの人のブログも知ってる。いちいち「いつも読んでます」なんて言ってらんない。

恐ろしいことに、みんなブログに書いてる以上に勉強してる。Erlang と Haskell と Ruby についてしゃべってたりする。僕、どれも分かんないよ…。

Flash な人とおしゃべりしてたら、２次会から参加の otsune さんも交えて、例の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070510/flash_on_twitter&quot;&gt;Flash 談義&lt;/a&gt; の続きみたいな状況に。

２次会も終わり、友達の家に向かいながら悩む。

「興味の幅はより一層広がったけど、全部に手を出してたら、誰にも追いつけない。自分が存在感を出していけるとすれば、どの方向に努力すればよいのだろうか。」

そして翌日。

翌日の大阪の勉強会は、打って変わってデザイン側の Flasher さんの勉強会。前日の Flash 談義との対称がおもしろい。

前日は「なんで Flash の人は毎回、一から作るんだろ」。その翌日は「案件によって性格が違うから再利用なんてしてられない。社内のレベル差があるからライブラリすら使えない」。

この差を埋めていくのは、自分の使命だな、と直感的に思った。勝手に。

２次会。

前述の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070510/flash_on_twitter&quot;&gt;Flash 談義&lt;/a&gt; のログは確実に Flasher さんの心に響いているようだ。

いつも読んでるブログの人に「読んでるよ」と言ってもらえたり、取り上げてもらったりするのは本当にうれしい。書けば書くほど情報が集まってくるのは本当。そして、今なら Flash ブログは少ないからすぐ有名になる。「F5 と F6 と F7 を使え」とか「トゥイーン1 って何？」とかそんな記事でもいい。「今日、はまったこと」という記事でもいい。書いていけば、前出の Flash 談義に参加していた人達は、きっと嬉々として読んでくれるはず。

といったことを熱弁しておいた。多少、うざいぐらいに。
</body>
<comments>
<comment>
<username>れん</username>
<body>こんにちは。出社前なので手短に＾＾；&lt;br&gt;&lt;br&gt;同時多発的に（って言うか考えている人は考えていたと思いますが）Flash界隈というかWeb業界全体が「どうにかしなきゃヤバス！」ってなっているようで、それがネガティブな方に行くんじゃなくて本当にみんなこの仕事が好きだから「なんとかしなきゃ」「手を組もうぜ」「オープンに行こうぜ」ってなっていて非常にいい事だと思ってます。そして自分も微力ながらそちら側で貢献できればと考えてたりします。誰かと誰かを繋ぐ物がWebならそのWebを作るものが繋がらなくてどうする？という感じで。＾＾&lt;br&gt;&lt;br&gt;なんだか急いで書いているのわかりくいですがこれからもよろしくです。さて会社行こ。</body>
<timestamp>1180234649</timestamp>
</comment>
</comments>
</day>
<day date="2007-05-25" title="">
<body>
*disable_google_history*Google に検索履歴を取られたくない人向けの設定
Google の「検索履歴」という機能を利用すれば、過去に検索した内容を見たり、&lt;a href=&quot;http://d.hatena.ne.jp/simplife/20070512/p1&quot;&gt;過去のクリック履歴に応じた順位付け&lt;/a&gt; をしてくれます。

この機能を「便利だなぁ」と思う人は、それでいいのですが、私は「検索履歴なんて取らないでよ！」派なので、ちょっと設定を見直してみました。

**検索履歴をオフにする
これは単純明快。

Google にログオンした状態で、右上の検索履歴をクリックして、検索履歴機能を停止にします。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070525/20070525010011.jpg&quot; width=&quot;416&quot; height=&quot;145&quot; alt=&quot;でも表示される&quot;&gt;&lt;/center&gt;&lt;

デフォルトでは有効になってないので、実験のためにオンにしていたままの人は、忘れずにオフにしてくださいませ。

**これで OK？　でも気持ち悪い
これで、公式には履歴が取られないことになります。

でも、検索結果のページにはアカウント名が表示され続けます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070525/20070525010011.jpg&quot; width=&quot;416&quot; height=&quot;145&quot; alt=&quot;でも表示される&quot;&gt;&lt;/center&gt;&lt;

これは、Google がその気になれば、裏側でアカウント情報と検索クエリを紐付けて蓄積できることを意味します。例えば、検索の傾向を見るために、匿名化して「被験者Ａはこういうデータを検索している」といったデータを保存しているかもしれません。

他に、こんな危険性も考えられます。

自分が席を外している間に、誰かが勝手に「検索履歴」をオンにします。

それに気づかずに使い続けたあなたは、数ヵ月後に席を外した隙に、その悪い誰かに検索履歴を見られてしまう―――

普通に検索していても、検索履歴が残っているかどうかは分からないのです。

ということで、過剰にに反応しすぎなのかもしれませんが、検索結果のページに自分のユーザー名が表示されたまま使い続けるのは気持ち悪いです。

**Cookie を送らずに検索するようにする
どうすればいいかというと、Google で検索するときには Cookie を送らないようにします。

でも、GMail や Google Calendar を使うときにはログオンしたままで使いたい。

これを解決する、すごく簡単な方法があります。

+&lt;a href=&quot;http://www.google.com/ig&quot;&gt;google.com&lt;/a&gt; から Sign Out。(既に Sign Out している場合は不要)
+&lt;a href=&quot;http://www.google.co.jp/&quot;&gt;google.co.jp&lt;/a&gt; からログアウト。(既にログアウトしている場合は不要)
+&lt;a href=&quot;http://www.google.com/ig&quot;&gt;google.com&lt;/a&gt; で Sign In。

これだけです。（google.co.jp からログアウトすると、google.com の Cookie も消えてしまうので、2. と 3. は逆にはできません）

あとは &lt;strong&gt;検索するときは、google.co.jp を利用する&lt;/strong&gt;だけ。

google.co.jp には Cookie が送られないので、Google はどうがんばっても、アカウント情報と関連付けることはできません。

他にも、google.com の検索履歴はオンにしておいて、履歴に残したいときには google.com を利用する、といった使い分けもできそうです。

**おまけ
google.com の検索結果表示のデザインが、ちょっと前からがらっと変わってますね(自分だけ？)。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070525/20070525010028.jpg&quot; width=&quot;450&quot; height=&quot;239&quot; alt=&quot;検索結果の新デザイン&quot;&gt;&lt;/center&gt;&lt;

google.co.jp もそのうち変わるのかな。
</body>
</day>
<day date="2007-05-26" title="">
<body>
*apollo_fcsh*fcsh で Apollo を高速コンパイル（参考リンク集のおまけ付き）
&lt;a href=&quot;http://journal.mycom.co.jp/articles/2007/05/24/apollo/index.html&quot;&gt;Apollo mini Camp@Tokyo&lt;/a&gt; の効果なのか、再び Apollo 熱が高まってきていますね。週末に Apollo を触ってみよう、という人も多いのでは。

ActionScript や MXML を使って Flash で Apollo アプリを作る場合、Flex Builder を使うか、コマンドラインで amxmlc を使うことになります。

この amxmlc はビルドに時間がかかってしまうので、fcsh を使って高速化しちゃいましょう。fcsh は &lt;a href=&quot;http://d.hatena.ne.jp/secondlife/20070211/1171173690&quot;&gt;川o・-・）＜2nd life - ActionScript3 (mxmlc) でのコンパイルを100倍速にする方法&lt;/a&gt; が参考になりますが、これが Apollo 用のビルドにも使えちゃいます。

やり方は簡単。

**1. fcsh を導入
&lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Flex_Compiler_Shell&quot;&gt;Flex Compiler Shell - Adobe Labs&lt;/a&gt; からダウンロードして、Flex SDK のディレクトリに置きます。

**2. 起動
コマンドプロンプトやシェルから fcsh を起動します。
&gt;||
$ fcsh
Adobe Flex Compiler SHell (fcsh)
Version 2.0.1 build 162628
Copyright (c) 2004-2006 Adobe Systems, Inc. All rights reserved.

(fcsh)
||&lt;

**3. まずは１回ビルド
ビルド対象のファイルをビルドします。amxmlc を mxmlc +configname=apollo に置き換えてビルドするのがポイントです。

例えば、amxmlc main.mxml でビルドしていた場合は...
&gt;||
(fcsh) mxmlc +configname=apollo main.mxml
fcsh: Assigned 1 as the compile target id
Loading configuration file C:\flex\frameworks\apollo-config.xml
c:\main.swf (216056 bytes)
||&lt;
とします。

(追記) AIR β版では mxmlc +configname=&lt;strong&gt;air&lt;/strong&gt; main.mxml となります。

**4. そして２回目以降は100倍速
Assigned X as the compile target id、と出力されるので、この id を指定して compile を実行します。
&gt;||
(fcsh) compile 1
Loading configuration file C:\flex\frameworks\apollo-config.xml
Nothing has changed since the last compile. Skip...
c:\main.swf (216056 bytes)
||&lt;

以上です。

ポイントは amxmlc は mxmlc +configname=apollo と同じ、というところです。

**おまけ：Apollo 参考リンク集！
Apollo SDK の導入方法についてはこの辺がおすすめ。
-&lt;a href=&quot;http://zapanet.info/blog/item/953&quot;&gt;はじめてのApolloプログラミング&lt;/a&gt; ([Z]ZAPAブロ～グ2.0)
-&lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/apollo10/index.html&quot;&gt;Adobe Apolloメモ&lt;/a&gt;
-&lt;a href=&quot;http://gihyo.jp/dev/serial/01/adobe-apollo/0002&quot;&gt;第2回　Apollo SDKを使ってみよう｜gihyo.jp&lt;/a&gt;

Flex Builder で開発するための設定はこの辺がおすすめ。
-&lt;a href=&quot;http://gihyo.jp/dev/serial/01/adobe-apollo/0003&quot;&gt;第3回　Flex Builderによる開発｜gihyo.jp&lt;/a&gt;

チュートリアルは手前味噌ながらこの辺がおすすめ。
-&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/html-js.html&quot;&gt;HTML+JS版 Apollo アプリを作ってみる [てっく煮]&lt;/a&gt;
-&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/as_apollo.html&quot;&gt;ActionScript版 Apollo アプリを作ってみる [てっく煮]&lt;/a&gt;
第３回、早く書けよ、と自らの首を絞めつつ終わり。

</body>
</day>
<day date="2007-06-03" title="">
<body>
*how_to_use_google_gears*Google Gears の使い道
&lt;a href=&quot;http://gears.google.com/&quot;&gt;Google Gears (BETA)&lt;/a&gt; が発表されました。

Google Gears はウェブサービスにオフライン機能を付け加えやすくするためのフレームワークです。

フレームワークが提供するのは次の３つの機能です。
:LocalServer:オフラインになったときにも HTML や JavaScript、CSS にアクセスできるようにする。ブラウザのキャッシュ（一時ファイル）を強化したイメージ。
:Database:オフライン時に行った動作を記録しておく。SQLite ベース。ブラウザの Cookie を大容量化したイメージ。
:WorkerPool:CPU を消費する機能をバックグラウンドで実施する機能。setTimeout で無理やり細切れに実行していた部分を任せることができる。スレッド機能とも考えられる。
開発者は、これら３つの機能を駆使して、オフライン機能を実装することになります。

ありがちな実装パターンはこうなるでしょうか。
-LocalServer を使ってオフライン時にも必要なファイルが手に入るようにする
-オフライン時に行われた変更はサーバーには投げずに、Database に保存
-オンラインになったときに、WorkerPool を使って Database に蓄えたオフライン中の処理データをサーバーに送信

**素朴な疑問：オフライン機能って必要？
利用者の立場から考えて見ます。

オフラインのときにも使いたくなるサービスって何があるでしょうか。RSS リーダーや GMail、Google Docs &amp; Spreadsheets…。ここまで挙げたあと、続きが思いつきません。

日曜プログラマが開発するようなちょっとしたアプリケーションでは、オフライン機能を使いたくなるところまでいかないと思います。

また、オフライン中の操作を Database に保存したり、オンラインになったときに送信したりする部分の実装はかなり煩雑です。

ばっさり言ってしまえば、&lt;strong&gt;ユーザーからの需要は少ない上に、実装コストが高い&lt;/strong&gt;のです。


では、Google Gears は不要な技術なのでしょうか。

いいえ、実は超絶に魅力的です。

&lt;strong&gt;３つの機能を単体利用&lt;/strong&gt;するだけでも、実装効率は格段によくなりそうです。

１つ１つ説明していきます。

**LocalServer はブラウザキャッシュをコントロールするための技術
ブラウザのキャッシュ（一時ファイル）は、キャッシュする条件がブラウザによってことなるなど、アプリケーション側から完全にコントロールするのは不可能でした。

それを Google Gears の LocalServer 機能で解決します。

例えば、こんな使い方はどうでしょう。

-初回ロード時に読み込んだファイルを LocalServer にキャッシュする
-次回ロードからは、LocalServer のファイルを利用してロードする → 表示の高速化
-ロードが完了して落ち着いたころを見計らって、サーバーにアップデート確認
--更新があった場合には、その場でページを書き換えてもいいが、何もしなくてもいい。既存のブラウザも、キャッシュがある場合には手動でリロードして初めてサーバーにとりに行く実装になっている。
-次に読まれそうなデータを先読み（ページ遷移があっても大丈夫!!!）

重要なのは、&lt;strong&gt;アプリケーション側からブラウザのキャッシュを完全にコントロールできる&lt;/strong&gt;ことです。

**Database は SQL ベースの大容量 Cookie
現状のブラウザベースのアプリケーションでは、ちょっとした設定データやセッションデータを Cookie に保存します。

しかし、Cookie には 4KB 容量制限が重くのしかかります。

この制限を克服するために、&lt;a href=&quot;http://www.niallkennedy.com/blog/archives/2007/01/ajax-performance-local-storage.html&quot;&gt;Flash の SharedObject や、DOM Storage（Firefox only）、userData（IE only）を利用する&lt;/a&gt; といったバッドノウハウがあるのですが、インターフェースもばらばらな上に、環境依存の問題も併発してしまいそうで、なるべくなら使いたくないのが現状でした。

そこで、Google Gears の Database です。

&lt;strong&gt;大容量な上に、検索も SQL ベースで高速&lt;/strong&gt;なのです。

また、Apollo β版にも Gears の Database と同様に SQLite ベースのデータベースが付属することが決まっています。

Adobe の中の人のブログによると、Google Gears と Apollo はこの部分で連携していくようです。
&gt;&gt;
Apollo アプリでもウェブアプリでも、同じようにローカル DB を使えるようなインターフェースがあったら便利だよね。Adobe と Google は、そのインターフェースを連携しながら考えていくよ。

&gt;http://www.mikechambers.com/blog/2007/05/30/apollo-beta-will-include-sqlite-embedded-database/:title&gt;
I meant to add that we are working on aligning the Apollo DB and Gears DB apis, with the goal of making it easier to build applications and code that can leverage both API implementations (on the desktop and in the browser).
&lt;&lt;
&lt;&lt;

Google と Adobe の連携話からも SQL ベースのローカルストレージが流行っていくような予感がします。

**WorkerPool で setTimeout 地獄からの開放
JavaScript の実装をしていると、ちょっと複雑な処理が入ると、ブラウザが応答しなくなり、CPU 使用率が 100% になってしまいます。

これを解決するためには、実装すべき機能を細切れにして、setTimeout で呼び出さなければなりませんでした。

しかし、ソースの可読性が下がってしまうため、あまりやりたくない手段です。

そこで、Google Gears の WorkerPool です。

思い処理を WorkerPool に任してしまって、バックグラウンドで処理してもらいます。ついに、&lt;strong&gt;JavaScript でスレッド&lt;/strong&gt;を手に入れられるのです。

**まとめ
-Google Gears をオフライン機能のために利用するのではなく、それぞれの機能を個別に活用する。
-いままで制御できなかった部分や、泥臭かった部分をすっきり実装できるようになる。
-それだけでも、かなり魅力的。
</body>
</day>
<day date="2007-06-06" title="">
<body>
*offline*Google Gears 発表前と発表後のオフライン事情
先日の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070603/how_to_use_google_gears&quot;&gt;Google Gears の使い道&lt;/a&gt; という記事用に既存のオフライン技術についてまとめていたのですが、長くなったので割愛してしまいました。とはいえ、もったいないので別エントリの形で公開します。

紹介するのは３つのオフライン技術と、それぞれの Google Gears への反応です。はじまりはじまり。

**Dojo Offline
オフライン機能をいち早く実装したのは &lt;a href=&quot;http://dojotoolkit.org/offline&quot;&gt;Dojo Offline&lt;/a&gt; というライブラリです。

Dojo という名前からも分かるように、JavaScript ライブラリ「&lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt;」の &lt;a href=&quot;http://codinginparadise.org/weblog/2006/04/now-in-browser-near-you-offline-access.html&quot;&gt;Dojo.Storage&lt;/a&gt; という機能を活用して実装されているようです。Dojo.Storage は Cookie・SharedObject・ActiveX  File API・XPCOM File API などの中から適切なものを選ぶ、という実装のようです。

Google Gears の発表を受け、Dojo Offline は Dojo.Storage を使うのをやめ、Google Gears を使うように修正する、と発表しています。また、この作業は Google と協力しながら行うことも明言されています。（斜め読みなので少し間違えているかも）

参考リンク：
-&lt;a href=&quot;http://dojotoolkit.org/offline&quot;&gt;The Dojo Offline Toolkit&lt;/a&gt; の News
-&lt;a href=&quot;http://ajaxian.com/archives/audible-ajax-episode-21-dojo-offline-on-google-gears&quot;&gt;Audible Ajax Episode 21: Dojo Offline on Google Gears&lt;/a&gt;）

**Firefox 3
Firefox 3 では目玉機能としてオフライン機能が実装されます。

&lt;a href=&quot;http://level.s69.xrea.com/mozilla/index.cgi?id=20070317_Fx3_Offline&quot;&gt;Firefox 3 のオフライン機能って何だ？&lt;/a&gt; （&lt;a href=&quot;http://level.s69.xrea.com/mozilla/&quot;&gt;えむもじら&lt;/a&gt;）が詳しいです。

Google は Firefox に Google Gears を組み込むことを提案しています。これに対し、Firefox の開発陣は「現在実装中のオフライン機能をそのまま使うか、Google Gearsを使うかは未定」と発言しているようです。（参考リンク：&lt;a href=&quot;http://beau.g-com.ne.jp/mon-extension-memo07_06.html#memo0763&quot;&gt;(6/3) Firefox 3 と Google Gears&lt;/a&gt;）

**Apollo
Google Gears と微妙にかぶっていて、でも、微妙に違うのが Apollo です。

Google Gears の３つの機能は Apollo では次のように対応します。
:LocalServer:Apollo の air ファイルによるパッケージングと同じと考えられます。Apollo は前もってダウンロードしますが、Google Gears は動的にダウンロードすることになります。
:Database:Apollo β版に同等のものが実装されることが&lt;a href=&quot;http://www.mikechambers.com/blog/2007/05/30/apollo-beta-will-include-sqlite-embedded-database/&quot;&gt;発表されています&lt;/a&gt;。
:WorkerPool:Apollo には該当する機能はないため、Google Gears の有利な点となります。

Apollo にしかない機能としては、
-ローカルファイルへのアクセス
-クロスドメインのネットワーク接続
-ブラウザから独立したクロスプラットフォーム性
-１つのアプリケーションとして見える
と、色々思いつきます。

とはいえ、Google Gears と Apollo は完全には競合はしません。

状況に応じて、Apollo の中から Google Gears を使う、Google Gears の中から Flash を使う、といったように、お互いのいいところをつまみ食いできる関係にあります。

**まとめ
３つの技術と Google Gears 側が協力関係を結ぼうとしているのが面白い。Google Gears がオープンソースなところからも分かるように、Google Gears の立場は「みんな、一緒にオフライン技術を作っていこうよ！」というものなのでしょう。

蛇足となりますが、オフライン機能を持ったサービスとしては &lt;a href=&quot;http://www.zimbra.com/products/desktop.html&quot;&gt;Zimbra on your Desktop&lt;/a&gt; が挙げられます。インストール型でローカルサーバー・DB を持つ構造は Google Gears と同じのようです。

詳しくは、&lt;a href=&quot;http://jp.techcrunch.com/archives/zimbra-to-lauch-desktop-application-with-full-offline-functionality/&quot;&gt;Zimbra Desktop、ローンチ―オンラインの機能をフルに移植&lt;/a&gt;（TechCrunch Japanese）で分かりやすかったです。日本では &lt;a href=&quot;http://journal.mycom.co.jp/articles/2007/02/13/feedpath/&quot;&gt;Zimbra はサイボウズの子会社フィードパスと組んで普及を狙っている&lt;/a&gt;ようです。


</body>
<comments>
<comment>
<username>ymdmstk</username>
<body>Dojo.Storage を使うのをやめるという情報源が見当たらないのですが、どこにあるか教えていただけないでしょうか。Google GearsがインストールされてなければDojo Offlineが使えないとなると使い勝手が悪いと思うので、気になってます。</body>
<timestamp>1181663667</timestamp>
</comment>
</comments>
</day>
<day date="2007-06-08" title="">
<body>
*flex3*[flex]Flex 3 の新機能が続々発表中
Adobe エバンジェリストの Ted さんのブログ &lt;a href=&quot;http://www.onflex.org/ted/&quot;&gt;Ted On Flex&lt;/a&gt; にて、Flex 3 の新機能が続々紹介されていっています。

:Flex Builder 3 のデザイナ向け新機能:&lt;a href=&quot;http://www.onflex.org/ted/2007/06/flex-3-monday-designerdeveloper.php&quot;&gt;Monday: Designer/Developer Workflow&lt;/a&gt;
:Flex Builder 3 の開発者向け新機能:&lt;a href=&quot;http://www.onflex.org/ted/2007/06/flex-3-tuesday-code-enhancements.php&quot;&gt;Tuesday: Code Enhancements&lt;/a&gt;
:Flex SDK 3 の新機能:&lt;a href=&quot;http://www.onflex.org/ted/2007/06/flex-3-wednesday-components-and-sdk.php&quot;&gt;Wednesday: Components and SDK Enhancements&lt;/a&gt;
:Flex Framework 3 のキャッシュ機構:&lt;a href=&quot;http://www.onflex.org/ted/2007/06/flex-3-thursday-dramatically-smaller.php&quot;&gt;Thursday: Dramatically Smaller Flex SWF Files&lt;/a&gt;
:Flex 3 と Apollo:&lt;a href=&quot;http://www.onflex.org/ted/2007/06/flex-3-friday-apollo.php&quot;&gt;Friday: Apollo&lt;/a&gt;

これらの記事を簡単に日本語訳して、FxUG に投稿してます。
-http://www.fxug.net/modules/xhnewbb/viewtopic.php?viewmode=flat&amp;topic_id=936&amp;forum=18
ブログの記事にしてもいいかも！というぐらいの密度で書いてるので、ぜひご覧ください。

今のところ、気になる新機能は
-Flex Builder 3 のリファクタリング機能
-Flex SDK 3 での DataGrid 強化
-Flex Framework のキャッシュ機構と別ドメインからのライブラリ取得
といったところです。

そのうちまとめる（かも）。
</body>
</day>
<day date="2007-06-11" title="">
<body>
*apollo_product_name*Apollo の正式名称は Air？
Apollo というのは実は開発コードで、正式名称はまだ発表されていません。

&lt;strong&gt;この記事を公開した数時間後に、&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/06/adobe_apollo_ad.cfm&quot; title=&quot;akihiro kamijo: Adobe Apollo 改め Adobe Integrated Runtime (AIR) パブリックベータ開始へ&quot;&gt;akihiro kamijo: Adobe Apollo 改め Adobe Integrated Runtime (AIR) パブリックベータ開始&lt;/a&gt; というように、正式に AIR と発表されました。ということで、この予測は大正解でした。&lt;/strong&gt;

β版の発表と共に正式名称も発表になるのでは？という話だったのですが、ここにきて、この正式名称が 「Air」になるのではないか、という噂が流れ始めています。

**根拠１．Adobe Apollo Developers Night の仮登録書
&lt;a href=&quot;http://www.adobe-dev-night.jp/&quot;&gt;Adobe Apollo Developers Night&lt;/a&gt; に申し込みをしたユーザーからの&lt;a href=&quot;http://www.fxug.net/modules/xhnewbb/viewtopic.php?topic_id=918&amp;post_id=3830#forumpost3830&quot;&gt;声によると&lt;/a&gt;、自動返信メールのタイトルが
&gt;&gt;
『Adobe Air Developers Night』仮登録完了書
&lt;&lt;
だったようです。

**根拠２．Ted さんブログの中途半端なぼかし
Flex 3 の新機能を紹介する &lt;a href=&quot;http://www.onflex.org/ted/2007/06/flex-3-friday-apollo.php&quot;&gt;Ted On Flex: Flex 3 - Friday: Apollo&lt;/a&gt; という記事のスクリーンショットにぼかしが入っています。そして、ぼかしについて「そのうち、ぼかしの理由が分かるはず」と書いてあります。これは、正式名を隠しているとしか考えられません。

このぼかし、現在は修正されていますが、最初のころはかなりいい加減でした。いい加減なときのスクリーンショットが &lt;a href=&quot;http://thewarp.org/blog/index.cfm/2007/6/8/New-name-for-Apollo&quot;&gt;The Warp: New name for Apollo...&lt;/a&gt; に掲載されています。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070611/20070611093934.jpg&quot; width=&quot;433&quot; height=&quot;123&quot; alt=&quot;AiR?&quot;&gt;&lt;/center&gt;&lt;

うっすら、Adobe AIR Project と読めませんか？

**根拠３. それっぽい名前
AIR という名前のそれっぽい理由が考えられます。
:Apollo の配布ファイル形式が .air:Apollo α版の配布ファイルは air という拡張子なのですが、これが何の略なのかは誰も知りません
:RIA のアナグラム:RIA を逆から読むと、AIR。ばんざーい。
:空気のように普通だけど大事な存在:という期待をこめて…。

**おわり
誤報だったらすみません。


ちなみに、Apollo の前には Macromedia 時代に ２度の失敗があり、そのコードネームは Mercury、Gemini というものでした。どれもアメリカの有人宇宙飛行計画の名前に由来しています。（参考：&lt;a href=&quot;http://www.adobe.com/jp/newsletters/edge/march2007/Fcontent/index.html&quot;&gt;Adobe Edge: Apolloの原点&lt;/a&gt;）

２度の失敗の後、ついに Apollo で空中（air）に飛び出した、と考えると感慨深いものがあります。

個人的には Apollo に慣れちゃったので、Apollo の方が愛着あります…。
</body>
</day>
<day date="2007-06-12" title="">
<body>
*apollo_to_air_build*Apollo アプリを AIR β版で動かすための方法
&lt;s&gt;まだ途中のため、中途半端かもしれないけど参考程度に。&lt;/s&gt;

(2007.6.13 1:00 追記) &lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/apollo10/index.html&quot;&gt;Adobe AIRメモ&lt;/a&gt; さんが早速 AIR β版に対応しています。すばやい対応！　ここよりも、&lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/apollo10/index.html&quot;&gt;Adobe AIRメモ&lt;/a&gt; さんのほうがお勧め。

**1. 開発環境のアップグレード
Flex Builder 2 を使っている人は 3 を、Flex 2 SDK を使っている人は Flex 3 SDK を導入します。

Builder はどうか知らないけど、Flex SDK は共存できるので Flex 2 が必要な人は残しておいたほうがいいでしょう。

**2. ADF の修正
ADF(Apollo Descriptor File) と呼ばれるアプリケーションの情報を記述した XML ファイルの仕様が変更になっています。

手順はこう。

-xmlns の apollo/application/1.0.M3 を air/application/1.0.M4 に変更
-properies タグを取り除いて、name や publisher を application 直下に配置

例。

Apollo α版でこうだとすると
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;application appId=&quot;com.nitoyon.sample&quot; version=&quot;0.1&quot;
  xmlns=&quot;http://ns.adobe.com/apollo/application/1.0.M3&quot;&gt;
  &lt;properties&gt;
    &lt;name&gt;application name&lt;/name&gt;
    &lt;publisher&gt;nitoyon&lt;/publisher&gt;
    &lt;description&gt;sample application&lt;/description&gt;
    &lt;copyright&gt;2007 nitoyon&lt;/copyright&gt;
  &lt;/properties&gt;
  &lt;rootContent systemChrome=&quot;standard&quot; visible=&quot;true&quot;&gt;hoge.html&lt;/rootContent&gt;
&lt;/application&gt;
||&lt;

AIR β版ではこうするよ。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;application appId=&quot;com.nitoyon.sample&quot; version=&quot;0.1&quot;
  xmlns=&quot;http://ns.adobe.com/air/application/1.0.M4&quot;&gt;
  &lt;name&gt;application name&lt;/name&gt;
  &lt;publisher&gt;nitoyon&lt;/publisher&gt;
  &lt;description&gt;sample application&lt;/description&gt;
  &lt;copyright&gt;2007 nitoyon&lt;/copyright&gt;
  &lt;rootContent systemChrome=&quot;standard&quot; visible=&quot;true&quot;&gt;hoge.html&lt;/rootContent&gt;
&lt;/application&gt;
||&lt;

あとは、仕様変更になったクラスを使っていなければ、そのままのソースで動くと思います。

再コンパイル(amxmlc)・パッケージング(adl) はまだ試してないので中途半端だけど時間切れ。

*flex3_sdk_review*[flex]Flex3 SDK 速攻レビュー
Apollo は AIR になるのでは？という記事を書いた途端に発表になって焦ってます。

それはそうと、Flex3 SDK を早速落としてみました。

**ダウンロード
http://labs.adobe.com/technologies/flex/sdk/flex3sdk.html

AIR（旧Apollo）の開発環境も含まれています。

langref のリンクが見つからなかったが、&lt;a href=&quot;http://labs.adobe.com/downloads/airsdk.html?e=labs_adobeflexbuilder3&quot;&gt;AIR SDK ダウンロードのページ&lt;/a&gt; の「Download Adobe AIR documentation for Flex developers (ZIP, 32 MB) 」に今までの langref に相当するドキュメントが含まれていました。

**ファイル構成
今まで、Adobe Labs などで個別に発表してきた技術が SDK に含まれて居ます。

さらに、frameworks フォルダの中には、今まで公開されていなかったソースが公開され始めており、オープンソース化に向けて、着々と準備が進んでいる印象です。

ファイル構成を簡単に覗いてみました。

:ant:ant が SDK についてきてます
:asdoc:Flex 2.0.1 に引き続き、asdoc 用のファイルが入っています
:bin:AIR 用の adl, amxml が含まれて居ます。また、Flex Compiler Shell(fcsh) も同梱されるようになってます。さらに、digest と optimizer も追加されています（詳細まだ調べられていない）。
:frameworks:SDK のソースが入っています。ディレクトリ構成が大幅に変わっているので注意。今まであったフレームワークのソースは、frameworks/projects/framework/src に移動しています。&lt;br&gt;新たに追加されたものは以下のもの：&lt;dl&gt;&lt;dt&gt;javascript/fabridge&lt;/dt&gt;&lt;dd&gt;FABridge のソースコード&lt;/dd&gt;&lt;dt&gt;project/airframework&lt;/dt&gt;&lt;dd&gt;AIR の mx 以下のソースコード&lt;/dd&gt;&lt;dt&gt;flash_integration&lt;/dt&gt;&lt;dd&gt;Flex Component Kit のソースコード&lt;/dd&gt;&lt;dt&gt;project/haloclassic&lt;/dt&gt;&lt;dd&gt;Flex の標準スキン HaloClassic のソースコード&lt;/dd&gt;&lt;dt&gt;project/utilities/src&lt;/dt&gt;&lt;dd&gt;現在は ViewSource のソースコードのみ。今後追加される？&lt;/dd&gt;&lt;dt&gt;rsls&lt;/dt&gt;&lt;dd&gt;Flex ランタイムのキャッシュが格納されているフォルダ(?)&lt;/dd&gt;&lt;dt&gt;themes&lt;/dt&gt;&lt;dd&gt;各テーマのソースコード。６個あるが、サンプルのレベル。&lt;/dd&gt;&lt;/dl&gt;
:lib:bin フォルダの実行ファイルが内部で参照する *.jar ファイル。
:samples:Flex 2 のサンプルと同じ。手が回らなかったか。
:runtimes:Flash Player のβ版。Flex3 の機能をフルに活用するためには、この Flash Player を使う必要があります。

</body>
</day>
<day date="2007-06-13" title="">
<body>
*flex3_document*Flex 3 beta1 のドキュメントまとめ
&lt;a href=&quot;http://blogs.adobe.com/flexdoc/2007/06/flex_3_beta_1_moxie_documentat.html&quot;&gt;Flex Doc Team: Flex 3 Beta 1 (Moxie) Documentation&lt;/a&gt; にて、Flex 3 beta 1 のドキュメントファイルがまとめられています。また、&lt;a href=&quot;http://labs.adobe.com/wiki/index.php/AIR:Documentation&quot;&gt;AIR:Documentation - Adobe Labs&lt;/a&gt; にもまとめられています。

現在、３つの ZIP 形式のファイルが利用できるようです。もちろん、全て英語です。

それぞれの中身を簡単に眺めてみました。

(追記：2007/6/15) HTML 開発者向けのドキュメントの解説を追加しました。また、一部のリンク先が間違っていたのを修正しました。

**&lt;a href=&quot;http://download.macromedia.com/pub/labs/flex/3/flexbuilder3_b1_docs_update_061107.zip&quot;&gt;Flex 3 Beta 1 documentation zip file&lt;/a&gt;
:html:Programming ActionScript 3.0。&lt;br&gt;Flex 2 の prog_actionscript30.pdf に相当。HTML ファイル。
:langref:Flex 3 と AIR のクラスリファレンス。&lt;br&gt;なぜかフレームじゃない。

**&lt;a href=&quot;http://download.macromedia.com/pub/labs/air/air_b1_docs_flex_061107.zip&quot;&gt;Adobe AIR documentation for Flex developers &lt;/a&gt;
Flex を利用して AIR を作る人のためのドキュメント。Flex 開発のドキュメントも含んでいる。
:langref:Flex 3 と AIR のクラスリファレンス。&lt;br&gt;フレーム版。英語。
:air_dev_guide_flex.pdf:Flex Builder で AIR を開発するためのマニュアル。&lt;br&gt;Apollo SDK の HTML が PDF 化。
:air_QS_Flex.pdf:クイックスタート。AIR サンプルの解説。&lt;br&gt;新登場。
:flex3_appdev_beta1.pdf:MXML と ActionScript での Flex 開発。&lt;br&gt;Flex 2 の flex2_devguide.pdf に相当。
:flex3_builddep_beta1.pdf:Flex アプリケーションの構築と展開。&lt;br&gt;Flex 2 の flex2_buildanddeploy.pdf に相当。
:flex3_createcomps_beta1.pdf:Flex コンポーネントの作成と拡張。&lt;br&gt;Flex 2 の flex3_createcomps_beta1.pdf に相当。
:UsingFlexBuilder3_beta1.pdf:Flex Builder 2 ユーザーガイド。&lt;br&gt;Flex 2 の flex2_usingflexbuilder.pdf に相当。

**&lt;a href=&quot;http://download.macromedia.com/pub/labs/air/air_b1_docs_html_061107.zip&quot;&gt;Adobe AIR documentation for HTML developers &lt;/a&gt;
HTML+JavaScript で AIR を作る人向けのドキュメント。
:Samples:HTML+JavaScript のサンプル。FileSearchHTML、PrefsXMLDemoHTML、TextEditorHTML を含む。
:AIR_JavaScript_Lang_Ref_06-07-2007.zip:JavaScript 向けの AIR クラスリファレンス。AIR 専用のクラスを知るにはこちらの方が手っ取り早いかもしれない。
:dev_guide_html.pdf:HTML で AIR を開発する方法を網羅的に解説。
:QS_HTML.pdf:クイックスタート。サンプルの解説。

Flex 3・AIR(Flex)・AIR(HTML) が分散していて、探し出すのが大変でした。今後は、ドキュメントの場所を分かりやすくしてほしい...
</body>
</day>
<day date="2007-06-15" title="">
<body>
*air_application_storage*AIR の app-storage:/ はどこに保存される？
AIR ではアプリケーションの設定を app-storage:/ に保存することが推奨されています。

使い方はこんな感じ。
&gt;|javascript|
var file:File = new File(&quot;app-storage:/myfile.txt&quot;);
||&lt;
もしくは、File.applicationStorageDirectory を使って、次のようにもできます。
&gt;|javascript|
var file:File = File.applicationStorageDirectory.resolve(&quot;myfile.txt&quot;);
||&lt;

file:/ ではなく、app-storage:/ を使うことで、Windows でも Mac でも、ディレクトリ構造を意識せずに設定を保存できるというメリットがあります。

じゃあ、ファイルは一体どこに保存されるかというと...
:Windows XP:C:\Documents and Settings\username\Application Data\appId\Local Store
:Windows Vista:(2007/6/19修正) C:\Users\username\AppData\Roaming\appId\Local Store
:Mac:/Users/username/Library/Preferences/appId/Local Store
だそうです。appId の部分は ADF(Apollo Descriptor File) で指定したものに置き換えてください。（参考：&lt;a href=&quot;http://www.brandonellis.org/?p=40&quot;&gt;Apollo File Path Gotcha ≫ Brandon Ellis Dot Org&lt;/a&gt;、&lt;a href=&quot;http://amoi.mib.jp/wp/?p=22&quot;&gt;AMOSTYLE2.0 ≫ AIR の app-storage:/ はVistaではどこに保存される？&lt;/a&gt;）

例えば、先ほどのアプリケーションの appId が「com.nitoyon.sampleApp」だったとすると、app-storage:/myfile.txt に保存したファイルは XP では
&gt;|
C:\Documents and Settings\username\Application Data\&lt;strong&gt;com.nitoyon.sampleApp&lt;/strong&gt;\Local Store\myfile.txt
|&lt;
に保存されるわけです。

ちなみに、AIR アプリケーションをアンインストールしても、app-storage に保存されたファイルは消えません。ちょっとお行儀は悪いところに注意が必要です。

app-storage と似たものとして、app-resource（もしくは File.applicationResourceDirectory）があります。app-resource は AIR アプリケーションがインストールされたディレクトリを表します。

app-resource にファイルを出力したとしても、アンインストール時に自動的に消えることはありません。

どうやら、アンインストール時には .air パッケージに含まれていたファイルのみを削除している模様です。

</body>
</day>
<day date="2007-06-16" title="">
<body>
*p1*Flasher 必見！　第４回 てら子がライブ中継されるよ
6月17日開催の Flash 勉強会&lt;a href=&quot;http://saqoosha.net/2007/05/22/578/&quot;&gt;第4回 大阪てら子「さくーしゃのFlashライヴコーディング」&lt;/a&gt; が &lt;a href=&quot;http://saqoosha.net/2007/06/15/588/&quot;&gt;ライブ中継される&lt;/a&gt; ようです。

ライブコーディングしてくれるのは、&lt;a href=&quot;http://saqoosha.net/&quot;&gt;さくーしゃさん&lt;/a&gt;。もはや説明は不要な気もしますが念のため。&lt;a href=&quot;http://darao.tv/&quot;&gt;DARAO&lt;/a&gt; の作者でもあり、Web 業界でも超有名な制作会社 &lt;a href=&quot;http://www.aid-dcc.com/&quot;&gt;AID-DCC Inc.&lt;/a&gt; でバリバリに Flash 使ってる方です。

そうそう。ライブコーディングが見たい、との提案をしたのは私です。

というのも、思うところがあってですね、Flash って入門書はたくさんあるんだけど、中級以上の本ってなかなかないんですよね。それはプログラマの業界もそうなんだけど、プログラム業界では誰かが作ったサンプルとか OSS のソースコードがその役割をしてくれてると思うんですよ。

でも、Flash にはそれがない。fla ファイルを見る機会はほとんどないじゃない。製作過程なんてもってのほか。

第２回、第３回てら子で話を聞いてると、フレームワークの話は出たりするんだけど、結局のところどう作るかは共有できてなかったんですよね。それだと、結局みんな自己流でやってる現状は変わらないと思ったので、&lt;a href=&quot;http://cssnite.jp/&quot;&gt;CSS Nite&lt;/a&gt; でやってるような、「ライブコーディング」が見たい、と思ったわけです。

長くなってしまったので強引にまとめると…

すごい人の Flash 使い方に興味がある人は、ライブ中継見てね！　レイヤ構造どうしてるんだろう、FuseKit どう使うんだろう、Flash のカスタマイズはどうしてるんだろう、とか色々参考になるはず。遠隔からの質問も受け付けてるようなので、ばしばし質問・つっこみしちゃってください。

以上。
</body>
</day>
<day date="2007-06-17" title="">
<body>
*teraco4_10tips*第４回 大阪てら子 で学んだ10個の Flash 製作 Tips
タイトルが軽く煽りっぽいですが、行ってきました。Flash 勉強会＠大阪の４回目。

今回は Flash ライブコーディング。

「Flash だからライブオーサリングじゃないの？」と思ってたけど、蓋をあけてみると、大部分がコーディング。Flash 8 はほとんど使わずに、ActionScript だけで SWF が出来上がっていく様子は、軽くカルチャーショックでした。

ソースは &lt;a href=&quot;http://saqoosha.net/2007/06/18/590/&quot;&gt;[Saq.] 第4回「大阪てら子」まとめ&lt;/a&gt; からダウンロードできますよ。

５時間にわたりコーディングしてくださった &lt;a href=&quot;http://saqoosha.net/&quot;&gt;さくーしゃさん&lt;/a&gt;、ありがとうございます。そしてお疲れ様でした。ライブ配信と突っ込みシステムを作った &lt;a href=&quot;http://d.hatena.ne.jp/hirossy1977/20070617/1182052639&quot;&gt;hirossy さん&lt;/a&gt;、お疲れ様です。


ということで、今回、学んだポイントを10個にまとめてみましたよ、っと。ちょっと Tips じゃないのも含まれている気がするけど、そこはご愛嬌で。

**1. Photoshop からの書き出しは地味
+最初に素材の各レイヤーを png に書き出す。
+それぞれを MovieClip に入れて、インスタンス名をつけていく。
+MovieClip を下絵に合わせて配置していく。ピクセル単位の細かな作業。

png の書き出し部分では、Flash で画像の外側が崩れるバグに対応するために、
-偶数ピクセルで書き出す
-少し幅を広くとる
-MC の右下を中心に配置する
といったバッドノウハウが紹介されました。Flash 8 では問題なくなっている、という話も。

（感想）華やかなアニメーションの裏には、こんなにも地味な下準備があるのか！　CS3 ではだいぶ改善するのかな？

**2. タイムラインアニメーションのマスクは手書き
筆で書いていくようなアニメーションはマスクの変形で行う。

マスクは、１フレームずつ手書き。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070618/20070618012741.gif&quot; width=&quot;450&quot; height=&quot;81&quot; alt=&quot;手書きのマスク&quot;&gt;&lt;/center&gt;&lt;

最後に「フレーム反転」で逆に並び替えて完成。

手書きの方が味がでるし、細かい調整ができるらしい。

**3. Flash 8 の出番はここで終了
ここからは Flash 8 は使わず、&lt;a href=&quot;http://www.powerflasher.com/fdt/flashsite/flash.htm&quot;&gt;FDT (Development for Flash)&lt;/a&gt; という Eclipse プラグイン上でコーディング。

MC のステージへの配置や、アニメーションの設定は、全て AS2.0 でやってしまいます。

（感想）FDT(Development for Flash) の存在を初めて知りました。199ユーロだそう。(現在の日本円で 32,000円ぐらい)

**4. ライブラリはプロジェクトごとに
ライブラリを１箇所にまとめておくと、バージョンを上げたときに、過去の遺産が動かなくなって悲しいので、各プロジェクトのディレクトリにライブラリを展開。

スタティックリンクの感覚に近い。

**5. _root を自作クラスに
ステージの１フレーム目には
&gt;|javascript|
App.main(_root);
||&lt;
と書いておく。

App.main() の実装は次の通り。
&gt;|javascript|
static public function main(target:MovieClip):Void {
    target.__proto__ = App.prototype;
    Function(App).apply(target, null);
}
||&lt;

何をやってるかというと...
-prototype を書き換えることにより、_root を App クラスにしてしまう
-App のコンストラクタが呼ばれたことにする
ということ。__proto__ とか apply あたりは、かなり技術的に込み入ってるので、分からない人は おまじない と考えてもよいかも。

これで準備完了。残りは全部 AS でコーディングできる。

（補足）CS3 からは DocumentClass を設定できるようになるので、こういうバッドノウハウも必要なし。

**6. FuseKit でアニメーション
var f:Fuse = new Fuse({...}) 形式でコンストラクタの中に全部書いちゃう。

&gt;|javascript|
var f:Fuse = new Fuse(
    { target:this.bg_mc, alpha:100, time:1, easing:'linear' },
    [
        { target:this._memberImg_mc, y:10, time:2, easing:'easeOutCubic' },
        { target:this._mirrorImg_mc, y:130+120, time:2, easing:'easeOutCubic' }
    ]
    { target:this.name_mc, y:135, time:1, easing:'easeOutCubic' },
    { target:this, alpha:0, delay:2, time:0.5, easing:'linear' },
    { scope:_root, func:_root.showAllMembers }
);
f.start();
||&lt;

それぞれの MC は Flash 8 で アルファ 0% にしておくのを忘れずに。

（感想）FuseKit は使い方を覚えたら簡単そうだ。Trick7 さんの &lt;a href=&quot;http://www.trick7.com/blog/2006/11/05-110726.php&quot;&gt;Fuseアニメーションの実行順序&lt;/a&gt; が分かりよい。

**7. MovieClipUtil.attachMovieRegisterClass() で MC をステージに配置
CASA フレームワークの MovieClipUtil.attachMovieRegisterClass() を使えば、MC とクラスを関連付けてステージに配置できる。

&gt;|javascript|
var mc:MovieClip = 
    MovieClipUtil.attachMovieRegisterClass(
        LogoAnimation,    // クラス名
        this,             // 親 MC
        'Logo Animation', // リンゲージ名
        '_logo'           // インスタンス名
    );
||&lt;

１つの MC に対して、複数の実装を割り当てられるわけで、これはちょっと面白い。

attachMovieRegisterClass は、内部で Object.registerClass を呼んでいるようだ。リンゲージプロパティの 「AS 2.0 クラス」をいじる関数の模様。なるほどなるほど。


**8. XmlUtil.xmlToObject() で XML をオブジェクトに変換
CASA フレームワークの便利な関数。XML を受け取って、Object にして返してくれる。

&gt;|javascript|
var obj:Object = XmlUtil.xmlToObject(this._xmlLoad.getXml())
||&lt;

Perl で言うところの XML::Simple、JavaScript で言うところの &lt;a href=&quot;http://www.kawa.net/works/js/jkl/parsexml.html&quot;&gt;JKL.ParseXML&lt;/a&gt; みたいなもの。

（補足）AS3.0 には E4X があるから、こういうのは不要かな。

**9. LoadGroup 便利
またまた CASA フレームワークから。LoadGroup は URL を複数登録しておいて、まとめてロード、全部読み込み終わったら教えてもらえる。

１～２個の画像なら手作業でも書けるけど、たくさんの画像を読み込む場合はかなり便利。
&gt;|javascript|
var loadGroup:LoadGroup = new LoadGroup();
for (var i:Number = 0; i &lt; info.length; i++) {
    var mc:MovieClip = MovieClipUtil.createEmptyMovieClip(this, 'img' + i);
    loadGroup.addLoad(new MediaLoad(mc, 'images/' + info[i].image, false));
}
loadGroup.addEventObserver(this, LoadGroup.EVENT_LOAD_COMPLETE, 'handleLoadComplete');
loadGroup.start();
||&lt;

**10. さくーしゃさんでも、はまる
途中、Saqoosha さんが、うまくいかずに30分ぐらい(?)、はまっていた。

問題解決までのプロセスまで知れるっていうのは、ライブコーディングの魅力。

個人的には、はまっているときが、みんな一番いきいきして見ていた気がする。ああ、さくしゃーさんでもはまることあるんだ、ちょっと安心、みたいな。

**最後に...
掲載してるサンプルコードは さくーしゃさん が&lt;a href=&quot;http://saqoosha.net/2007/06/18/590/&quot;&gt;公開してくれてるソースコード&lt;/a&gt; を、ちょっといじって分かりやすくしたものです。

改めて、手の内を明かしてくれた さくーしゃさんに感謝。

(追記) 参加者のレポートが続々と。
:&lt;a href=&quot;http://d.hatena.ne.jp/hirossy1977/20070618/1182128873&quot;&gt;hirossy javaとFlex2と。 - 第4回大阪てら子終わりました&lt;/a&gt; (hirossy さん):Flex2＋Red5＋つっこみシステムの裏話。
:&lt;a href=&quot;http://www.idv-design.com/index/020_private/teraco/20070618_065603.php&quot;&gt;IDV-DESIGN | 第四回大阪てら子の勉強会&lt;/a&gt; (タケさん):_root を自作クラスにする方法と HTML テンプレートについて。
:&lt;a href=&quot;http://gotoand.net/blog/?p=28&quot;&gt;gotoand… ≫ 【teraco】大阪てら子　第4回「さくーしゃのFlashライヴコーディング」&lt;/a&gt; (れんさん):詳細なメモ！　ありがたや。
こういうレポートが、今の倍ぐらいは出てきたら素敵なのになぁ・・・＞参加者各位(笑)

</body>
<comments>
<comment>
<username>れん</username>
<body>次回お会いできるのは名古屋ですかね？&lt;br&gt;稚拙なblog拾って頂いて感謝です。＾＾；&lt;br&gt;「詳細」というか。。。けっこう日本語怪しくてスマートにまとまってなくてすみません。（長いっすね＾＾；）&lt;br&gt;またの機会はよろしくです。</body>
<timestamp>1184603833</timestamp>
</comment>
</comments>
</day>
<day date="2007-06-20" title="">
<body>
*p1*Adobe Edge にコメントが掲載されたよ
10日ほど前、Twitter で &lt;a href=&quot;http://www.muraken.biz/&quot;&gt;むらけん&lt;/a&gt; さんが

[twitter:98470662:detail]

と言っていたのに食いついて、コメントを送ってみました。

で、さきほど、その記事が公開されたようです。
-&lt;a href=&quot;http://www.adobe.com/jp/newsletters/edge/june2007/articles/article3/index.html&quot;&gt;Adobe Edge: 2007年6月 Adobe Apollo mini Camp@Tokyo レポート&lt;/a&gt;

わたしのコメントは最後のほうにあるので、よければ読んでみてくださいませ。

Adobe 公式のメールマガジンに自分の発言が載ったわけで、うれしいような、はずかしいような、申し訳ないような。

</body>
</day>
<day date="2007-06-29" title="">
<body>
*four_operations_implementation_in_javascript*四則演算を JavaScript で実装する
&lt;a href=&quot;http://www.ikomaru.com/aki_note/?p=1278&quot;&gt;aki note ≫ Google 電話面接を受けました orz&lt;/a&gt; （いまは消えてるけど）にて
&gt;&gt;
割り算が壊れました。自分で実装してみてください
&lt;&lt;
という質問が紹介されていた。

せっかく(?)の機会なので、割り算だけでなく、四則演算を全部壊してみて、JavaScript で実装して見ることにした。

JavaScript を選んだのは、コンパイル不要、ビット演算がある、Firebug で手軽に確認できる、という理由から。それ以上の深い意味はない。

ということで、次のような問題に一般化してみた。

**問い
四則演算を JavaScript で実装しなさい。

演算子は ==、!= およびビット演算子のみ使ってよいものとします。

***補足
例えば、for 文で
&gt;|javascript|
for(var i = 0; i &lt; 10; i++){
    // ...
}
||&lt;
と書くためには、&lt; 演算子と ++ 演算子を自前で実装しなきゃならない。

&gt;&lt;p&gt;++ 演算子は次のように定義できる。&lt;/p&gt;&lt;
&gt;|javascript|
function increment(i){
    var c = 1;
    while(c){
        if(i &amp; c){
            i &amp;= ~c;
            c &lt;&lt;= 1;
        }
        else{
            i |= c;
            break;
        }
    }
    return i;
}
||&lt;
一番右のビットから見ていって、1 である限りは 0 にしていく。0 ならそのビットを 1 して終わり。桁あふれなら終了、としている。

例を書くと分かりやすいかもしれない。
&gt;|
   01001111
 +)       1
 ----------
   01010000
|&lt;

ソースコード中の while や if の条件式では != 0 を省略している。厳密にはいちいち書くべきなんだけど、めんどくさいし読みにくいので。

**加算
前置きが長くなったけど、まずは足し算から。

すごく簡単にやるなら、さっきの increment を使って
&gt;|javascript|
function add_simple(a, b){
    while(b){
        a = increment(a);
        b = decrement(b);
    }
    return a;
}
||&lt;
と書いてしまえば終わり。decrement は increment とほぼ同じコードで実装できる。

ただ、この実装だと、b が -1 (0xffffffff) のときに42億回 while 文が回ってしまうのでダメすぎ、実用に耐えなさすぎ。

ということで、改良。

&gt;|javascript|
function add(a, b){
    var sum = a;

    while(b){
        var carry = (a &amp; b) &lt;&lt; 1;
        sum = a ^ b;

        a = sum;
        b = carry;
    }

    return sum;
}
||&lt;

a ^ b で各桁単独の足し算を取得しつつ、a &amp; b で繰り上げを計算。繰り上げがある場合は、繰り上げ部分を足して、それでも繰り上がればまた足して・・・の繰り返し。

&gt;|
a   01011010
b +)01001001
  ----------
a   00010011 &lt;- a ^ b
b +)10010000 &lt;- (a &amp; b) &lt;&lt; 1
  ----------
a   10000011
b +)00100000
  ----------
a   10100011
b   00000000 &lt;- b が 0 なので終了
|&lt;

だいぶ早くなる。

Firebug で試してみる。
&gt;|
&gt;&gt;&gt; add(1, 1)
2
&gt;&gt;&gt; add(99, 1)
100
&gt;&gt;&gt; add(99, -1)
98
&gt;&gt;&gt; add(-3, 5)
2
|&lt;
負の数でもうまく理由が分からない人は２の補数（後述）を勉強してね。

**減算
これはだいぶ簡単。

&gt;|javascript|
// 正・負を入れ替える
function reverse_sign(a){
    return add(~a, 1);
}

function sub(a, b){
    return add(a, reverse_sign(b));
}
||&lt;

2の補数って知ってる？ で終わり。

2の補数は慣れるまで分かりにくい概念だけど、こう考えてみるのはどうだろう。

-10進数で12桁の電卓があります
-でも、壊れていて下4桁しか表示できません
-3 + 9999 は 10002 だけど、この電卓で表示したら 2
-同じように 5 + 9999 = 4、9 + 9999 = 8
-この壊れた電卓では 9999 は -1 と同じ！？
-9999 = 10000 - 1
-10000 を足そうが引こうが表示中の値は変わらない
-3 + 9999 = 3 + (10000 - 1) = 3 - 1

**乗算
次は掛け算。桁あふれは無視してる。

&gt;|javascript|
function mul(a, b){
    var product = 0;

    while(b){
        if(b &amp; 1){
            product = add(product, a);
        }

        a &lt;&lt;= 1;
        b &gt;&gt;= 1;
    }

    return product;
}
||&lt;

筆算のやり方を思い出せば簡単。
&gt;||
     1010
   x)0101
   ------
     1010
    0000
   1010
+)0000
---------
  0110010
||&lt;
b の i ビット目が 1 なら、a を i ビット左にシフトしたものを足す、というだけの実装。

上の実装は負の値を無視してしまってるので、まじめにやるならこうなる。
&gt;|javascript|
// 正の数かどうか調べる
function is_positive(a){
    return (a &gt;&gt;&gt; 31) == 0;
}

function mul2(a, b){
    if(!is_positive(a) &amp;&amp; !is_positive(b)){
        return mul(reverse_sign(a), reverse_sign(b));
    }
    else if(!is_positive(a)){
        return reverse_sign(mul(reverse_sign(a), b));
    }
    else if(!is_positive(b)){
        return reverse_sign(mul(a, reverse_sign(b)));
    }
    else{
        return mul(a, b);
    }
}
||&lt;
is_positive 関数で int が 32bit だと仮定しているあたりがかっこ悪いけど、これが一番シンプルかと。

**除算
長かった。いよいよ割り算。Google の電話面接で聞かれるだけあって複雑。

0 での除算や正負は考えずに実装した。
&gt;|javascript|
// 比較演算子の代わり
function cmp(a, b){
    var s = sub(a, b);
    return s == 0 ? 0 : is_positive(s) ? 1 : -1;
}

// MSB = 最上位ビット(Most Significant Bit) を取得
function msb(i){
    var ret = 0;
    while(i){
        i &gt;&gt;&gt;= 1;
        ret = add(ret, 1);
    }
    return ret;
}

function div(a, b){
    var quotient = 0;

    if(cmp(a, b) == -1){
        return 0;
    }

    var i = sub(msb(a), msb(b));
    while(is_positive(i)){
        quotient &lt;&lt;= 1;

        if(cmp(a &gt;&gt; i, b) != -1){
            a = sub(a, b &lt;&lt; i);
            quotient = add(quotient, 1);
        }

        i = sub(i, 1);
    }

    return quotient;
}
||&lt;
これも筆算をイメージして実装。でも複雑なので説明する体力なし。

もっとスマートな実装はないものか...　もしくはもっとアクロバティックなの。

すごい人達に期待。改良案や別の言語での実装をお待ちしています。

**まとめ代わりに種明かし
こうやって記事にすると、私がすごくできる人間に見えるかもしれないけど、実はかなり苦しみました。

そんな中、非常に参考になったのが &lt;a href=&quot;http://rryu.sakura.ne.jp/compfund/index.html&quot;&gt;基礎から学ぶコンピュータ&lt;/a&gt; というサイト。そこに書いてあることを理解して、JavaScript に移植しただけ、といっても過言ではない。

四則演算の実装といえば、コンピュータ・サイエンスの基礎中の基礎なんだけど、そこをちゃんと理解しているか聞いてくる Google 先生はさすが。普段からコンピュータの仕組みを理解した上で使っているかを問われているわけですね。

この辺の内容を基礎から勉強するなら、パタヘネがよいんじゃないでしょうか。
asin:482228266X:detail

</body>
<comments>
<comment>
<username>BO-Q</username>
<body>＞一番右のビットから見ていって、0 が出てくるまで 1 にしていく。0 ならそのビットを 1 して終わり。桁あふれなら終了、としている。&lt;br&gt;&lt;br&gt;「0 が出てくるまで 0 にしていく。」ではないかと。</body>
<timestamp>1183081117</timestamp>
</comment>
<comment>
<username>kazy</username>
<body>addでb=0の場合、aに関らず0になってしまうので、最初にsum=0でなくsum=aにしたほうが良さそうです。あとaddの説明(図示)のところでa^bとa&amp;bの指示が逆になっていて、a&amp;bは本当は(a&amp;b) &lt;&lt; 1で、しかもaの値が間違っている気がします。</body>
<timestamp>1183097183</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; BO-Q さん、kazy さん&lt;br&gt;ご指摘ありがとうございます！&lt;br&gt;お恥ずかしい。&lt;br&gt;修正しておきました。</body>
<timestamp>1183129451</timestamp>
</comment>
<comment>
<username>hagix</username>
<body>げ。自分でビット演算して電卓作ってる。。。すげえとおもったんですが。&lt;br&gt;種明かししていただけてほっとしました(笑)</body>
<timestamp>1183225318</timestamp>
</comment>
<comment>
<username>Vacuum</username>
<body>// 正の数かどうか調べる&lt;br&gt;function is_positive(a){&lt;br&gt;    return (a &gt;&gt;&gt; 31) == 0;&lt;br&gt;}&lt;br&gt;は、    return (a &gt;&gt; 31) == 0;　なのではないでしょうか？</body>
<timestamp>1192528093</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-04" title="">
<body>
*p1*JavaScript で Number 型の数値を２進数表現してみる
先日の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070629/four_operations_implementation_in_javascript&quot;&gt;四則演算を JavaScript で実装する&lt;/a&gt; の関連エントリ。

デバッグの過程で、数値を２進数で表示したくなったので実装してみた。

**ソースコード
ワンライナー版。
&gt;|javascript|
function dump_int(i){var s=&quot;&quot;;while(i){s=(i&amp;1)+s;i&gt;&gt;&gt;=1}return s}
||&lt;

整形したらこうなる。
&gt;|javascript|
function dump_int(i)
{
    var s = &quot;&quot;;

    while(i)
    {
        s = (i &amp; 1) + s;
        i &gt;&gt;&gt;= 1;
    }

    return s;
}
||&lt;

&amp;gt;&amp;gt;&amp;gt; が符号を考えずに右シフトする演算子だそうだ。今回、このビット演算子で遊ぶまで、こんな演算子があることすら知らなかった。

**Firebug で確認してみた
&gt;|
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; function dump_int(i){var s=&quot;&quot;,c=-1;while(c){s=(i&amp;1)+s;i&gt;&gt;&gt;=1;c&gt;&gt;&gt;=1}return s}&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(0)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(1)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;10&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(3)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;11&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(0x1000)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;1000000000000&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(-1)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;11111111111111111111111111111111&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(-2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;11111111111111111111111111111110&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int(-3)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;11111111111111111111111111111101&quot;&lt;/span&gt;
|&lt;

出力の最大桁数が 32bit なのは、ビット演算の前に ToInt32 という内部関数が呼ばれて 32bit に切り詰められるから。

**桁数をそろえるバージョン
桁数がそろってなくて見にくい場合は、こう改造すればよい。
&gt;|
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; function dump_int2(i){var s=&quot;&quot;,c=-1;while(c){s=(i&amp;1)+s;i&gt;&gt;&gt;=1;c&gt;&gt;&gt;=1}return s}&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dump_int2(3)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;00000000000000000000000000000011&quot;&lt;/span&gt;
|&lt;

c = -1 として while(c){c &gt;&gt;&gt;= 1;} のループを回すことにより、ビット数の回数だけ while のループが回るようにしている。


**toString(2)
ところで、これとは別に Number.prototype.toString() に 2 を渡すことで２進数表示することもできる。今回作った dump_int とはちょっと異なっていて面白い。
&gt;|
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (0).toString(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (1).toString(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (2).toString(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;10&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (-1).toString(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;-1&quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (-2).toString(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;-10&quot;&lt;/span&gt;
|&lt;

マイナスの値を渡したときの挙動が明らかに違う。というのも、Number 型は 64bit の浮動小数点であり、符号部に 1bit が割かれている。

というわけで、負数を toString(2) すると - がつくのは Number の内部に符号部があるから、と考えると納得がいく。

Number 形が浮動小数点ということは、小数を toString(2) することもできたりする。
&gt;|
&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (2.25).toString(2)&lt;/span&gt;
&lt;span class=&quot;synConstant&quot;&gt;&quot;10.01&quot;&lt;/span&gt;
|&lt;

**まとめ

-自作 dump_int は 32bit までの数にしか対応できない
-toString(2) は 64bit の浮動小数点の範囲を全てカバーできる

比べてみると dump_int がいい所なしに見えるが、先日の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070629/four_operations_implementation_in_javascript&quot;&gt;四則演算を JavaScript で実装する&lt;/a&gt; を作るときには役立ったんですよ、っと。

あ、そうそう、今回は ECMA-262 3rd edition の仕様をかなり参考にしましたよ。

</body>
</day>
<day date="2007-07-05" title="">
<body>
*wcan3*WCAN mini ActionScript Vol.3 でお話するよ
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070705/20070705001109.png&quot; width=&quot;166&quot; height=&quot;253&quot; alt=&quot;写真は開発中のものです&quot; align=&quot;right&quot;&gt;７月21日に名古屋にて開催される &lt;a href=&quot;http://www.wcan.jp/index.php?ID=115&quot;&gt;WCAN mini ActionScript Vol.3&lt;/a&gt; にてお話します。

私がしゃべるのは「ActionScript3 でテトリスを作ってみる」という内容。単に作ってみたかっただけです、はい。

今のところ、手元では右のようなそれっぽいものが動いてるのですが、当日までには、もっと色々実装していきたいと思ってます。

現在、残席11。お申し込みはお早めに。

ちなみに、WCAN は「だぶきゃん」と読むらしい。
</body>
</day>
<day date="2007-07-06" title="">
<body>
*mactopia_betsuyaku*MS 運営の Mac ポータルサイト Mactopia が熱い
偶然、検索でたどり着いた &lt;a href=&quot;http://www.microsoft.com/japan/mac/default.mspx&quot;&gt;Mactopia Japan&lt;/a&gt; が面白い。

このサイト、Microsoft が運営する Mac ユーザー向けポータルサイトらしい。どうせ Office の Mac 版を前面に押し出したサイトなんだろうな…と思った人、大ハズレ！

例えば、連載コラムの &lt;a href=&quot;http://www.microsoft.com/japan/mac/column/contents/contents.mspx&quot;&gt;Apple's Eye&lt;/a&gt; の過去ログを見ていると、&lt;a href=&quot;http://www.microsoft.com/japan/mac/column/contents/101.mspx&quot;&gt;No.101 使いやすさに磨きがかかった Panther [2003年10月24日掲載]&lt;/a&gt; では１回丸々 Mac OS 10.3 の新機能を紹介していたり、別の回では iPod の便利な使い方を紹介していたり、マイクロソフトの文字が出てこないことのほうが多いぐらい。

中でも、目を引いたのがトップページの見出し。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070706/20070706015424.jpg&quot; width=&quot;400&quot; height=&quot;204&quot;&gt;&lt;/center&gt;&lt;

えーと、念のため、確認。

このページの URL は http://&lt;strong&gt;www.microsoft.com&lt;/strong&gt;/japan/mac/default.mspx。

Windows を作ってる会社のホームページに &lt;strong&gt;Mac 以外はありえな～い&lt;/strong&gt; と書いてあるわけですよ。

MS さん、太っ腹すぎ。なにこの余裕っぷり。

と思いながら、&lt;a href=&quot;http://www.microsoft.com/japan/mac/iusers/ofm/contents/ofm04.mspx&quot;&gt;記事の本文&lt;/a&gt;を何気なく眺めていたら、ページの下のほうに・・・

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070706/20070706015423.jpg&quot; width=&quot;400&quot; height=&quot;439&quot;&gt;&lt;/center&gt;&lt;

こ、これは・・・&lt;a href=&quot;http://portal.nifty.com/2007/03/17/a/&quot;&gt;べつやくメソッド&lt;/a&gt; じゃないか！

もともと Apple が MS をバカにするために持ち出したネタを、逆手にとってネタにするあたりが余裕の貫禄。

逆に Apple が小さく見えてくるよ・・・。
</body>
</day>
<day date="2007-07-10" title="">
<body>
*refactoring_long_function_using_local_functions*JS や AS で長い関数をリファクタリングする１手法
200行ぐらいある関数を、分かりやすく書きなおそう、というお話。

お題はこんなJavaScript。あとで、軽く ActionScript 3.0 も出てくるよ。
&gt;|javascript|
function fly()
{
    // 初期化処理
    var init = false;
    // 50行ぐらい初期化処理
    // うまくいったら init が true になる

    // 実行
    if(init)
    {
        var succeeded = false;
        // 100行ぐらい実行
    }

    // 終了処理
    // 30行ぐらい終了処理
}
||&lt;

構造化プログラミングについて知ってる人なら、きっとこうする。
&gt;|javascript|
function fly()
{
    if(startFly())
    {
        doFly();
    }

    endFly();
}
||&lt;

構造がたいそうすっきりした。

問題は、startFly()・doFly()・endFly() をどこに記述するか。

**fly() の横に記述
一番ありがちな手法。fly() 関数の横に並べる。
&gt;|javascript|
function startFly()
{
    // ...
}

function doFly()
{
    // ...
}

function endFly()
{
    // ...
}

function fly()
{
    if(startFly())
    {
        doFly();
    }

    endFly();
}
||&lt;

局所的にはきれいになったけど、１個だったはずの関数が３個になってしまった。

一般に、関数の数が多いほどソースコードは理解しにくくなる。だから、関数の数が増えるのはできる限り避けたい。

そもそも、startFly() 関数や endFly() 関数は、fly() の中からしか呼ばないはずなのに、他の関数からも参照できるところに置くのは理にかなっていない。

ならば、fly() の横ではなく、fly() の中にしまってみるのはどうだろう。

**fly() の中に収納
さっきのは C言語っぽかったけど、こうやったら JavaScript っぽい。

&gt;|javascript|
function fly()
{
    var startFly = function()
    {
        //
    }

    var doFly = function()
    {
        //
    }

    var endFly = function()
    {
        //
    }

    // 実際の処理開始
    if(startFly())
    {
        doFly();
    }

    endFly();
}
||&lt;

fly() 関数の行数は変わらないけど、処理の流れはすっきりする。ソースコードから流れを追いやすいし、startFly() 関数や endFly() 関数が fly() 関数の中からしか呼ばないことが一目瞭然。

構造が仕様を語る。分かりやすいソースコードの基本。

**一般化してみた
&gt;|javascript|
function A()
{
    // 関数内の変数
    var param1 = {};
    var param2 = {};

    // 関数内の関数
    var func1 = function()
    {
    }

    var func2 = function()
    {
    }

    // function A() の実体
    var AImpl = function()
    {
        //
    }

    AImpl();
}
||&lt;

変数を冒頭に、次に関数、最後に AImpl() を書く。

関数 A() の中からは、AImpl() のみを呼ぶだけ。

AImpl() の中では、なるべく if 文と関数呼び出しだけで書くようにするときれいなソースになりそう。

面白いのが、このクラス全体が１つのクラスになっている。クロージャにより func1() と func2() から param1 や param2 を参照できる。param1 や param2 はクラスのフィールドのようだし、func1() や func2() はクラスのメソッドのように見える。AImple() 関数はコンストラクタといったところ。

もう１つ面白いところ。関数内の関数を他の場所で使いたくなったら、関数の外に出して、宣言部分をちょろっと変えるだけでよい。お手軽。

逆に、１箇所からしか参照してないグローバルな関数を発見したら、呼び出し元の関数に収納しちゃってもよいかもしれない。

**ActionScript 3.0 でも
&gt;|javascript|
public class Bird
{
    public function fly():void
    {
        if(startFly())
        {
            doFly();
        }

        endFly();
    }

    private function startFly():Boolean
    {
        // ...
    }

    private function doFly():void
    {
        // ...
    }

    private function endFly():void
    {
        // ...
    }
}
||&lt;
と fly() の横にメソッドとして書くよりも
&gt;|javascript|
public class Bird
{
    public function fly():void
    {
        var startFly:Function = function():Boolean
        {
            // ...
        }

        var doFly:Function = function():void
        {
            // ...
        }

        var endFly:Function = function():void
        {
            // ...
        }

        if(startFly())
        {
            doFly();
        }

        endFly();
    }
}
||&lt;

と書いたほうが分かりやすいかもしれない。

private なメソッドだから、最初のやつで別にいいような気がしないでもない。でも、private なメソッドは、クラス内部からみるとグローバルにアクセスできる関数。前者の方法で書いていくと、いつの間にか private なメソッドが30個…、意味分からん…、となってしまうことを考えると、後者の方が読みやすいソースになるかもしれない。

別のクラスに分けちゃえよ、という気もしないでもないが、クラスが増えるのは、それはそれで管理対象が増えてしまうので避けておきたい。

ちゃんと設計したらこんなことしなくてもいいでしょ、という意見もありそう。ごもっともなんだけど、JS とか AS みたいなスクリプト言語って、あまり設計は考えずに勢いで書いていきたいものだ。そういうときに、この方法は便利じゃね？ってことで。

</body>
<comments>
<comment>
<username>鴇羽</username>
<body>へぇ～、ほぉ～、おおお～、勉強になりました。ｍ(__)ｍ&lt;br&gt;関数の中に関数か。これは結構、衝撃的でした。</body>
<timestamp>1184104666</timestamp>
</comment>
<comment>
<username>sunyone</username>
<body>参考になりました。&lt;br&gt;さっそく使わせてもらいます&lt;(＿ ＿)&gt;</body>
<timestamp>1184118891</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-12" title="">
<body>
*google_maps_dq*『googlemapでドラクエ』でドラクエ 公開
&lt;a href=&quot;http://www3.smartnetwork.co.jp/dqmap/&quot;&gt;googlemapでドラクエ&lt;/a&gt; がおもしろかったので、フィールドを歩けるようにしてみました。

-http://tech.nitoyon.com/javascript/application/racing/3/

昔作った &lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/1/&quot;&gt;Google Maps で鈴鹿サーキット試走&lt;/a&gt; とほぼ同じソースコードでできるかと思いきや、操作感を本物のドラクエに近づけるために、かなり苦労してしまいました。

今回は、海の上はあるけません。

誰か、敵が出るようにしてよ！
</body>
<comments>
<comment>
<username>ku0522</username>
<body>jsに書いてある陸地のビットマップデータはどうやって作られたんですかー？なにかいい方法があるんでしょうか。</body>
<timestamp>1184206954</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>あのぐらいのデータなら力技でなんとかできそうですが、めんどくさかったので次のようにして作り出しました。&lt;br&gt;1. 地図の画像を１マス１pxになるように縮小&lt;br&gt;2. 地形別に白黒２色で塗り分けて bmp で保存&lt;br&gt;3. エディタで開いて置換・改行&lt;br&gt;4. 上下が入れ替わっていたので、perl で reverse</body>
<timestamp>1184249344</timestamp>
</comment>
<comment>
<username>ku0522</username>
<body>たしかにBMPにするとラクそうですね。なるほどなるほどー。</body>
<timestamp>1184298791</timestamp>
</comment>
<comment>
<username>gmapでDQの中の人</username>
<body>『googlemapでドラクエ』を取り上げていただいてありがどうございます。&lt;br&gt;&lt;br&gt;うちの方で『googlemapでドラクエ』のソースをあれこれいじると&lt;br&gt;『「googlemapでドラクエ」でドラクエ』に影響が出るみたいですね。&lt;br&gt;ご迷惑をおかけしております。&lt;br&gt;&lt;br&gt;新しいサービスを公開しました。&lt;br&gt;利用者の方に画像をアップロードして頂いて、そこから「googlemapでドラクエ」のような&lt;br&gt;ページを作成するサービスです。&lt;br&gt;ぜひ遊びにきてください。&lt;br&gt;&lt;br&gt;なんでもGoogleマップ&lt;br&gt;http://maps.smartnetwork.co.jp/</body>
<timestamp>1187330393</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-21" title="">
<body>
*wcan_mini_tetris_as3*ActionScript3.0でテトリスを作ってみる
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070721/20070721170919.jpg&quot; width=&quot;200&quot; height=&quot;289&quot; align=&quot;right&quot;&gt;
&lt;a href=&quot;http://www.wcan.jp/index.php?ID=115&quot;&gt;WCAN mini ActionScript Vol.3&lt;/a&gt; の勉強会資料を公開します。

-&lt;a href=&quot;http://tech.nitoyon.com/misc/tetris_as3/&quot;&gt;プレゼン資料&lt;/a&gt;
-&lt;a href=&quot;http://tech.nitoyon.com/misc/tetris_as3/tetris.zip&quot;&gt;ソースコード&lt;/a&gt; (23.8KB)

ActionScript でのゲーム製作は注目されているようなので、実例としていいかもしれません。

中でも、右に写真を載せている Tetris＋PaperVision3D のゲーム例が気に入ってます。（ただ、現状ではライン消したあとの処理にバグがありますが）

ActionScript 3.0＋PaperVision3D とか ActionScript 3.0＋&lt;a href=&quot;http://www.cove.org/ape/index.htm&quot;&gt;APE(Actionscript Physics Engine)&lt;/a&gt; を組み合わせてみれば、今までは手を出しづらかった方面のゲームでも簡単に作れるようになりそうです。
</body>
<comments>
<comment>
<username>arkw</username>
<body>とってもいい感じですね～♪参考にさせてもらいますぅ</body>
<timestamp>1185237892</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-24" title="">
<body>
*p1*AIR でニコニコメソッド プレゼン バージョンアップ
今までは、常に最前面に表示するために別のツールの力を借りていましたが、AIR β版からの新機能「alwaysInFront」を利用するようにしました。
&gt;|javascript|
stage.window.alwaysInFront = true;
||&lt;

他は何も変わってなくて、AIR β版用に再パッケージ化したぐらい。

AIR β版用なので、α版では動きませんよ。

ダウンロード、詳細などは &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070501/p1&quot;&gt;AIR でニコニコメソッド プレゼン&lt;/a&gt; からどうぞ。

ついでに、CGI のソースも掲載しておきましたよ。

</body>
</day>
<day date="2007-07-25" title="">
<body>
*p1*[flex]Flex2勉強会第20回で発表します
かなり飛び入りですが、7月28日(土)の &lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?Flex2%CA%D9%B6%AF%B2%F1%C2%E8%A3%B2%A3%B0%B2%F3%A1%F7%C2%E7%BA%E5%B9%A9%B6%C8%C2%E7%B3%D8&quot;&gt;Flex2勉強会第２０回＠大阪工業大学&lt;/a&gt; で発表することになりました。

先週末の WCAN mini にて、id:hirossy1977 さんとお話していたら、時間ちょっと余っているよー、とのことだったので、10分ほど(?)発表の時間をもらうことにしました。

内容は「Flex Internals」と題して、Flex の内部実装を解説していく予定です。といっても時間もあまりないので序論ぐらいで止めておきます。詳細はその次の Flex 勉強会あたりでできれば、と思っています。

まだまだ席の余裕はありそうなので、お近くの方はぜひぜひお越しください！
</body>
<comments>
<comment>
<username>sato-shi</username>
<body>お会いできるの楽しみでーす♪</body>
<timestamp>1185355404</timestamp>
</comment>
</comments>
</day>
<day date="2007-07-31" title="">
<body>
*flex_internals1_mxml*[flex]Flex Internals1 ～MXML 再入門～ 発表資料
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070801/20070801014036.jpg&quot; width=&quot;300&quot; height=&quot;207&quot;&gt;

&lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?Flex2%CA%D9%B6%AF%B2%F1%C2%E8%A3%B2%A3%B0%B2%F3%A1%F7%C2%E7%BA%E5%B9%A9%B6%C8%C2%E7%B3%D8&quot;&gt;Flex2勉強会第２０回＠大阪工業大学&lt;/a&gt; で発表してきました。

発表資料はこちらです。
-&lt;a href=&quot;http://tech.nitoyon.com/misc/flex_internals1/&quot;&gt;Flex Internals 1 ～MXML 再入門～&lt;/a&gt;
-&lt;a href=&quot;http://tech.nitoyon.com/misc/flex_internals1/FlexInternals1.zip&quot;&gt;ソースコード (156KB)&lt;/a&gt;

MXML の裏側がどうなっているかを掘り下げています。もっとマニアックに行く予定だったのですが、作っているうちに、結局初心者向けになってしまいました。

注目してほしいのは後半に出てくる「インスペクタ」。今年のお正月に作ったまま放置してたものを、この機会に発掘してみました。&lt;a href=&quot;http://tech.nitoyon.com/misc/flex_internals1/FlexInternals1.zip&quot;&gt;ソースコード&lt;/a&gt;の中にインスペクタのソースも入っているので、興味がある人は見てください。あまり Flex を理解していない時代の作品なので、Flex っぽくないソースになってますが…。

第２回はどうしようかと色々悩んだのですが、次回はてら子と共催ということで、レイアウトネタにしてみようかな、と構想中です。

**以下、スライド作りの苦労話
今回は、Flex 勉強会ということで、資料を Flex で作ってみました……。が、これが予想以上に大変。

MXML でページ内で文字列を配置していくわけなのですが、&amp;lt;Text x=&quot;30&quot; y=&quot;10&quot; width=&quot;... といちいち座標指定するところにイライラ。fcwrap を導入してからは、かなり生産性は向上したのだけど、それでも絶対座標指定だと限界がある。

痛感したのは、テキストを配置するなら Flex よりも HTML+CSS の方が簡単だということ。もちろん、Flex Builder を使えば楽になるんだろうけど、それはそれで負けた気分。Flex でやるなら、GUI の MXML 配置ツールを作ってしまいたいところ。

本っぽいアニメーション効果は &lt;a href=&quot;http://www.rubenswieringa.com/blog/flex-book-component-beta&quot;&gt;Flex book component (beta)&lt;/a&gt; を使って実現しています。ショートカットキーを割り当ててスライドっぽく操作できるようにしてます。[数字]＋Enter という PowerPoint 風のショートカットキーを実装してます。自動ページ送りが始まって、なかなか気分爽快。

スライド資料って、普通は横長なんだけど、こういう２アップのレイアウトもなかなか面白いかもしれません。特に、ソース比較の部分が分かりやすい。

ちょっと裏話。Flex book component は左のページと右のページが別々の UIComponent として設計されています。これが見開きページを作るときに大きな壁になりました。どうやって解決してるかというと、左ページの文字と右ページの文字を、異なる Text として作成して逃げてます。ああ、場当たり的対処……。
</body>
<comments>
<comment>
<username>shuwat</username>
<body>ご存知かもしれませんが、FLEXibleというmxml用のGUI設計ツールがあります。&lt;br&gt;まだベータ版で私の環境ではうまく動きませんでした。&lt;br&gt;&lt;br&gt;http://www.noridon.net/weblogs/archives/2006/12/flash_playermxm.html</body>
<timestamp>1185929295</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>情報ありがとうございます。&lt;br&gt;昔、一度試したけどダメだった記憶があります・・・。&lt;br&gt;&lt;br&gt;配置に Flash 使えねーということを書いてしまったけど&lt;br&gt;よくよく調べたら、TextField に CSS 使えるのか・・・。&lt;br&gt;margin-left(right) や text-indent はサポートされるみたいだ。&lt;br&gt;どうせなら縦方向の margin も設定したいもんだ。</body>
<timestamp>1185988423</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-01" title="">
<body>
*as3_iphone_button*[as]AS3 で iPhone 風ボタンを描画
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070802/20070802012324.jpg&quot; width=&quot;450&quot; height=&quot;128&quot; alt=&quot;iPhone buttons&quot;&gt;

ActionScript 3 で Photoshop チュートリアル実践シリーズ 第１弾。

今回は iPhone 風ボタンを作ってみました。

参考にしたサイトは &lt;a href=&quot;http://blog.jotlet.net/2007/07/05/iphone-style-icon-tutorial/&quot;&gt;iPhone style icon tutorial ≪ Jotlet Developer Blog&lt;/a&gt;。Photoshop 用のチュートリアルとはいえ、使っている機能は、角丸四角、ドロップシャドウ、楕円、グラデーション、オーバーレイ(レイヤースタイル)程度だったので、ほとんど苦労なく AS3 に移植できました。

完成品が上の画像。文字はあとから Photoshop を使って追加しましたが、それ以外のところは正真正銘、AS3 だけで描画しています。

ソースは以下の通り。

====
&gt;|javascript|
package
{
    import flash.display.*;
    import flash.filters.*;
    import flash.geom.*;
    
    public class iPhoneButton extends Sprite
    {
        private const color:int = 0x1960CA;
        private const SIZE:int = 60;
        private const ROUND:int = 20;
        
        public function iPhoneButton():void
        {
            var matrix:Matrix = new Matrix();
            matrix.createGradientBox(SIZE, SIZE, Math.PI / 2);
            
            var base:Shape = new Shape();
            base.graphics.beginFill(color);
            base.graphics.drawRoundRect(0, 0, SIZE, SIZE, ROUND, ROUND);
            addChild(base);

            var border:Shape = new Shape();
            border.graphics.lineStyle(1, 0xffffff, 1);
            border.graphics.lineGradientStyle(&quot;linear&quot;, [0xffffff, 0xffffff, 0xffffff], [1, 0.3, 1], [0, 128, 255], matrix);
            border.graphics.drawRoundRect(1, 1, SIZE - 2, SIZE - 2, ROUND, ROUND);
            border.blendMode = BlendMode.OVERLAY;
            addChild(border);

            var glowTop:Shape = new Shape();
            glowTop.graphics.beginGradientFill(&quot;linear&quot;, [0xffffff, 0xffffff], [1, 0.2], [0, 128], matrix);
            glowTop.graphics.drawEllipse(-SIZE / 2, -SIZE / 2, SIZE * 2, SIZE);
            glowTop.blendMode = BlendMode.OVERLAY;
            addChild(glowTop);
            var mask:Shape = new Shape();
            mask.graphics.beginFill(0);
            mask.graphics.drawRoundRect(0, 0, SIZE, SIZE, ROUND, ROUND);
            addChild(mask);
            glowTop.mask = mask;

            var glowBottom:Shape = new Shape();
            glowBottom.graphics.beginGradientFill(&quot;linear&quot;, [0xffffff, 0xffffff], [0, 1], [224, 255], matrix);
            glowBottom.graphics.drawRoundRect(0, 0, SIZE, SIZE, ROUND, ROUND);
            glowBottom.blendMode = BlendMode.OVERLAY;
            addChild(glowBottom);

            var filter:DropShadowFilter = new DropShadowFilter(2, 90, 0x000000, 0.7);
            base.filters = [filter];
        }
    }
}
||&lt;

(2007.08.07 追記)
-b:id:trickstar_os さんのコメントを受けて、Shape を使うようにしました。
-glowTop がはみ出ていたので、マスクで隠すようにしました。

</body>
<comments>
<comment>
<username>パージオ</username>
<body>すごい！</body>
<timestamp>1189429117</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-06" title="">
<body>
*p1*HTTP_USER_AGENT の入力方法
プログラミングしてると、大文字をアンダースコアで区切ったキーワードがよく出てくる。

よく知られたところでは、HTTP_USER_AGENT。

これ、入力しにくくないですか？

**私の場合
私がどうやって入力するかというと...

左手小指で Shift を押しっぱなしにしながら、H、T、T、P…と押していく。

「A」を入力するときには左手小指が使えないので、臨時で左手薬指を使うことにしている。

でも、手が疲れるので改善方法はないものか、と考えていたら、Windows の「固定キー機能」を思い出した。[Shift] を２回押しすると押しっぱなし状態になる、というもの。ちょっと使ってみたら便利だった。

必要なときに思い出せるかがあやしいけど、しばらく有効にしてみよう。

**みんなどうやって入力するの？
他の人がどうやって入力してるか知りたくて、Twitter で聞いてみたら、何人かの人が答えてくれました。

|*ひと|*入力方法|
|&lt;a href=&quot;http://twitter.com/jazzanova/&quot;&gt;jazzanova さん&lt;/a&gt;|長い場合はShift + capslockで大文字にしちゃう。その手間が惜しい程短い場合はShift押しっぱ。|
|&lt;a href=&quot;http://twitter.com/os0x/statuses/187364222&quot;&gt;os0x さん&lt;/a&gt;|小文字で打ってから大文字変換かな。|
|&lt;a href=&quot;http://twitter.com/beinteractive/statuses/187403012&quot;&gt;beinteractive さん&lt;/a&gt;|左小指でSHIFT押しながら左手全体をひとつずつ左へスライド|
|&lt;a href=&quot;http://twitter.com/munegon/statuses/187437802&quot;&gt;munegon さん&lt;/a&gt;|小指が常時Ctrlに乗っかってるのでShiftは薬指で押しつつ、残り3本＋右手で超変則タイピング|

これだけ見ても人によって全然違うのが面白い。

みなさんはどうやって入力してますか？　コメント欄やブックマークコメントで教えていただければうれしいです。

</body>
<comments>
<comment>
<username>fk_2000</username>
<body>私は右小指でshiftを押しながら「HTTP_USER_AGENT」と打ちます。左手はいつでもAlt＋Tabが押せるポジションに待機しております。うーん、みんな違いますねぇ＾＾</body>
<timestamp>1186368385</timestamp>
</comment>
<comment>
<username>p-nix</username>
<body>初めまして。ピアノをやっているのが原因なのか、ブラインドタッチの基礎を無視して、近いところにある指を使う変則的入力をやっています。試してみました。&lt;br&gt;左Shiftを小指でずっと押したまま&lt;br&gt;H：右人差し指&lt;br&gt;T：左人差し指&lt;br&gt;T：左人差し指&lt;br&gt;P：右薬指！&lt;br&gt;_：右小指&lt;br&gt;U：中指！&lt;br&gt;S：左薬指&lt;br&gt;E：右人差し指！&lt;br&gt;R：右中指！&lt;br&gt;_：右小指&lt;br&gt;A：左薬指&lt;br&gt;G：右人差し指！&lt;br&gt;E：左中指&lt;br&gt;N：右人差し指&lt;br&gt;T：左人差し指&lt;br&gt;&lt;br&gt;仕事柄、SQL文を書くことが多く、SQLは大文字で、みたいな社内規約があるので左Shift押しっぱなしで、SELECT 、FROM 、WHERE などお手の物です。基本的に手を置く位置が左に寄りますね。</body>
<timestamp>1186408899</timestamp>
</comment>
<comment>
<username>hinoki</username>
<body>左小指はずっとshift押しっぱなし。&lt;br&gt;その間、（本来）左小指で入力するキーは、左薬指で&lt;br&gt;肩代わりしてますね。</body>
<timestamp>1186489788</timestamp>
</comment>
<comment>
<username>p-nix</username>
<body>hinokiさん、ヽ（´ー｀）人（´∇｀）ノ 　ナカーマですね。&lt;br&gt;やっぱりそうなりますよね。ちょっと安心。</body>
<timestamp>1186496690</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-10" title="">
<body>
*begin_fill_end_fill_case_study*[as]beginFill と endFill のケーススタディ
Graphics クラスの beginFill と endFill あたりの挙動がよく分からなかったので調べてみた。

**Case 1
&gt;|javascript|
package
{
    import flash.display.*;

    public class erase extends Sprite
    {
        public function erase()
        {
            graphics.beginFill(0xff0000);
            graphics.drawCircle(0, 100, 100);

            graphics.drawCircle(100, 100, 100);

            graphics.drawRect(-30, 100, 300, 50);

            graphics.endFill();
        }
    }
}
||&lt;

奇数回重なっている部分が塗りつぶされているのが分かる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070810/20070810023602.gif&quot; width=&quot;200&quot; height=&quot;125&quot;&gt;&lt;/center&gt;&lt;

XOR な領域が塗られる、と言い換えてもいいかもしれない。

**Case 2
１つ目の円描画あとに endFill を持ってきてみる。

&gt;|javascript|
graphics.beginFill(0xff0000);
graphics.drawCircle(0, 100, 100);
graphics.endFill();

graphics.drawCircle(100, 100, 100);

graphics.drawRect(-30, 100, 300, 50);
graphics.endFill();
||&lt;

１つ目の円しか描画されない。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070810/20070810023601.gif&quot; width=&quot;150&quot; height=&quot;121&quot;&gt;&lt;/center&gt;&lt;

endFill を呼んだ段階で、塗りの情報は初期化されて、それ以降は endFill されても何も塗られないんだと推測できる。

**Case 3
毎回、beginFill してみる。

&gt;|javascript|
graphics.beginFill(0xff0000);
graphics.drawCircle(0, 100, 100);

graphics.beginFill(0xff0000);
graphics.drawCircle(100, 100, 100);

graphics.beginFill(0xff0000);
graphics.drawRect(-30, 100, 300, 50);
||&lt;

全部塗られる。Case 1 のように XOR になることもない。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070810/20070810023600.gif&quot; width=&quot;200&quot; height=&quot;124&quot;&gt;&lt;/center&gt;&lt;

これは、たぶん、beginFill を実行した段階で、自動的に前の塗りの endFill が呼ばれてるんだろう。

**まとめ
なんとなく内部実装が見えてきた気がする。endFill せずに２回塗れば XOR になる、という技は使えそうだ。

</body>
</day>
<day date="2007-08-12" title="">
<body>
*line_to_line_style_case_study*[as]lineTo と moveTo あたりのケーススタディ
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070810/begin_fill_end_fill_case_study&quot;&gt;前回&lt;/a&gt;に引き続き、今度は Graphics クラスの lineTo と lineStyle あたりの挙動と、beginFill のからみを調べてみた。

今回も環境は AS3 だけど、最後に AS2 で試した場合の補足をつけておいた。

**Case 1： 普通に線を描画
&gt;|javascript|
package
{
    import flash.display.*;

    public class Test extends Sprite
    {
        public function erase()
        {
            graphics.lineStyle(3, 0xff0000);

            graphics.moveTo(100, 0);
            graphics.lineTo(0, 50);
            graphics.lineTo(100, 100);

            graphics.moveTo(150, 100);
            graphics.curveTo(240, 50, 150, 0);
        }
    }
}
||&lt;

lineStyle で線の色と太さを設定して、moveTo で現在の位置を移動、lineTo および curveTo で描画してる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070812/20070812031414.gif&quot; width=&quot;209&quot; height=&quot;118&quot;&gt;&lt;/center&gt;&lt;

**Case 2： beginFill と endFill の効果
左側の図形描画を beginFill と endFill を挟んでみた。

&gt;|
&lt;strong&gt;graphics.beginFill(0xffffcc);&lt;/strong&gt;
graphics.lineStyle(3, 0xff0000);

graphics.moveTo(100, 0);
graphics.lineTo(0, 50);
graphics.lineTo(100, 100);
&lt;strong&gt;graphics.endFill();&lt;/strong&gt;

graphics.moveTo(150, 100);
graphics.curveTo(240, 50, 150, 0);
|&lt;

始点と終点が結ばれて、内側が beginFill で指定した色で塗られた。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070812/20070812031413.gif&quot; width=&quot;209&quot; height=&quot;118&quot;&gt;&lt;/center&gt;&lt;

endFill のあとも、線のスタイルは変化していない点に注意したい。塗りの情報と線の情報は独立のようだ。

塗りの情報は endFill を呼び出せば初期化される。では、線のスタイルを初期化するにはどうするかというと、lineStyle メソッドを引数なしで呼び出せばよい。

例えば、次のように endFill の前に線のスタイルを初期化してみると…。

&gt;|
graphics.beginFill(0xffffcc);
graphics.lineStyle(3, 0xff0000);

graphics.moveTo(100, 0);
graphics.lineTo(0, 50);
graphics.lineTo(100, 100);
&lt;strong&gt;graphics.lineStyle();&lt;/strong&gt;
graphics.endFill();
|&lt;

こうなった。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070812/20070812031412.gif&quot; width=&quot;209&quot; height=&quot;118&quot;&gt;&lt;/center&gt;&lt;

パスを閉じる線が太さ0で初期化されているのが分かる。

**Case 3： beginFill しっぱなしで、endFill しない
最初に beginFill して、endFill しない。

&gt;|
&lt;strong&gt;graphics.beginFill(0xffffcc);&lt;/strong&gt;
graphics.lineStyle(3, 0xff0000);

graphics.moveTo(100, 0);
graphics.lineTo(0, 50);
graphics.lineTo(100, 100);

graphics.moveTo(150, 100);
graphics.curveTo(240, 50, 150, 0);
|&lt;

両方塗られる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070812/20070812031411.gif&quot; width=&quot;209&quot; height=&quot;118&quot;&gt;&lt;/center&gt;&lt;

moveTo すると、その時点でパスが閉じられて、塗られるようだ。

注目すべきは、右の図形も同じ色で塗られているところ。moveTo は、塗りを発生させるが、塗りの情報は維持されたまま、次の図形にも適用されるようだ。

Case 2 では、右の図形が塗られていないところと比較すると面白い。

**Case 4： ２つ目のみ beginFill
moveTo のあとに beginFill で塗りを設定。
&gt;|
graphics.lineStyle(3, 0xff0000);

graphics.moveTo(100, 0);
graphics.lineTo(0, 50);
graphics.lineTo(100, 100);

graphics.moveTo(150, 100);
&lt;strong&gt;graphics.beginFill(0xffffcc);&lt;/strong&gt;
graphics.curveTo(240, 50, 150, 0);
|&lt;

想像通り。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070812/20070812031608.gif&quot; width=&quot;209&quot; height=&quot;118&quot;&gt;&lt;/center&gt;&lt;

でも、moveTo の前に beginFill を持ってくると…
&gt;|
graphics.lineStyle(3, 0xff0000);

graphics.moveTo(100, 0);
graphics.lineTo(0, 50);
graphics.lineTo(100, 100);

&lt;strong&gt;graphics.beginFill(0xffffcc);&lt;/strong&gt;

graphics.moveTo(150, 100);
graphics.curveTo(240, 50, 150, 0);
|&lt;

ナニコレ。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070812/20070812031607.gif&quot; width=&quot;209&quot; height=&quot;118&quot;&gt;&lt;/center&gt;&lt;

謎だ。

どうも beginFill せずに描画したパスに対して、途中で beginFill を呼び出すとこうなるようだ。beginFill の手前で moveTo を挟んで、パスをいったん閉じるとバグらなくなった。endFill を挟んでも解決しなかったので、endFill は beginFill したときにしか機能しないんだろうと想像できる。

**補足： AS2 で試してみた
AS2（Flash MX 2004）で試してみたら、Case 3 と Case 4 の１つ目で、右側が黒くなるバグが発生した。コードの最後に、ちゃんと endFill してやれば、AS3 と全く同じ見た目になった。

描画部分は、AS1 の時代からほとんど変わってないんだろうな。

**まとめ
-lineStyle は塗りの情報とは独立。好きなときに呼び出してよい。
-endFill はパスを閉じて、領域を塗る。塗りの情報は初期化される。
-moveTo はパスを閉じて、領域を塗る。塗りの情報は維持される（初期化されない）。
-beginFill してないパスは、moveTo で閉じてから、beginFill を呼べ

</body>
</day>
<day date="2007-08-16" title="">
<body>
*flex_in_suit_land*[flex]スーツの国の Flex
Flex についてみんな誤解してるんじゃないだろうか、と思ったので考えをまとめてみた。

Flex というのは ActionScript 用のフレームワークで、MXML という XML で見た目を記述したり、ActionScript だけでは実現が大変な DataGrid などの便利なコンポーネントが利用できたりする。

デザイナーが Flash 8 などで作っていた SWF だけども、Flex を使えば RIA な SWF を簡単に開発できるようになる。

**Flex は裏世界で使われる
その Flex について、不満のような意見が聞こえてきている。

&gt;http://subtech.g.hatena.ne.jp/secondlife/20070813/1186999047:title&gt;
 Flex が天下を取って Flex の GUI を使いこなせれば引く手あまた、なんて状況はみじんも感じられなくて、(中略)軽く表面上のレイアウトだけ使うこともでき、プロトタイプ作りには良いけど、ねぇ。
&lt;&lt;

ここで書いてある「Flex が天下を取って」というのは、現在、HTML とか Ajax とか Flash とかで作られている Web サービスが、Flex で置き換えらることだと解釈したんだけど、これって前提がちょっと違う気がする。

Flex はそもそも、そういう Web サービスで使ってもらうことを主目的にはしていない。Flex が得意とする分野は、現在 VB や Java Applet で開発されていような社内資産管理システムとか、サーバ製品の管理 UI とか、イントラネットな世界の UI だ。

そういう表にはあまり出てこない案件では、世界中のユーザーに心地よく使ってもらうインターフェースよりも、実用性、機能性が重視される。だからこそ、画面設計を行うための MXML であり、最低限のデザインを行うための (Flexの) CSS やスキンといった設計に行き着いているじゃないだろうか。

Flex 勉強会に行った fladdict さんの &lt;a href=&quot;http://fladdict.net/blog/2007/08/flexug.html&quot;&gt;Blog 記事&lt;/a&gt;には次のような象徴的なことが書いてあった。
&gt;http://fladdict.net/blog/2007/08/flexug.html:title&gt;
序盤はスキンの話ばっかりで、「デザイナ＝スキン作る人」、「デザイナ＝アーティスト」って文脈で話が進んでくんよ。

(中略)質問したんよ。「Flexのスクロールバーとかカクカクしてありえないんすけど、あそこにスムーズスクロール実装したい、みたいなスキンで対応できないレベルのデザインはどう連携するのがいいんでしょうね？」みたいな質問を振ったら、

後でパネルセッションで「スクロールバーなんとかしろとか、Flexちゃんと理解してから提案しろ馬鹿」的な話が出てきたりして、(´・ω・`)ｼｮﾎﾞｰﾝ
&lt;&lt;

ビジネスな世界に生きる Flex では、使っててうれしくなるようなスムーズなエフェクトは重視されない。それはFlex の設計思想からも見て取れる。派手なエフェクトを行うクラスは存在しないし、タイムラインの概念は完全に隠蔽されている。

id:secondlife さんの「プロトタイプ作りにはいいけど」という発言も、fladdict さんの「スムーズスクロール実装したい」という発言も、２人とも全世界を相手にする表舞台に生きる人だから出てくる発想で、そういう意味では「Flex は使えない」んだと思う。

**Flex はコンシューマ向けでは使えないのか？
じゃあ、Flex がコンシューマ向けでは使えないか、というとそうでもないような気もしている。

最近話題になった、&lt;a href=&quot;http://choco--late.com/archives/251&quot;&gt;Anywhere.FM&lt;/a&gt; は Flex を採用しているし、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070503/flex_based_yahoo_web_messenger&quot;&gt;米 Y! のウェブメッセンジャーは Flex ベース&lt;/a&gt; なのだ。

Adobe がリリースするサービスでも着々と Flex が使われていて、&lt;a href=&quot;http://www.adobe.com/designcenter/video_workshop/&quot;&gt;Adobe - Design Center - Video workshop&lt;/a&gt; や&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20070618_youtube_remixer/&quot;&gt;Adobe製のオンライン動画編集ツール「YouTube Remixer」&lt;/a&gt;あたりは Flex でできている。おそらく、&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20070301_photoshop_free/&quot;&gt;Photoshopのウェブアプリ版&lt;/a&gt; も Flex で作ってくるんだろうと想像できる。

こうやっていくつか見ていくと、いずれも HTML＋JavaScript だけで実装するにはめんどくさいような、複雑な UI を持った Web サービスアプリケーションで Flex が使われているのがわかる。

こういう複雑な Web サービスでは、見た目の派手さよりも、機能性が重視されるわけで、ビジネスな世界のアプリケーションに近いのかもしれない。
</body>
<comments>
<comment>
<username>p-nix</username>
<body>実世界ではFlexを使用したことはないので（コンシューマ向けECサイトを.NETで作ることが多いです。）現実を知らない楽観主義者ですが、Flexってwebのプレゼンテーションレベルとしての位置づけとして登場した記憶があります。そしてドメイン層（ビジネスロジック部）はJ2EE、.NETで作ってね、と。&lt;br&gt;AIRも出ることですし、Flexというか、MXML作成ツールとしてのFlex Builder にはとても期待をしているんですが、現実を知っている人たちは違うんでしょうかね。&lt;br&gt;一応、Flashくらいしか知らない人向けにFlexBuilderでAIRを作ろうページ書いてます。&lt;br&gt;http://d.hatena.ne.jp/p-nix/20070802/p1&lt;br&gt;もっと広めていきたいです。</body>
<timestamp>1187225455</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-17" title="">
<body>
*flex_in_suit_land2*[flex]Re: んー （スーツの国の Flex その2）
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070816/flex_in_suit_land&quot;&gt;昨日のエントリ&lt;/a&gt; に g:subtech:id:secondlife さんに &lt;a href=&quot;http://subtech.g.hatena.ne.jp/secondlife/20070816/1187228624&quot;&gt;つっこんでもらった&lt;/a&gt; のでお返事。

**社内うんちゃらのツールを作るなら Ajax でいいんじゃね？
できる人が社内にいて、全部内製でやっちゃうような会社だと、ノウハウも溜まってて、フレームワークも選り取りみどりな Ajax の方が早いでしょうね。

けど、間に SIer が挟まって、下請け孫受けなんかの仕事だと、Ajax とか Perl のような揺らぎがでる言語よりも、Java とか PHP のようながっつりしたもののほうが好まれる。そこに Flex がはまりそうだなぁ、と思ってるわけです。

スタープレーヤーが勢いで作ってメンテナンスし続けていく場合と、納期があって仕様書があって複数人で作っていく場合で、ずいぶん手法も変わってくるんじゃないかと。まさにギークとスーツの違い。

私が５月の勉強会で発表した「RIA と呼ばれるものまとめ」の中では、次のように書いていた。
&gt;http://tech.nitoyon.com/misc/flex_and_wpf/:title&gt;
今の世間の SE さんと呼ばれている人の開発言語は
-VB とか
-ASP.NET とか
-Java とか

そんな SE さんに...

-Web 2.0 みたいな見た目で
-Ajaxみたいにかっこよく
-ステキなアプリを作って！

とお願いしたら

たぶん困る

その理由は
+クロスブラウザ対応
+開発環境(IDE)がない
+JavaScriptナニソレ
+デザイン大変(HTML+CSS+…)

覚えることが多い上に

バッドノウハウもいろいろ

Web屋以外は手を出せない
&lt;&lt;
SE さんをスーツ、Web屋をギークに置き換えると、ちょうど上の話に近くなるかと。

**インタラクティブな Flash な世界にどれだけ Flex を融合できるか？
融合できたらすごいと思うけど、できるのかなぁ。

Photoshop や Fireworks でスキンが作れるらしいけど、Flex で想定された範囲の部分しかいじれなくて、インタラクティブな方向に行こうとするのは無謀じゃないかなぁ。

Flex でインタラクティブなものを作ろうとしたら、10分で MXML 書いて、20分で CSS 書いて、それなりのものになるんだけど、あとからエフェクト１個追加してよ、ここのデザインこうしてよ、と言われた瞬間に、Flash＋AS だったら10分でできたものを実現するのに、1時間以上かかりそう。

Flex のような作りこまれたフレームワークって、想定されている範囲のことをやるにはいいけど、それをはみ出ようとした瞬間に恐ろしいほどの労力がかかってくる予感がしている。で、はみ出る部分こそが、インタラクティブな世界では重要になるはず。

だから、アプリっぽくするなら Flex、インタラクティブにするなら Flash＋AS というのが妥当な路線かと思いますよ。なんか戦う前から諦めてる感があってかっこわるいけど、私の Flex に対する印象はこんな感じ。

</body>
</day>
<day date="2007-08-20" title="">
<body>
*javascript_eval_on_hatena_diary*はてなダイアリーで JavaScript eval
３ヶ月ほど前、弾さんや id:amachang さんが、はてなダイアリーで JavaScript が使えたらいいのにね、という話をしていました。
-&lt;a href=&quot;http://blog.livedoor.jp/dankogai/archives/50824976.html&quot;&gt;404 Blog Not Found:Hatena::Diary - スーパpre記法で実行可能なJavaScriptを&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070507/1178489288&quot;&gt;IT戦記 - Re: スーパー pre 記法で実行可能な JavaScript を&lt;/a&gt;

で、先日、&lt;a href=&quot;http://d.hatena.ne.jp/hatenadiary/20070814/1187089752&quot;&gt;自分のはてなダイアリーにブログパーツを設置できるようになった&lt;/a&gt;ので、事実上の JavaScript 解禁になりました。

ということで、JavaScript の eval を貼り付けるガジェットを Google Gadgets で作ってみました。

**サンプル
まずは簡単に Hello World。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/js_eval.xml&amp;amp;up_eval=alert('Hello%2C%20JavaScript.')&amp;amp;synd=open&amp;amp;w=320&amp;amp;h=50&amp;amp;title=Hello%20World&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

nanto_vi さんによる &lt;a href=&quot;http://twitter.com/nanto_vi/statuses/156511642&quot;&gt;Math.random().toString(36).slice(-8) でパスワード生成&lt;/a&gt; もすぐに試せる。（関連エントリ：&lt;a href=&quot;http://nanto.asablo.jp/blog/2007/08/17/1731754#c&quot;&gt;JavaScript で n 進数を扱う: Days on the Moon&lt;/a&gt;）

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/js_eval.xml&amp;amp;up_eval=alert(Math.random().toString(36).slice(-8))&amp;amp;synd=open&amp;amp;w=320&amp;amp;h=50&amp;amp;title=random%20password&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070810/1186779289&quot;&gt;IT戦記 - 配列を結合したり、配列を初期化したり&lt;/a&gt; のサンプルを貼り付けてみた。複数行の貼り付けもOK。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/js_eval.xml&amp;amp;up_rows=6&amp;amp;up_eval=var%20array1%20%3D%20%5B1%2C%202%2C%203%5D%3B%0Dvar%20array2%20%3D%20%5B4%2C%205%2C%206%5D%3B%0D%0D%5B%5D.push.apply(array1%2C%20array2)%3B%0D%0Dalert(array1)%3B%20%2F%2F%20%5B1%2C%202%2C%203%2C%204%2C%205%2C%206%5D&amp;amp;synd=open&amp;amp;w=320&amp;amp;h=130&amp;amp;title=amachang%20sample&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

**使い方
&lt;a href=&quot;http://gmodules.com/ig/creator?synd=open&amp;url=http://nitoyon.googlepages.com/js_eval.xml&quot;&gt;http://gmodules.com/ig/creator?synd=open&amp;url=http://nitoyon.googlepages.com/js_eval.xml&lt;/a&gt; から貼り付け用コードを作れます。

JavaScript のところにコードを書いて、「プレビューの切り替え」ボタンで実験、「コードを取得」ボタンで貼り付け用のHTMLを取得します。
-Google Gadget のフォームは複数行入力に対応していないので、「コードを取得」で得られた HTML に手動で %0D を追加して改行してます。
-Rows で行数を指定できるはずなんですが、なぜか適用されないので(?)、貼り付け用 URL の js_eval.xml のあとに、&amp;amp;up_rows=[行数] を手動で付け加えてます。
-タイトルに日本語を入れるとIE6で日本語が化けちゃう。Firefox なら大丈夫なのに…。

人力なところがかっこ悪いけど、これはちょっとがんばれば生成用フォームを作れるはずなので、あとでがんばるかも。

どうぞご利用ください。どうぞ流用＆改造してください。
</body>
</day>
<day date="2007-08-28" title="">
<body>
*p1*[as][flex]ActionScript と Flex のレイアウトについて発表しました
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070828/20070828092543.gif&quot; width=&quot;300&quot; hegiht=&quot;225&quot;&gt;&lt;/center&gt;&lt;

8月27日の FxUG の Flex 勉強会で発表しました。

発表資料はこちら：
-&lt;a href=&quot;http://tech.nitoyon.com/misc/as_and_flex_layouting/&quot;&gt;ActionScript and Flex layouting (ActionScript と Flex のレイアウト)&lt;/a&gt;

クイズ形式で、はまりやすいポイントを出題してみたのですが、会場の反応を見ながら発表できたので面白かったです。中には答えが半々に分かれたものや、数人しか正解しなかった問題もあって、狙い通りでした。

Flash 勉強会「てら子」と合同だったので、Flash しか知らない人にも分かりやすい内容にしたつもりです。

あと、英語を混ぜて資料を作ったので、どうせならば全世界の人に見てほしい！　ということで、資料のページを del.icio.us でブックマークしてくれたら大喜びします。組織票にご協力を！

-&lt;font size=&quot;+1&quot;&gt;&lt;a href=&quot;http://del.icio.us/post?url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fas_and_flex_layouting%2F&amp;title=ActionScript+and+Flex+layouting+%28ActionScript+%E3%81%A8+Flex+%E3%81%AE%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%29&quot;&gt;プレゼン資料を del.icio.us に追加する&lt;/a&gt;&lt;/font&gt;

プレゼン資料は id:amachang 作の s6.js を使いました。ありがとうございます。 → &lt;a href=&quot;http://amachang.art-code.org/pr/&quot;&gt;Yet Another Dynamic Presentation!&lt;/a&gt;
</body>
</day>
<day date="2007-08-29" title="">
<body>
*embed_flash_on_hatena_diary*はてなダイアリーに Flash を埋め込むガジェット
&gt;&lt;div style=&quot;border:2px solid red; padding: 0.5em; background: yellow; color: red;&quot;&gt;&lt;b&gt;このページはブログに Flash を埋め込むための方法を説明しています。はてなダイアリーだけでなく、Ameba ブログなどに Flash を埋め込むためにも利用できます。&lt;/b&gt;&lt;/div&gt;&lt;

&lt;!--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070820/javascript_eval_on_hatena_diary&quot;&gt;はてなダイアリーで JavaScript eval&lt;/a&gt; に続く、はてなダイアリー向け汎用ブログパーツ第２弾。

今回は Flash を埋め込めるようにしてみました。--&gt;

**サンプル
こんな感じになります。
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fas_for_flasher1%2Fimages%2Fclock.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=200&amp;amp;h=195&amp;amp;title=embed+flash&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

サイズも変えられます。
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Ftetris_as3%2FFieldViewExt.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=240&amp;amp;h=420&amp;amp;title=embed+flash&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

**使い方
&lt;a href=&quot;http://gmodules.com/ig/creator?synd=open&amp;url=http://nitoyon.googlepages.com/embed_flash.xml&quot;&gt;こちらからどうぞ&lt;/a&gt;。

SWF の URL を入力して、サイズ変更して、背景色変更して、「コードを取得」ボタンで貼り付け用のHTMLを取得します。

どうぞご利用ください。

**ソースコード
ソースは &lt;a href=&quot;http://nitoyon.googlepages.com/embed_flash.xml&quot;&gt;http://nitoyon.googlepages.com/embed_flash.xml&lt;/a&gt;。

内部で swfobject.js を使っているので、何も考えずに同じ MIT ライセンスで公開。

IE6 ではスクロールバー分の余白が表示されてしまったので、document.body.scroll = &quot;no&quot; で特別に対処してます。

**雑感
他のドメインの Flash を埋め込めるので便利。

だけど、「無断リンク禁止」な Flash を勝手に埋め込むこともできてしまう。しかも、リファラは「http://gmodules.com/ig/ifr?...」なので、無断リンクされた側からリンク元を知るのは難しい。検索しようにも、JavaScript で埋め込んでいるので、検索にも引っかかりにくい。

Flash 版、ime.nu のような効果が…！！！

Flash は容量も大きいし、画像と同じように直接のリンクは嫌われる傾向にあるんじゃないでしょうか。そういうクレームが Google に来たときに、中の人はどう対応するんでしょうね。

よい子の皆さんは、自分のサーバーにある Flash だけを埋め込んでくださいね。
</body>
<comments>
<comment>
<username>asayama86</username>
<body>有り難く使わせていただきました。本当にありがとうございます</body>
<timestamp>1221142824</timestamp>
</comment>
<comment>
<username>ke-tu</username>
<body>作成したガジェット（ただの時計ですが）がはてなダイアリーに貼れました。&lt;br&gt;ありがとうございます＾＾</body>
<timestamp>1226826884</timestamp>
</comment>
<comment>
<username>dasign</username>
<body>僕にとってはてなにFlashが埋め込めることほど嬉しいことはないです。どうもありがとうございました!</body>
<timestamp>1227862465</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>ありがたく使わせていただきます。ありがとうございます。</body>
<timestamp>1228571505</timestamp>
</comment>
<comment>
<username>syo_masayuki</username>
<body>なるほど、ガジェットを利用して・・・&lt;br&gt;その発想はなかったです。&lt;br&gt;使わせてもらってます！</body>
<timestamp>1272527199</timestamp>
</comment>
<comment>
<username>n</username>
<body>ありがたく使わせていただいております。&lt;br&gt;このガジェットってフルスクリーン使えませんかね？&lt;br&gt;設定で変えられるとうれしいんですが…</body>
<timestamp>1285472632</timestamp>
</comment>
<comment>
<username>トッポリーノ</username>
<body>アメブロにswf動画が埋め込めなくて、こちらのサイトにたどり着きました。本当に簡単に表示できて、とても助かりました！ありがとうございました。&lt;br&gt;ちなみにsilverlight(.xap)を表示させられる同様のガジェットなどがあったらすごく嬉しいです♪&lt;br&gt;ご興味がわいたらよろしくお願いしますm(_ _)m</body>
<timestamp>1294919911</timestamp>
</comment>
<comment>
<username>koko_hyt</username>
<body>Adobeの新バージョン（CS5.5）で作成したswfが貼れない、残念です(ToT)。実はInDesignからの書き出しswfだったりします。新バージョン対応にも期待させてください～。</body>
<timestamp>1306420485</timestamp>
</comment>
<comment>
<username>egz1984</username>
<body>素晴らしいです。ありがたく使わせて頂きます。&lt;br&gt;ありがとうございます。</body>
<timestamp>1341081913</timestamp>
</comment>
</comments>
</day>
<day date="2007-08-30" title="">
<body>
*rss_icon_as3*[as]AS3 で RSS アイコンを描画
ActionScript 3 で Photoshop チュートリアル実践シリーズ 第２弾。

今回は RSS アイコンを作ってみました。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FRssIcon.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=240&amp;amp;h=240&amp;amp;title=RSS+Icon+by+ActionScript+3.0&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

参考にしたサイトは &lt;a href=&quot;http://www.drweb.de/photoshop/rss-icon.shtml&quot;&gt;Photohop: RSS-Icon Standard in Variationen&lt;/a&gt;。ドイツ語で読めないけど、PSD ファイルが公開されているのでそれに沿って作成しました。

表面の描画は &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070801/as3_iphone_button&quot;&gt;前回&lt;/a&gt; とほとんど同じなので省略。

いろいろ思いついて面白いのが「1/4 ドーナッツ」をどう描くか。円をマスクしてもできるんですが、それでは面白くないので、別の方法を３通り考えてみました。

**1. 素直に外枠をなぞるパスを作る
１つ目は一番最初に思いついた単純だけどめんどくさい方法。

内側のドーナッツ作成コードがこれです。
&gt;|javascript|
private function drawPattern1(g:Graphics):void
{
    g.beginFill(0xffffff);
    g.moveTo(24, 52);
    arcTo(g, 24, 108, 56, -Math.PI / 2, 0);
    arcTo(g, 24, 108, 40, 0, -Math.PI / 2);
    g.endFill();

    // ...
||&lt;

座標がいっぱい出てくるので、イメージがつかみやすいように図を描いてみました。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070830/20070830090742.gif&quot; width=&quot;192&quot; height=&quot;159&quot; alt=&quot;RSSドーナッツ部分の座標&quot;&gt;&lt;/center&gt;&lt;

Graphics クラスには弧を描画する関数がないので、arcTo というメソッドを定義しています。&lt;a href=&quot;http://www.fumiononaka.com/TechNotes/Flash/FN0506002.html&quot;&gt;FN0506002 - 描画メソッドで円を描く - Flash : テクニカルノート&lt;/a&gt; を参考にしてベジェ曲線で描いています。

**2. 線として弧を描く
２つ目は太い線として描く方法。

先ほどと同じく、arcTo 関数を使って描画します。
&gt;|javascript|
private function drawPattern2(g:Graphics):void
{
    g.moveTo(24, 60);
    g.lineStyle(16, 0xffffff, 1, false, &quot;normal&quot;, CapsStyle.NONE);
    arcTo(g, 24, 108, 48, -Math.PI / 2, 0);
    g.lineStyle(0, 0, 0);

    // ...
||&lt;

だいぶシンプルになりました。
====
**3. 扇から扇を引く
最後はちょっとアクロバットに描画。

&gt;|javascript|
private function drawPattern2(g:Graphics):void
{
    g.beginFill(0xffffff);
    drawPie(g, 24, 106, 56, -Math.PI / 2, 0);
    drawPie(g, 24, 106, 40, -Math.PI / 2, 0);
    g.endFill();

    // ...
||&lt;

1/4円を２つ描いて XOR にしてます。このテクニックについては &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070810/begin_fill_end_fill_case_study&quot;&gt;beginFill と endFill のケーススタディ&lt;/a&gt; で説明済みです。

drawPie は独自に定義したメソッドなのですが、内部で arcTo を使っているので行数は短くなってます。

**ソース全体
まとめ代わりにソースを掲載。長いよ。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
====
&gt;|javascript|
package
{
    import flash.display.*;
    import flash.filters.*;
    import flash.geom.*;

    [SWF(width=&quot;128&quot;, height=&quot;128&quot;)]
    public class RssIcon extends Sprite
    {
        private const SIZE:int = 128;
        private const ROUND:int = 48;
        
        public function RssIcon():void
        {
            var matrix:Matrix = new Matrix();
            matrix.createGradientBox(SIZE, SIZE, Math.PI * 1 / 4);

            var glowFilter:GlowFilter = new GlowFilter(0xffffbe, 0.75);
            glowFilter.inner = true;

            // 外側の角円四角
            var base:Shape = new Shape();
            base.graphics.beginFill(0xcc6611);
            base.graphics.drawRoundRect(0, 0, SIZE, SIZE, ROUND, ROUND);
            base.graphics.endFill();
            addChild(base);

            // 内側の角円四角
            var base2:Shape = new Shape();
            base2.graphics.beginFill(0xee7722);
            base2.graphics.drawRoundRect(1, 1, SIZE - 2, SIZE - 2, ROUND - 1, ROUND - 1);
            base2.graphics.endFill();
            base2.filters = [glowFilter];
            addChild(base2);

            // グラデーション
            var gross:Shape = new Shape();
            gross.graphics.beginGradientFill(&quot;linear&quot;, [0xffffff, 0x000000], [0.2, 0.2], [0, 255], matrix);
            gross.graphics.drawRoundRect(0, 0, SIZE, SIZE, ROUND, ROUND);
            gross.graphics.endFill();
            gross.graphics.beginGradientFill(&quot;linear&quot;, [0xffffff, 0xffffff, 0xffffff], [0, 0.2, 0], [0, 112, 255], matrix);
            gross.graphics.drawRoundRect(0, 0, SIZE, SIZE, ROUND, ROUND);
            gross.graphics.endFill();
            gross.blendMode = BlendMode.OVERLAY;
            addChild(gross);

            // ●
            var white:Shape = new Shape();
            white.graphics.beginFill(0xffffff);
            white.graphics.drawCircle(36, 96, 12);
            white.graphics.endFill();

            // ))
            drawPattern1(white.graphics);
            //drawPattern2(white.graphics);
            //drawPattern3(white.graphics);

            addChild(white);
        }

        // その1: 素直に外枠をなぞるパスを作る
        private function drawPattern1(g:Graphics):void
        {
            g.beginFill(0xffffff);
            g.moveTo(24, 52);
            arcTo(g, 24, 108, 56, -Math.PI / 2, 0);
            arcTo(g, 24, 108, 40, 0, -Math.PI / 2);
            g.endFill();

            g.beginFill(0xffffff);
            g.moveTo(24, 22);
            arcTo(g, 24, 108, 86, -Math.PI / 2, 0);
            arcTo(g, 24, 108, 70, 0, -Math.PI / 2);
            g.endFill();
        }

        // その2: 線として弧を描く
        private function drawPattern2(g:Graphics):void
        {
            g.moveTo(24, 60);
            g.lineStyle(16, 0xffffff, 1, false, &quot;normal&quot;, CapsStyle.NONE);
            arcTo(g, 24, 108, 48, -Math.PI / 2, 0);
            g.lineStyle(0, 0, 0);

            g.moveTo(24, 30);
            g.lineStyle(16, 0xffffff, 1, false, &quot;normal&quot;, CapsStyle.NONE);
            arcTo(g, 24, 108, 78, -Math.PI / 2, 0);
            g.lineStyle(0, 0, 0);
        }

        // その3: 扇から扇を引く
        private function drawPattern3(g:Graphics):void
        {
            g.beginFill(0xffffff);
            drawPie(g, 24, 106, 56, -Math.PI / 2, 0);
            drawPie(g, 24, 106, 40, -Math.PI / 2, 0);
            g.endFill();

            g.beginFill(0xffffff);
            drawPie(g, 24, 106, 86, -Math.PI / 2, 0);
            drawPie(g, 24, 106, 70, -Math.PI / 2, 0);
            g.endFill();
        }

        // 弧を描くメソッド
        // (参考) http://www.fumiononaka.com/TechNotes/Flash/FN0506002.html
        private function arcTo(g:Graphics, x:Number, y:Number, radius:Number, startAngle:Number, endAngle:Number):void
        {
            var clockwise:Boolean = startAngle &lt; endAngle;

            g.lineTo(x + radius * Math.cos(startAngle), y + radius * Math.sin(startAngle));
            
            while(clockwise &amp;&amp; startAngle &lt; endAngle || !clockwise &amp;&amp; startAngle &gt; endAngle)
            {
                var nextAngle:Number = clockwise ? Math.min(endAngle, startAngle + Math.PI / 4)
                                                 : Math.max(endAngle, startAngle - Math.PI / 4);

                var nextPos:Point = new Point(
                    Math.cos(nextAngle) * radius, 
                    Math.sin(nextAngle) * radius);

                var controlPos:Point = new Point(
                    radius * Math.tan((nextAngle - startAngle) / 2) * Math.cos(nextAngle - Math.PI / 2),
                    radius * Math.tan((nextAngle - startAngle) / 2) * Math.sin(nextAngle - Math.PI / 2)
                    );

                g.curveTo(x + nextPos.x + controlPos.x, y + nextPos.y + controlPos.y, x + nextPos.x, y + nextPos.y);

                startAngle = nextAngle;
            }
        }

        // 扇形を描くメソッド
        private function drawPie(g:Graphics, x:Number, y:Number, radius:Number, startAngle:Number, endAngle:Number):void
        {
            g.moveTo(x, y);
            arcTo(g, x, y, radius, startAngle, endAngle);
        }
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20070801/as3_iphone_button:title]

</body>
</day>
<day date="2007-08-31" title="">
<body>
*nipotan_nitoyon*nipotan さんと私
ブログのスタイルをちょっと改造して、右側に「最近のコメント」「最近のトラックバック」を表示するようにしてみました。

せっかくの機会なので、今までもらっていたトラックバックを漁っていたら、こんなエントリを発見しました。
&gt;http://d.hatena.ne.jp/yheld/20070721/1184998803:title&gt;
nitoyonさんとnipotanさんを名前だけで区別するのはむずかしい。
&lt;&lt;

面白かったのではてブに追加してみたら、既にブックマークしてる人が１人。誰だろう、と覗いてみると…

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070831/20070831013309.gif&quot; width=&quot;450&quot; height=&quot;93&quot;&gt;&lt;/center&gt;&lt;

うわーーーー。並んでる。

こうやって見比べると、今更ながらに似てることを実感。

nipotan さんといえば、先日の &lt;a href=&quot;http://blog.livedoor.jp/nipotan/archives/50753792.html&quot;&gt;自分の名前見ててすごいことを発見したｗｗｗ&lt;/a&gt; というエントリが衝撃的に面白かったのですが、nipotan さんの本名の２文字目が「口」。私は「田」。nipotan さんの４文字目が「一」、私も「一」。

本名まで似てるけど、どうあがいても顔にはならないのが悔しい…。

ちなみに、なぜ「にとよん」なのかは &lt;a href=&quot;http://www.nitoyon.com/myself/&quot;&gt;このへん&lt;/a&gt; をご覧ください。（IE 以外ではデザイン崩れてるけど・・・）
</body>
</day>
<day date="2007-09-10" title="">
<body>
*as_two_way_binding*[as]AS3 で双方向データバインディング
ActionScript 3.0 で双方向にデータバインディングしたいことがあったりする。

MXML に {hogehoge} 形式でデータバインディングを作ると問題なく実現できるんだけど、スクリプトから BindingUtils.bindProperty でやろうとするとスタックオーバーフローしてしまうことがある。

**スタックオーバーフローする例
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot; applicationComplete=&quot;appComplete();&quot;&gt;
  &lt;mx:Script&gt;
    &lt;![CDATA[
      import mx.binding.utils.*;

      [Bindable]
      public var items:Array = [&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;];

      [Bindable]
      public var selected:Array = [];

      private function appComplete():void
      {
        BindingUtils.bindProperty(list, &quot;selectedItems&quot;, this, &quot;selected&quot;);
        BindingUtils.bindProperty(this, &quot;selected&quot;, list, &quot;selectedItems&quot;);
      }
    ]]&gt;
  &lt;/mx:Script&gt;

  &lt;mx:List id=&quot;list&quot; dataProvider=&quot;{items}&quot;/&gt;

&lt;/mx:Application&gt;
||&lt;

list.selectedItems が変更されると、this.selected が書き換えられ、今度は this.selected が変更されるので list.selectedItems を書き換えて... と無限に関数呼び出しが発生してしまうから。

list.selectedItems と this.selected が等しくなればオーバーフローは発生しないはずなのだけど、List クラスは selectedItems を返すときに、新たに Array を生成して返しているので、いつまでたっても等しくならずにオーバーフローしてしまうというわけだ。（mx.controls.listClasses.listBase 参照）

**問題ない例
&lt;strong&gt;当初はこの例を問題ある例と紹介していましたが、問題ありませんでした。&lt;/strong&gt;

&gt;|javascript|
package
{
  import flash.display.Sprite;
  import mx.binding.utils.*;

  public class TwoWayBindingNg extends Sprite
  {
    [Bindable]
    public var obj1:Object;

    [Bindable]
    public var obj2:Object;

    public function TwoWayBindingNg():void
    {
      BindingUtils.bindProperty(this, &quot;obj1&quot;, this, &quot;obj2&quot;);
      BindingUtils.bindProperty(this, &quot;obj2&quot;, this, &quot;obj1&quot;);

      obj1 = {a : 1}; // stack overflow
    }
  }
}
||&lt;

この例だと、obj1 == obj2 になった時点で無限に呼び出しは発生ししない。

**そこで汎用化
フラグをつけて、２回以上呼び出さないようにする関数としてまとめ上げて、何も考えずに相互データバインディングできるようにする。
&gt;|javascript|
    public static function createTwoWayBinding(src1:Object, prop1:String, src2:Object, prop2:String):void
    {
        var flag:Boolean = false;

        ChangeWatcher.watch(src1, prop1, function(event:Event):void
        {
            if(!flag)
            {
                flag = true;
                src2[prop2] = src1[prop1];
                flag = false;
            }
        });

        ChangeWatcher.watch(src2, prop2, function(event:Event):void
        {
            if(!flag)
            {
                flag = true;
                src1[prop1] = src2[prop2];
                flag = false;
            }
        });
    }
||&lt;

これで OK。

最初の MXML も
&gt;|javascript|
BindingUtils.bindProperty(list, &quot;selectedItems&quot;, this, &quot;selected&quot;);
BindingUtils.bindProperty(this, &quot;selected&quot;, list, &quot;selectedItems&quot;);
||&lt;
を次のように書き換えれば動くようになる。
&gt;|javascript|
createTwoWayBinding(this, &quot;selected&quot;, list, &quot;selectedItems&quot;);
||&lt;

**便利そうなので TwoWayBinding クラスにした
&lt;a href=&quot;http://www.libspark.org/&quot;&gt;Spark Project&lt;/a&gt; の &lt;a href=&quot;http://snippets.libspark.org/&quot;&gt;Snippets&lt;/a&gt; に TwoWayBinding クラスとして公開してみた。
-http://snippets.libspark.org/trac/wiki/nitoyon/TwoWayBinding

１人だけ mx 名前空間を import していて浮いてる気がするけど気にしない。

</body>
</day>
<day date="2007-09-11" title="">
<body>
*mask_letter*[as]BitmapData を使って文字列でマスク
残念ながら、ActionScript では TextField を使ってマスクすることはできません。画像をグラデーションに塗りたい、とか、写真を文字列くりぬきたい、といった要望には簡単には応えられません。

&lt;strong&gt;(追記 2009/9/9) &lt;code&gt;cacheAsBitmap&lt;/code&gt; を利用すれば簡単にマスクできました。詳しくは [http://d.hatena.ne.jp/nitoyon/20090909/text_mask:title] をご覧ください。&lt;/strong&gt;

じゃあ、どうするかというと、BitmapData の出番です。技術的には &lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=280&quot;&gt;BeInteractive! [BitmapDataを簡単にマスクする方法]&lt;/a&gt; と全く同じです。

サンプル Flash どーん。
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FTextMask.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=150&amp;amp;title=embed+flash&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

中段のグラデーションに対して、上段の文字列をマスクとして利用しています。上段の文字列は編集できることからも分かるとおり、TextField です。

ソースコードは長いけど、肝はここ。
&gt;|javascript|
    bmpDataText.draw(textField);
    bmpData.draw(grad);
    bmpData.copyChannel(bmpDataText, 
        new Rectangle(0, 0, WIDTH, HEIGHT), 
        new Point(0, 0), 
        BitmapDataChannel.RED, 
        BitmapDataChannel.ALPHA);
||&lt;
+bmpDataText に TextField を描画
+bmpData にグラデーションを描画
+bmpData に bmpDataText の Red チャンネルを Alpha チャンネルとしてコピー（テキストの濃淡データを透明度として設定している）。

別に Red チャンネルでなくて、Green でも Blue でもいいんですが、グレースケールなので全部同じ値なので気にしない。

&lt;s&gt;あと、この Flash が秒速10KBずつぐらいのペースでメモリを食いつぶしていくんだけど、なんでだろう。&lt;/s&gt; → (2007.9.12 追記) コメント欄で教えていただきました。グラデーションを描画する前に、graphics.clear() すれば問題なくなった。AS で上塗りする場合は、下に隠れている塗りの情報も保存され続けるようだ。これは知らなかったら絶対にはまる…。

長いけどソースコードは以下に（73行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.system.*;

    public class TextMask extends Sprite
    {
        private const WIDTH:int = 400;
        private const HEIGHT:int = 50;

        public function TextMask()
        {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;
            stage.frameRate = 12;

            // text
            var tf:TextFormat = new TextFormat();
            tf.size = HEIGHT * 2 / 3;
            tf.color = 0xffffff;
            var textField:TextField = new TextField();
            textField.defaultTextFormat = tf;
            textField.text = &quot;Hello, AS3.0!&quot;;
            textField.type = &quot;input&quot;;
            textField.width = WIDTH;
            textField.height = HEIGHT;
            textField.background = true;
            textField.backgroundColor = 0;
            addChild(textField);

            // gradation
            var grad:Shape = new Shape();
            grad.y = HEIGHT;
            addChild(grad);

            // output
            var bmpData:BitmapData = new BitmapData(WIDTH, HEIGHT);
            var bmp:Bitmap = new Bitmap(bmpData);
            bmp.y = HEIGHT * 2;
            addChild(bmp);

            // buffer
            var bmpDataText:BitmapData = new BitmapData(WIDTH, HEIGHT, false);

            // animation
            var angle:Number = 0;
            addEventListener(&quot;enterFrame&quot;, function(event:Event):void
            {
                angle += Math.PI / 16;
                angle = (angle &gt;= Math.PI * 2 ? 0 : angle);

                // update gradation
                var matrix:Matrix = new Matrix();
                matrix.createGradientBox(WIDTH, HEIGHT, angle);
                grad.graphics.clear();
                grad.graphics.beginGradientFill(GradientType.LINEAR, [0xff9900, 0x0000ff], [100, 100], [0, 0xff], matrix);
                grad.graphics.drawRect(0, 0, WIDTH, HEIGHT);
                grad.graphics.endFill();

                // cache textField as BitmapData
                bmpDataText.draw(textField);

                // mask it!
                bmpData.lock();
                bmpData.draw(grad);
                bmpData.copyChannel(bmpDataText, new Rectangle(0, 0, WIDTH, HEIGHT), new Point(0, 0), BitmapDataChannel.RED, BitmapDataChannel.ALPHA);
                bmpData.unlock();
            });
        }
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>fladdict</username>
<body>多分grad.graphicsのclearをコールしてないからです。&lt;br&gt;&lt;br&gt;drawRectはベクターなので、毎フレームgraphicsのなかに四角形が増えていってるからだと思います。clearで過去に描いた四角を開放してやれば大丈夫じゃないかと。</body>
<timestamp>1189445186</timestamp>
</comment>
<comment>
<username>yossy44</username>
<body>LDRで見てコメントしにきたら既に↑で書かれてた</body>
<timestamp>1189447922</timestamp>
</comment>
<comment>
<username>secondlife</username>
<body>flasher ハヤスｗｗ</body>
<timestamp>1189473593</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>あー、なるほど。ベクタだから増えていくんですね・・・。塗りつぶしてる感覚でした。&lt;br&gt;これははまりどころだ！！&lt;br&gt;&lt;br&gt;ありがとうございます。</body>
<timestamp>1189474770</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-12" title="">
<body>
*channel_test*[as]BitmapData のチャンネル分解
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070912/20070912092956.jpg&quot; width=&quot;424&quot; height=&quot;313&quot; alt=&quot;チャンネル分解&quot;&gt;

BitmapData.copyChannel の習作。画像をチャンネルごとに分解してみた。左上が赤、右上が緑、左下が青、右下がアルファ。

元の写真の赤いところ（岩）が、赤チャンネルでは白っぽくなってます。空はやはり青チャンネルが白っぽくなってますね。元写真は透過PNGにしてあるので、アルファチャンネルもそれなりに表示されてます。

実装方法はシンプル。赤チャンネルなら元画像の赤チャンネルを RGB それぞれのチャンネルにコピーしています。

ソースはこちら。
&gt;|javascript|
package
{
    import flash.display.*;
    import flash.filters.*;
    import flash.geom.*;
    import flash.text.*;

    public class PngTest extends Sprite
    {
        [Embed(source='channel.png')]
        private var SamplePicture:Class;
        
        public function PngTest()
        {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var icon:Bitmap = new SamplePicture();
            addChild(icon);

            var zeroPoint:Point = new Point(0, 0);
            var rect:Rectangle = new Rectangle(0, 0, icon.width, icon.height);

            var channels:Array = [BitmapDataChannel.RED, BitmapDataChannel.GREEN, 
                BitmapDataChannel.BLUE, BitmapDataChannel.ALPHA];
            for(var i:int = 0; i &lt; channels.length; i++)
            {
                var channel:uint = channels[i];
                var bmpdata:BitmapData = new BitmapData(icon.width, icon.height);

                bmpdata.copyChannel(icon.bitmapData, rect, zeroPoint, channel, BitmapDataChannel.RED);
                bmpdata.copyChannel(icon.bitmapData, rect, zeroPoint, channel, BitmapDataChannel.GREEN);
                bmpdata.copyChannel(icon.bitmapData, rect, zeroPoint, channel, BitmapDataChannel.BLUE);

                var bmp:Bitmap = new Bitmap(bmpdata);
                bmp.x = (2 + i % 2) * icon.width;
                bmp.y = Math.floor(i / 2) * icon.height;

                addChild(bmp);
            }

            icon.scaleX = icon.scaleY = 2;
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-09-13" title="">
<body>
*channel_drawing*[as]チャンネルごとに描画するドローイングソフト
BitmapData.copyChannel ネタの集大成として、チャンネルごとに描画するアプリケーションを作ってみました。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FChannelDrawer.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=210&amp;amp;title=Channel+Draw&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

**使い方
-黒い４つの四角がキャンバスです。
-マウスでドラッグすると線が引けます。
-左上が赤、右上が青、左下が緑、右下がα値を表しています。
-右側のグラデーションをクリックすると描画の階調を変えられます。
-希望する色を描くためには、それぞれのチャンネルに適切な階調で線を引く必要があります。
-CLEAR ボタンを押すと最初からやり直せます

**コツ
運を天に任せて適当にマウスを動かすと、意外にきれいな絵が描けたりします。

実用性はあまりないので、偶然の産物を楽しみましょう。

**作品例１
乱雑。適当にマウスを動かした例。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070913/20070913014002.jpg&quot; width=&quot;416&quot; height=&quot;210&quot;&gt;&lt;/center&gt;&lt;
なんだか分からないけど、きれいに見えるような見えないような。

**作品例２
「てっく煮」。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070913/20070913014003.jpg&quot; width=&quot;389&quot; height=&quot;208&quot;&gt;&lt;/center&gt;&lt;
赤い「て」、青い「っ」、緑の「く」がうっすら見えるところがチャームポイント。

**ソースコード
ソースコードは以下に(180行)
====
&gt;|javascript|
package
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;

    public class ChannelDrawer extends Sprite
    {
        [Embed(source='clear.png')]
        private var ClearImage:Class;

        // 画像のサイズ
        private const MARGIN:int = 5;
        private const SIZE:int   = 100;
        private const SIZE2:int  = SIZE + MARGIN;
        private const SIZE3:int  = SIZE * 2 + MARGIN;
        private const SIZE4:int  = SIZE3 + SIZE3 + MARGIN + 10;

        // 色
        private var color:int = 0xffffff;

        // チャンネルの順番
        private var channels:Array = [BitmapDataChannel.RED, BitmapDataChannel.GREEN, 
            BitmapDataChannel.BLUE, BitmapDataChannel.ALPHA];

        // BitmapData
        private var bmpPreview:BitmapData = new BitmapData(SIZE, SIZE);
        private var bmpCanvas:BitmapData = new BitmapData(SIZE3, SIZE3);

        // Sprite
        private var canvas:Sprite;
        private var clearBtn:Sprite;
        private var curColor:Shape;

        // change flag
        private var changed:Boolean = false;

        // コンストラクタ
        public function ChannelDrawer()
        {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            // 左のプレビュー
            var bmp:Bitmap = addChild(new Bitmap(bmpPreview)) as Bitmap;
            bmp.scaleX = bmp.scaleY = 2;

            // 描画領域
            addChild(canvas = new Sprite()).x = SIZE3;
            clear();
            canvas.addEventListener(&quot;mouseDown&quot;, mouseDownHandler);

            // 描画領域の枠
            var mask:Sprite = new Sprite();
            mask.graphics.beginFill(0xffffff);
            mask.graphics.drawRect(SIZE3 + SIZE, 0   , MARGIN, SIZE3);
            mask.graphics.drawRect(SIZE3       , SIZE, SIZE3 , MARGIN);
            mask.graphics.endFill();
            addChild(mask);

            // CLEARボタン
            clearBtn = new Sprite();
            addChild(clearBtn);
            clearBtn.addChild(new ClearImage());
            clearBtn.buttonMode = true;
            clearBtn.x = SIZE4;
            clearBtn.y = SIZE3 - clearBtn.height;
            clearBtn.addEventListener(&quot;click&quot;, clear);

            // 色選択
            var choiseColor:Sprite = new Sprite();
            choiseColor.buttonMode = true;
            var matrix:Matrix = new Matrix();
            choiseColor.graphics.lineStyle(0x000000, 1);
            matrix.createGradientBox(1, SIZE3 - clearBtn.height * 2 - MARGIN * 2, Math.PI / 2);
            choiseColor.graphics.beginGradientFill(&quot;linear&quot;, [0xffffff, 0x000000], [100, 100], [0x00, 0xff], matrix);
            choiseColor.graphics.drawRect(0, 0, clearBtn.width, SIZE3 - clearBtn.height * 2 - MARGIN * 2);
            choiseColor.graphics.endFill();
            choiseColor.x = SIZE4;
            addChild(choiseColor);
            choiseColor.addEventListener(&quot;click&quot;, function(event:MouseEvent):void
            {
                var c:int = 255 - (event.localY / choiseColor.height) * 255;
                trace(c.toString(16));
                color = (c &lt;&lt; 16) + (c &lt;&lt; 8) + c;
                trace(color.toString(16));
                updateCurColor();
            });

            // 色表示
            curColor = new Shape();
            curColor.x = SIZE4;
            curColor.y = SIZE3 - clearBtn.height * 2 - MARGIN;
            addChild(curColor);
            updateCurColor();

            // loop
            var count:int = 0;
            addEventListener(&quot;enterFrame&quot;, function(event:Event):void
            {
                count = (count + 1) % 5;
                if(count == 0 &amp;&amp; changed)
                {
                    updatePreview();
                }
            });
        }

        private function mouseDownHandler(event:MouseEvent):void
        {
            canvas.graphics.beginFill(0, 0);
            canvas.graphics.lineStyle(3, color);
            canvas.graphics.moveTo(event.localX, event.localY);
            canvas.graphics.lineTo(event.localX, event.localY);

            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }

        private function mouseMoveHandler(event:MouseEvent):void
        {
            if(event.target == canvas)
            {
                canvas.graphics.lineStyle(3, color);
                canvas.graphics.lineTo(event.localX, event.localY);
                canvas.graphics.lineStyle();
                changed = true;
            }
        }

        private function mouseUpHandler(event:MouseEvent):void
        {
            canvas.graphics.lineStyle();
            canvas.graphics.endFill();
            stage.removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }

        // チャンネルを合成する
        private function updatePreview():void
        {
            var rect:Rectangle = new Rectangle(0, 0, SIZE, SIZE);
            var zeroPoint:Point = new Point(0, 0);

            // init
            bmpCanvas.fillRect(new Rectangle(0, 0, SIZE3, SIZE3), 0xff000000);
            bmpCanvas.draw(canvas);

            // copy channel
            bmpPreview.lock();
            for(var i:int = 0; i &lt; 4; i++)
            {
                var channel:uint = channels[i];
                var fromRect:Rectangle = new Rectangle(Math.floor(i / 2) * (SIZE + MARGIN), (i % 2) * (SIZE + MARGIN), SIZE, SIZE);
                bmpPreview.copyChannel(bmpCanvas, fromRect, zeroPoint, BitmapDataChannel.RED, channel);
            }
            bmpPreview.unlock();
        }

        // 初期化
        private function clear(event:* = null):void
        {
            canvas.graphics.clear();
            canvas.graphics.beginFill(0);
            canvas.graphics.drawRect(0, 0, SIZE3, SIZE3);
            canvas.graphics.endFill();
            updatePreview();
        }

        // 色変更
        private function updateCurColor(event:* = null):void
        {
            curColor.graphics.lineStyle(0x000000, 1);
            curColor.graphics.beginFill(color);
            curColor.graphics.drawRect(0, 0, clearBtn.width, clearBtn.height);
            curColor.graphics.endFill();
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-09-14" title="">
<body>
*how_to_install_rascut*[as]ActionScript やるなら入れとけ。rascut 導入と使い方。
ActionScript 3.0 でコマンドライン開発してる人は必携の rascut を導入してみた。Flex 開発や AIR 開発でも使えるよ。

rascut は id:secondlife さんによる &lt;a href=&quot;http://d.hatena.ne.jp/secondlife/20070324/1174711986&quot;&gt;fcwrap&lt;/a&gt; 後継バージョン。ファイル修正から自動的にプレビューまでできたり、trace() の出力をコンソールに出力してくれたり、かなり便利。

以前、勝手が分からずにかなり苦労したけど、最近、&lt;a href=&quot;http://subtech.g.hatena.ne.jp/secondlife/20070903/1188788498&quot;&gt;RubyForge&lt;/a&gt; にアップロードされてからは gem 一発で超簡単になったよ。

**前準備
Flex SDK と fcsh を準備しましょう。fcsh にはパスを通しておきましょう。
-Flex SDK については &lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/as30/&quot;&gt;ActionScript 3.0メモ&lt;/a&gt; さんを参照あれ。
-fcsh については &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070526/apollo_fcsh&quot;&gt;fcsh で Apollo を高速コンパイル&lt;/a&gt; あたりを参照あれ。Flex 3.0 SDK には fcsh が付属してるので、改めて導入する必要はなし。

**インストール
手順は２つ。簡単だよ。Windows XP 向けだけど、Ruby が入っていれば他の OS でも 2. の手順だけでいけるはず。。
+One-Click Ruby 1.8.6-25 をインストール (&lt;a href=&quot;http://rubyforge.org/frs/?group_id=167&amp;release_id=10461&quot;&gt;ダウンロード&lt;/a&gt;)
+gem install rascut --include-dependencies を実行。
&gt;|
&gt;gem install rascut --include-dependencies
Bulk updating Gem source index for: http://gems.rubyforge.org
Select which gem to install for your platform (i386-mswin32)
 1. mongrel 1.0.1 (mswin32)
 2. mongrel 1.0.1 (ruby)
 3. mongrel 1.0 (mswin32)
 4. mongrel 1.0 (ruby)
 5. Skip this gem
 6. Cancel installation
&gt; 1
Successfully installed rascut-0.1.1
Successfully installed mongrel-1.0.1-mswin32
|&lt;

これで終わり。

***(追記 2008.3.4) Flex 3 SDK 対策用パッチ
Flex 3 SDK の場合、fcsh が日本語化されているため、Rascut 0.1.3 では動作しません。

環境変数 _JAVA_OPTIONS に -Duser.language=en と設定するとうまく動くようです。Windows＋コマンドプロンプトにて
&gt;|
set _JAVA_OPTIONS=-Duser.language=en
|&lt;
としておくことで動作することを確認しました。

恒久的に対策するには &lt;a href=&quot;http://d.hatena.ne.jp/holidays-l/20071018/p1&quot;&gt;rascutとFlex3 SDK beta - holidays-l開発ブログ&lt;/a&gt; を参照して、ソースコードを修正しておくとよいでしょう。

***ファイルの監視用パッチ
Rascut 0.1.1＋Windows XP + Ruby 1.8.6-25 ではファイルの監視がうまくいかなかったので http://d.hatena.ne.jp/ameema/20070902/1188735855 を参考に、C:\ruby\lib\ruby\gems\1.8\gems\rascut-0.1.1\lib\rascut\file_observer.rb を修正した。

修正前
&gt;|ruby|
          dir = Pathname.new(file)
          @dirs[dir] ||= dir.mtime
||&lt;
修正後
&gt;|ruby|
          dir = Pathname.new(file)
          #@dirs[dir] ||= dir.mtime
          @dirs[dir] ||= Time.at(0)
||&lt;

**簡単な使い方
***コンパイル
rascut のあとにファイル名を指定する。
&gt;|
rascut Test.as
|&lt;
ファイルが更新されたら再コンパイルしてくれる。しかも、fcsh を使うので、２回目以降は高速。

これだけでもかなりうれしい。

***サーバーモード
'-s' でサーバーモード。

&gt;|
rascut Test.as -s
|&lt;
http://localhost:3001/ につなげば、SWF がパブリッシュされるたびに自動的にブラウザがリロードしてくれる。IE だとたまにリロードされないことがあるので、Firefox を使ったほうがよさそう。

ファイル保存→ビルド→プレビューまでが自動で進む。一度味わうと離れられません。

ポート番号は -p で指定できる。ぶつかる人は設定すべし。

***ディレクトリ公開
サーバーモードでディレクトリを公開すると、外部ファイルの読み込みが便利。
&gt;|
rascut Test.as -m &quot;../assets/=assets&quot; -m &quot;../images/=img&quot;
|&lt;
上の例は、Test.as の１つ上の階層にある assets フォルダと images フォルダを、それぞれ http://localhost:3001/assets/ と http://localhost:3001/images/ に割り当てられる。

'-use-network=false' してローカルで試験する必要がなくなるのが素敵。

***コンパイルオプション指定
'-c' で mxmlc に渡すコンパイルオプションを指定できる。
&gt;|
rascut Test.as -c &quot;-verbose-stacktraces=true -benchmark&quot;
|&lt;
 -c &quot;+configname=air&quot; で air にも対応できると思うよ。

***trace() をコンソール出力
 -l＋ログファイル名でコンソールに trace() の結果が吐き出される。
&gt;|
rascut Test.as -l &quot;C:\Documents and Settings\nitoyon\Application Data\Macromedia\Flash Player\Logs\flashlog.txt&quot;
|&lt;
trace() を吐かせる方法は &lt;a href=&quot;http://d.hatena.ne.jp/kasahi/20070531/1180630084&quot;&gt;カサヒラボ - windowsやmacで、flashのtraceログが吐かれる場所&lt;/a&gt; が詳しいので知らない人はそちらを参考に。

毎回指定するのが面倒なので、（Windows の人は）C:\ruby\rascat.cmd にて
&gt;|
@ruby &quot;c:/ruby/bin/rascut&quot; %*
|&lt;
を
&gt;|
@ruby &quot;c:/ruby/bin/rascut&quot; %* -l &quot;C:\Documents and Settings\nitoyon\Application Data\Macromedia\Flash Player\Logs\flashlog.txt&quot;
|&lt;
としておくと幸せに。

１つ問題が。Windows＋コマンドプロンプトでは日本語が化ける。ちょっと悲しいので人生初 Ruby で場当たり対処してみた。

「Ruby 文字コード」でぐぐったら &lt;a href=&quot;http://jp.rubyist.net/magazine/?0017-CGIProgrammingForRubyBeginners-1#l13&quot;&gt;kconv&lt;/a&gt; というのを使うとよさそうだったので、C:\ruby\lib\ruby\gems\1.8\gems\rascut-0.1.1\lib\rascut\command.rb を書き換えた。

修正前：
&gt;|ruby|
              logger.info(&quot;FLASHLOG\n&quot; + text) unless text.strip.empty?
||&lt;
修正後：
&gt;|ruby|
              logger.info(&quot;FLASHLOG\n&quot; + Kconv.tosjis(text)) unless text.strip.empty?
||&lt;

冒頭に require 'kconv' を入れるのも忘れずに。

これで日本語OKアルヨ。

将来的には rascut 本体に出力文字コードを指定できるオプションがつけばうれしい！

***その他のオプション
'--help' でヘルプがでる。
&gt;|
&gt;rascut --help
Usage: $ rascut HelloWrold.as
    -b, --bind-address=VAL           server bind address(default 0.0.0.0)
    -c, --compile-config=VAL         mxmlc compile config ex:) --compile-config=&quot;-benchmark -strict=true&quot;
        --fcsh-cmd=VAL               fcsh command path
    -I, --observe-files=VAL          observe files and directories path
    -i, --interval=VAL               interval time(min)
    -l, --log=VAL                    showing flashlog.txt
    -m, --mapping=VAL                server mapping path :example) -m &quot;../assets=assets&quot; -m &quot;../images/=img&quot;
        --no-file-observe            don't observing files
        --observe-ext=VAL            observe ext ex:) --observe-ext=&quot;as3,actionscript3,css,mxml&quot;
    -s, --server                     start autoreload webserver
        --server-handler=val         set server hander :example) --server-handler=webrick
    -p, --port=val                   server port(default: 3001)
        --plugin=VAL                 load plugin(s)
    -t, --template=VAL               server use template file
    -v, --verbose                    detail messages
        --help                       show this message
|&lt;

'-v' は覚えておいたほうがよいかも。

異なるバージョンの Flex SDK(fcsh) を使い分けるには '--fcsh-cmd' で場所を指定するとよさげ。
</body>
</day>
<day date="2007-09-18" title="">
<body>
*bezier_1*[as]ベジエ曲線の仕組み (1) - 昔話
ドローソフトなどでもお世話になることが多いベジエ曲線について解説していくシリーズ。

小学生のころ、BASIC で本のサンプルを入力して遊んでいたのですが、あまりのきれいさに衝撃を受けたプログラムがありました。それはこんな絵を出力するプログラムでした。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070918/20070918025712.gif&quot; width=&quot;223&quot; height=&quot;220&quot; alt=&quot;直線の図&quot;&gt;&lt;/center&gt;&lt;

左上と左下の点をそれぞれの x 座標、y 座標を少しずつ増やしながら、直線を引いています。

いくつもの四角形が端に行くにしたがって変形していくところが、いかにも近未来風の CG に見えました（当時は）。しかも、この絵は直線だけで構成されているのに、カーブして見えるところが不思議でなりませんでした。

さて、15年のときを経て、このプログラムを ActionScript で実装してみました。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBezierTest1.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=250&amp;amp;title=line+art&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

点をドラッグして曲線の変化を楽しんでみてください。

前置きが長くなりましたが、実はこのカーブして見える曲線の部分は２次ベジエ曲線になっています。３つの黒い点がベジエ曲線のアンカーポイントに相当します。

その手がかりは &lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%99%E3%82%B8%E3%82%A7%E6%9B%B2%E7%B7%9A&quot;&gt;ベジェ曲線 - Wikipedia&lt;/a&gt; とか &lt;a href=&quot;http://en.wikipedia.org/wiki/B%C3%A9zier_curve&quot;&gt;Bezier curve - Wikipedia, the free encyclopedia&lt;/a&gt; に書いてありますが…、もったいぶって解説は&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070919/bezier_2&quot;&gt;次回&lt;/a&gt;にします。

乞うご期待。

**目次
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070918/bezier_1&quot;&gt;ベジエ曲線の仕組み (1) - 昔話&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070919/bezier_2&quot;&gt;ベジエ曲線の仕組み (2) - ２次ベジエ曲線を詳しく&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070920/bezier_3&quot;&gt;ベジエ曲線の仕組み (3) - ３次ベジエ曲線&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070921/bezier_4&quot;&gt;ベジエ曲線の仕組み (4) - ActionScript 3.0 でベジエ曲線を描く&lt;/a&gt;

**今回のソースコード
上の Flash のソースコードはこんな具合です。

&gt;|javascript|
package
{
    import flash.display.Sprite;
    import flash.geom.Point;
    
    public class BezierTest1 extends Sprite
    {
        private var p0:BezierPoint = new BezierPoint();
        private var p1:BezierPoint = new BezierPoint();
        private var p2:BezierPoint = new BezierPoint();

        public function BezierTest1()
        {
            addChild(p0); p0.x =  10; p0.y = 220;
            addChild(p1); p1.x =  40; p1.y =  40;
            addChild(p2); p2.x = 240; p2.y = 240;

            addEventListener(&quot;enterFrame&quot;, function(event:*):void{drawLines()});
        }

        public function drawLines():void
        {
            graphics.clear();

            graphics.moveTo(p0.x, p0.y);
            for(var t:Number = 0.0; t &lt;= 1.0; t += 0.05)
            {
                var pt1:Point = getInnerPoint(p1, p0, t);
                var pt2:Point = getInnerPoint(p0, p2, t);
                drawLine(pt1, pt2, 0xcccccc);
            }

            drawLine(p0, p1, 0x0099ff);
            drawLine(p0, p2, 0x0099ff);
        }

        private function getInnerPoint(p0:*, p1:*, t:Number):Point
        {
            return new Point(p0.x * (1 - t) + p1.x * t, p0.y * (1 - t) + p1.y * t);
        }

        private function drawLine(p0:*, p1:*, color:int):void
        {
            graphics.lineStyle(1, color);
            graphics.moveTo(p0.x, p0.y);
            graphics.lineTo(p1.x, p1.y);
            graphics.lineStyle();
        }
    }
}

import flash.display.Sprite;

internal class BezierPoint extends Sprite
{
    private const COLOR:int = 0x000000;
    private const RADIUS:int = 3;

    public function BezierPoint()
    {
        graphics.beginFill(COLOR);
        graphics.drawCircle(0, 0, RADIUS);
        graphics.endFill();

        buttonMode = true;

        addEventListener(&quot;mouseDown&quot;, function(event:*):void{startDrag()});
        addEventListener(&quot;mouseUp&quot;, function(event:*):void{stopDrag()});
    }
}
||&lt;

</body>
</day>
<day date="2007-09-19" title="">
<body>
*bezier_2*[as]ベジエ曲線の仕組み (2) - ２次ベジエ曲線を詳しく
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070918/bezier_1&quot;&gt;前回&lt;/a&gt;の種明かしをする前に、ベジエ曲線の定義を見てみてみましょう。

**ベジエ曲線の定義
２次ベジエ曲線は３つの制御点から成り立っています。制御点から曲線を求めるには次のようにします。

&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBezierTest2.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=300&amp;amp;title=bezier+anime&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;br&gt;図1&lt;/center&gt;

+制御点を t : 1 - t (0≦t≦1) に内分する点を結んで直線を引く。（上の図で常時動いている直線になる）
+この直線を t : 1 - t に結んだ点を求める（上の図の黒い点）。

上の図で青い残像になっている部分が２次ベジエ曲線になります。

**前回の図と比較
では、前回の図と比較してみましょう。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070918/20070918025712.gif&quot; width=&quot;223&quot; height=&quot;220&quot; alt=&quot;直線の図&quot;&gt;&lt;br&gt;図2&lt;/center&gt;&lt;

直感的に「ベジエ曲線だ！」と言いたくなってしまいますが、そう早まってはいけません。この曲線がベジエ曲線から少しでもずれていれば、ベジエ曲線とはいえません。

「ベジエ曲線だよ！」と言い切るためには&lt;strong&gt;数学の力&lt;/strong&gt;を借りる必要があります。センター試験の文型数学レベルの内容なので、よかったら読んでみてください。

**証明１：力技
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070919/20070919092957.gif&quot; width=&quot;250&quot; height=&quot;250&quot; alt=&quot;証明1&quot; align=&quot;right&quot;&gt;図のように、３つの制御点をそれぞれ (0, 0), (1, 0), (0, 1) としておきます。この座標で証明できれば、拡大縮小したり歪ませた座標系でも同じように証明できます。

直線を表す方程式を [tex:y = f(x)] とすると、(0, 1 - t) と (t, 0) を通るという条件から、[tex:f(x) = -(\frac{1}{t}-1)x + 1 - t] と求められます。

さて、x 座標が [tex:x_0] である点に着目します。

この点の座標は [tex:(x_0, f(x_0)] です。t を変数として考えると、t の値によって y座標の値は変化します。

つまり、

&lt;center&gt;[tex:\Large\left.\begin{eqnarray} f(t) &amp;=&amp; -(\frac{1}{t}-1)x_0 + 1 - t\\ &amp;=&amp; -t - \frac{x_0}{t} + x_0 + 1 \end{eqnarray}\right\.]&lt;/center&gt;

となります。

f(t) が最大値をとるとき、点 [tex: (x_0, f(t))] は図2の曲線を構成する点になります。

ここまでくればあとは計算するだけ。f(t) を微分すれば、[tex:t = \Large\sqrt{x_0}] のとき f(t) が最大値になることが分かります。

ここから、[tex: x_0 : t = t^2 : t = t : 1] となることが分かります。つまり、ベジエ曲線は t : 1 - t を満たす点(図1の黒丸)の集合なのだけど、それは図2において y 座標を最大にする点の集合と同じなのです。

おわり。

**証明２：ちょっとエレガントに
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070919/20070919092955.gif&quot; width=&quot;250&quot; height=&quot;250&quot; alt=&quot;証明2&quot; align=&quot;right&quot;&gt;証明１は力技だったのであまり美しくありません。もうちょっとエレガントに回答すると、証明も短くなりますし、物事の本質も見えてくるものです。

ということで、さっきの図を45度傾けて計算してみます。制御点は原点と(1, 1), (-1, 1) です。

ベジエ曲線を表す式を求めます。t : 1 - t に内分した点は (t, t)、(t - 1, 1 - t) となります。この２点を t : 1 - t に内分する点は

&lt;center&gt;[tex:\left(\Large\begin{array}x\\y\end{array}\right) = t \left(\Large\begin{array}t\\t\end{array}\right)+(1-t)\left(\Large\begin{array}t-1\\1-t\end{array}\right)]&lt;/center&gt;
を整理して、
&lt;center&gt;[tex:\left(\Large\begin{array}x\\y\end{array}\right) = \left(\Large\begin{array}-1+2t\\1-2t+2t^2\end{array}\right)]&lt;/center&gt;

となります。

ここで注目すべきは、
&lt;center&gt;[tex:y=\Large\frac{1}{2}x^2+\frac{1}{2}]&lt;/center&gt;
が成立することです。&lt;strong&gt;２次ベジエ曲線は２次関数&lt;/strong&gt;（放物線）だったのです。

同様に、直線の式を求めると、[tex:y = (2t - 1)x + 2t(1-t)] となります。

放物線と直線が交わる点を求めるために、両者の y が等しいとすると、
&lt;center&gt;[tex:\Large\frac{1}{2}x^2+\frac{1}{2} = (2t - 1)x + 2t(1-t)]&lt;/center&gt;
&lt;center&gt;[tex:\Large(x - (2t-1))^2=0]&lt;/center&gt;
となります。

つまり、放物線と直線はただ１点でのみ交わる、ということです。これは、直線が放物線の接線であることを意味します。接線である以上、直線は放物線より上でもなければ下でもないことは自明です。

**まとめ
なんだか数学の講義みたいになってしましたが、まとめるとこうなります。
-２次ベジエ曲線
--２次曲線（放物線）
--２つの制御点が接点
-CG の図
--構成する直線は２次曲線の接線
--構成する直線から浮かび上がる曲線は２次ベジエ曲線

次回は、Illustrator などのドローソフトでも用いられている「３次ベジエ曲線」を見ていきます。

**目次
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070918/bezier_1&quot;&gt;ベジエ曲線の仕組み (1) - 昔話&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070919/bezier_2&quot;&gt;ベジエ曲線の仕組み (2) - ２次ベジエ曲線を詳しく&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070920/bezier_3&quot;&gt;ベジエ曲線の仕組み (3) - ３次ベジエ曲線&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070921/bezier_4&quot;&gt;ベジエ曲線の仕組み (4) - ActionScript 3.0 でベジエ曲線を描く&lt;/a&gt;

**おまけ
上の Flash のソースコードです。初めて Tweener を使ってみました。
====
&gt;|javascript|
package
{
    import flash.display.Sprite;
    import flash.geom.Point;
    import caurina.transitions.Tweener;
    
    public class BezierTest2 extends Sprite
    {
        private var SIZE:int = 300;
        private var t:Number = 0.0;
        private var p:Point = new Point();
        private var flag:Boolean = true;
        private var dot:Sprite;

        public function BezierTest2()
        {
            dot = new Sprite();
            dot.graphics.beginFill(0x000000);
            dot.graphics.drawCircle(0, 0, 3);
            dot.graphics.endFill();
            addChild(dot);

            addEventListener(&quot;enterFrame&quot;, function(event:*):void{drawLines()});
        }

        public function drawLines():void
        {
            graphics.clear();

            var pt1:Point = new Point(0, t * SIZE);
            var pt2:Point = new Point(t * SIZE, SIZE);
            var pt3:Point = getInnerPoint(pt1, pt2, t);

            dot.x = pt3.x; dot.y = pt3.y;

            graphics.lineStyle(1, 0xcccccc);
            graphics.moveTo(pt1.x, pt1.y);
            graphics.lineTo(pt2.x, pt2.y);

            var line:Sprite = new Sprite();
            line.graphics.lineStyle(1, 0x0099ff);
            line.graphics.moveTo(p.x, p.y);
            line.graphics.lineTo(pt3.x, pt3.y);
            addChildAt(line, 0);

            Tweener.addTween(line,
            {
                alpha: 0, 
                time: 3, 
                onComplete: function():void{removeChild(line);}
            });

            p = pt3;
            t = (flag ? t + 0.02 : t - 0.02);
            if(t &gt;= 1.0 || t &lt;= 0) flag = !flag;
        }

        private function getInnerPoint(p0:*, p1:*, t:Number):Point
        {
            return new Point(p0.x * (1 - t) + p1.x * t, p0.y * (1 - t) + p1.y * t);
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-09-20" title="">
<body>
*bezier_3*[as]ベジエ曲線の仕組み (3) - ３次ベジエ曲線
ちょっと息切れしてきたのでサンプルプログラムでごまかし。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBezierTest3.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=250&amp;amp;title=Quadratic+curve&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

-黒い点をドラッグすると、制御点を移動できます。
-赤いボタンの上にマウスを置くと、１つ目の２次ベジエ曲線を描きます。
-緑のボタンの上にマウスを置くと、２つ目の２次ベジエ曲線を描きます。
-青いボタンの上にマウスを置くと、１つ目と２つ目のベジエ曲線の間を描きます。これが３次ベジエ曲線だよ。

３次ベジエ曲線といえども、２次ベジエ曲線を２つ書いてその間をとるだけです。

簡単ですね！

**目次
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070918/bezier_1&quot;&gt;ベジエ曲線の仕組み (1) - 昔話&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070919/bezier_2&quot;&gt;ベジエ曲線の仕組み (2) - ２次ベジエ曲線を詳しく&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070920/bezier_3&quot;&gt;ベジエ曲線の仕組み (3) - ３次ベジエ曲線&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070921/bezier_4&quot;&gt;ベジエ曲線の仕組み (4) - ActionScript 3.0 でベジエ曲線を描く&lt;/a&gt;

**ソースコード
ソースコードは以下に(270行)。ちょっと凝ったことをすると、ソースコードが長くなるなぁ。
====
&gt;|javascript|
package
{
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.TimerEvent;
    import flash.geom.Point;
    import flash.utils.Timer;
    import caurina.transitions.Tweener;
    
    public class BezierTest3 extends Sprite
    {
        private var p1:BezierPoint = new BezierPoint();
        private var p2:BezierPoint = new BezierPoint();
        private var p0:BezierPoint = new BezierPoint(p1);
        private var p3:BezierPoint = new BezierPoint(p2);

        private var animeType:int = -1;
        private var animeLayer:Sprite = new Sprite();
        private var timer:Timer = new Timer(100); 

        private var button1:AnimeButton = new AnimeButton(0, 0x900000);
        private var button2:AnimeButton = new AnimeButton(1, 0x009000);
        private var button3:AnimeButton = new AnimeButton(2, 0x000090);

        public function BezierTest3()
        {
            addChild(animeLayer);

            addChild(p0); addChild(p1);
            addChild(p2); addChild(p3);
            p0.x =   0;   p0.y = 120;
            p1.x =  60;   p1.y =  20;
            p2.x = 180;   p2.y =  40;
            p3.x = 260;   p3.y = 160;

            addChild(button1); button1.x =  0; button1.y = 150;
            addChild(button2); button2.x = 25; button2.y = 150;
            addChild(button3); button3.x = 50; button3.y = 150;

            timer.addEventListener(&quot;timer&quot;, timerHandler);
            addEventListener(&quot;enterFrame&quot;, function(event:*):void
            {
                drawBezier();
            });
        }

        public function setAnimation(num:int = -1):void
        {
            animeType = Math.min(num, 2);

            animeLayer.graphics.clear();
            while(animeLayer.numChildren &gt; 0)
            {
                animeLayer.removeChildAt(0);
            }
            timer.reset();

            if(animeType &gt;= 0)
            {
                timer.start();
            }
        }

        private function timerHandler(event:TimerEvent):void
        {
            var c:int = event.target.currentCount;

            // initialize animation
            if(c == 1)
            {
                animeLayer.graphics.lineStyle(1, 0x0090ff);
                if(animeType == 2)
                {
                    animeLayer.graphics.moveTo(p0.x, p0.y);
                    animeLayer.graphics.curveTo(p1.x, p1.y, p2.x, p2.y);
                    animeLayer.graphics.moveTo(p1.x, p1.y);
                    animeLayer.graphics.curveTo(p2.x, p2.y, p3.x, p3.y);
                }
                else
                {
                    drawLine(p1, p2, 0x0090ff, animeLayer.graphics);
                }
            }

            if(c &lt;= 20)
            {
                var pt:Array = getBezierPoint(0.05 * c);
                var ptNum:int = [7, 8, 9][animeType];
                var l0Num:int = [4, 5, 7][animeType];
                var l1Num:int = [5, 6, 8][animeType];

                var dot:Sprite = new Sprite();
                dot.graphics.beginFill(0);
                dot.graphics.drawCircle(0, 0, 2);
                dot.graphics.endFill();
                dot.x = pt[ptNum].x; dot.y = pt[ptNum].y;
                animeLayer.addChild(dot);

                var line:Sprite = new Sprite();
                drawLine(pt[l0Num], pt[l1Num], 0x666666, line.graphics);
                animeLayer.addChild(line);

                Tweener.addTween(dot, {
                    alpha: 0, 
                    time: 4, 
                    onComplete: function():void
                    {
                        removeChild(dot);
                    }
                });
                Tweener.addTween(line, {
                    alpha: 0.5,
                    _color: 0xcccccc, 
                    time: 2
                });
            }
            else
            {
                timer.stop();
            }
        }

        public function drawBezier():void
        {
            graphics.clear();

            drawLine(p0, p1, 0x999999);
            drawLine(p2, p3, 0x999999);

            graphics.moveTo(p0.x, p0.y);
            graphics.lineStyle(1, 0x800000);
            for(var t:Number = 0.0; t &lt;= 1.0; t += 0.05)
            {
                var pt:Point = getBezierPoint(t)[9]
                graphics.lineTo(pt.x, pt.y);
            }
            graphics.lineTo(p3.x, p3.y);
        }

        private function getBezierPoint(t:Number):Array
        {
            var p4:Point = getInnerPoint(p0, p1, t);
            var p6:Point = getInnerPoint(p2, p3, t);
            var p5:Point = getInnerPoint(p1, p2, t);
            var p7:Point = getInnerPoint(p4, p5, t);
            var p8:Point = getInnerPoint(p5, p6, t);
            var p9:Point = getInnerPoint(p7, p8, t);

            return [null, null, null, null, p4, p5, p6, p7, p8, p9];
        }

        private function getInnerPoint(p0:*, p1:*, t:Number):Point
        {
            return new Point(p0.x * (1 - t) + p1.x * t, p0.y * (1 - t) + p1.y * t);
        }

        private function drawLine(p0:*, p1:*, color:int, g:Graphics = null):void
        {
            g = g || graphics;
            g.lineStyle(1, color);
            g.moveTo(p0.x, p0.y);
            g.lineTo(p1.x, p1.y);
            g.lineStyle();
        }
    }
}

import flash.display.Sprite;
import flash.geom.Point;
import flash.filters.BevelFilter;

internal class BezierPoint extends Sprite
{
    private const COLOR:int = 0x000000;
    private const RADIUS:int = 3;

    private var dragging:Boolean;
    private var diff:Point = new Point();

    private var child:Sprite;
    
    public function BezierPoint(_child:Sprite = null):void
    {
        child = _child;

        graphics.beginFill(COLOR);
        graphics.drawCircle(0, 0, RADIUS);
        graphics.endFill();

        buttonMode = true;

        var dragging:Boolean = false;
        var diff:Point = new Point();
        addEventListener(&quot;mouseDown&quot;, mouseDownHandler);
    }

    private function mouseDownHandler(event:*):void
    {
        if(!dragging)
        {
            dragging = true;
            startDrag();
            if(child)
            {
                diff.x = child.x - x;
                diff.y = child.y - y;
            }
            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }

    private function mouseMoveHandler(event:*):void
    {
        if(dragging &amp;&amp; child)
        {
            child.x = x + diff.x;
            child.y = y + diff.y;
        }
    }

    private function mouseUpHandler(event:*):void
    {
        if(dragging)
        {
            stopDrag();
            dragging = false;

            removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }
}

internal class AnimeButton extends Sprite
{
    private const WIDTH:int = 20;
    private const HEIGHT:int = 20;

    private var num:int;
    
    public function AnimeButton(_num:int, color:int)
    {
        num = _num;

        graphics.beginFill(color);
        graphics.drawRoundRect(0, 0, WIDTH, HEIGHT, 10, 10);
        graphics.endFill();

        filters = [new BevelFilter(3, 45, 0xffffff, 0.6, 0x000000, 0.6)];
        buttonMode = true;

        addEventListener(&quot;mouseOver&quot;, startAnimation);
        addEventListener(&quot;click&quot;, startAnimation);
        addEventListener(&quot;mouseOut&quot;, endAnimation);
    }

    private function startAnimation(event:*):void
    {
        var main:BezierTest3 = parent as BezierTest3;
        main.setAnimation(num);
    }

    private function endAnimation(event:*):void
    {
        var main:BezierTest3 = parent as BezierTest3;
        main.setAnimation();
    }
}
||&lt;

</body>
<comments>
<comment>
<username>たけし</username>
<body>はじめまして。&lt;br&gt;Flash CS3 Professionalなど、Flashのオーサリングツールではベジェ曲線は3次のように見えますが、このページと同じように描画しているのでしょうか？&lt;br&gt;&lt;br&gt;また、ドローツールから書き出したベジェ曲線を、Flex 2 SDKのASファイルで読み込もうと思えば、XMLデータなどにしてパーサを書こうと思うのですが、このページのサンプルを見ていると、プログラムからベジェ曲線を書くと処理が重そうですがどうでしょうか？</body>
<timestamp>1206906471</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-21" title="">
<body>
*bezier_4*[as]ベジエ曲線の仕組み (4) - ActionScript 3.0 でベジエ曲線を描く
今までは一般的な話だったけど、今回は ActionScript に特化した話をします。

ActionScript には２次ベジエ曲線を描く Graphics.curveTo というのがありますが、３次ベジエ曲線を描画するメソッドは用意されていません。既にいろいろな方が３次ベジエ曲線を近似する方法を発表されています。
-&lt;a href=&quot;http://d.hatena.ne.jp/flashrod/20060905#1157462756&quot;&gt;flashrod - AS3でフリーハンドベジェ&lt;/a&gt;
-&lt;a href=&quot;http://subtech.g.hatena.ne.jp/secondlife/20070920/1190220884&quot;&gt;subtech - PBD - AS3 で三次ベジェ曲線を Graphics.prototype を拡張して実装する&lt;/a&gt;
-&lt;a href=&quot;http://hakuhin.hp.infoseek.co.jp/main/as/curve.html#CURVE_03&quot;&gt;Flashゲーム講座＆ASサンプル集【曲線について】 - ３次ベジェ曲線を描画する&lt;/a&gt;

しかし、このどれもが直線で近似しています。直線じゃなく、２次ベジエで近似したほうが精度よくなるかも！と思って、&lt;strong&gt;３次ベジエ曲線を２次ベジエ曲線で近似&lt;/strong&gt;してみました。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBezierTest4.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=300&amp;amp;title=Bezier+Approximation&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

-緑の線が直線で近似した３次ベジエ曲線です
-赤い線が２次ベジエ曲線で近似した３次ベジエ曲線です
-ボタンの上にマウスを置くと、正しい３次ベジエ曲線を表示します（100分割した直線で描画）
-ボタンを押すと分割数を切り替えられます

見れば分かるとおり、４分割程度でもそれなりのものができあがります。ねじれさせると４分割では厳しくなりますが、６～８分割もすればかなりいい具合ではないでしょうか。性質上、奇数個に分割すると、端が余ります。

直線で分割した場合は20分割程度で違和感はなくなるように見えます。

２次ベジエ8個と直線20個のどちらが描画が高速なのかは気になるけど未調査。どこかの誰かに期待。

**目次
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070918/bezier_1&quot;&gt;ベジエ曲線の仕組み (1) - 昔話&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070919/bezier_2&quot;&gt;ベジエ曲線の仕組み (2) - ２次ベジエ曲線を詳しく&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070920/bezier_3&quot;&gt;ベジエ曲線の仕組み (3) - ３次ベジエ曲線&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070921/bezier_4&quot;&gt;ベジエ曲線の仕組み (4) - ActionScript 3.0 でベジエ曲線を描く&lt;/a&gt;

**ソースコード
以下にソースを掲載します(220行)。
====
&gt;|javascript|
package
{
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.text.TextField;
    import flash.geom.Point;
    import flash.utils.Timer;

    public class BezierTest4 extends Sprite
    {
        private var p1:BezierPoint = new BezierPoint();
        private var p2:BezierPoint = new BezierPoint();
        private var p0:BezierPoint = new BezierPoint(p1);
        private var p3:BezierPoint = new BezierPoint(p2);

        private var button1:AnimeButton = new AnimeButton(0, 0x900000);
        private var button2:AnimeButton = new AnimeButton(1, 0x009000);
        private var text:TextField = new TextField();

        public var mouseOver:Boolean = false;

        public function BezierTest4()
        {
            addChild(p0); addChild(p1);
            addChild(p2); addChild(p3);
            p0.x =   0;   p0.y = 120;
            p1.x =  60;   p1.y =  20;
            p2.x = 180;   p2.y =  40;
            p3.x = 260;   p3.y = 160;

            addChild(button1); button1.x =  0; button1.y = 150;
            addChild(button2); button2.x = 50; button2.y = 150;
            addChild(text);    text.x    = 25; text.y    = 150; text.width = 20;
            text.text = &quot;4&quot;;

            addEventListener(&quot;enterFrame&quot;, function(event:*):void
            {
                drawBezier();
            });
        }

        public function drawBezier():void
        {
            graphics.clear();

            drawLine(p0, p1, 0x999999);
            drawLine(p2, p3, 0x999999);

            var pt:Point, pt2:Point, pt3:Point;
            var t:Number;
            var diff:Number = 1.0 / parseInt(text.text);

            // line approximation
            graphics.moveTo(p0.x, p0.y);
            graphics.lineStyle(1, 0x339933);
            for(t = 0.0; t &lt;= 1.0; t += diff)
            {
                pt = getBezierPoint(t);
                graphics.lineTo(pt.x, pt.y);
            }
            graphics.lineTo(p3.x, p3.y);

            // curve approximation
            graphics.moveTo(p0.x, p0.y);
            graphics.lineStyle(1, 0xff9999);
            for(t = diff * 2; t &lt;= 1.0; t += diff * 2)
            {
                pt  = getBezierPoint(t);
                pt2 = getBezierPoint(t - diff);
                pt3 = getBezierPoint(t - 2 * diff);

                pt2 = new Point(2 * pt2.x - (pt.x + pt3.x) / 2,
                                2 * pt2.y - (pt.y + pt3.y) / 2);
                graphics.curveTo(pt2.x, pt2.y, pt.x, pt.y);
            }

            // bezier
            if(mouseOver)
            {
                graphics.moveTo(p0.x, p0.y);
                graphics.lineStyle(1, 0x0099ff);
                for(t = 0.0; t &lt;= 1.0; t += 0.01)
                {
                    pt = getBezierPoint(t);
                    graphics.lineTo(pt.x, pt.y);
                }
                graphics.lineTo(p3.x, p3.y);
            }
        }

        private function getBezierPoint(t:Number):Point
        {
            return new Point(Math.pow(1 - t, 3)  * p0.x + 3 * t * Math.pow(1 - t, 2) * p1.x
                       + 3 * t * t * (1 - t) * p2.x + t * t * t * p3.x,
                         Math.pow(1 - t, 3)  * p0.y + 3 * t * Math.pow(1 - t, 2) * p1.y
                       + 3 * t * t * (1 - t) * p2.y + t * t * t * p3.y);
        }

        private function drawLine(p0:*, p1:*, color:int, g:Graphics = null):void
        {
            g = g || graphics;
            g.lineStyle(1, color);
            g.moveTo(p0.x, p0.y);
            g.lineTo(p1.x, p1.y);
            g.lineStyle();
        }

        public function changeNum(num:int):void
        {
            text.text = String(Math.max(1, parseInt(text.text) + (num ? 1 : -1)));
        }
    }
}

import flash.display.Sprite;
import flash.geom.Point;
import flash.filters.BevelFilter;

internal class BezierPoint extends Sprite
{
    private const COLOR:int = 0x000000;
    private const RADIUS:int = 3;

    private var dragging:Boolean;
    private var diff:Point = new Point();

    private var child:Sprite;
    
    public function BezierPoint(_child:Sprite = null):void
    {
        child = _child;

        graphics.beginFill(COLOR);
        graphics.drawCircle(0, 0, RADIUS);
        graphics.endFill();

        buttonMode = true;

        var dragging:Boolean = false;
        var diff:Point = new Point();
        addEventListener(&quot;mouseDown&quot;, mouseDownHandler);
    }

    private function mouseDownHandler(event:*):void
    {
        if(!dragging)
        {
            dragging = true;
            startDrag();
            if(child)
            {
                diff.x = child.x - x;
                diff.y = child.y - y;
            }
            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }

    private function mouseMoveHandler(event:*):void
    {
        if(dragging &amp;&amp; child)
        {
            child.x = x + diff.x;
            child.y = y + diff.y;
        }
    }

    private function mouseUpHandler(event:*):void
    {
        if(dragging)
        {
            stopDrag();
            dragging = false;

            removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }
}

internal class AnimeButton extends Sprite
{
    private const WIDTH:int = 20;
    private const HEIGHT:int = 20;

    private var num:int;
    
    public function AnimeButton(_num:int, color:int)
    {
        num = _num;

        graphics.beginFill(color);
        graphics.drawRoundRect(0, 0, WIDTH, HEIGHT, 10, 10);
        graphics.endFill();

        filters = [new BevelFilter(3, 45, 0xffffff, 0.6, 0x000000, 0.6)];
        buttonMode = true;

        addEventListener(&quot;mouseOver&quot;, mouseOver);
        addEventListener(&quot;click&quot;,     changeNum);
        addEventListener(&quot;mouseOut&quot;,  mouseOut);
    }

    private function changeNum(event:*):void
    {
        var main:BezierTest4 = parent as BezierTest4;
        main.changeNum(num);
    }

    private function mouseOver(event:*):void
    {
        var main:BezierTest4 = parent as BezierTest4;
        main.mouseOver = true;
    }

    private function mouseOut(event:*):void
    {
        var main:BezierTest4 = parent as BezierTest4;
        main.mouseOver = false;
    }
}
||&lt;

</body>
<comments>
<comment>
<username>nutsu</username>
<body>こんにちは。始めてコメント入れさせていただいています。&lt;br&gt;3次ベジェの近似、あるいは負荷軽減には悩んでいて、非常に興味深いです。&lt;br&gt;僕の場合は、かなり大雑把ですが、2分割近似をよく使います。ひねりのときはズレが大きいですが…。こんな感じです。&lt;br&gt;http://nutsu.com/blog/2007/092112_fakebejze.html&lt;br&gt;それでは失礼しました。</body>
<timestamp>1190350118</timestamp>
</comment>
<comment>
<username>michi</username>
<body>AS3には fl.motion.BezierSegment というクラスが用意されていますよ。&lt;br&gt;nitoyonさんの getBezierPoint と計算式は同じで、描画するためのものではありませんが。&lt;br&gt;X軸に対するY軸の位置がとれたり、なにかと便利です。</body>
<timestamp>1190375888</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; natsu さん&lt;br&gt;おお、既にやってらっしゃったのですね。&lt;br&gt;サンプルもきれいですね。参考になります。&lt;br&gt;&lt;br&gt;&gt; michi さん&lt;br&gt;情報ありがとうございます。&lt;br&gt;CS3 が手元になくて、fl の下は全く手をつけてないんですが、いろいろ追加されてるんですね。</body>
<timestamp>1190651407</timestamp>
</comment>
<comment>
<username>K@2PX</username>
<body>ハジメマシテ。参考にさせていただきました。&lt;br&gt;fl.motion.BezierSegmentを使ってcuveToの近似を試してみたのですが良好です。時点に対する座標値をgetValue()で取れるようになっていました。&lt;br&gt;三次ベジェのcuveToを実装してくれればなぁと思いながら試してました。</body>
<timestamp>1208774399</timestamp>
</comment>
<comment>
<username>WhirlPower</username>
<body>こちら参考にさせていただきました。&lt;br&gt;たいへん勉強になりました。&lt;br&gt;３次ベジェの標準搭載はFlash10であるとよいですね。</body>
<timestamp>1224406175</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-24" title="">
<body>
*air_mook*[air][書籍]「Adobe AIR 完全解説」の記事を執筆したよ
9月26日発売の「Adobe AIR 完全解説」というムックの一部を執筆しました。日本語による初の AIR 解説本です。

[asin:4756150322:detail]

私が担当したのは４章の「Flex 3 SDKによる開発」です。本名名義で書いてるので、一見どこの誰がかいたのかが分かりにくくなっててすいません。

**自分が執筆した部分について
今回、初めて原稿を書かせていただいたのですが、１つだけ気をつけたことがあります。

それは、単に解説するだけじゃなくて、いざ作ってみようとしたときに迷わないようにしよう、ということでした。

いまでこそ、がんがんコーディングしてブログに書いてますが、高校生から大学のころ、プログラムしたいのに全くできるようにならずに苦しんだ時期がありました。本屋で立ち読みして見当をつけても、家に帰ったらうまく動かなくて、ネットで調べようにも当時は Google 先生もまともな解説サイトもなくて、やっと見つけたサンプルは動くんだけど、どこをどうしたら自分が作りたいものができるかわからない、そして翌日、また本屋さんで関連しそうなところを立ち読みして…。これの繰り返しで、一向に前に進めなかったんですね。

本を買えよ、という話ではあるのですが、そもそもどの本がいいのかすら分からないし、高校生や大学入りたてのころに4,000円とか5,000円もするような本って気楽に買えないじゃないですか。

そういったもろもろの思いも含め、サンプルのソースコードを解説するだけではなくて、実際に手を動かそうとしたときの手がかりになりそうなものを書いておきたかったんです。

そして、次の文章が生まれました。

&gt;&lt;blockquote&gt;&lt;p&gt;プログラムを書けるようになるための一番の近道は、他人が書いたソースコードを理解して、トライアンドエラーを繰り返しながらソースコードを修正していくことです。ここではトライアンドエラーの手がかりとなるべく、ドキュメントを参照しながら修正していく手順をご説明します。&lt;/p&gt;&lt;cite&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4756150322/nitoyoncom-22&quot;&gt;Adobe AIR完全解説 (4.2 ActionScript3.0 による開発)&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;&lt;

このあと、ランゲージリファレンスを見ながらコードをいじったり機能を付け加えたりする例を紹介しています。詳しくはAdobe AIR 完全解説にて！　4,000円も5,000円もしません。2,000円ですのてお手ごろですよ（笑）。

この他にも、Yahoo! 形態素解析 API を使った JavaScript による AIR アプリケーション開発を順を追って解説していったり、HTMLコンポーネントを利用する方法を紹介していたりします。

**Adobe AIR完全解説の章ごとの簡単な解説
見本誌をいただいたので、ざっくりレビューしますよ。
:巻頭インタビュー:Adobe のシニアプロダクトマネージャーである Mike Chambers 氏へのインタビュー記事です。AIR の魅力や可能性について熱く語っています。
:1. Adobe AIRを知ろう！:ASCII 編集部による、AIR についての全体像や周辺技術の解説です。
:2. Flex Builder 3による開発:&lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/apollo10/index.html&quot;&gt;Adobe AIRメモ&lt;/a&gt; や &lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/as30/index.html&quot;&gt;ActionScript 3.0メモ&lt;/a&gt; でお馴染みの布留川さんによる Flex Builder の使い方です。Flash のグラフィック周りの基本を解説したあと、後半では本格的な格闘ゲームを作っています。かなり実践的な内容！
:3. Flex Builder 3/MXMLによる開発:永井孝さんによる Flex/MXML を使った開発手順の解説です。Flex Builder による MXML 作成、ドラッグアンドドロップ、RSS を取得して、SQLite に突っ込んで DataGrid で表示する本格的なアプリケーション開発など盛りだくさんです。
:4. Flex 3 SDKによる開発:私が書きましたよ。他の方々に比べて、実践的ではないけど、その分、初心者には優しい内容になっていれば幸いです。
:5. Adobe Flash CS3 ProfessionalとAdobe Dreamweaver CS3を使ったAIRアプリケーション開発:Adobe の &lt;a ref=&quot;http://weblogs.macromedia.com/akamijo/&quot;&gt;上条晃宏さん&lt;/a&gt; による Flash CS3 と Dreamweaver CS3 を使った AIR 開発方法です。現時点で公開されている Extension の使い方や制限事項などがまとまっています。中の人が書いているだけはあって正確な内容です。デザイナーさんやデザイナーさんとの連携を考えている人にお薦めです。&lt;br&gt;（関連エントリ：&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/09/adobe_air.cfm&quot;&gt;akihiro kamijo: Adobe AIR 完全解説&lt;/a&gt;）
:6. ニコニコ動画、字幕.in風AIRアプリケーションプログラミング:&lt;a href=&quot;http://zapanet.info/blog/&quot;&gt;ZAPAブロ～グ2.0&lt;/a&gt; の ZAPA 氏による、ニコニコ風アプリケーション開発方法です。すごいインパクトがあった &lt;a href=&quot;http://zapanet.info/blog/item/931&quot;&gt;ニコニコ動画みたいなものを作ってみるテストと問題点&lt;/a&gt; という記事を AIR で実践しています。(さすがに「ぶっこ抜き」はしてませんが…) &lt;br&gt;（関連エントリ：&lt;a href=&quot;http://zapanet.info/blog/item/1094&quot;&gt;「Adobe AIR 完全解説」の記事を執筆しました&lt;/a&gt;）
:7. Papervision3DとAIRでの3D表現:&lt;a href=&quot;http://shin-ishimaru.cocolog-nifty.com/blog/&quot;&gt;シン石丸の電脳芸事ニッキ&lt;/a&gt; のシン石丸さんによる、3D ライブラリ Papervision3D を使った 3D 表現についての解説です。PV3D の解説も日本初じゃないかと。&lt;br&gt;（関連エントリ：&lt;a href=&quot;http://shin-ishimaru.cocolog-nifty.com/blog/2007/09/adobe_air_b793.html&quot;&gt;Adobe AIR完全解説に寄稿しました&lt;/a&gt;）

すごいですね。ゲームあり、本格アプリケーションあり、デザイナー向け記事もあり、動画あり、3D あり、マッシュアップあり。

これから AIR や AS を始めてみようという人も、Flash やってるけど AS3 とか AIR には乗り遅れている人も、ぜひぜひお手元に１冊どうぞ。青い表紙が目印です。

[asin:4756150322:detail]

→ 関連エントリ：&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070927/ria_books&quot;&gt;Flex の本も Silverlight の本も、Blend の本も…盛りだくさん&lt;/a&gt;

</body>
<comments>
<comment>
<username>見習い</username>
<body>なんという良書・・・目次を見ただけで思わずワクワクしてしまった・・・この本は間違いなく売れる・・・というわけで明日かってきますノシ</body>
<timestamp>1190727631</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-25" title="">
<body>
*device_font_antialias*[as]デバイスフォントにアンチエイリアス（改）
Flash ではデバイスフォント &lt;s&gt;にアンチエイリアスがかかりません&lt;/s&gt; を BitmapData.draw すると Windows ではアンチエイリアスがかからずにギザギザになってしまいます。

それを解決するための方法として &lt;a href=&quot;http://f-site.org/articles/2007/04/08165536.html&quot;&gt;F-site | デバイスフォントにアンチエイリアス&lt;/a&gt; という技が紹介されていますが、もっと単純に実現できたので紹介します。

サンプルはこれ。一番上の行は編集可能です。日本語もいけます。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FAntialiasingTest.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=250&amp;amp;title=Anti-aliasing+Test&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20070925/20070925141815.gif&quot; width=&quot;41&quot; height=&quot;152&quot; align=&quot;right&quot; border=&quot;1&quot;&gt;ポイントは、new BitmapData するときの第３引数（transparent）を false にしておくこと。それだけ。true なら２行目のようにギザギザ、false なら３行目。私の環境(Windows XP)では右の図のように表示されました。

&lt;strong&gt;(追記) Mac だとどちらでもアンチエイリアスかかってるようです。また、両方ともアンチエイリアスかからない Windows XP 環境もありました（原因は不明）。環境によって挙動が異なるようで、あまり実用的ではなさそうですね…。&lt;/strong&gt;

弊害で BitmapData が不透明になってしまうけど、同じサイズの BitmapData を作成して、copyChannel で R の値を Alpha に、Alpha の値を RGB に振り分ければ透明化できますよね。

あまり知られていないのか、当たり前すぎて誰も書いていないのか分からないのですが、はまったのでエントリにしておきました。Flash 8＋AS2 でも動くようです。Mac でもアンチエイリアスかかってる…よね？

sIFR のようなツールはフォントを埋め込まないと使えなかったけど、デバイスフォントでいいならこの技が使えそうですね。

ソースは以下に。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.text.*;

    public class AntialiasingTest extends Sprite {
        private const WIDTH:int = 400;
        private const HEIGHT:int = 50;

        public function AntialiasingTest() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var tf:TextFormat = new TextFormat();
            tf.size = HEIGHT * 0.9;
            var textField:TextField = new TextField();
            textField.defaultTextFormat = tf;
            textField.autoSize = &quot;left&quot;;
            textField.type = &quot;input&quot;;
            textField.text = &quot;Hello, AS 3.0!&quot;;
            addChild(textField);

            var bmp1:Bitmap = new Bitmap(new BitmapData(WIDTH, HEIGHT));
            bmp1.scaleX = bmp1.scaleY = 2;
            bmp1.y = HEIGHT;
            addChild(bmp1);

            var bmp2:Bitmap = new Bitmap(new BitmapData(WIDTH, HEIGHT, false));
            bmp2.scaleX = bmp2.scaleY = 2;
            bmp2.y = HEIGHT * 3;
            addChild(bmp2);

            addEventListener(&quot;enterFrame&quot;, function(event:*):void {
                bmp1.bitmapData.fillRect(bmp1.bitmapData.rect, 0xffffff);
                bmp1.bitmapData.draw(textField);
                bmp2.bitmapData.fillRect(bmp2.bitmapData.rect, 0xffffff);
                bmp2.bitmapData.draw(textField);
            });
        }
    }
}
||&lt;

</body>
<comments>
<comment>
<username>09</username>
<body>私の環境だといずれも同じギザギザに見えるのですが、私だけでしょうか。&lt;br&gt;WindowsXP、FlashPlayer 9.0.47.0、IE7,Firefox2です。</body>
<timestamp>1190694138</timestamp>
</comment>
<comment>
<username>secondlife</username>
<body>デバイスフォントにアンチエイリアスがかからないのではなくて、&lt;br&gt;デバイスフォントを BitmapData に draw するとアンチエイリアスがかからないのでは。</body>
<timestamp>1190723766</timestamp>
</comment>
<comment>
<username>見習い</username>
<body>ちょっと不具合?のようなものがある様ですがデバイスフォントにアンチエイリアスをかける処理は自分がものすごくやりたかった処理なのでこのエントリーは本当にありがたいです。個人的には文字アニメーションなどの応用方法含めてもっと読みたい位です。助かりました、本当にありがとうございます。</body>
<timestamp>1190725225</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; 09 さん&lt;br&gt;報告ありがとうございます。当方でもギザギザに見えるPCがあるのを確認しました。&lt;br&gt;原因は不明です・・・。&lt;br&gt;&lt;br&gt;&gt; secondlife さん&lt;br&gt;その通りです。修正しておきます。&lt;br&gt;&lt;br&gt;&gt; 見習い さん&lt;br&gt;それだけ喜んでいただければ、書いた甲斐があります。&lt;br&gt;ありがとうございます。</body>
<timestamp>1190823569</timestamp>
</comment>
<comment>
<username>あい</username>
<body>私もXP,IE6,FW2,FP9.0.45ですが、アンチエイリアスがかかっていないようです・・・。</body>
<timestamp>1190858142</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-26" title="">
<body>
*color_matrix_filter_fade_in_fade_out*[as]Flash っぽいフェードイン・フェードアウト
海外ブログの&lt;a href=&quot;http://asluv.com/2007/09/18/sandlight-as3-experiment/&quot;&gt;こんな記事&lt;/a&gt;とか&lt;a href=&quot;http://ricardocabello.com/index.php?postid=428&quot;&gt;こんな記事&lt;/a&gt;を見るとレベルの違いにへこみますが、少しずつ間を詰められるよう精進あるのみ。がんばります。

今回は Flash っぽいフェードイン・フェードアウトを ColorMatrixFilter で作ってみました。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FColorMatrixTest.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=350&amp;amp;h=233&amp;amp;title=ColorMatrixFilter+Fade-in+Fade-out&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

RGB の各成分を元の値から増やしてフェードアウトしてます。Flash ではよく見るエフェクトなので業界の人は食傷気味かもしれませんが、JavaScript でα値をいじるだけのものしか知らなかった私にはかっこよく見えます。

ソースは以下に(45行)。
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.Point;
    import flash.filters.ColorMatrixFilter;

    [SWF(width=&quot;350&quot;, height=&quot;233&quot;)]
    public class ColorMatrixTest extends Sprite {
        [Embed(source='photo1.jpg')]
        private var photo1:Class;

        [Embed(source='photo2.jpg')]
        private var photo2:Class;

        [Embed(source='photo3.jpg')]
        private var photo3:Class;

        private static const FADE:int = 20;
        private static const WAIT:int = 100;

        public function ColorMatrixTest() {
            stage.scaleMode = &quot;noScale&quot;;

            var images:Array = [new photo1(), new photo2(), new photo3()];

            var bmp:Bitmap = new Bitmap(new BitmapData(images[0].bitmapData.width, images[0].bitmapData.height));
            addChild(bmp);

            var index:int = 0, count:int = 0;
            addEventListener(&quot;enterFrame&quot;, function(e:*):void {
                var param:int = count &lt; FADE ? (FADE - count) * 255 / FADE : 
                                               count &gt; FADE + WAIT ? (count - FADE - WAIT) * 255 / FADE : 0;
                var filter:ColorMatrixFilter = new ColorMatrixFilter([
                    1, 0, 0, 0, param,
                    0, 1, 0, 0, param,
                    0, 0, 1, 0, param,
                    0, 0, 0, 1, 0
                ]);
                bmp.bitmapData.applyFilter(images[index].bitmapData, bmp.bitmapData.rect, new Point(0, 0), filter);

                count = count &gt; FADE * 2 + WAIT ? 0 : count + 1;
                index = count != 0 ? index : index + 1 &lt; images.length ? index + 1 : 0;
            });
        }
    }
}
||&lt;

</body>
<comments>
<comment>
<username>あい</username>
<body>にとよんさんの記事を見てレベルの違いに凹んでいる私はどうすればっ・・・・・！&lt;br&gt;未だにAS2.0な人です・・・。</body>
<timestamp>1190858329</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>AS3 を使ってはいますが、内容的には AS2 と同じことしかしてないですよ。適当に意訳しながら読んでくださいませ。</body>
<timestamp>1191174620</timestamp>
</comment>
<comment>
<username>初心者</username>
<body>今、勉強していて、大変参考になりました。&lt;br&gt;初めて触るので、分からないことばかりです。&lt;br&gt;&lt;br&gt;ものを回転させたり、ブラインドみたいに画面を入れ替えたりしてみたいのですが、なかなか分からなくて。。。&lt;br&gt;ありがとうございます！！！</body>
<timestamp>1219392498</timestamp>
</comment>
</comments>
</day>
<day date="2007-09-27" title="">
<body>
*ria_books*[flex][silverlight][書籍]Flex の本も Silverlight の本も Blend の本も…盛りだくさん
**Silverlight本
先日、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070924/air_mook&quot;&gt;Adobe AIR 完全解説&lt;/a&gt;についての記事を書きましたが、同日に同じアスキーさんから Silverlight に関するムックも発売になったようです。AIR と Silverlight のムックを同時発売だなんて、粋ですね。

[asin:4756150330:detail]

**Flex本
そして、27日（金）には Flex の本も出るようです。こちらは日本初の Flex 2 本でしょうか。
[asin:4839925895:detail]
執筆者は日本語のプログラミング言語「なでしこ」、テキスト音楽「サクラ」でお馴染みの&lt;a href=&quot;http://www.kujirahand.com/&quot;&gt;クジラ飛行机&lt;/a&gt;さんです。（→関連エントリ：&lt;a href=&quot;http://aoi-project.com/pblog/article.php?id=52&quot;&gt;くじらはんどぶろぐ : 祝発売!Adobe Flex 2プロフェッショナルガイド&lt;/a&gt;）

&lt;a href=&quot;http://aoi-project.com/wiki/flex2book/&quot;&gt;補足ページ&lt;/a&gt; からサンプルコードをダウンロードできます。ちょろっとソースを見た感じでは、入門から、各種コントロールの解説に始まり、ちょっとしたアプリケーションの作り方、テストツール（AS3Unit）の使い方、AIR開発、Web サービスの利用などが丁寧に解説されているような予感がします。まだ手元に届いてないので確かなことは何もいえませんが…。

ちなみに、これとは別件で、とある方も Flex の入門書を書いているらしいですよ。Flex2 の書籍も少しずつ出揃ってきてますね。

**Blend本
そして WPF の見た目を編集するツールである Blend の解説本も 10月3日に発行されるようです。
[asin:4798114863:detail]
こちらは RIA 案件を数多くこなしてらっしゃるセカンドファクトリーさんが執筆。&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2007/04/25/15542.html&quot;&gt;旭山動物園&lt;/a&gt; の案件などで培ったノウハウが公開されるのでしょうか。

セカンドファクトリーさんのサイトにて目次が公開されています（&lt;a href=&quot;http://www.2ndfactory.com/bb/yomidokoro.htm&quot;&gt;「本だけでは伝えきれなかったこと | Blend Book 発売特集」セカンドファクトリー&lt;/a&gt;）。スクリーンキャプチャを見てると、とても楽しそうです。

**雑感
ここにきて、RIA がらみの本が増えてきていますね。

WPF の本は、この他にも [asin:4777512851:title] や [asin:4797339160:title] などが出版されています。量からいえば WPF が一歩リードしていますが、はてさて現実の勝負の行方はいかに…！
</body>
</day>
<day date="2007-09-28" title="">
<body>
*bitmapdata_extend*[as]BitmapData の範囲拡張を実装するなら…
グレースケールの BitmapData を拡張をしてみるテストです。Photoshop でいう選択範囲の拡張のイメージ。

BitmapData に描画した文字を太くしたり、縁取りしたりするのに使えるんじゃないかと。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBitmapOffset.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=130&amp;amp;title=extend+BitmapData&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

地味なので、見た目をちょっとだけ凝ってみました。クリックすれば、ブラシのサイズが変わります。

仕組みはこう。

+円を BitampData に描く
+getPixel で円の全てのピクセルの色を取得する
+全てのピクセルに対して、色の濃さに応じた透明度で大元の画像を出力していく

単純ですね。ただ、拡張範囲のピクセル数を n とすると、描画には O(n&lt;sup&gt;2&lt;/sup&gt;) の時間がかかってしまっているのが大変ださいところです。Photoshop の選択範囲の拡張はどういうアルゴリズムで実装してるんだろうなぁ…。

(追記) &lt;strong&gt;munegon さんが高速に実行する技を教えてくれました！！&lt;/strong&gt;（→&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/09/dilate_erode.html&quot; title=&quot;void element blog: BitmapDataの範囲拡張＆収縮へ&quot;&gt;void element blog: BitmapDataの範囲拡張＆収縮&lt;/a&gt;）。

仕組みを簡単に見てみると…
:拡張:BlurFilter でぼかして、threshold でボケを抑える。blendMode &quot;multiply&quot; で draw。
:収縮:ConvolutionFilterでぼかす。blendMode &quot;add&quot; で draw。
すごくスマートだ…。BlurFilter とか ConvolutionFilter を使えばできそうだとは思ってたのですが、試行錯誤の末にギブアップしてました。blendMode を使えばよかったんですね。完全に盲点でした。ありがとうございます！！！（追記ここまで）

ちなみに、ベジェ曲線を範囲拡張するアルゴリズムについては &lt;a href=&quot;http://www.junko-k.com/cthema/44bezier.htm&quot;&gt;コロキウム室(Bezier曲線の問題)&lt;/a&gt; で触れられていました。画像処理のアルゴリズムって、数式がいっぱい出てきて難しい…。

ソースは以下に（84行）。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.*;

    public class BitmapOffset extends Sprite {
        [Embed(source='techni.png')]
        private var Logo:Class;

        private var size:Number = 5;
        private static const SIGN:int = 20;
        private static const MARGIN:int = 20;
        private var brush:Sprite;
        private var bmd:BitmapData;
        private var bmd1:BitmapData;
        private var bmd2:BitmapData;

        public function BitmapOffset() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;
            var bmp:Bitmap = new Logo();
            addChild(bmp);

            bmd  = bmp.bitmapData;
            bmd1 = new BitmapData(bmd.width, bmd.height, false);
            bmd2 = new BitmapData(bmd.width, bmd.height);

            var curX:int = bmd.width + MARGIN;
            var curY:int = bmd.height / 2;

            // x
            graphics.lineStyle(5, 0xff0000, 1, false, &quot;normal&quot;, &quot;none&quot;);
            graphics.moveTo(curX       , curY - SIGN / 2);
            graphics.lineTo(curX + SIGN, curY + SIGN / 2);
            graphics.moveTo(curX       , curY + SIGN / 2);
            graphics.lineTo(curX + SIGN, curY - SIGN / 2);

            // brush
            curX += SIGN + MARGIN;
            addChild(brush = new Sprite()).x = curX + bmd.width * 0.25;
            brush.y = curY;

            // =
            curX += bmd.width / 2 + MARGIN;
            graphics.lineStyle(5, 0x0099ff, 1, false, &quot;normal&quot;, &quot;none&quot;);
            graphics.moveTo(curX       , curY - SIGN * 0.3);
            graphics.lineTo(curX + SIGN, curY - SIGN * 0.3);
            graphics.moveTo(curX       , curY + SIGN * 0.3);
            graphics.lineTo(curX + SIGN, curY + SIGN * 0.3);

            // result
            curX += SIGN + MARGIN;
            addChild(new Bitmap(bmd2)).x = curX;

            draw();
            stage.addEventListener(&quot;click&quot;, function(event:*):void {
                size = size &lt; 10 ? size + 1 : 1;
                draw();
            });
        }

        private function draw():void {
            bmd1.fillRect(bmd.rect, 0xffffff);
            bmd2.fillRect(bmd.rect, 0xffffff);

            brush.graphics.clear();
            brush.graphics.beginFill(0);
            brush.graphics.drawCircle(0, 0, size / 2);
            brush.graphics.endFill();

            var m:Matrix = new Matrix();
            m.tx = m.ty = size / 2;
            bmd1.draw(brush, m);

            var c:ColorTransform = new ColorTransform();
            for(var i:int = 0; i &lt; size * size; i++) {
                m.tx = i % 5; m.ty = Math.floor(i / 5);
                var alpha:int = -bmd1.getPixel(m.tx, m.ty) % 0x100;
                c.alphaOffset = alpha;
                m.tx -= size / 2; m.ty -= size / 2;
                bmd2.draw(bmd, m, c);
            }
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-10-01" title="">
<body>
*tyouzetsu_as*[as]ActionScript 的超絶技巧発表会に参加してきました
Twitter 経由で企画された「ActionScript 的超絶技巧発表会」に参加してきました。日帰りで東京まで行ってきましたが、往復交通費以上に得るものは多かったです。

参加条件が「発表する」だったため、ほんとにレベルが高かったです。かなりの自信作を持っていったつもりだったのに色あせてしまいました。

ひとまず、勉強会まとめエントリとして投下しておきます。半分感想。
====
**HTML/JavaScript から SWF をいじる話(FlashBug) by &lt;a href=&quot;http://www.muraken.biz/&quot;&gt;muraken&lt;/a&gt; さん
JavaScript 経由で MovieClip を作成したり、パラメータをいじったり、中の情報を覗いたりする。AS2。→&lt;a href=&quot;http://www.muraken.biz/?p=49&quot;&gt;関連エントリ&lt;/a&gt;

作りこんでいけば、Flash 版デバッグ環境としても便利なものになりそう。Flash デバッグ環境って、あんまりいいのないですしね。クロスブラウザな Canvas として公開すればかなりヒットしそう。

**swfassist by &lt;a href=&quot;http://www.be-interactive.org/&quot;&gt;yossyさん＠beinteractive&lt;/a&gt;
開発中の swfassist に関する発表でした。&lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=286&quot;&gt;関連エントリ&lt;/a&gt;。

-SWF の構造を解析するツール。
--SWF の内部は、API 経由で見せている Matrix などのデータが格納されているシンプルな構造。
--仕様書とにらめっこして作成。クラスの数が半端じゃない。(体力勝負)
-ShapeCollector を使えば、パースした SWF の中身の情報を描画できる。
--Flash CS3 で定義した Shape の情報や Font の情報を読み出せる。
--OutlineDrawer でアウトライン描画！
-リアルタイム再生(AnimationCollector)
--有名 Flash の ○○○○○○.swf を解析。(所要時間1分)
--visitor pattern で実装
--(2008.05.01追記) Flash Player のライセンス緩和に伴い、正式公開されました &lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=364&quot;&gt;BeInteractive! [早速 AIR で FlashPlayer を作ってみた]&lt;/a&gt;
-ロードマップ
--Writer は不要なのでは？ → Read だけだとプレイヤーを作ったと解釈されて、Adobe のライセンスに抵触してしまうかもしれない。

さすがの内容。全員圧倒されっぱなし。

swfassist の詳細は後日 yossy さんのブログで発表されるらしいよ。

→ (2007.10.12追記) swfassist の&lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=289&quot;&gt;α版がリリースされました&lt;/a&gt;。

**SFXGenerator(alpha) by &lt;a href=&quot;http://www.zkdesign.jp/blog/&quot;&gt;zk33&lt;/a&gt;さん
&lt;a href=&quot;http://d.hatena.ne.jp/zk3/20070927/1190821779&quot;&gt;zk_diary - 効果音ジェネレータα&lt;/a&gt; についての発表です。&lt;a href=&quot;http://d.hatena.ne.jp/zk3/20071001/1191245502&quot;&gt;関連エントリ&lt;/a&gt;。
-文字列を指定すると音が返ってくる
--sin波、周波数の変更、エフェクト...
--SWF の中で効果音作成
--リアルタイムではなく、最初に生成して使うことを想定
-実装の話
--&lt;a href=&quot;http://code.google.com/p/popforge/&quot;&gt;popforge&lt;/a&gt; から一部拝借しながら作成。

SWF＋音ネタが熱い。初音ミクの DTM ブームに乗っかっていけると面白いことになるかもしれない。

(2008.5.1追記)正式版が公開されました。&lt;a href=&quot;http://d.hatena.ne.jp/zk3/20080501/1209652053&quot;&gt;オーディオ操作用AS3ライブラリ「sazameki」をSpark projectにコミットしました。 - zk_diary&lt;/a&gt;

**マニアックなBitmapData by &lt;a href=&quot;http://void.heteml.jp/blog/&quot;&gt;munegon&lt;/a&gt; さん
&lt;a href=&quot;http://www.voidelement.com/randqmap/&quot;&gt;ドラクエマップジェネレータ&lt;/a&gt; の内部実装について。

理解に必死だったので、抜けが多いです。&lt;s&gt;資料公開してくれるそうなのでそちらに期待。私も復習が必要です…。&lt;/s&gt;

資料が公開されました。&lt;a href=&quot;http://www.voidelement.com/presen/tyouzetsu_070929.swf&quot;&gt;発表資料&lt;/a&gt;、&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/10/tyouzetsu.html&quot;&gt;関連エントリ&lt;/a&gt;。
-概要
--128×128 のマップ要素
--いちいち全ピクセル調べてたらとてもじゃないけど重くて使えない
--BitmapData に 1px１パーツで保持。Filter 処理によって演算を行う。
-noise 生成
--BitmapData.noise() は全ての色がランダムに配置されてしまう。
--BitmapData.pixelDissolve() なら色の種類と割合を指定できる。
-ConvolutionFilter
--隣接した要素による相互作用に使える
--マップ要素の淘汰（ライフゲームのようなやつ）
---マップチップに立てたビットで地形を決定
---ConvolutionFilter の結果から置き換わった地形を判別
--海岸処理 (海の横が陸地なら海岸線を書く処理)
---threshold で海だけを取り出す
---上下左右に海があるかを ConvolutionFilter の結果値で判断
---[0 8 0 2 32 4 0 16 0] / 4 の 結果値で判別できる (/4 にしているのは ConvolutionFilterのバグ?)
-DisplacementMapFilter
--ピクセル変換に使える。
--0x008079, 0x007980 などがキーワード
--色からチップへの変換
-AS1～3 の画像処理速度に大きな違いはない（経験則）

AS で複雑な計算処理を行うなら、BitampData のほうが高速！　&lt;a href=&quot;http://slashdot.jp/hardware/05/09/06/231216.shtml?topic=38&quot;&gt;GPGPU&lt;/a&gt; の世界。

**PotrAs の説明 by nitoyon
資料を公開しました。→ &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071002/potrace&quot;&gt;関連エントリ＋発表資料&lt;/a&gt;。

**mp3 encoder と ustream＋ニコニコの話 by &lt;a href=&quot;http://saqoosha.net/&quot;&gt;Saqoosha&lt;/a&gt; さん
&lt;a href=&quot;http://saqoosha.net/2007/10/01/616/&quot;&gt;関連エントリ＋ソースコード (mp3 encoder)&lt;/a&gt;、&lt;a href=&quot;http://saqoosha.net/2007/10/08/617/&quot;&gt;関連エントリ2 (ustream＋ニコニコ)&lt;/a&gt;
-mp3 encoder
--再生中の音の情報を popforge のビジュアライザから取ってきて、MP3 エンコードする
--ぶちぶちなデータなので元の音が再現できない（ロボットの機械的な音）
--ビジュアライザの値は何か使えそうなのに…。
-ustream のチャットデータを取る
--ustream は横長でながら見に適さない
---最前面 AIR + ニコニコ風にすればいけるのでは
--AS で IRC client。IRC のプロトコルは単純。
--AIR からストリームを直接開くとなぜかうまくいかないので「ぶっこ抜き」

ustream＋AIR なプレイヤーはかなり便利そうだった。公開に期待。→ &lt;a href=&quot;http://saqoosha.net/2007/10/08/617/&quot;&gt;公開されました&lt;/a&gt;

**いろいろな所からインスパイアされた作ったら面白そうなもの by &lt;a href=&quot;http://www.trick7.com/blog/&quot;&gt;trick7&lt;/a&gt; さん
あっちこっちに着想を得て、想像を膨らませながら作品の構想を練る過程を公開。

こういう種明かしのような発表も面白い。

詳細は &lt;a href=&quot;http://www.cbc-net.com/article/2007/09/trick7_01.php&quot;&gt;trick7 さんの CBCNET の連載記事&lt;/a&gt; の２回目にて公開されるそうです。ネタバレになってしまいそうなので発表内容は隠蔽しておきます。

(2007.11.30追記) 公開されました。→&lt;a href=&quot;http://www.cbc-net.com/article/2007/11/trick7_02.php&quot;&gt;CBCNET - 土日 Flash のススメ(2)：作りながら考え、考えながら作る。&lt;/a&gt;

**AS3 でパーティクル柔軟スタディーどうする by &lt;a href=&quot;http://fladdict.net/blog/&quot;&gt;fladdict&lt;/a&gt; さん
&lt;a href=&quot;http://fladdict.net/exp/particlemap.swf&quot;&gt;発表資料&lt;/a&gt;、&lt;a href=&quot;http://fladdict.net/blog/2007/09/post_92.html&quot;&gt;関連エントリ&lt;/a&gt;。
-PerticleBase.as の薦め
--サンプルコード → &lt;a href=&quot;http://fladdict.net/exp/particlemap.zip&quot;&gt;http://fladdict.net/exp/particlemap.zip&lt;/a&gt;
--PerticleBase.as は70行ほどのシンプルな構造
--update と render をクラスの外関数レベルで委譲
--実装を外に持てる
--代入する関数を変えることで、レゴブロック的なデザインが可能になる
--OOP 的には邪道かもしれないけど、実験に最適
-&lt;a href=&quot;http://asluv.com/2007/09/18/sandlight-as3-experiment/&quot;&gt;sand/light AS3 experiment&lt;/a&gt; がすごくてパーティクルブーム再来
--画像情報からパーティクルの速度成分が影響を受ける
--実験中の SWF を特別公開 → RGB でパワーを定義して描画情報を切り替える手法

パーティクルの実験はパラメータをいじって理想的な演算やパラメータを調べていく地道な作業なんだなぁ、と実感。こうやって生み出したモーションのソースコードを、気軽に公開する気になれないのも納得してしまった。

**２次会
勉強会が濃かったためか、最初は誰も喋りだせない空気だったけれども、お酒も入って(※yossyさん除く)、経歴紹介したあたりからギアが加速。話は四方八方に。印象的だったところをメモしておきます。

-各人の今に至る略歴紹介
--音楽・VJ・デザイン から入ってきた人、５名(たぶん)
--ブログがきっかけで転職した人、２名
--みんな27～29歳。(N88 や FM-towns からの人も多し)
--yossy さんだけ例外。（Windows Me から!!!!）
--下の世代は何に興味持ってるんだろう？？
-周辺技術
--WPF/Silverlight はまだ触る気になれない（Flash 以上の可能性は感じない。DRMぐらい？）
--iPod touch に Flash 載ったら面白いのに
---Apple は Flash 嫌い？　Apple のサイトでは Flash が使われていない
---動画関連で近い将来に正面から激突する
--Flash Lite
---Flash Lite 1 は絶対触りたくない (tellTarget, call, setProperty...)
---Flash Lite 2 は昨年冬ぐらいからのケータイに搭載されている。けど注意書きをしっかり書かないと「動きません」クレームがいっぱいくる
-Flash で不労所得は得られるか
--成功事例はアニメータさんぐらい。やはりコンテンツホルダーにならないと勝てないのか？
--2ch ブラウザへのキックバック。一番有名な某2chブラウザで月ウン千USD!?→AIRで作っちゃえ？
--ジェネレータ系はアクセス数がすごくて、アフィリエイトで儲かるらしい
--AIR で P2P したらすごくね？（あやしいウイルス）
-Flash の楽しさをいかに広めるか
--ブログで Flash ばっかり書いてると、Flash やってる人しか読まなくなる
--でも、機会があれば Flash/AS をやりたいと思っている人は相当数いるはず。（はてブでで稀に発生する AS エントリ人気）

※出席者の総意ではありません。念のため。

刺激されまくった。

さて、どうしよう。

もうしばらくはブログ書きに専念する予定だけど、一段落したら物作りフェーズに入ってみようかな。ネタは色々溜まってるし。

[asin:4756150322:detail]
</body>
<comments>
<comment>
<username>p-nix</username>
<body>あまりの濃さに圧倒されっぱなしなんですが、&lt;br&gt;&gt;WPF/Silverlight はまだ触る気になれない（Flash 以上の可能性は感じない。DRMぐらい？） &lt;br&gt;&lt;br&gt;の「DRM」は「DLR」ですか？オドオド。</body>
<timestamp>1191338282</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>DRM重要ですよー&lt;br&gt;http://itpro.nikkeibp.co.jp/article/NEWS/20070919/282341/&lt;br&gt;http://www.ascii.jp/elem/000/000/071/71714/</body>
<timestamp>1191370960</timestamp>
</comment>
<comment>
<username>p-nix</username>
<body>すみません、ほんとのDRMの方だったんですね。早とちりでした。Silverlight1.1とDRMの関係すら知りませんでした。申し訳ありません。&lt;br&gt;でも、AppleがDRMフリーに動き出したりしてますしね。&lt;br&gt;http://www.watch.impress.co.jp/av/docs/20070530/apple2.htm&lt;br&gt;でもDRM対応してくれるならそれに越したことはないし。</body>
<timestamp>1191395829</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-02" title="">
<body>
*potrace*[as][potras]ラスタ→ベクタ変換する AS ライブラリ &quot;PotrAs&quot;
超絶のまとめ記事が反応ありすぎて意外すぎます。

それはそうと、超絶で発表した PotrAs を公開します。詳しくはプレゼン資料をごらんあれ。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Fsnippets.libspark.org%2Fsvn%2Fas3%2FPotrAs%2Fsamples%2Fpotras%2Fdemo20070929%2Fbin%2FSlide.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=PotrAs+presentation&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;
プレゼンの閲覧方法：
-プレゼン資料をクリックしてフォーカス与える
-→で次のページ、←で前のページ
-Home で先頭、End で最後のページ
-0～9＋Enter で入力したページにジャンプ

２色のラスタ画像をベクタに変換するライブラリです。プレゼン資料はリアルタイムで変換しながら表示しているので、CPU 消費量が少し高めです。あと、Mac でどう表示されるかが分からないのがちょっと不安です（アンチエイリアスがらみ）。

(2007.10.3 追記) Mac 対策しました。Mac では BitmapData.draw したときにデフォルトでアンチエイリアスがかかってしまうため、細い線になるのが原因でした。threshold メソッドで２値化することにより対処しました。（&lt;a href=&quot;http://snippets.libspark.org/trac/changeset?old_path=nitoyon%2Fas3%2Fsrc%2Fcom%2Fnitoyon%2Fpotras%2FPotrAs.as&amp;old=89&amp;new_path=nitoyon%2Fas3%2Fsrc%2Fcom%2Fnitoyon%2Fpotras%2FPotrAs.as&amp;new=89&quot;&gt;diff&lt;/a&gt;）

ソースは Spark Project に置いておきました。&lt;a href=&quot;http://snippets.libspark.org/trac/wiki/nitoyon/PotrAs&quot;&gt;こちらからどうぞ&lt;/a&gt;。プレゼンのソースも &lt;a href=&quot;http://snippets.libspark.org/trac/browser/as3/PotrAs/samples/potras/demo20070929/Slide.as&quot;&gt;公開してますよ&lt;/a&gt;。

**新たなモーションタイポの可能性
Flash でモーションタイポするには、問題点がいろいろありました。デバイスフォントは回転・透過ができなくて表現力が低すぎるし、BitmapData に転写すると処理が煩雑になってしまいます。フォントを埋め込めば自由にできるのですが、日本語フォントは権利関係が難しいし、ファイルサイズも大きくなってしまいます。

それに対する解が、この PotrAs です。デバイスフォントを BitmapData に描画し、それをトレースしてベクタ変換します。アクロバティックですが、ローカルのフォントを使っているので権利関係も（たぶん）問題ありません。回転縮小アルファも自由自在。塗りや線のスタイルを少し変えるだけで文字の表情も変わります。また、あえて低い解像度でトレースすると、味のある見た目になります。上のスライドの１枚目がそれです。

新たなモーションタイポの表現が可能になる気がしています。みんな遊んでね。

**ロードマップ
今後発展させていくとすれば…
-AS2 への移植（他力本願）
-パフォーマンスチューニング（ちょっと使う分にはいいけど、高速化したい）
-ドキュメントの充実
</body>
<comments>
<comment>
<username>Saqoosha</username>
<body>http://gyazo.com/99b7815d2b5d329d301d928937e8a2ca.png&lt;br&gt;こんなんなったｗ</body>
<timestamp>1191290969</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>対策しました。報告ありがとうございます！！</body>
<timestamp>1191337541</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-03" title="">
<body>
*as3_labeling*[as]ActionScript 3.0 でラベリング (改)
id:flashrod さんのところで、AS3 でラベリングする方法が紹介されています（→&lt;a href=&quot;http://d.hatena.ne.jp/flashrod/20070930#1191160378&quot;&gt;AS3で画像処理入門(その3) &lt;/a&gt;）。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FLabeling.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=318&amp;amp;h=110&amp;amp;title=AS3+Labeling&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

BitmapData について調べているとき &lt;a href=&quot;http://d.hatena.ne.jp/flashrod/20061015#1160910969&quot;&gt;第1回&lt;/a&gt;と&lt;a href=&quot;http://d.hatena.ne.jp/flashrod/20061117#1163771538&quot;&gt;第2回&lt;/a&gt; を読んで、すごく参考にさせていただきました。今回、そのお礼も兼ねて(?)、第3回にツッコミをいれてみます。

flashrod さんはラベリングを自力で実装されてますが、floodFill を使えば一発です。ペイントツールでいうところの「バケツ」に相当するメソッドです。斜め方向に飛び地になったピクセルが塗られないことも確認しました。
&gt;|javascript|
/** ラベリング
 * @param src ラベリング対象ビットマップデータ(モノクロ2値ビットマップ)
 * @return ラベリングデータ(整数の2次元配列)
 */
public static function labeling2(src:BitmapData):BitmapData {
    var dst:BitmapData = src.clone(); // ソースの複製を作る
    var lno:int = 0;
    for (var x:int = 0; x &lt; dst.width; x++) {
        for (var y:int = 0; y &lt; dst.height; y++) {
            if (dst.getPixel(x, y) == 0xFFFFFF) { // 白色の場合
                dst.floodFill(x, y, ++lno);
            }
        }
    }
    return dst;
}
||&lt;

また、ラベルデータから画像を取り出す部分も、threshold を使えば一発でいけます。
&gt;|javascript|
/** ラベル値による画像の抜き出し
 * @param lbd ラベリングデータ
 * @param lno ラベル番号
 * @return 指定のラベル番号だけ抽出したイメージ
 */
public static function extract2(lbd:BitmapData, lno:int):BitmapData {
    var dst:BitmapData = new BitmapData(lbd.width, lbd.height);
    dst.threshold(dst, dst.rect, new Point(), &quot;==&quot;, lno);
    return dst;
}
||&lt;

と、ただ改善案を出すだけだとつまらないので、速度比較してみました。

まずはラベリング。20回の実行したときの必要時間です。
|*オリジナル (labeling)|9563ms|
|*改善版 (labeling2)|62ms|
100倍以上速くなってますね。

次はラベルデータからの抜き出し。こちらは1000回の時間を測りました。
|*オリジナル (extract)|4906ms|
|*改善版 (extract2)|78ms|
こちらも50倍以上早いですね。

ということで、ActionScript で画像処理するなら、ビルトインのメソッドを活用する可能性を追求したほうがよさそうですね。getPixel と setPixel はあくまで最終手段です。

というのは munegon さんの &lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/10/tyouzetsu.html&quot;&gt;超絶技巧発表会の資料&lt;/a&gt;の受け売りです。この資料は BitmapData やるなら必読でしょう。勉強会のまとめエントリなんかよりも、この発表資料をブックマークすべき。1000users 超えて３日連続はてブのトップに君臨すべき。

(追記) その munegon さんが&lt;strong&gt;さらなる高速化&lt;/strong&gt;のアプローチを紹介してくれました。→&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/10/as3_labeling.html&quot;&gt;void element blog: ActionScript 3.0 でラベリング (改)を勝手に添削&lt;/a&gt;。getColorBoundsRect を使って、getPixel を&lt;s&gt;一切&lt;/s&gt;ほとんど使わないコードに仕上がっています。匠の技だ…。毎度毎度ありがとうございます。大変参考になります。

今回のデモのソースコードはこちら(66行)。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.Point;

    [SWF(width=&quot;318&quot;, height=&quot;110&quot;, frameRate=&quot;2&quot;)]
    public class Labeling extends Sprite {
        [Embed(source=&quot;flex.gif&quot;)]
        private var FlexImage:Class;

        public function Labeling() {
            var bmp:Bitmap = new FlexImage();
            addChild(bmp);
            var bmd:BitmapData = bmp.bitmapData;

            // ２値化
            var bmd2:BitmapData = new BitmapData(bmd.width, bmd.height, false, 0x000000);
            bmd2.threshold(bmd, bmd.rect, new Point(), &quot;&lt;&quot;, 0xffffffff, 0xffffffff);

            // ラベリング
            var labeled:BitmapData = labeling2(bmd2);
            var bmp2:Bitmap = new Bitmap();
            addChild(bmp2).x = bmd.width;

            // 描画
            var lno:int = 0;
            var bmdtmp:BitmapData = labeled.clone();
            addEventListener(&quot;enterFrame&quot;, function(e:*):void {
                if(bmp2.bitmapData) bmp2.bitmapData.dispose();
                bmp2.bitmapData = extract2(labeled, ++lno);

                // ラベルが見つからなかったときは 0 に戻す
                if(!bmdtmp.threshold(bmp2.bitmapData, bmp2.bitmapData.rect, new Point(), &quot;==&quot;, 0xffffffff)) {
                    lno = 0;
                }
            });
        }

        /** ラベリング
         * @param src ラベリング対象ビットマップデータ(モノクロ2値ビットマップ)
         * @return ラベリングデータ(整数の2次元配列)
         */
        public static function labeling2(src:BitmapData):BitmapData {
            var dst:BitmapData = src.clone(); // ソースの複製を作る
            var lno:int = 0;
            for (var x:int = 0; x &lt; dst.width; x++) {
                for (var y:int = 0; y &lt; dst.height; y++) {
                    if (dst.getPixel(x, y) == 0xFFFFFF) { // 白色の場合
                        dst.floodFill(x, y, ++lno);
                    }
                }
            }
            return dst;
        }

        /** ラベル値による画像の抜き出し
         * @param lbd ラベリングデータ
         * @param lno ラベル番号
         * @return 指定のラベル番号だけ抽出したイメージ
         */
        public static function extract2(lbd:BitmapData, lno:int):BitmapData {
            var dst:BitmapData = new BitmapData(lbd.width, lbd.height, true, 0xff000000);
            dst.threshold(lbd, lbd.rect, new Point(), &quot;==&quot;, 0xff000000 + lno, 0xffffffff);
            return dst;
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-10-04" title="">
<body>
*showa_photo_as3*[as]ActionScriptで昭和写真化
基礎的な内容が続いてきたので、たまには応用例を。

最近、&lt;a href=&quot;http://labs.topicmaker.com/~fujiwara/s.html&quot;&gt;昭和の写真ジェネレータ(仮)&lt;/a&gt; が話題になりましたが、これの&lt;a href=&quot;http://d.hatena.ne.jp/sfujiwara/20070924/1190645783&quot;&gt;作り方が公開されています&lt;/a&gt;。
ならば、ActionScript 3.0 でやってみたくなるのが人情です。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071004/20071004011511.jpg&quot; width=&quot;450&quot; height=&quot;208&quot; alt=&quot;結果&quot;&gt;&lt;/center&gt;&lt;

いい具合ですね。ザ・昭和。

サーバー側の資源を使わずにこういうことができちゃうのは素敵じゃないでしょうか。

Flickr は &lt;a href=&quot;http://static.flickr.com/crossdomain.xml&quot;&gt;crossdomain.xml を設置している&lt;/a&gt; ので、その辺と連携する ActionScript を書いてみても面白そうですね。

ソースは以下に（52行）。
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.*;
    import flash.filters.*;
    import flash.text.*;

    public class ShowaPhoto extends Sprite {
        [Embed(source=&quot;photo3.jpg&quot;)]
        private var SamplePic:Class;

        [Embed(fontName=&quot;7barSPBd&quot;, source=&quot;7barSPBd.TTF&quot;)]
        private var SevenBarFont:Class;
        
        public function ShowaPhoto() {
            var bmp:Bitmap = new SamplePic();
            var bmd:BitmapData = bmp.bitmapData;

            // color transform
            var colorTrans:ColorTransform = new ColorTransform(0.7, 0.7, 0.7, 0x44, 0x33, 0x22);
            bmd.colorTransform(bmd.rect, colorTrans);
            bmd.applyFilter(bmd, bmd.rect, new Point(), new BlurFilter(0.2, 0.2));

            // add letter
            var t:TextField = new TextField();
            var tf:TextFormat = new TextFormat();
            tf.size = 18;
            tf.font = &quot;7barSPBd&quot;;
            tf.color = 0xffaa33;
            t.defaultTextFormat = tf;
            t.embedFonts = true;
            t.text = &quot;78 09 21&quot;;
            var matrix:Matrix = new Matrix();
            matrix.translate(bmd.width - t.textWidth - 10, bmd.height - t.textHeight - 5);
            bmd.draw(t, matrix);

            // add border
            var bmd2:BitmapData = new BitmapData(bmd.width + 10, bmd.height + 10, false);
            bmd2.fillRect(bmd2.rect, 0xffeedd);
            matrix.identity();
            matrix.translate(5, 5);
            bmd2.draw(bmd, matrix);

            // add noise
            var bmdNoise:BitmapData = new BitmapData(bmd2.width, bmd2.height, false);
            bmdNoise.noise(0, 0xee, 0xff, 7, true);
            bmd2.draw(bmdNoise, null, null, &quot;multiply&quot;);

            // display
            addChild(new Bitmap(bmd2)).filters = [new DropShadowFilter(4, 45, 45, 0.3)];
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-10-05" title="">
<body>
*potras_pop*[as][potras]PotrAs でチラシ文字
ベクタ変換ライブラリ &lt;a href=&quot;http://snippets.libspark.org/trac/wiki/nitoyon/PotrAs&quot;&gt;PotrAs&lt;/a&gt; のデモ兼サンプル。チラシ文字っぽいものを再現しました。
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FPop.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=420&amp;amp;h=120&amp;amp;title=pop+ad&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

あらかじめ画像として作成しておいてもよいのですが、任意の文字を簡単にチラシ文字にできるところがポイントです。チラシ文字ジェネレータを作れますね！（流行るかどうかは別として）

lineStyle と beginFill を組み合わせて描画するだけ。簡単ですね。もちろん、&lt;a href=&quot;http://void.heteml.jp/blog/archives/2007/09/dilate_erode.html&quot;&gt;BitmapDataの範囲拡張＆収縮&lt;/a&gt;を使えば、PotrAs を使わなくてもできますが、こちらの方がわかりやすくてメンテナンスしやすそうです。

ソースは以下に（25行）。

&gt;|javascript|
package {
    import flash.display.*;
    import flash.filters.*;
    import com.nitoyon.potras.*;

    [SWF(width=&quot;420&quot;, height=&quot;120&quot;)]
    public class Pop extends Sprite {
        public function Pop() {
            var list:ClosedPathList = PotrAs.traceLetter(&quot;本日開店&quot;, 100);

            graphics.lineStyle(14, 0xff0000);
            list.draw(graphics);

            graphics.lineStyle(8, 0xffffff);
            list.draw(graphics);

            graphics.lineStyle(4, 0xff0000);
            graphics.beginFill(0xff0000);
            list.draw(graphics);
            graphics.endFill();

            filters = [new DropShadowFilter(4, 45, 0x000080, 1, 0, 0)];
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-10-09" title="">
<body>
*as3_histogram1*[as]AS3 でヒストグラムを作る (1)
今週は ActionScript でヒストグラムを作っていきます。画像の色分布をグラフ表示したやつです。

&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071009/20071009090130.jpg&quot; width=&quot;261&quot; height=&quot;281&quot; alt=&quot;ヒストグラム (吉島家)&quot;&gt;&lt;/center&gt;

手順：
:1. グレースケール化:最初に各チャンネルの平均をとるために白黒画像にします。ColorMatrixFilter を使えば一発ですね。
:2. threshold でカウント:各階調のピクセル数を調べるために threshold を使います。threshold は戻り値でマッチしたピクセル数が返ってくるので、これを利用します。
:3. 描画:lineTo で描画します。

高速化の余地はありそうだけど、複雑になりそうなのでこのへんで。

次回からはヒストグラムを操作できるようにしていきます。

ソースコードは以下に(45行)。
&gt;|javascript|
package {
    import flash.display.*;
    import flash.filters.ColorMatrixFilter;
    import flash.geom.Point;

    [SWF(width=&quot;256&quot;, height=&quot;276&quot;)]
    public class Histogram1 extends Sprite {
        [Embed(source=&quot;yoshijima.jpg&quot;)]
        private var SampleImage:Class;

        public function Histogram1() {
            var bmd:BitmapData = Bitmap(addChild(new SampleImage())).bitmapData;
            var s:Sprite = new Sprite();
            createHistogram(bmd,s);
            addChild(s).y = bmd.height + 10;
        }

        // ヒストグラムを作成する
        private function createHistogram(bmd:BitmapData, s:Sprite):void {
            // グレースケール化
            var cmf:ColorMatrixFilter = new ColorMatrixFilter(
                [1 / 3, 1 / 3, 1 / 3, 0, 0, 
                 1 / 3, 1 / 3, 1 / 3, 0, 0, 
                 1 / 3, 1 / 3, 1 / 3, 0, 0]
            );
            var bmd2:BitmapData = bmd.clone();
            bmd2.applyFilter(bmd2, bmd2.rect, new Point(), cmf);

            // threshold でカウント
            var values:Array = [];
            for(var i:int = 0; i &lt; 0x100; i++) {
                values[i] = bmd2.threshold(bmd2, bmd2.rect, new Point(), &quot;==&quot;, i, 0, 0xff, false);
            }
            bmd2.dispose();

            // 描画
            var max:int = bmd.width * bmd.height / 50;
            s.graphics.lineStyle(1);
            for(i = 0; i &lt; 0x100; i++) {
                s.graphics.moveTo(i, 100);
                s.graphics.lineTo(i, Math.max(0, 100 - values[i] / max * 100));
            }
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-10-10" title="">
<body>
*as3_histogram2*[as]AS3 でヒストグラムを作る (2) - スライダー篇
ヒストグラムを Photoshop のように操作できるようにしていきます。今回はスライダーを作成します。

完成したのはこんなスライダー。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FHistogram2.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=320&amp;amp;h=50&amp;amp;title=Histogram+slider&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

標準では fl.controls.Slider や mx.controls.HSlider のようなつまみが１つのスライダーは用意されていますが、このような３つのつまみがついたスライダーはありません。ないならば自作するしかありません。

作るといっても、UI の実装はなかなか手間がかかります。昨日のヒストグラムが45行、今回のスライダーが97行。こっちの方が地味なのに倍のコード量です。ちょっとした使いやすさを演出するために、細かい心配りも必要です。

例えば、mouseDown イベントのときは、マウスから一番近いつまみをドラッグするために、各つまみからの距離を計算しています。また、ドラッグ可能範囲を両端もしくは左右のつまみの間に制限しています。完全に重なってしまわないように、少し間を空けるようにもしています。ドラッグ可能範囲は、Sprite.startDrag メソッドの第２引数 bounds:Rectangle で指定しています。mouseMove イベントでは、両端のつまみ位置に応じて真ん中のつまみを調整しています。

説明するだけでややこしいので、興味がある人はソースを見てください。

ソースは以下に(97行)。
====
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.geom.*;

    [SWF(width=&quot;280&quot;, height=&quot;20&quot;)]
    public class Histogram2 extends Sprite {
        private var dragging:Sprite;
        private var h2pos:Number = 0.5;
        private var h1:Sprite;
        private var h2:Sprite;
        private var h3:Sprite;

        public function Histogram2() {
            addChild(createSlider()).x = 10;
        }

        // スライダーを作成する
        private function createSlider():Sprite {
            // スライド可能範囲描画
            var slider:Sprite = new Sprite();
            slider.graphics.beginFill(0xffffff);
            slider.graphics.drawRect(0, 0, 256, 10);
            slider.graphics.endFill();
            slider.graphics.lineStyle(1, 0);
            slider.graphics.lineTo(255, 0);
            slider.buttonMode = true;
            slider.useHandCursor = true;

            // つまみ作成
            h1 = Sprite(slider.addChild(createButton(0xffffff))); h1.x = 0;
            h2 = Sprite(slider.addChild(createButton(0x999999))); h2.x = 128;
            h3 = Sprite(slider.addChild(createButton(0x000000))); h3.x = 255;

            // mouseDown
            slider.addEventListener(&quot;mouseDown&quot;, function(e:*):void {
                var localX:Number = slider.globalToLocal(new Point(mouseX, mouseY)).x;

                // ドラッグするつまみを決定する
                var d1:Number = Math.abs(localX - h1.x);
                var d2:Number = Math.abs(localX - h2.x);
                var d3:Number = Math.abs(localX - h3.x);
                var max:Number = Math.min(d1, d2, d3);
                dragging = (max == d1 ? h1 : max == d2 ? h2 : h3);

                // 場所補正
                var bounds:Rectangle = getDraggableBounds(dragging);
                dragging.x = Math.max(Math.min(localX, bounds.right), bounds.x);
                updateH2(null);

                dragging.startDrag(false, bounds);
            });

            // mouseMove
            stage.addEventListener(&quot;mouseMove&quot;, updateH2);

            // mouseUp
            stage.addEventListener(&quot;mouseUp&quot;, function(e:*):void {
                if(dragging) {
                    dragging.stopDrag();
                    dragging = null;
                }
            });

            return slider;
        }

        // つまみを描画する
        private function createButton(color:int):Sprite {
            var s:Sprite = new Sprite();
            s.graphics.lineStyle(1, 0);
            s.graphics.beginFill(color);
            s.graphics.lineTo(5, 8.6);
            s.graphics.lineTo(-5, 8.6);
            s.graphics.endFill();
            return s;
        }

        // つまみの移動可能範囲を計算する
        private function getDraggableBounds(s:Sprite):Rectangle {
            if(s == h1) return new Rectangle(0, 0, h3.x - 4, 0);
            if(s == h2) return new Rectangle(h1.x + 2, 0, h3.x - h1.x - 4, 0);
            if(s == h3) return new Rectangle(h1.x + 4, 0, 255 - h1.x - 4, 0);
            return null;
        }

        // 真ん中のつまみの位置を計算する
        private function updateH2(e:*):void {
            if(dragging &amp;&amp; dragging != h2) {
                h2.x = (h3.x - h1.x) * h2pos + h1.x;
                h2.x = Math.max(Math.min(h2.x, h3.x - 2), h1.x + 2);
            }
            else if(dragging == h2){
                h2pos = (h2.x - h1.x) / (h3.x - h1.x);
            }
        }
    }
}
||&lt;
</body>
</day>
<day date="2007-10-11" title="">
<body>
*as3_histogram3*[as]AS3 でヒストグラムを作る (3) - Photoshop みたいなレベル補正
前回のスライダ作成で準備は整いました。いよいよ、今回は Photoshop のレベル補正機能もどきを完成させます。

まずは完成品から。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FHistogram3.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=280&amp;amp;h=410&amp;amp;title=Level+adjustment&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

補正後のヒストグラムも表示してみました。スライダの場所によってどのような影響がでるのかが一目瞭然ですね。

**３つのスライダの意味
Photoshop のレベル補正には黒、灰色、白の３つのスライダーがあります。黒がシャドウ(レベル0)の指定、白がハイライト(レベル255)の指定です。白のスライダより右の階調は白飛びする、と言い換えると分かりやすいかもしれません。

白と黒のスライダだけを実装するなら、ColorTransform でいけますが、問題は灰色のスライダです。灰色のスライダは中間調(レベル128)を表し、ガンマ補正で調整しているようです。ガンマ補正の数式は次のようになります。
&lt;center&gt;[tex:\large x' =   x_m\(\frac{x}{x_m}\)^{1/\gamma}]&lt;/center&gt;
x' は変換後の明るさを表します。[tex:x_m] は x の最大値です。

数式がややこしいですが、x&lt;sub&gt;m&lt;/sub&gt;=1 の場合を考えてみるとイメージしやすいでしょう。
|[tex:\gamma=1] のとき|x' = x （変化なし）|
|[tex:\gamma=0.5] のとき|x' = [tex:x^2]  （暗くなる）|
|[tex:\gamma=2] のとき|x' = [tex:\sqrt{x}] （明るくなる）|

以上をふまえると、トーンカーブで表現すると、３つのスライダによる影響は次のようになります。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071011/20071011085635.jpg&quot; width=&quot;193&quot; height=&quot;226&quot;&gt;&lt;/center&gt;&lt;

**ActionScript で実装
トーンカーブやガンマ補正を ActionScript で実現するには BitmapData.paletteMap が便利です。

と、そのためには、γ値を求めておかなければなりません。３つのスライダの値をそれぞれ x&lt;sub&gt;b&lt;/sub&gt;, x&lt;sub&gt;g&lt;/sub&gt;, x&lt;sub&gt;w&lt;/sub&gt; とします。

ガンマ補正の式において x&lt;sub&gt;m&lt;/sub&gt; = x&lt;sub&gt;b&lt;/sub&gt; - x&lt;sub&gt;w&lt;/sub&gt; となります。また、x = x&lt;sub&gt;g&lt;/sub&gt; - x&lt;sub&gt;b&lt;/sub&gt; のときに x'/x&lt;sub&gt;m&lt;/sub&gt;=0.5 となることから、[tex:\gamma] についての方程式を解くことができます。
&gt;&lt;center&gt;[tex:\gamma=\frac{\log\frac{x_g-x_b}{x_w-x_b}}{\log 0.5}]&lt;/center&gt;&lt;

ということで、スライダの値を反映させる部分のソースコードはこうなってます。
&gt;|javascript|
var gamma:Number = Math.log((h2.x - h1.x) / (h3.x - h1.x)) / Math.log(0.5);
var mapR:Array = [], mapG:Array = [], mapB:Array = [];
for(var i:int = 0; i &lt; 0x100; i++) {
    mapB[i] = i &lt; h1.x ? 0 : i &gt; h3.x ? 0xff : 255 * Math.pow((i - h1.x) / (h3.x - h1.x), 1 / gamma);
    mapG[i] = mapB[i] &lt;&lt; 8;
    mapR[i] = mapB[i] &lt;&lt; 16;
}
bmd.paletteMap(bmdOrigin, bmd.rect, new Point(), mapR, mapG, mapB);
||&lt;

全体のソースコードは158行です。凝ったことをしている割には、意外と短いと思いませんか？　ActionScript の表現力に感心してしまいます。

明日は、ちょっと趣向を変えて、別のヒストグラムを取り上げます。

ソースコード全体は以下に(158行)。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.filters.*;
    import flash.geom.*;

    [SWF(width=&quot;256&quot;, height=&quot;410&quot;)]
    public class Histogram3 extends Sprite {
        [Embed(source=&quot;kunimi.jpg&quot;)]
        private var SampleImage:Class;

        private var dragging:Sprite;
        private var h2pos:Number = 0.5;
        private var h1:Sprite;
        private var h2:Sprite;
        private var h3:Sprite;

        public function Histogram3() {
            stage.scaleMode = &quot;noScale&quot;;

            var bmd:BitmapData = Bitmap(addChild(new SampleImage())).bitmapData;

            var s:Sprite = new Sprite();
            addChild(s).y = bmd.height + 10;
            createHistogram(bmd, s);

            s = new Sprite();
            addChild(s).y = bmd.height + 140;
            createHistogram(bmd, s);

            addChild(createSlider()).y = bmd.height + 115;

            var bmdOrigin:BitmapData = bmd.clone();
            addEventListener(&quot;enterFrame&quot;, function(e:*):void {
                if(dragging) {
                    var gamma:Number = Math.log((h2.x - h1.x) / (h3.x - h1.x)) / Math.log(0.5);
                    var mapR:Array = [], mapG:Array = [], mapB:Array = [];
                    for(var i:int = 0; i &lt; 0x100; i++) {
                        mapB[i] = i &lt; h1.x ? 0 : i &gt; h3.x ? 0xff : 255 * Math.pow((i - h1.x) / (h3.x - h1.x), 1 / gamma);
                        mapG[i] = mapB[i] &lt;&lt; 8;
                        mapR[i] = mapB[i] &lt;&lt; 16;
                    }
                    bmd.paletteMap(bmdOrigin, bmd.rect, new Point(), mapR, mapG, mapB);

                    s.graphics.clear();
                    createHistogram(bmd, s);
                }
            });
        }

        // ヒストグラムを作成する
        private function createHistogram(bmd:BitmapData, s:Sprite):void {
            // グレースケール化
            var cmf:ColorMatrixFilter = new ColorMatrixFilter(
                [1 / 3, 1 / 3, 1 / 3, 0, 0, 
                 1 / 3, 1 / 3, 1 / 3, 0, 0, 
                 1 / 3, 1 / 3, 1 / 3, 0, 0]
            );
            var bmd2:BitmapData = bmd.clone();
            bmd2.applyFilter(bmd2, bmd2.rect, new Point(), cmf);

            // threshold でカウント
            var values:Array = [];
            for(var i:int = 0; i &lt; 0x100; i++) {
                values[i] = bmd2.threshold(bmd2, bmd2.rect, new Point(), &quot;==&quot;, 
                    i + (i &lt;&lt; 8) + (i &lt;&lt; 16), 0, 0xffffff, false);
            }
            bmd2.dispose();

            // 描画
            var max:int = bmd.width * bmd.height / 50;
            s.graphics.lineStyle(1);
            for(i = 0; i &lt; 0x100; i++) {
                s.graphics.moveTo(i, 100);
                s.graphics.lineTo(i, Math.max(0, 100 - values[i] / max * 100));
            }
        }

        // スライダーを作成する
        private function createSlider():Sprite {
            // スライド可能範囲描画
            var slider:Sprite = new Sprite();
            slider.graphics.beginFill(0xffffff);
            slider.graphics.drawRect(0, 0, 256, 10);
            slider.graphics.endFill();
            slider.graphics.lineStyle(1, 0);
            slider.graphics.lineTo(255, 0);
            slider.buttonMode = true;
            slider.useHandCursor = true;

            // つまみ作成
            h1 = Sprite(slider.addChild(createButton(0x000000))); h1.x = 0;
            h2 = Sprite(slider.addChild(createButton(0x999999))); h2.x = 128;
            h3 = Sprite(slider.addChild(createButton(0xffffff))); h3.x = 255;

            // mouseDown
            slider.addEventListener(&quot;mouseDown&quot;, function(e:*):void {
                var localX:Number = slider.globalToLocal(new Point(mouseX, mouseY)).x;

                // ドラッグするつまみを決定する
                var d1:Number = Math.abs(localX - h1.x);
                var d2:Number = Math.abs(localX - h2.x);
                var d3:Number = Math.abs(localX - h3.x);
                var max:Number = Math.min(d1, d2, d3);
                dragging = (max == d1 ? h1 : max == d2 ? h2 : h3);

                // 場所補正
                var bounds:Rectangle = getDraggableBounds(dragging);
                dragging.x = Math.max(Math.min(localX, bounds.right), bounds.x);
                updateH2(null);

                dragging.startDrag(false, bounds);
            });

            // mouseMove
            stage.addEventListener(&quot;mouseMove&quot;, updateH2);

            // mouseUp
            stage.addEventListener(&quot;mouseUp&quot;, function(e:*):void {
                if(dragging) {
                    dragging.stopDrag();
                    dragging = null;
                }
            });

            return slider;
        }

        // つまみを描画する
        private function createButton(color:int):Sprite {
            var s:Sprite = new Sprite();
            s.graphics.lineStyle(1, 0);
            s.graphics.beginFill(color);
            s.graphics.lineTo(5, 8.6);
            s.graphics.lineTo(-5, 8.6);
            s.graphics.endFill();
            return s;
        }

        // つまみの移動可能範囲を計算する
        private function getDraggableBounds(s:Sprite):Rectangle {
            if(s == h1) return new Rectangle(0, 0, h3.x - 4, 0);
            if(s == h2) return new Rectangle(h1.x + 2, 0, h3.x - h1.x - 4, 0);
            if(s == h3) return new Rectangle(h1.x + 4, 0, 255 - h1.x - 4, 0);
            return null;
        }

        // 真ん中のつまみの位置を計算する
        private function updateH2(e:*):void {
            if(dragging &amp;&amp; dragging != h2) {
                h2.x = (h3.x - h1.x) * h2pos + h1.x;
                h2.x = Math.max(Math.min(h2.x, h3.x - 2), h1.x + 2);
            }
            else if(dragging == h2){
                h2pos = (h2.x - h1.x) / (h3.x - h1.x);
            }
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-10-12" title="">
<body>
*as3_histogram4*[as]AS3 でヒストグラムを作る (4) - 周辺分布
最近、画像処理について興味をもって勉強しているのですが、isbn:4789830950:title という本を読んでいます。その中で、「周辺分布」の図が面白かったので AS3 で実装してみました。

**周辺分布って何？
周辺分布というのは、２値化した画像においてドットの登場頻度を X軸、Y軸のそれぞれについて集計したもののようです。パターン認識の特徴ベクトルとして利用されるらしいです。

サンプルはこんな感じ。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071012/20071012022750.gif&quot; width=&quot;251&quot; height=&quot;258&quot;&gt;&lt;/center&gt;&lt;

イメージとしては、画像を縦と横のそれぞれにべちゃっと圧縮した感じ。例えば、「し」の縦棒の下は長くなってますよね。

**ActionScript で作ってみた
で、これをリアルタイムで解析できたら楽しそうだったので、作ってみたのがこちらの Flash。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FHistogram4.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=300&amp;amp;title=Marginal+Distribution&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

-枠の中でドラッグして線を描画できます
-枠の外でクリックすると絵を消去できます

適当にマウスを動かすと、スプラッター映画の血痕のようにヒストグラムが延びていくのが愉快です。

技術的にはたいしたことしてません。例によって threshold でピクセル数を集計しているだけです。

**本の紹介
ちなみに、この isbn:4789830950:title という本、C# を例に説明はしてますが、実践的な画像処理の情報が詰まってるので、なかなか楽しいです。フィルタやラベリングに始まり、パターン認識からニューラルネット、顔認識などの幅広い内容をサンプルコードつきで扱ってます。他の本を読んだわけではないので、「これがベストだ！」と自信をもって言い切ることはできませんが、入門には分かりやすくていい具合です。

それはそうと、誰か「ActionScript で実践する画像処理」という本を書かないかなぁ。Graphics クラスの初歩から始まり、パーティクルアニメーションを解説したり、BitmapData を使った加工ネタを取り上げたあとに Web カメラや FLV 動画の加工に応用、さらには PV3D で３次元…などなど、魅力的な内容になって面白そうなのに。だったらお前が書けよ、といわれそうだけど、ご覧のように画像処理については初心者なのでいかんとも…。

[isbn:4789830950:detail]

今回のソースコードは以下に(89行)。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package {
    import flash.display.*;
    import flash.events.Event;
    import flash.geom.*;

    [SWF(width=&quot;400&quot;, height=&quot;400&quot;)]
    public class Histogram4 extends Sprite {
        private var canvas:Sprite;
        private static var SIZE:uint = 200;

        public function Histogram4() {
            stage.align = &quot;TL&quot;;
            stage.scaleMode = &quot;noScale&quot;;
            
            // 描画用キャンバス準備
            canvas = new Sprite();
            addChild(canvas);
            initCanvas();

            // ドラッグで描画
            var dragging:Boolean = false;
            var count:int = 0; // 間引き用のカウンタ
            canvas.addEventListener(&quot;mouseDown&quot;, function(e:*):void {
                canvas.graphics.moveTo(mouseX, mouseY);
                canvas.graphics.lineTo(mouseX, mouseY);
                dragging = true;
            });
            canvas.addEventListener(&quot;mouseMove&quot;, function(e:*):void {
                if(dragging) {
                    count = count &lt; 12 ? count + 1 : 0;
                    canvas.graphics.lineTo(mouseX, mouseY);

                    // 12回に1回、ヒストグラムを更新する
                    if(count == 0) {
                        updateHistogram();
                    }
                }
            });
            canvas.addEventListener(&quot;mouseUp&quot;, function(e:*):void {
                dragging = false;
            });

            // キャンバスの外でクリックしたらクリア
            stage.addEventListener(&quot;click&quot;, function(event:Event):void {
                if(event.target == stage) {
                    initCanvas();
                }
            });
        }

        // キャンバスを初期化する
        private function initCanvas():void {
            canvas.graphics.clear();
            canvas.graphics.lineStyle(1, 0x808080);
            canvas.graphics.beginFill(0xffffff);
            canvas.graphics.drawRect(0, 0, SIZE, SIZE);
            canvas.graphics.endFill();
            canvas.graphics.lineStyle(2, 0);
            updateHistogram();
        }

        // ヒストグラムを描画する
        private function updateHistogram():void {
            graphics.clear();

            // BitmapData に描画
            var bmd:BitmapData = new BitmapData(SIZE, SIZE);
            bmd.draw(canvas);

            var num:uint;
            graphics.lineStyle(1, 0);

            // ヒストグラム分析＆描画
            for(var i:int = 0; i &lt; SIZE; i++) {
                // X 成分のヒストグラム
                num = bmd.threshold(bmd, new Rectangle(0, i, bmd.width, 1), new Point(), &quot;==&quot;, 0xff000000);
                graphics.moveTo(SIZE, i);
                graphics.lineTo(SIZE + num, i);

                // Y 成分のヒストグラム
                num = bmd.threshold(bmd, new Rectangle(i, 0, 1, bmd.height), new Point(), &quot;==&quot;, 0xff000000);
                graphics.moveTo(i, SIZE);
                graphics.lineTo(i, SIZE + num);
            }

            bmd.dispose();
        }
   }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2007-10-15" title="">
<body>
*potras_keyboard*[as][potras]PotrAs 高速化
週末に時間を作って &lt;a href=&quot;http://snippets.libspark.org/trac/wiki/nitoyon/PotrAs&quot;&gt;PotrAs&lt;/a&gt; を高速化してみました。

デモ： KANA KEYBOARD (&lt;a href=&quot;http://snippets.libspark.org/svn/as3/PotrAs/samples/potras/demo20070929/KanaKeyboard.as&quot;&gt;ソース&lt;/a&gt;)
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Fsnippets.libspark.org%2Fsvn%2Fas3%2FPotrAs%2Fsamples%2Fpotras%2Fdemo20070929%2Fbin%2FKanaKeyboard.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=Kana+Keyboard&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

使い方：
-Flash の画面をクリックする
-キーボードを適当に叩くと文字列が迫ってくる

200px のかな文字を最初にがががっとベクタ化してます。ベクタ化してるので、枠線をつけたり、回転、透明化させたり自由自在。

**高速化したところ
特にアルゴリズムには手を入れず、オブジェクトの生成回数や参照回数を減らしただけです。どれも語りつくされてきた手法ですが、実際に速度が速くなるところを目の当たりにするとうれしいものがあります。

***例１：for の中で new するのをやめる
前
&gt;|javascript|
for(var i:int = 0; i &lt; 100; i++) {
    var p:Point = new Point();
    // ...
}
||&lt;
後
&gt;|javascript|
var p:Point = new Point();
for(var i:int = 0; i &lt; 100; i++) {
    p.x = 0; p.y = 0;
    // ...
}
||&lt;

***例２：関数の戻り値をオブジェクトで返さないようにする
前
&gt;|javascript|
function doHogehoge():Point {
    var ret:Point = new Point();
    // ...
    ret.x = x; ret.y = y;
    return ret;
}
||&lt;
後
&gt;|javascript|
function doHogehoge(p:Point):void {
    // ...
    p.x = x; p.y = y;
}
||&lt;

***例３：配列の長さを覚えておく
前
&gt;|javascript|
for(var i:int = 0; i &lt; array.length; i++) {
    // ...
}
||&lt;
後
&gt;|javascript|
var len:int = array.length;
for(var i:int = 0; i &lt; len; i++) {
    // ...
}
||&lt;

これだけで、処理速度がたいたい 2/3 ぐらいになりました。他にも、ループが入り組んでるところで Math.abs をインライン展開したりしたけど、目に見えるほどの効果を感じたのは上の３つぐらいです。

トレース処理は６つの部分から成り立っているのですが、細かな速度変化は次のようになってます。（サンプル画像を10回トレースしたときの所要時間）
+path: 1917ms -&gt; 373ms
+sums: 265ms -&gt; 269ms
+lon: 3115ms -&gt; 2072ms
+best: 1102ms -&gt; 798ms
+adjust: 3438ms -&gt; 2215ms
+smooth: 144ms -&gt; 128ms

もっと最適化の余地はありそうなのですが、ソースコードが機械生成したようになっていくのが悲しいところです。

-参考：&lt;a href=&quot;http://actionscript.g.hatena.ne.jp/ConquestArrow/20070621/1182359767&quot;&gt;actionscriptグループ - ConquestArrow.addEventListener(); - ActionScript3 最適化・高速化Tips 簡易まとめ&lt;/a&gt;
</body>
<comments>
<comment>
<username>munegon</username>
<body>PathList.findNext のところで、例の getColorBoundsRect 使えばもっと早くなりません？</body>
<timestamp>1192452339</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>そうですねー。ただ、path のところはもう十分に早いんですよね…。&lt;br&gt;それよりも、lon と adjust をなんとかしたい！　計算量が多いところなので、小手先では難しそうなんですけどね。</body>
<timestamp>1192468494</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-16" title="">
<body>
*why_i_am_learning_actionscript*[as]ActionScript がイケてるたった１つの理由
（inspired by &lt;a href=&quot;http://mtl.recruit.co.jp/blog/2007/10/actionscript_3_50.html&quot;&gt;ActionScript 3 がイケてる50の理由 : メディアテクノロジーラボ　ブログ&lt;/a&gt;）

そろそろ ActionScript やり始めて１年。飽きずに ActionScript やり続けてきた理由を突き詰めて考えたところ、&lt;strong&gt;「表現力」と「普及率」のバランス&lt;/strong&gt;が一番いいからなんだ、と気がづいた。

いまさら Windows アプリ作ったとしても誰もインストールしてくれないし、Mac や Linux の人にだって使ってもらいたい。物を作ろうとしている人間にとって、使ってもらえる可能性を狭めることはしたくないもんだ。

WPF や Silverlight も面白そうなんだけど、「で、どの端末で動くの？」と考えたときに利用できる環境がほとんどない。1年後には多少改善しているかもしれないが、2007年10月の現在においてはほとんどない。作っても見てくれる人がいないといころで作っても仕方がない。1ヵ月後に何か出そう、と考えたときには選択できない。

と、こうやって比較してみると、ActionScript 以外の選択肢はなかったんだ。

JavaScript が選択肢にない、という訳ではないんだけど、JavaScript で提示できる UI のパターンって、ここ数年の Ajax フィーバーで出尽くしたような気がしてる。探せば見つかるんだろうけど、ActionScript の世界にはボロボロと大ネタが転がっていることを知ってしまった以上、なかなか引き返す気にはならない。ActionScript を勉強していると、&lt;strong&gt;Script.aculo.us を初めて見たときに感じた感動と同じぐらいの感動に３日に１回は出会う&lt;/strong&gt;。JavaScript ではScript.aculo.us以来、見た目に関する感動するスクリプトにはほとんど出会っていない。この違いってすごくない？

Flash は HTML+JavaScript に比べてユーザビリティが悪いよね、と思ってる人も多いと思う。私もそう思う。だけども、そんな現状だからこそ、Flash を使った使い勝手のいい何かを作ってみたい。表現力は HTML より格段に上なんだから、はまったときはすごいはずなんだ。まだ何も作ってないんだけど。

もし、3年後に Silverlight ランタイムが Flash Player よりも多くの普及率を誇るようになったとしたら、いま WPF/Silverlight で遊んでないのと同じ理由で ActionScript を切り捨てているかもしれない。

だって、多くの人に見てもらいたいやん。

多くの人をスゲーって言わせたいやん。

この理由だけで、いま、ActionScript を選んでいる。私にとっては十分妥当な理由だ。
</body>
<comments>
<comment>
<username>ASer</username>
<body>ASのいいとこは、PerlやPHPなサーバーサイド言語と違ってクライアント処理なとこ。&lt;br&gt;ダメなとこは、クライアントの能力で表現力が変わるとこ。&lt;br&gt;つまりASは、表現力を求めるというよりも、&lt;br&gt;どのPCでも動くという点が最大の魅力。&lt;br&gt;Flash Playerという名前なだけで、Java Viatual MachineやRuntimeなどという仰々しい名前＝難しそうなイメージが払拭されており、エンドユーザーは警戒なくインストールする。&lt;br&gt;言語構造云々よりネーミングの勝利といった感じかな。</body>
<timestamp>1192594763</timestamp>
</comment>
<comment>
<username>ASer</username>
<body>ASも、PHPにおけるSQLite的な、簡易dbを内蔵できれば言語としても最高なんですけどねー。</body>
<timestamp>1192594875</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-19" title="">
<body>
*adobe_max_2007_jp*Adobe MAX 2007＋α 見るものリスト
Adobe MAX 2007 に行きますよ。申し込みがまだの人は 10月25日(木) 17:00 までらしいのでお早めに。

&lt;a href=&quot;http://www.adobemax2007.jp/&quot;&gt;&lt;img src=&quot;http://www.adobemax2007.jp/banners/MAX07_B125x125.gif&quot; alt=&quot;Adobe MAX Japan 2007&quot; border=&quot;0&quot;&gt;&lt;/a&gt;

こんなセッション聞くので、それっぽい人がいたら気軽に声かけてください！

まずは１日目。

:[D-1] ニコニコ動画とFlash (戀塚昭彦氏):バイナリアン風味な濃い Flash 話から半分ビジネスなお話に期待。4月に行われた&lt;a href=&quot;http://labs.cybozu.co.jp/blog/takesako/2007/04/nicovideo.html&quot;&gt;ニコニコ動画勉強会&lt;/a&gt;が羨ましかったのの雪辱。
:[B-2] ドローイングとプログラミングの美しき衝突 (The Art of Presstube):ROXIKの城戸さんにも心惹かれたのだけれど、アートっぽい Flash に興味があったのでこっちを。
:[B-3] Flex採用時のプロジェクトワークフローとベストプラクティス (横田聡氏):Flex 案件の開発談を語ってくれるとのことで、かなり期待。
:[E-4] ここまでできるFlexコンシューマ向けアプリ (成瀬勉氏/岩崎経氏):&lt;a href=&quot;https://secure.adobemax2007.jp/register/step/index.html&quot;&gt;Adobe MAX 2007 申し込み画面&lt;/a&gt;の開発秘話を公開してくれるらしい。実例ベースに苦労話やこだわった所を聞けるのは貴重。&lt;br&gt;この申し込み画面、ウインドウサイズを小さくして、下にスクロールした状態でポップアップを出すと閉じられなくなるんですが…。
:[S-2] Technology Sneak Peek:未発表の製品の情報がボロボロと。Thermo!! Thermo!!
:Adobe Community United:名刺交換しまくりましょう！　業界のすごい人をいまいち把握してないので、あとで「エー、あの人、そんなにすごい人だったノー！」ということになってそう。&lt;br&gt;Flash-OOP / Flash Gadget User group / FxUG / JCFUG主催、Adobe 協賛の巨大交流会です。申し込みは &lt;a href=&quot;http://gizmo.anthill.jp/fgug/modules/bwiki/index.php?Adobe%20Community%20United&quot;&gt;fgug&lt;/a&gt; と &lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?AdobeCommunityUnited%40MAXJapan2007&quot;&gt;FxUG&lt;/a&gt; で始まっているよ。

次は２日目。
:[D-5] Webクリエイターのための初めての映像制作ガイド (遠崎寿義氏):映像製作したことないので興味半分で。
:[C-6] インタラクションデザインの実際：アイデアの開発 (中村勇吾氏):超有名な方らしいので聞いておく。
:[A-7] 求む！ デザイナーによるアプリケーション開発 (アドビ：阿部成行):D-7 の fladdict さんのお話に猛烈に後ろ髪をひかれつつ、Flex についての情報収集。デザイナツールで Flex スキンを作成する話。実は、この話を一番聞きたがってるのは、&lt;a href=&quot;&lt;a href=&quot;http://www.fladdict.net/blog/2007/07/twitterair.html&quot;&gt;fladdict さんかもしれない&lt;/a&gt;。
:[D-8] Flex Builderで使いこなすActionScript 3.0-最適化とプロファイリング (アドビ：テッド パトリック):Flex 3 の情報を発表前に流してくれる Ted さんのコーディング話。Adobe MAX Japan って、プログラマ向けのセッションが少ないよね…。まともなのってこれぐらいじゃなかろうか。来年（かその次）があるなら、プログラマに訴えかけるような実践的な内容が欲しいところ。そうじゃないと、大き目の会社では上司に申請しにくそう。
:&lt;s&gt;[S-4]&lt;/s&gt; The Future of JavaScript:Adobe MAX を抜け出して &lt;a href=&quot;http://blogs.mozilla-japan.org/events/&quot;&gt;The Future of JavaScript by Mozilla &amp; Shibuya.JS&lt;/a&gt; に参加予定。JS な方々にもお会いできるのを楽しみにしてますよ！　終わったあとに懇親会ってあるんだろうか。→[誰かについていく]

ということで、かなり濃そうな11月1日～2日になりそう。今から楽しみです。

ちなみに、翌3日には &lt;a href=&quot;http://cotocoto.jp/event/2429&quot;&gt;Kanasan.JS&lt;/a&gt; という謎の JS イベントも関西であるらしいのだけど、こっちは様子見。
</body>
<comments>
<comment>
<username>匿名</username>
<body>[E-8]のセッション内容は「Adobe XD チームがお届けする、UX デザインパターンとフレームワーク」ですよ。最適化とプロファイリングのセッションは[D-8]みたいです。</body>
<timestamp>1192761939</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おお、ありがとうございます。修正しておきました。E-8 もかなり魅力的なんですよねぇ…。</body>
<timestamp>1192764864</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-22" title="">
<body>
*takeshi_max*Takeshi MAX 2007（FxUG＋大阪てら子）に飛び入りしてきた
先週末、金曜日の FxUG＋大阪てら子の共同勉強会 &lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?cmd=read&amp;page=Flex2%CA%D9%B6%AF%B2%F1%C2%E827%B2%F3%A1%F7%C2%E7%BA%E5%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;Takeshi MAX 2007&lt;/a&gt; に行ってきました。

Saqoosha さんが発表した、AIF(Adobe Image Foundation) Toolkit のデモがすごかった。絵画化フィルタが500fpsって…。高性能なグラフィックボードが必須とはいえ、夢が広がる。とはいえ記述は AS ではなく C ライクな独自言語。今まで別の分野で活躍していた人が流入してきて、ますます分業が進むことになるんでしょうか。AIF Toolkit は既に npaka さんところで解説されてます。相変わらず素早い…。
-&lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/aiftoolkit/&quot;&gt;AIF Toolkitメモ&lt;/a&gt;

他にも、シカゴの MAX のまとめ、AIR 入門、AIR の導入（できなかった）事例、関連本紹介、などなど、多岐に渡っていて初心者にも中級者にも魅力的な内容になってたと思います。hirossy さんの参加者に質問しながら進めるスタイルも面白かった。疑問を共有して解決けるので有意義ですね。

自分が発表した内容については、あとちょっと手直しして今週中には公開したいところ。
関連ブログ：
-&lt;a href=&quot;http://saqoosha.net/2007/10/20/619/&quot;&gt;[Saq.] Takeshi MAX 2007 Japan （涙&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/hirossy1977/20071020/1192891672&quot;&gt;たけしマックス - hirossy javaとFlex2と。&lt;/a&gt;
-&lt;a href=&quot;http://blog.hi-farm.net/article.php/article/1192983084&quot;&gt;Hi-Farm blog - ActionScript 3.0 , AIR , FLEXなどと戯れ合う日々 -いろいろ行ってきました。&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/isamin73/20071020/1192982191&quot;&gt;発表内容 - いさみんの飄々日記&lt;/a&gt;
</body>
</day>
<day date="2007-10-25" title="">
<body>
*p1*丸ビルRSSリーダーをリリースしました
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071025/20071025022857.jpg&quot; width=&quot;450&quot; height=&quot;143&quot; alt=&quot;イメージ&quot;&gt;&lt;/center&gt;&lt;

関西人にとっては思い入れの強い丸ビルを RSS リーダーにしてみました。
-&lt;a href=&quot;http://tech.nitoyon.com/marubiru/&quot;&gt;丸ビルRSSリーダー&lt;/a&gt;


**遊び方
ニュースサイトの URL やブログの URL を入れて遊んでみてください。

URL だけじゃなく、メッセージを入力すれば、それを表示することだってできます。

入力した URL は自動的に #http:// という形で URL（location hash） に保存されるので、ブログからリンクすることもできますよ。
-（例） このブログを表示：http://tech.nitoyon.com/marubiru/#http://d.hatena.ne.jp/nitoyon/

**リリースノート
電光掲示板って不思議ですよね。どうでもいい情報でも、最後まで読まないと満足できなかったりします。

新幹線の各車両の前後に電光掲示板がありますが、あれに流れるニュースとか広告って、なぜかぼーっと眺めちゃうんですよね。流れてくる情報量はすごく少ないのに。

それに比べて、ニュースサイトとか、RSS リーダーを見るときは、大量の情報があるにもかかわらず、ついつい読み飛ばしてしまいます。

情報量が多いほど読み飛ばして、少ないほどじっくり見てしまう。

不思議な現象ですね。

「ならば」と間をとって、電光掲示板でヘッドラインを表示できるようにしてしまいました。

どうでしょう。情報量は少ないはずなのに、ついつい眺めてしまいませんか？

&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E5%A4%A7%E9%98%AA%E3%83%9E%E3%83%AB%E3%83%93%E3%83%AB&quot;&gt;大阪丸ビル&lt;/a&gt;の今はなき電光掲示板を利用させてもらいました。なぜ丸ビルかと言われると困っちゃいますが、電光掲示板といえば丸ビルが頭に浮かんだからしょうがないのです。

**発表資料
先週の金曜日の Takeshi MAX 2007（FxUG＋大阪てら子）で発表したのがこのネタです。

発表資料をおいておきます。（口頭で説明する前提の資料なので、あまり中身はありませんが）

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmarubiru%2FSlide.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=MARUBIRU+RSS+Reader&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;
ActionScript と画像加工は７時間でできたのですが、サービスとして仕立てるために HTML と JavaScript を書いたり、ActionScript の速度向上をしていたら、結局、リリースまでには同じぐらいの時間がかかってしまいました。

**ソース
オープンソースな Web サービスですよ。
-&lt;a href=&quot;http://tech.nitoyon.com/marubiru/Marubiru.as&quot;&gt;Marubiru.as&lt;/a&gt; (SWF ソース)
-&lt;a href=&quot;http://pipes.yahoo.com/pipes/pipe.info?_id=cEreGvJi3BG2_zgYxQnzeQ&quot;&gt;Fetch Site Feed Simple&lt;/a&gt; (SWF で利用してる Yahoo! Pipes のパイプ)
-&lt;a href=&quot;http://tech.nitoyon.com/marubiru/Slide.as&quot;&gt;Slide.as&lt;/a&gt; (プレゼン資料ソース)

サーバー側でスクリプトは動いてません。RSS を取ってくるところは Yahoo! Pipes を使っています。Fetch Site Feed というモジュールが賢い！　crossdomain.xml 万歳。
</body>
<comments>
<comment>
<username>Pepe</username>
<body>文字が動いてると思ってたら、まさに電光掲示板と同じようなアルゴリズムなのね ^_^;  いやいや、面白くて、かつ、実用的ですね (^O^)／</body>
<timestamp>1193276983</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>点を動かそうとも思ったのですが、移動先の計算をしなきゃいけないし、端の方を暗くしてるので再描画が必要になっちゃうんですよね。&lt;br&gt;ということで、点の座標は固定で実装しちゃいました。</body>
<timestamp>1193500896</timestamp>
</comment>
<comment>
<username>snaka</username>
<body>かっこよすぎ！&lt;br&gt;できたら、ブログパーツぐらいのサイズにしてもらえたら....&lt;br&gt;って、ソースあるんだから自分でやれって？</body>
<timestamp>1198121588</timestamp>
</comment>
<comment>
<username>ごはん</username>
<body>まさに、私が今作りたいのが電光掲示板風のＲＳＳです！&lt;br&gt;実物を見て感動しました★</body>
<timestamp>1246255156</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-26" title="">
<body>
*how_to_get_the_ideas*私のアイデア出しの手法
先週末の勉強会で「&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071025/p1&quot;&gt;丸ビルRSSリーダー&lt;/a&gt;」のデモをしたところ、そのあとの懇親会で何人かの人に「どうやって思いついたの？」という質問をされた。ネタ元をばらすのはちょっぴり恥ずかしいけど、需要はありそうなので、エントリとしてまとめておくことにする。

一発ネタのサービスを作る場合に限れば、他の人と違う方法で Output するだけでよい。Output の方法を思いつけば勝ち。それだけ。

私が Output の定石としてよく用いるのが、身近なメディアの力を借りる方法。例えば、以前作った &lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/1/&quot;&gt;Google Maps で鈴鹿サーキット試走&lt;/a&gt; は、ゲームの形で Output することでインパクトを与えていた。今回の丸ビルは RSS を電光掲示板を使って Output した。

ゲームも電光掲示板も身近なもの。Google Maps API や RSS という最新の(?)技術を、身近なものを使って Output してるだけ。

他にも、既存のサービスとかアイデアで身近なメディアっぽく見せてるものとしては、ざっと思い出しただけで次のようなものがある。
:テレビ:&lt;a href=&quot;http://rimo.tv/&quot;&gt;Rimo&lt;/a&gt;、&lt;a href=&quot;http://hatebutv.com/&quot;&gt;はてブTV&lt;/a&gt;
:新聞:&lt;a href=&quot;http://kaibun.in/&quot;&gt;怪文書作成くん&lt;/a&gt;、&lt;a href=&quot;http://www.matsuno-lab.com/newspaper/&quot;&gt;新聞ブログ プロジェクト&lt;/a&gt;
:週刊誌:&lt;a href=&quot;http://exo.jp/keypersonq/2007/09/post_257.html&quot;&gt;ゴシップ風広告&lt;/a&gt;
:ゲーム:&lt;a href=&quot;http://converter.novelog.org/&quot;&gt;ノベログコンバーター&lt;/a&gt;

で、こういう Output 手法の候補をいろいろ見つけておいて、出勤中とかお風呂の中とか寝るときなんかのちょっとした時間で Output と Input を頭の中でくっつけたり離したりしつつ、面白そうな組み合わせを探すことにしている。大抵はしょうもない組み合わせなんだけど、ごくたまに「面白そう！」という組み合わせが見つかる…かもしれない。

見つかれば、あとは大げさにならない程度に実装するだけ。すごい Web サービスになる可能性があるなら、一発ネタで出すのはもったいないので出し方は慎重に。
</body>
</day>
<day date="2007-10-27" title="">
<body>
*as3_animation*[as][書籍]AS3のアニメーション本が出るらしいですよ
&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4862460496/nitoyoncom-22/ref=nosim&quot;&gt;ActionScript 3.0 アニメーション&lt;/a&gt; という翻訳本が出るらしいですよ。

via &lt;a href=&quot;http://blog.livedoor.jp/kunz/archives/51247702.html&quot;&gt;kunzo.log:AS3 アニメーションプログラミング - livedoor Blog（ブログ）&lt;/a&gt;

isbn:4862460496:detail

&lt;a href=&quot;http://www.borndigital.co.jp/book/flash/4-86246-049-3/index.html&quot;&gt;出版社のサイト&lt;/a&gt;に目次がありますが、三角関数・行列といった数学の話から、加速度・バネ・摩擦などの物理の話、さらにはマウスやキーボードを使ったインタラクションの話まで一通り押さえてくれてるようです。Flex2 と Flash CS3 の両方に対応しているのもありがたいところ。

ページ数はなんと550ページ、値段も圧巻の7,350円。日本語で詳しく書いてある書籍としては貴重です。初めて Flash に手をだそうという人にも、そろそろ AS3 を勉強したいと思ってる人にもよさそうです。あと、アニメーションっぽいことに手を出してみたいプログラマさんにもいいかもしれませんね。

興味のある人は &lt;s&gt;１冊あたりのアフィリエイト効果がでかそうなので&lt;/s&gt; 買ってみてください。

(追記) fladdict.net さんとこにも記事が出てます。「AS2版は良著」「買い」らしいですよ、奥さん。
-&lt;a href=&quot;http://fladdict.net/blog/2007/10/_make_things_move.html&quot;&gt;fladdict.net blog: 神の書 Make Things Move 日本語版発売&lt;/a&gt;
</body>
</day>
<day date="2007-10-29" title="">
<body>
*fxug_kyoto*[flex][イベント]Flex勉強会＠京都が開催されますよ！！
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071029/20071029001921.jpg&quot; width=&quot;450&quot; height=&quot;185&quot; alt=&quot;真如堂 2005/11/26&quot;&gt;&lt;/center&gt;&lt;
FxUG 関西支部の11月勉強会は京都ですよ。既に募集が始まってます。

-&lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?Flex2%CA%D9%B6%AF%B2%F1%C2%E829%B2%F3%A1%F7%B5%FE%C5%D4%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;B-Wiki - Flex2勉強会第29回＠京都参加受付 - Flex User Group&lt;/a&gt;
-日時：2007年11月17日（土）午前10時～14時　終わったら京都観光/親睦会など！
-場所：デジタルハリウッド京都校

定員は30名で立ち見不可らしいのでお申し込みはお早めに。紅葉にはちょっと早い時期ですが、秋の京都ということで魅力はたっぷりです。

会場へは JR＋市営地下鉄、もしくは阪急電車、京阪電車でお越しください。たぶん大丈夫だとは思いますが、JR京都からバスは危険な香りがします。この時期の京都は観光客だらけで大渋滞なので車は避けねばなりません。あ、私はすぐ近くなので、歩きか自転車で行きます。

私も何か喋ります。Flex 2 でのデザイナーと連携する話か、UIComponent を継承したカスタムコンポーネント作りの話のどちらかを考えてますが、リクエストあれば受け付けてます。
</body>
</day>
<day date="2007-10-30" title="">
<body>
*es4_overview*ECMAScript 4 の Draft をざっくり読んでみた
&gt;&lt;div style=&quot;background: yellow; border: 1px solid red; padding: 5px; color: red&quot;&gt;この記事では ECMAScript 4 の Draft を解説していますが、2010年現在 ECMAScript 4 の標準化はストップしており、ECMAScript 5 の標準化が進められています。詳しくは &lt;a href=&quot;http://gihyo.jp/dev/column/newyear/2010/javascript-prospect?page=2&quot;&gt;2010年のJavaScript：「これまで」と「これから」｜gihyo.jp&lt;/a&gt; をご覧ください。&lt;/div&gt;&lt;

&lt;a href=&quot;http://journal.mycom.co.jp/news/2007/10/23/032/index.html&quot;&gt;ECMAScript 第4版の最終ドラフトが公開&lt;/a&gt;された、というので、ざっくり読んでみた。

PDF はこれ：&lt;a href=&quot;http://www.ecmascript.org/es4/spec/overview.pdf&quot;&gt;http://www.ecmascript.org/es4/spec/overview.pdf&lt;/a&gt;

このドキュメントは Overview の最終ドラフト。このあと、Overview が固まって、そこから Specification が作られていくものと思われる。

(追記) コメント欄で mal_blue さんから間違いを指摘や補足をしていただいてます。コメント欄もあわせてご覧ください。

**概要
大まかな特徴はこんなところ。

:オブジェクト指向:クラスとインターフェースがサポートされて、OOP なコーディングができるようになるよ。OOP なコーディング方法は ActionScript 3.0 と同じ（のはず）。&lt;br&gt;もちろん、ECMAScript 3 時代の手続き型な書き方も使える模様。
:厳密にも書ける:namespace とか package 空間ができたので、ライブラリによるグローバル汚染の心配がなくなる。&lt;br&gt;型を厳密に宣言すれば、実行時じゃなく実行前型チェックができるので処理が高速になる。他にも、int, uint, double といった値は高速演算できる、Vector（後述）を使えば Array のオーバーヘッドを削減できる、といったメリットも。&lt;br&gt;もちろん、型なしのいい加減コーディングもできる。ライブラリでは厳密にコーディングして高速化を図り、ちょっとしたコードはいい加減に書いてコーディング時間の削減を狙う、といった使い分けもできるようだ。
:少しのコードで:ちょっとした新機能がいくつも追加されていて、書くコードの量が大幅に削減できる。型が違って例外がでたり、他にもいろいろ。詳しくはこのあとのサーベイ。

ECMAScript4（以下、ES4）の新機能をざっくり分類すると
-ActionScript3.0 から引き継いだ仕様
-JavaScript1.7 から引き継いだ仕様
-新しい仕様
の３つから成り立っている。

３つのそれぞれを見ていってみよう。
====
**ActionScript 3.0 から引き継いだ仕様
OOPや型に関する仕様は ActionScript 3.0 とほとんど同じになっている。
-class、interface
-プロパティ、const
-継承
-名前空間、package
-int, double などの型 (var i:int;)
-arguments → ...args
-is 演算子とか as 演算子

補足：
-ActionScript 3.0 の文法は amachang の &lt;a href=&quot;http://usrb.in/amachang/static/shibuyaes/&quot;&gt;ActionScript for JavaScript(er).&lt;/a&gt; が分かりよい。細かいところまで知りたいなら、&lt;a href=&quot;http://download.macromedia.com/pub/documentation/jp/flex/2/prog_actionscript30.pdf&quot;&gt;ActionScript 3.0 のプログラミング (PDF)&lt;/a&gt; がお薦め。
-JScript.NET も ECMAScript 4 を先取りする形で実装されていて、クラス定義や型宣言などがある。
-ActionScript 3 の実行環境「Tamarin」を元にして、Firefox 3 には ECMAScript 4 準拠の JavaScript 2.0 が実装される予定になっている。

**JavaScript 1.7 から引き継いだ仕様
Firefox 2 に実装されている JavaScript が JavaScript 1.7。

JavaScript 1.7 にはあまり詳しくないので、&lt;a href=&quot;http://nanto.asablo.jp/blog/2006/08/12/481381#js17-block-scope&quot;&gt;JavaScript 1.7 の新機能: Days on the Moon&lt;/a&gt; を参考にさせてもらった。
-ブロックスコープ (let)
-分割代入 ([a, b] = [1, 2])
-イテレータ
-ジェネレータ (yield)
-配列内包 (a = [[i, i * i] for each(i in [1,2,3])])

これらの仕様が、ES4 Overview に入っているのを確認した。

**新しい仕様
個人的に大きいと判断した４つの機能をピックアップしてみる。

***(1) 総称関数 (generic functions)
オーバーロード、と言い換えたほうが分かりやすい人も多いかもしれない。

引数の型によって、呼び出される関数を変えるもの。いままでは１箇所でしか関数を定義できなかった。

こうやって書くらしい。
&gt;|javascript|
generic function intersect(s1, s2); // No body here

generic function intersect(s1: Shape, s2: Shape) {
  // general intersection method
}
generic function intersect(s1: Rect, s2: Rect) {
  // fast intersection for rectangles
}
||&lt;

***(2) テンプレート (parameterized class)
データ型にこだわらずにいろいろ実装できるアレ。C# では Generics とも呼ばれている。

実行時の型チェックが入らないので、高速に動くことが期待できる。
&gt;|javascript|
// クラスで使う
class Pair.&lt;T&gt; {
    var first: T, second: T
}
new Pair.&lt;int&gt;(3, 4);

// type で定義して使う
type Box.&lt;T&gt; = { value: T }
var v: Box.&lt;boolean&gt; = new Box.&lt;boolean&gt;(true);

// 関数で使う
function f.&lt;T&gt;( x:T ): T ...
f.&lt;int&gt;(37)
||&lt;

parameterized class に便乗して、プリミティブクラスとして Vector と Map が追加されている。まんま、STL。
&gt;|javascript|
var xs = new Vector.&lt;double&gt;;
var map = new Map.&lt;*,int&gt;;
||&lt;

Vector は Array の厳密版、Map は Object を利用したハッシュの厳密版として使える。こっちのほうが速いし、コンパイル時のチェックも入るし、Map にはキー一覧を取得するメソッドが定義されていたりするので、メリットは多い。

イテレータと parameterized class を組み合わせるのもよさげ。

***(3) レコード型と配列型（Record and array types）
レコード型ってのは、{ x:int, y:string } を型として扱えるようにした感じ。

&gt;|javascript|
// new と共に
var samplevar = new { x:int, y:string }( 3, &quot;foo&quot; );

// {} と共に
var samplevar = { x:10, y:&quot;foo&quot; } : { x:int, y:string };
||&lt;

レコード型（Record type）でググってみたら、Scheme あたりドキュメントが引っかかった。その辺に影響受けているっぽい。

ただ、あとからプロパティの追加・削除は可能なので、厳密に型を定めているわけではない。厳密にやりたかったら、クラスとして定義すべし。

配列型ば [ int ] のようにして配列の型を規定できるもの。

&gt;|javascript|
// new と共に
var intarray  = new [ int ](7);

// [] と共に
var intarray  = [ 1,2,3 ] : [ int ];
||&lt;

さらに、新たに導入されたキーワード like と wrap を組み合わせると楽にコーディングできる。
&gt;|javascript|
// 不一致時に例外がでる
function func1( pt: like { x: int, y: int } ) {...}

// if 文で型チェックしている
function func2( pt: * ) {
    if( pt is like {x : int, y : int} ) { ... }
}

// x と y が定義されたラッパーオブジェクトを作る
function func3( pt: wrap { x: int, y: int } ) {...}
||&lt;
面白いのは、like を使うことで、Object もクラスも同等に扱えるところ。AS3 でいうと、Point と Sprite は基底クラスが違うんだけど両方に x と y がある。Record type を活用すれば、どちらにも適用できる関数になる。厳密な OOP ではインターフェースが同じでないと同じものとしては扱いにくかったけど、ES4 ではこのようなスクリプトっぽい書き方ができるわけだ。

いちいち、{ x : int, y : int } のように書くのは大変なので、何度も使う場合は type で型を定義しておくとよいだろう。
&gt;|javascript|
type Position = { x:Number, y:Number };
||&lt;

他にも、配列型とデフォルト引数を組み合わせて、デフォルト引数に縛りをつけられる。
&gt;|javascript|
function (int, ...[string]): void
||&lt;

***(4) 演算子オーバーロード（Operator overloading）
型ごと演算子の挙動を変更できる。ドキュメントには +、*、== などが例に挙がっていたが、たぶんなんでもいけるんだろう。

グローバル関数として intrinsic 名前空間に定義して使う。

&gt;|javascript|
// 複素数クラス
class Complex {...}

// 複素数の足し算
generic intrinsic function +( a: Complex, b: Complex )
{
    new Complex( a.real + b.real, a.imag + b.imag )
}

// 複素数と実数の足し算
generic intrinsic function +( a: Complex, b: AnyNumber )
{
    a + Complex(b)
}

// 実数と複素数の足し算
generic intrinsic function +( a: AnyNumber, b: Complex )
{
    Complex(a) + b;
}
||&lt;

より直感的にライブラリを使えるようになりそう。

算術ライブラリで Matrix クラスの掛け算が * でできたりする。C# のように addEventListener するのに window.onload += callback; といった書き方ができるようにもなったら嬉しい。

**(5) その他の細々
気になったものをピックアップ。かゆいところに手が届く仕様がいっぱい。
:Nullability:型の後ろに ! をつけて var v : C! = ... と定義する。null になったら例外がでるようになる。Null pointer（いわゆる、ぬるぽ）を未然に防げるので、デバッグが楽になりそう。関数定義で function(val:Object!) としておくと、関数の中で null のチェックをしなくていいので、コード量も減って幸せに。
:Tail call:末尾呼び出し。関数の末尾で関数を呼び出した場合、スタックにつむのではなく、単純に goto としてコンパイルされるようになる。OCaml や Scheme で実装されているものらしい。末尾で再帰的に呼び出すことで、実行効率が上がったり、ループを再帰でかけるようになったり、いいことがあるようだ。
:Meta-level hook:関数呼び出しやプロパティの代入を担当する関数をかける。meta::invoke、meta::get、meta::set、meta::has、meta::delete といったものを使う。AS3 でいう Proxy のようなもの。dynamic class でしか使えない。&lt;br&gt;Array や Vector なども、Meta-level hook と同じ仕組みで実装されている。今までは、Array のオリジナル版を作ることはできなかったが、Meta-level hook を使うことで、同等の機能を自分で実装することも可能になるわけだ。
:Union type:(int,string) のように書くことで、int でも string も許可する型になる。Union を利用したプリミティブな型として、type AnyNumber = (byte,int,uint,double,decimal,Number) などが定義されている。
:switch type:型によって挙動を変える switch type。if(a is String){...}else if... という if 文の列挙を防ぎ、switch type (v) {case (s: string) {...} } と書けるようになる。
:try-catch に型:型が導入されたことで、catch を複数書けるようになる。Error の型によって、どの catch に落ちるかが変わる。
:Slicing:&quot;ecmascript&quot;[5:2:-1] == &quot;sam&quot; らしい。String、Array、Vector で使える。
:正規表現の複数行、コメント:複数行が OK に、行頭の # がコメントに。複雑な正規表現のメンテナンスがしやすくなる。
:Trailing commas:{a : 10,} が文法として認められる。Firefox では動いてたけど、IE でエラーになってて悲しい思いをした人も多いはず。
:JSON サポート:toJSONString と string.parseJSON。サーバーに JSON で投げたり、デバッグ用に JSON で吐き出す、といった使い方が考えられる。

**感想
あーー、盛りだくさん。厳密にも適当にも書ける、というのは魅力的なのだけど、果てしてここまで複雑になった仕様は実装できるんだろうか。

このドラフトに書いてあることがどれぐらい最終的に実装されるのかな。&lt;a href=&quot;http://wiki.ecmascript.org/doku.php&quot;&gt;ES4 Wiki&lt;/a&gt; を見ていると、Overview にも書いてないことが提案されていたりするのだけど、今から入ることはないのかな。最終ドラフトってことは、よほどのことがない限り、このままいくのかな。

**参考リンク
-&lt;a href=&quot;http://www.ecmascript.org/&quot;&gt;ECMAScript.org&lt;/a&gt;: 公式サイト
-&lt;a href=&quot;http://malblue.tumblr.com/&quot;&gt;mal_blue@tumblr&lt;/a&gt;: mal_blue さんの tumblr。ES4 情報多数。
-&lt;a href=&quot;http://d.hatena.ne.jp/ufcpp/20071024/1193215519&quot;&gt;ECMAScript 4 の概要 - ++C++; // 管理人の日記&lt;/a&gt;
-&lt;a href=&quot;http://www.slideshare.net/yukoba/ecmascript-4&quot;&gt;ECMAScript4 リファレンス実装&lt;/a&gt;: Shibuya.js での ES4 発表
-&lt;a href=&quot;http://blogs.msdn.com/ie/archive/2007/10/30/ecmascript-3-and-beyond.aspx&quot;&gt;IEBlog : ECMAScript 3 and Beyond&lt;/a&gt;: IEBlog（MS公式）に登場した ES4 に対するコメント。仕様に沿うのは重要だと考えている、後方互換に対応する、ES4 の IE 搭載予定は明言せず。
-&lt;a href=&quot;http://www.zeuslabs.us/2007/10/28/discover-ecmascript-4-the-future-of-actionscript/&quot;&gt;Discover ECMAScript 4: The Future of ActionScript - Zeus Labs&lt;/a&gt;

</body>
<comments>
<comment>
<username>mal_blue</username>
<body>&gt; is 演算子とか as 演算子&lt;br&gt;as は cast になります。互換性のため AS では as は残されるはず。&lt;br&gt;&lt;br&gt;&gt; JScript.NET も ECMAScript 4 を先取りする形で実装されていて&lt;br&gt;正確には古い Netscape proposal &lt;http://www.mozilla.org/js/language/old-es4/&gt; をベースにしています。&lt;br&gt;&lt;br&gt;&gt; ActionScript 3 の実行環境「Tamarin」を元にして、Firefox 3 には ECMAScript 4 準拠の JavaScript 2.0 が実装される予定になっている。&lt;br&gt;よく言われるけど古い情報なんで… Firefox 3 に入るのは JavaScript 1.8 で、ES4 準拠+Tamarin ベースは Firefox 4(Mozilla 2) 以降になります。&lt;br&gt;&lt;br&gt;&gt; Map は Object を利用したハッシュの厳密版として使える。&lt;br&gt;つか、AS3 の Dictionary の拡張です。&lt;br&gt;&lt;br&gt;&gt; 型ごと演算子の挙動を変更できる。ドキュメントには +、*、== などが例に挙がっていたが&lt;br&gt;一番最近の grammar (&lt;http://www.ecmascript.org/es4/spec/grammar.pdf&gt; 071015 公開 ただし、generic, like, wrap などがまだ無い) には&lt;br&gt;+ - ~ * / % &lt; &gt; &lt;= &gt;= == &lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; | === != !==&lt;br&gt;が挙げられてます。&lt;br&gt;&lt;br&gt;&gt; ES4 Wiki を見ていると、Overview にも書いてないことが提案されていたりするのだけど、今から入ることはないのかな。&lt;br&gt;&lt;br&gt;どれでしょ？ 時系列としては、ES4 Wiki - proposals に書かれてることより、overview の方が新しいです。最近の提案はむしろ bugs.ecmascript.org でなされてます。JSON の クラス化や、コンストラクタの private 化可能あたりは入りそうな気がしてます。</body>
<timestamp>1193765864</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>うわーー。すごい。ありがとうございます！！&lt;br&gt;Overview しか見ずに記事を書いたのが恥ずかしくなります。&lt;br&gt;&lt;br&gt;ES4 Wiki の話ですが Operator ”to” というのがあったりして、混乱してしまいました。なるほど、Overview のほうが新しいのですね。&lt;br&gt;&lt;br&gt;あとで可能な限り本文を修正します。</body>
<timestamp>1193794039</timestamp>
</comment>
<comment>
<username>mal_blue</username>
<body>確かに to 演算子は前触れなしに Overview から消えてびっくりしました。RI-M0 では meta::convert と to でユーザ定義型変換ができたんですけどね。Overview の V. Values - Conversions によると、meta::invoke を使うようにしたようです。ES3 にあわせたのかな。</body>
<timestamp>1193805921</timestamp>
</comment>
</comments>
</day>
<day date="2007-10-31" title="">
<body>
*adobe_max_eve*Adobe MAX 参戦前夜
-明日は早起き。乗る新幹線は &lt;a href=&quot;http://un-q.net/2007/10/_adobe_max.html&quot;&gt;Adobe Max へみんなでいこう！（遠足） (Unknown Quality)&lt;/a&gt; にて公開中。同乗者募集中。
-&lt;a href=&quot;https://www.info-event.jp/adobemax2007/blogger/&quot;&gt;ブログを書いていただける方募集 - Adobe MAX Japan 2007&lt;/a&gt; に応募してみた。これに申し込んで、9:30 までに現地に行ったら、写真撮影用の腕章をもらえるみたい。公式に許可を受けて写真を撮れるなんて素晴らしい。
-ということで、受講メモをここに書いていく予定！
-体調が万全ではなくて、まだ咳が出てしまう…。とりあえず、SHOP99 でマスク（７枚入り）を買った。
ということで、「マスクをして、写真撮影の腕章をして、受講中にノートPCをカチャカチャやって、細身のメガネをかけた人」が私です。気軽に声かけてほしい！

受講リストは &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071019/adobe_max_2007_jp&quot;&gt;Adobe MAX 2007＋α 見るものリスト&lt;/a&gt; にて公開中。

土曜日は関西に戻って &lt;a href=&quot;http://cotocoto.jp/event/2429&quot;&gt;Kanasan.JS&lt;/a&gt; に参加する予定。&lt;a href=&quot;http://tdw07.excite.co.jp/&quot;&gt;東京デザイナーズウィーク2007&lt;/a&gt; とかも楽しそうなんだけど…。

*es4_reference_implementation*ECMAScript 4 のリファレンス実装を導入してみた
ecmascript.org に ES4 のリファレンス実装が公開されていたので導入してみた。

といっても、まだまだ初期バージョンで&lt;strong&gt;ほとんど動作しない&lt;/strong&gt;ので、導入はお薦めできない。

動かしてみたらこんな感じ。
&gt;|sh|
&gt;&gt; var a = 3;
&gt;&gt; a
3
&gt;&gt; var b:int = 3;
**ERROR** VerifyError: unable to resolve fixture for multiname: {multiname: [ns
public '']::int } (near &lt;no filename&gt;:1.1-1.3)
&gt;&gt; var arr = [];
**ERROR** VerifyError: unable to resolve fixture for multiname: {multiname: [ns
public '']::int } (near &lt;no filename&gt;:1.1-1.3)
||&lt;
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071030/es4_overview&quot;&gt;Draft に書いてある新機能&lt;/a&gt; どころか、ES3 相当の文法でもエラーになっちゃう。

まあ、この程度ってこった…。ほとんど遊べない。

こんな状態でもインストールしてみたい、という酔狂な人に向けて手順を公開しておく。環境は Windows XP＋Cygwin。Mac 版もあるので、SML/NJ を導入すれば動くと思う。

**1. Cygwin のインストール
&lt;a href=&quot;http://cygwin.com/&quot;&gt;Cygwin Information and Installation&lt;/a&gt; からインストーラをダウンロードして実行。パッケージの選択で、gcc・make・wget を追加でチェックするのを忘れずに。

既に Cygwin を導入している人は、gcc・make・wget が入っているか確認しておいてね。

**2. SML/NJ のインストール
&lt;a href=&quot;http://www.smlnj.org/dist/working/110.64/index.html&quot;&gt;SML/NJ 110.64&lt;/a&gt;を導入。Windows 版ではなく、Cygwin 版を導入する点に注意。

cygwin の bash を開いて、以下のコマンドをコンソールに貼り付けて実行する。
&gt;|sh|
# 環境変数の設定
export SMLNJ_CYGWIN_RUNTIME=1

# SML/NJ のダウンロード -&gt; 展開 -&gt; インストール
d=/usr/share/smlnj
mkdir $d
cd $d
v=110.64
wget http://smlnj.cs.uchicago.edu/dist/working/$v/config.tgz
gunzip &lt;config.tgz | tar xf -
config/install.sh
||&lt;

ビルドが始まるので、しばらく待機。
&gt;||
    :
    :
[compiling (2660-export.cm):2660-export.sml]
[code: 221, data: 37, env: 40 bytes]
config/install.sh: Installation complete.
||&lt;
これで、成功。

(参考：&lt;a href=&quot;http://d.hatena.ne.jp/netPlant/20060918#1158592862&quot;&gt;Isabelle のインストール for Cygwin - 箱庭のオンガク。&lt;/a&gt;)

**3. ES4 reference interpreter を導入
&lt;a href=&quot;http://www.ecmascript.org/download.php&quot;&gt;http://www.ecmascript.org/download.php&lt;/a&gt; から es4-pre-release.M0.cygwin-x86.tar.gz をダウンロードする。

あとは展開して es4 を実行すればよい。smlnj にパスを通しておくのを忘れずに。
&gt;|sh|
$ export PATH=$PATH:/usr/share/smlnj/bin

$ ls
es4-pre-release.M0.cygwin-x86.tar.gz

$ tar xvfz es4-pre-release.M0.cygwin-x86.tar.gz
es4
es4/decimal.exe
es4/es4
es4/es4.heap.x86-cygwin
es4/LICENSE

$ cd es4

$ ./es4
&gt;&gt;
||&lt;

&amp;gt;&amp;gt;と表示されれば成功。

もし、
&gt;|bash|
The Cygwin release of the ECMAScript Edition 4 Reference implementation
currently requires an installation of SML/NJ.

Please install SML/NJ version 110.64 or later.

You can download the latest version of SML/NJ from http://www.smlnj.org.
||&lt;
と表示されるなら、SML/NJ のインストールに失敗したか、パスが通っていないかのどちらかだろう。
</body>
<comments>
<comment>
<username>mal_blue</username>
<body>ソース落として、builtins の中とか眺めるほうが面白いかも。meta::invoke、meta::get、meta::set あたりは遊べます。古い情報も豊富ですが…</body>
<timestamp>1193766086</timestamp>
</comment>
<comment>
<username>mayuki</username>
<body>es4-pre-release.M1.windows-x86.zip があったので run.exe を実行したら一応動きました(Cygwinなしで動きます)。</body>
<timestamp>1194002072</timestamp>
</comment>
<comment>
<username>mal_blue</username>
<body>RI-M1 適当に試してみました。http://malblue.tumblr.com/post/18243438&lt;br&gt;M0 よりは大分ましな様子。</body>
<timestamp>1194084794</timestamp>
</comment>
</comments>
</day>
<day date="2007-11-01" title="">
<body>
*adobe_max1_sneak_peek*Adobe MAX レポート：Sneak Peek
１日目の最後のイベント。Sneak Peek に出てくるネタは開発中・実験中のものであり、Adobe の製品に実装される予定があるわけではない。

α版より前のモックアップ版、ぐらいに捕らえておくのがよさそう。
====
-Flash Lite3 で動画再生
-Share (オンラインファイル共有)
-Fireworks NEXT で Flex?
--CS3 でスキンいじれる
--RIA Moutainer
-Photoshop Express
--Web版のPhotoshop
--色調補正、赤目補正
--History が残っている、Undo,Redo&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142530.jpg&quot; width=&quot;400&quot; height=&quot;317&quot;&gt;
--フィルタ：スケッチ、背景色変更・・・などなど
-Visual Communicator
--タイムラインに文字と画像をあてはめて
--ビデオや写真を混ぜ込んでニュース風
--配信用のビデオ素材を簡単に作れる
--Windows Movie Maker の Adobe 版と考えると分かりやすい
-WebからDTP
--InDesign server + Flex
---テンプレートツール
---画像やテキストを置き換え
--Print or PDF として出力
-Flash Player Next &quot;Astro&quot;
--マルチリンガル
--段組、表組み
--ビデオの3D
--AIF
-Flash NEXT
--モーショントゥイーンをパスで設定できる
---キーフレームという概念がなくなる(?)
---初めから終わりにパスが引かれる
---パスを移動させれば、トゥイーンの開始点、終了点ともに移動できる
--ボーン
---手足がガコン、ガコンと動く&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142529.jpg&quot; width=&quot;400&quot; height=&quot;307&quot;&gt;

*adobe_max1_flex_consumer*Adobe MAX リアルタイムメモ：ここまでできる Flex コンシューマ向けアプリ
目次
+Flexとは
+MAX Reservation System
+Flexの未来
+質疑応答
+オマケ ～AIR で作るMessenger～

====
MAX Reservation System について

**メンバ
Flex 側5名。
-アーキテクト
-UI Design
-PG
-Operator
-Testor

サーバー側システムは別の会社。

**ワークフロー
-デザイン側
++UserExperience (Illustratorなどで使い勝手を検討)
++Visual Design (Photoshopなどでデザインを固める)
++Flash (.fla で MC や SWC を準備)
++MXML (FlexBuilderでレイアウトや遷移)
++ActionScript (ビジュアルエレメントをASで分離)
-ロジック側
++MXML
++AS (サーバー通信や制御)
++結合

**スケジュール
-デザイン側
--UI: １週間
--デザイン: １週間
--MXML: 2日
--スキニング: 8日
-ロジック側
--アーキテクチャの検討: 2日
--実装開始: 3日
--サーバーインターフェーステスト: 9日
--通信テスト: 2日
--統合テスト: 11日

**アーキテクチャ
-MXML/ASの分離
++MXMLに全部書く
---作業分担しにくい
++MXMLに埋め込む (ASファイル)
++MXMLから分離する
---クラスとして分離する。再利用性よい
---IMXMLObject（ViewLogic）として埋め込む
-MVC
--C: V と１対１
--M-&gt;V: Data bindings
-Web Service
--XML or SOAP -&gt; SOAP を採用
--WSDL で自動定義
-カスタムコンポーネント
--Progress Stepper
---全体フローの進捗表示
---難易度の表示
--本質部分の共通化を行う

**スキニング -スキンのあて方-
-スキニングとは
--コンポーネントのビジュアルエレメントを修正、または置換すること
-方法
++CSS: 幅、高さは制御できない。色や丸みなどを指定するもの
++GraphicSkin: 画像ファイルをスキンとして当てる。
++SkinClass: ASで作るスキンのクラス。ProgrammaticSkin, Border など
---UIComponent は何も表示しない
---Button に対して、ButtonSkin.as が当てられる
++FlexComponentKit: Flashで作った MC を利用するキット。
---Flash で MC を作って、 SWC として書き出す。
---UIMovieClip クラスとして Flex から使う

**総括
-UI の細かな配慮をもう少ししたかった
-１ヶ月でリリースできたのはすごいこと

**Flex が市民権を得るには
-現状
--デザイナの不足
---Flexデザインできる人がいない
---Flexデザインが難しい
--従来のシステム開発フロー
--見た目よりも機能
--GUIオーサリングだけでデザインできない
--プログラミングのスキルが必要

デザインを簡単に作れるようになっていけば、もっと広がっていくのではないか。

*adobe_max1_flex_best_practice*Adobe MAX リアルタイムレポート：Flex採用時のプロジェクトのワークフローとベストプラクティス
id:sato-shi さん。

クラスメソッド：二十数件の Flex プロジェクト実績、AIRも数件。

目次
-事例から見る成功談/失敗談
-プロジェクト開発標準
-設計手法とベストプラクティス
-AIRが業務アプリケーションに与える可能性
====
**業務向けRIA開発プロジェクト
-経済的な効果がある
--開発できること
---疎結合
---標準コンポーネント
--メリット

**プロジェクトの経験則
-凝ったUIは後で困る （コンセプトが変わったときに作り直しになる）
-別の担当者が作業できるように

Flexの事前説明
-Flexで何ができるの？
-VB・Delphi より優れているもの
-事例を紹介する
--モックでは理解してもらえない

**失敗事例
-超高度なUIを提案してしまう
--標準コンポーネントをいかに使うかが鍵
-UIは天からの鶴の一声がかかりやすい
--鶴を押さえておく
-スコープが定まらない
-追加され続けている
-使用が落ち着かない（事前説明）
--「普通あるでしょ」
--Undo, Redo など
-サーバーが正しくないと苦しい
--バッグがひどいのに、フロントをリッチにするのはよくない
-夢

**ひまわり証券の成功事例
-基本アーキテクチャの設計支援
--後で戻り作業が発生しないよう調整
-標準コンポーネントを使用した画面作成
-カスタムコンポーネント実装
--標準では無理なところのみ、カスタムコンポーネントを使う

UI 要求仕様から切り分けてスケジューリングする

-描画の回数を抑える
-FDS は未定だったので自作した

**ビデオリサーチインタラクティブの成功事例
+方向付け
--アーキテクチャを考えながら
+推敲フェーズ
--実装アーキテクチャを固める
+作成フェーズ
--各層に分かれて開発。チームわけ
--機能の完成を最優先
+移行フェーズ
--UIの微調整

できるカスタムコンポーネントをディベロッパーから提案する

**実装の工夫
-IMXMLObject
--MXMLには View の情報のみを実装する
--IMXMLを継承したHelperに実装を書く

**某金融案件
-既存サービス
--Delphi &lt;-&gt; Oracle
-提案
--FDS
--Oracleからの通知をFDS/Javaが中継して、必要なクライアントに通知する
--DB はそのまま

-Selector
--ASで条件式を書いて、受信相手を決定する
--特定クライアントグループへのメッセージ送信

-成功した理由を考察
--顧客が実現可能なUIを理解してくれた
--見た目より機能を重視した

**AIR
-
-ローカルリソースへのアクセス
-暗号化して保存
-ワンクリックでのインストール、アップデート簡単

最後、宣伝。

質疑応答
-Cairngorm はファイル数が爆発した

*max1_art_of_presstube*Adobe MAX レポート：ドローイングとプログラミングの美しき衝突：The Art of Presstube
海外アーティストのPVなども手がける James Paterson 氏。
====
**歴史
-子供の頃、NINTENDO（ファミコン）を買って欲しかったが、与えられたのはコンピュータだった
-17歳(?)で Flash を使って創り始めた
--最初の作品：ひどい例 (sex.swf)&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071104/20071104133410.jpg&quot; width=&quot;300&quot; height=&quot;184&quot;&gt;
--コマ送りアニメーション&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142139.jpg&quot; width=&quot;350&quot; height=&quot;288&quot;&gt;
-大学２年で大学やめて、Web 会社に
-アミットピタルとの出会い
--作品を通してお互いに知っていた
--実は近くに住んでいた。
--作品作りのパートナーに

**スクリプトの開始
-描いた絵をスキャンした(3000～4000)
--小さな素材をランダムに組み合わせる作品&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103135740.jpg&quot; width=&quot;350&quot; height=&quot;255&quot;&gt;
--スケートボードの上に貼り付ける
--壁の壁面に絵を貼り付けたようなイメージ（壁面の絵がアニメーションする）&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142526.jpg&quot; width=&quot;200&quot; height=&quot;143&quot;&gt;

**色の実験
-静止画&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071104/20071104133929.jpg&quot; width=&quot;350&quot; height=&quot;228&quot;&gt;
-動くようにした
--ゆっくりとスクロールする
--回転しながら浮かび上がってくるアニメーション
-楽器のようにアニメーションを作る
--アニメータがライブのようにアニメーションをつくる → ビョークの作品へ
--回転させたり、透明度を変えたり

**ロンダ (RHONDA)
&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142142.jpg&quot; width=&quot;250&quot; height=&quot;167&quot; align=&quot;right&quot;&gt;&lt;
-ペンとトラックボール
-ペンで線を書く
-トラックボールで回転
-面に接している点を教える
-結びながら3D画像を書く
&gt;&lt;br clear=&quot;all&quot;&gt;&lt;

**ダンサーとのコラボレーション
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103135743.jpg&quot; width=&quot;450&quot; height=&quot;168&quot;&gt;&lt;/center&gt;&lt;
-ダンサー＋Flash の作品
--左の写真の黒いシルエットがダンサー
--背景の映像がFlash
-自作ツールの紹介
--ダンサーのポーズ、配置、角度などを選ぶ
--間はアニメーションで（自動的に？）埋められる

**シンプルなもの
-噴水のようなもの、遊びまわるイメージ
-アミットさんがピアノひいてる
-自分の子供の頃の声を利用

**商業的な作品
アートだけでは生活できない
-ポップのプロジェクト
--商業のアイコンを配置
-サンドイッチのキャンペーン
--ボタン飛ばし
--グリルを手にもった男の子
-NIKE
妥協しなければいいものができる

**スクリプトの上達
-コリンさんにヘルプを求めた
--なぜかレースカーの教習所に連れて行かれた
--昼は車の練習、夜はスクリプトの練習
-動き回るヘアードライアーマン&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103135742.jpg&quot; width=&quot;146&quot; height=&quot;131&quot;&gt;
-ゲーム的な要素
-ツリー構造を別の見せ方&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142138.jpg&quot; width=&quot;350&quot; height=&quot;242&quot;&gt;

**素材
-素材のアニメーション作成&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142140.jpg&quot; width=&quot;350&quot; height=&quot;255&quot;&gt;
-スケッチブックの素材を活用する&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142141.jpg&quot; width=&quot;350&quot; height=&quot;248&quot;&gt;

*max1_niconico*Adobe MAX  リアルタイムレポート：ニコニコ動画とFlash
ドワンゴ 戀塚さん。

まとめのクオリティよりもリアルタイム性を重視したメモ。たぶん後で資料公開されるので、正確な情報はそちらにて。

(追記)公開されたようです
-&lt;a href=&quot;http://info.dwango.co.jp/rd/?p=6&quot;&gt;dwango research and development dept. ≫ Blog Archive ≫ Adobe Max Japan 2007 講演資料「ニコニコ動画とFlash」&lt;/a&gt;

ニュースサイトにも記事が出たようです。
-&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0711/02/news007.html&quot;&gt;開発者が明かす「ニコニコ動画」人気の“キモ” - ITmedia News&lt;/a&gt;
-&lt;a href=&quot;http://www.atmarkit.co.jp/news/200711/01/niconico.html&quot;&gt;ドワンゴ開発者が語る「ニコニコ動画」の中身 － ＠IT&lt;/a&gt;
-&lt;a href=&quot;http://codezine.jp/a/article/aid/1847.aspx&quot;&gt;CodeZine：【Adobe MAX Japan 2007】 ニコニコ動画がActionScript 2を採用したワケ（レポート）&lt;/a&gt;

====
**ニコニコ動画とは
2.1 参加方法
+動画投稿
--意見を問いながら投稿できる
--コメントをもらえてモチベーションが高まる
--既存動画を加工する。２次３次加工が容認されている
+マイリスト登録
--いわゆるお気に入り
--ランキングに反映される
+タグ付け
--勝手につけられる。
---同義語はボランティアがまとめてくれる
---荒らしも発生する。
--整理タグ
---「ニコニコ動画講座」「歌ってみた」
--ネタタグ
---「孔明の罠」「吹いたら負け」
+ニコニコ市場
--ネタ商品やコメントからの紹介
+ネタ商品の購入
+コメント
--感想、字幕、ツッコミ、指摘・解説、合唱(=弾幕)、演出(コメントアート・職人)、空耳
--コメントを投稿しやすいようなUIにしている

2.2 適度な匿名性
-匿名のメリット
--すぐに参加できる
---いまいる人に溶け込む努力が不要
---色眼鏡がつかずに受け止めてくれる

2.3 ニコニコシリーズ
-SMILEVIDEO
-ニコニコ動画モバイル
--DoCoMo, au で利用できる
-ニコニコ市場

まとめ
-動画を核として盛り上げる
-視聴者の力が大きい

**コンセプト
-設計
--命題：動画アノテーションを普及させる
--アイデア：コメントが飛ぶ
---コメントがコンテンツである
-画面サイズ
--Flashのプレーヤー全体：952x540
--動画：512x384
コメント入力
-動画下にコメント欄
-コマンドは分かる人のみ分かるように、あえてとっつきにくく
変遷
-仮→β→γ→RC→RC2&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142528.jpg&quot; width=&quot;429&quot; height=&quot;200&quot;&gt;

仮
-当初は当たるかどうかは不明なので、おそるおそるスモールスタート
--動画は外部サイトに頼る（マッシュアップ）
--手がかかってないように見えるが、みためがきれいな Web2.0 への反感をこめてシンプルにしている
-UIの根幹（コメント機能）は既に完成されている
--複数行入力に対応していた (AA)

β
-いけるぞ、となって手を入れた
--手書き風フォントはここから
--見た目の再構成

γ
-SMILEVIDEO
-複数行入力の禁止（告知はせずに×印をつけた）

RC
-有料会員制度
-バナーを入れたら非難ごうごうだったので、ニュース置き場にした
-下のレイアウトをシンプルに （名前欄の廃止）
-過去ログ機能 （有料会員専用）

RC2
-プレーヤーを刷新
-右側に機能を追加 （荒らし対策、投稿者コメント）

**プレーヤーの中身
プレイヤーは AS2
-YouTube 対応や Wii への対応を考えて、AS2
-ファイルフォーマットは FLV
動画/スレッドの概念
-代表スレッド1つ、と、スレッドが複数
-スレッドID
--10進数10桁
-動画ID
--smXXXXX
--代表スレッドが選ばれる
コメントのレイアウト
-設計のポイント
--読みやすい
-分かりやすい
--書き込んでもらいやすいように
-適度に刺激的な情報量
--読むのに集中しなければならない程度
--前のシーンのコメントが残っていると興ざめ
-再現性
--表示位置が他の人でも同じである必要がある
--コメントアートの発達など
衝突判定
-長いコメントほど早く流れる（コメントは３秒間滞在）
--表示中のすべての時間において衝突しないように計算を行う。
---（例）短いメッセージに長いメッセージが追いつく &lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103142527.jpg&quot; width=&quot;350&quot; height=&quot;247&quot;&gt;
-収まりきらないときは乱数で配置 → 弾幕
---あえてばらばら感を演出して、臨場感をだす。
---再現性には違反するが、どちみち読めない。
-色、大きさ
-古いコメントは透明に
-コメント数は最大30（経験則）
--超えた場合は、先に消える位置にあるものを消す
-終端の調整
--３秒を確保できない
--一律に３秒前にずらしている (３秒前に密度が上がってしまう問題はある)

AS2 での開発
-Flash では #include &quot;hoge.as&quot; だけ
-１フレームだけ

まとめ
-意外に苦労してるでしょ

**コメントの通信
-リアルタイム通信の必要なし
--リアルタイム感は動画の時間軸で再現できる
-XmlSocket HTTP/1.1
パケット定義
-Exel からジェネレート
メッセージサーバー
-C++, Linux デーモン
-crossdomain.xml/GZIP
メッセージサーバー
-CSV
-カタログ機能だけDBにまかせる
特徴
-通信を最小限
-ステートレス
-Cookieも使わない
--ボトルネックとなりやすい場所なのでシンプルに

**開発体制
-Subversionのリポジトリで管理
-共同の所有権
-ドキュメントは Wiki
-同期ツール
--メーリングリストに流す

**今後の展望
-随時改良
-AS3 に移行？
-H.264対応？

Web+DB 42 に技術資料が出るらしい！

*max1_kichou*Adobe MAX リアルタイムレポート：基調講演
開始前の様子。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071101/20071101102935.jpg&quot; width=&quot;350&quot; height=&quot;141&quot;&gt;&lt;/center&gt;&lt;
====
**社長の話
概要

**Kevin Lynch
コンテンツを提供するメディアが変わってきた
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103145904.jpg&quot; width=&quot;400&quot; height=&quot;254&quot;&gt;&lt;/center&gt;&lt;
+1980年代：フロッピー
+1990年代：CD-ROM
+2000年代：ネットワーク

重要なのは次のような５つのこと：
+コンテンツの重要性&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103145754.jpg&quot; width=&quot;400&quot; height=&quot;291&quot;&gt;
--見た目にこだわりがちだけど、コンテンツありき
+パーソナライズ&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103145755.jpg&quot; width=&quot;400&quot; height=&quot;287&quot;&gt;
--全ての人に同じものを見せるのではなく、TPO に合わせて見せ方を変える
+少ないことはよいことだ&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103145756.jpg&quot; width=&quot;400&quot; height=&quot;296&quot;&gt;
--シンプルなことが好まれる
+動きに意味をもたせよう&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103145757.jpg&quot; width=&quot;400&quot; height=&quot;288&quot;&gt;
--人は動きに注目する
--何でもかんでもアニメーションさせるのではなく、理解を助けるためにアニメーションを利用する
+創るのはUIではなく経験&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103161336.jpg&quot; width=&quot;400&quot; height=&quot;284&quot;&gt;
--全ては最高の &quot;Experience&quot; のために

サンプル紹介
-自転車ツアーのデモ
-http://www.amgentourofcalifornia.com/docroot/tourtracker2/index.html

Video
-H.264
--Moviestar でサポート
-品質の差（デモ）
--CS3 で使える
--480p、フルスクリーンでは見れない
--720p、高画質、高音質
-Adobe Media Player
--RSSでファイルを拾う（Y!などの王手やロングテールと提携）
--広告だせる、無償のビデオも出せる
--Flash overlay できる

RIA
-Buzzword (Flexを使ってる→ブラウザの中で動く)
-ワープロ
-同時編集、履歴、

**AIR の状況 マイク・ダウニー
-αのときの声をもとに、SQLite を追加した（コミュニティの声を聞いてるよ）
-アプリケーション事例 (Salesforce)
--オフライン機能
--オフラインでもVCardを追加して設定できる。
--AIRで設定した情報を、ブラウザから確認できる。
--既存のコードを活用して、１人が数日で開発できた。

**Ted Patrick
新機能：プロファイラ、高度なコンポーネント、フレームワークキャッシング

Flex Builderのデモ
-プロファイラでインスタンスの一覧を表示
-関数のトータル使用時間
-呼び出し元をたどれる
-定義先にジャンプできる
-右クリックからリファクタリング
--変更先のプレビュー
-メモリ使用量のライブ表示
-TreeDataGrid

**再び Kevin
-AIR
--多くの企業がアプリケーションを開発している&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103135745.jpg&quot; width=&quot;300&quot; height=&quot;213&quot;&gt;
---ebay, AOL, FedEx, Paypal....
--具体例7つ
---ブラウザの一部を表示するもの、Google Analytics  のやつ、Twitter のクライアント、Pronto! のE-mailツール、Paypalの売り上げ情報ツール、digimix という音楽mixツール
---Paypal から E-mail ツールにドラッグドラップするのがすごい。
---アンソロポロジー(?)のすごいAIRアプリ
---ローカルにデータをキャッシュしてるからできる高速な検索、絞込み
-Astro (時期Flash Player)：概要の紹介だけ

**Thermo
US の MAX と同じデモ → 参考: &lt;a href=&quot;http://aralbalkan.com/1050&quot;&gt;Video: Thermo Sneak Peek at Adobe MAX Day 2 Keynote at Aral Balkan&lt;/a&gt;
-デザイナがFlexツールを作る
-Photoshopから読み取り
--mx:graphics, mx:fill などが MXML で生成される
-右クリックから TextInput 化、List 化
--メモ： mx:borderSkinFactory
-マウスオーバーのstate設定
# Expression 意識しまくりですね

β版が来年

**夏野さん＠NTT DoCoMo Adobe×DoCoMo
-Flash搭載端末搭載 7961万台
--某aさん6～７割、某sさん5割
--ポータルサイトへのアクセスの94%がFlash対応端末
--ポータルサイトは完全にFlash対応
--Flashを活用して UI がグラフィカルに
--モバイルサービスは毎年1000億円増収してきている
-PDFビューワ搭載 2591万台
-iチャネル 1387万人
--必要な情報をテロップ表示
--FlashCastを利用
--おこのみチャンネル
---FlashCastを買った一般人が、iチャネル向けに配信できる
</body>
</day>
<day date="2007-11-02" title="">
<body>
*shibuya_js_report*The Future of JavaScript メモ
&lt;a href=&quot;http://www.mozilla-japan.org/events/2007/javascript/&quot;&gt;The Future of JavaScript -presented by Mozilla &amp; Shibuya.JS-&lt;/a&gt; のメモ。

-発表資料： &lt;a href=&quot;http://www.mozilla-japan.org/events/2007/javascript/tamarin-es4.pdf&quot;&gt;John Resig: Tamarin and ECMAScript 4 (PDF)&lt;/a&gt;

ES4 の概要は &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071030/es4_overview&quot;&gt;ECMAScript 4 の Draft をざっくり読んでみた - てっく煮ブログ&lt;/a&gt; で Overview を読んで勉強したので、だいたい知ってることだった。

ここでは概要と細かなところを、まとめておく。（間違いがあったらツッコミください）
====
**概要
3つのプロジェクト
+ActionMonkey
--Tamarin を Spidermonkey に統合
--これを JavaScript2 として Firefox 4 に搭載
+ScreamingMonkey
--IE に Tamarin を統合するもの
--MS が ES4 を実装することは期待できない
+IronMonkey
--Python と Ruby を Tamarin で動くようにする
**目標
-ES3 のコードが動くこと
-大規模なシステムで動くように
-ライブラリの再利用性
-AS3 をマージする
-ES3 のバグを直す
-小さなプログラムも書けるように

**細かい仕様
-多重継承は水面下でバトル中
-arguments は...
--deplicated
--Array になる
--Arguments.callee も残る
-AS4 は ES4 に沿うために、AS3 と下位互換性がなくなる
-is like はクラスも含めたもの。like は type のみ。
-Map の Object は === で評価される
-use で名前空間をトグルできる
-リファレンス実装の大部分はES4で定義されている（Self-Hosting）。
-prototype は広くは理解してもらえないのでクラスベースにした
-ScreamingMonkey は Firefox と Flash で配布していく予定
--IE で使うときは Flash インクルード？
-関数型言語なカーリー化や遅延評価はサポートされない

**日本の JavaScript 最新動向
-&lt;a href=&quot;http://labs.cybozu.co.jp/blog/takesako/2007/11/shibuyajs_for_john_resig.html&quot;&gt;TAKESAKO @ Yet another Cybozu Labs: Shibuya.JS Digest (for John Resig) 発表資料公開しました&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20071105/1194235279&quot;&gt;John Resig を囲う会の資料を公開します！ - IT戦記&lt;/a&gt;

**質疑応答
amachang と &lt;del datetime=&quot;2007-11-07T20:04:45+09:00&quot;&gt;piro たん&lt;/del&gt;小林悠さんがメインで質問。Resig たんが回等。
-ライブラリの機能を元のソースをいじることなく、外からいじることができなくなるのは悲しい
--プロトタイプを介して、プロパティや関数を追加することはできる
-ライブラリはどういう方向で書かれることになるのか
--どれでもできるよ。
--私はJava ライクな書き方がすき。
-type と interface の違い
--（色々言ってたきがするけど抜け落ちてる）
--is は class で type は like で評価する。（「なんとかしたかったんだけど、そう決まっちゃった」みたいなことを言っていたような気がした）
-ブラウザ実装
--Opera が作業開始してる
--Apple が WG に来て質問はしてるので、計画はあるはず
--Rhino は JS2 をやると言っている。既に1.3を実装してる（1.7では？というツッコミあり。）
-ES4 の this はどうなる？？
--bugfix
--理解できなかった。id:amachang の補足エントリに期待
-class method に対して apply(), call() はできるか
--できる！
-ES4 がごちゃごちゃしてる。C++ の二の舞では？
--スタートが今までより難しくなったことはない。シンプルさは残っている
--さらにパワフルに使いたい人に向けての拡張だと理解して欲しい
-コロンに色々な意味が入っている。初心者が上級者のコードを読みにくくなるのでは？
--今でも経験者のコードは難しい。（クロージャとかprototypeとか）
--もちろん、今より複雑になるが、今より状況が悪くなることはない。
-Function でダイナミックに関数を作れたが、Class をダイナミックにジェネレートできるか
--グローバルクラスを操作する方法はない
--演算子などの intrinsic な名前空間のものをオーバーライトしていくことはできる。
--intrinsic は書かなくてもよい？　デフォルトでそうなる。
-anonymous class が欲しい → new (class {})()
--クラスの目的は複数回インスタンス化するときのもの。
--動的に拡張したいなら、親クラスをインスタンス化して拡張すればよい
-ES4 の標準ライブラリがあったら便利では？
--Map と Vector を実装することしか考えていない
--JSON のサポートも辞めようという話も出ている
-64bit int が欲しい。DB の id が 64bit なの…
--グループでも話がでたが、やらない！
--議事録は ES4 Wiki を見てね
-スレッドが欲しいよね
--ES4 の中に実装することはない
--Google Gears のように実装側で対応するものだと考えている
--一応議題には上がっているが期待はできない
-継続(continuation)は言語でサポートしなければできないが...
--話にはあがったが、入れない
-ES4 の VM は AVM4 になるもの想像できるが、共通のバイトコード化の話はあるのか
--既に出ている
--Tamarin の一部として出る。
--今は Adobe から貰ったものそのまま。
-ES4 の処理速度は。strict ではなく duck typing を使えば遅くなるか
--VM の実装方法による
--Tamarin にはかなりの量の最適化が行われている
--一例として Fast path optimization がある
--代入したものによって、コンテンツを調べる
-var a = [1,2,3]; var a2 = a.pop; var b = a2() は？
--this のコンテキストが変わってるのでエラーになる
-evalは
--eval した結果をキャッシュする仕組みが Firefox で実装される(?)

**じゃんけん大会
サイン入りマウスパッドを賭けた戦い。
+チョキ
+チョキ
+チョキ
+パー
+パー

*adobe_max2_designer_app*Adobe MAX リアルタイムレポート：求む！デザイナによるアプリケーション開発
後日PDF配信予定だそう。
====
**前説
-前提
--薄型有機EL、曲がる
--５年後に書店に有機EL広告の可能性
-コンテンツがBitのまま流通していく
--アナログ（紙）という定着を挟むことなく流通していく
--その結果、
---コンテンツの更新
---パーソナライズ
---インタラクティブ、リアルタイム性、モーション
--「コンテンツのアプリケーション」化
--コンピュータの上で流通する → 再生環境の仕組みを理解する
---RGBやCMYK、輪転を知らないデザイナは一流ではない。
---同様のことがアプリケーション開発についても言える。
-Webの普及多様化するデザイン
--PCや携帯を通し、４大メディアのコンテンツがIPに乗る
--一般人がコンテンツをやり取りしてコミュニケーションするようになる
--Cross-Media Publishing (雑誌、Web、RIA で公開)
-Adobeの強み
--デザイナはAI,PSのノウハウを持っている
--AI、PSを中心として、Output先ごとに違う製品を提供している&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071103/20071103135744.jpg&quot; width=&quot;350&quot; height=&quot;314&quot;&gt;

**STEP1: インターフェースデザインの基本的な流れ
+Ps,Ai: デザイン素材
+Fw: コンポーネントをMXMLに
++「Window-&gt;共有ライブラリ」から、「Flex Components」を選ぶ。
++必要なコンポーネントを配置していく
++「MXMLとイメージ」で書き出しを行う
+Fx: コードを開発
++Flex プロジェクトを作成
++Web application(Flex) と Desktop application（AIR）を選択する
++Flex Builderにドラッグアンドドロップで出力したファイルをコピーする
++MXMLを開くと、プレビューできる

**STEP2: FlexとMXML - Flex は誰のもの？
-Flex も Flash も SWF を出力するツール
-MXML(HTMLのような文法)で配置できる
-CSSで見た目を定義
--&lt;a href=&quot;http://examples.adobe.com/flex2/consulting/styleexplorer/Flex2StyleExplorer.html&quot;&gt;Flex2 Style Explorer&lt;/a&gt;
--&lt;mx:Style&gt;に張り込む
-Design Extendsions for CS3
--AI などで作成して、保存 (→SWFが書き出される)
--Flex Builder から読み込む

**STEP3: アプリケーション開発の入口
-Flash でSWFを作る
-Image source で SWF を入れる
-アプリケーション記述ファイルを修正して

**STEP4: OSSの活用
&lt;a href=&quot;http://quietlyscheming.com/blog/components/flexbook/&quot;&gt;Flex Book&lt;/a&gt; を活用。

**STEP5: デザイナと開発者の線引き
MXMLを吐いたりできるようになれば、内製化率が上がって、利益率が上がるよ。

**STEP6: Thermo 開発中

*adobe_max2_interaction_design*Adobe MAX レポート：インタラクションデザインの実際：アイデアの開発
超有名な中村勇吾氏によるセッション。開場前に長蛇の列ができていて、人気なんだなぁ、と思った。
====
**導入
-言葉
--「言葉、文法」＋「組み合わせ、配置」→「文章」
--「あなた」「は」「美しい」は言葉以上の意味が出る
-デザインでもそうだよ
--VOCABULARY（語彙・手法） ＋ COMPOSITION（構成・バランス）
--組み合わさって、「新たな単位」
--言語や素材を組み合わせていかにいい作品、広告にするか

**Reactive Field
反応して快感（クリックして楽しい）→前後で認識が変わる感覚→空間な感じ

-&lt;a href=&quot;http://yugop.com/ver2/typo.swf&quot;&gt;TenKey Study&lt;/a&gt;
--キーボードのタイミングテストを生かして作った
-&lt;a href=&quot;http://yugop.com/ver2/works/monalisa.swf&quot;&gt;MONALISA&lt;/a&gt;
--モナリザを載せてみた
--顔が変形するのがおもしろい
-&lt;a href=&quot;http://yugop.com/ver3/index.asp?id=28&quot;&gt;VAIONET100&lt;/a&gt;
--触ってると物理法則（ルール）がわかる
-&lt;a href=&quot;http://yugop.com/ver3/index.asp?id=32&quot;&gt;BlackRibbon&lt;/a&gt; (注：自分の環境では激重だった)
--2次元に見えて3次元
-&lt;a href=&quot;http://www.intentionallies.co.jp/&quot;&gt;Intentionallies&lt;/a&gt;
--剛体シミュレーション
--デスクトップ
-&lt;a href=&quot;http://scr.sc/products/kazetodesktop/&quot;&gt;KAZE TO DESKTOP&lt;/a&gt;

作ってから面白さを分析して次に生かす。これの繰り返し。

**Kinetic Composition
いわゆる moticon graphics のこと。

起承転結、ストーリーへのアンチテーゼ→反復の快感→様相、トーン名

-&lt;a href=&quot;http://yugop.com/ver3/stuff/03/fla.html&quot;&gt;Industorious Clock&lt;/a&gt;
--時計は見ていて飽きない
--実写との組み合わせ実験
-&lt;a href=&quot;http://yugop.com/ver3/index.asp?id=29&quot;&gt;ClockBlock&lt;/a&gt;
--実写との組み合わせを進める
-&lt;a href=&quot;http://amana.jp/company/tsutawaru/&quot;&gt;Communication Evolved&lt;/a&gt;
--長い動画のキャンペーンサイトは見てられない
--面白い瞬間を交互に見せることで、なんとなく見続けたくなる。
-&lt;a href=&quot;http://uniqlo.archive.tha.jp/teaser/index.html&quot;&gt;Uniqlo NT Teaser&lt;/a&gt;
--時間に追われて使いまわし？？？
-WaterClock Beta&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071104/20071104130753.jpg&quot; width=&quot;350&quot; height=&quot;260&quot;&gt;
--１分に１回、ブロックを落とす。スローモーション。
--最初はベクターに見えるが、実は実写。
--瞬間瞬間できれいなので見てられる
--技術的な難易度は少ないけど、おもしろいならそれであり

**Co-Existence
時間軸の再編成→共存空間

3Dすげーというのを見せるだけではつまらない。適切なものを効果的に配置するのが重要。
-&lt;a href=&quot;http://yugop.com/ver3/index.asp?id=5&quot;&gt;fingertracks&lt;/a&gt;
--マウスレコード
--違う時間にアクセスした人をそろえる (&lt;a href=&quot;http://yugop.com/ver3/index.asp?id=9&quot;&gt;STUDY-D1&lt;/a&gt;)
-&lt;a href=&quot;https://www.ecotonoha.com/&quot;&gt;エコトノハ&lt;/a&gt;
--いままでのユーザーがクリックする状態を記録して表示する
--みんなでやってる感
-&lt;a href=&quot;http://tfm.p.tha.jp/&quot;&gt;FM Festival '04&lt;/a&gt;
--サビのいいところをクリックして共有
--ニコニコが出てきて、ありふれたものになってしまったので、今後は使いにくい
-&lt;a href=&quot;http://www.tfm.co.jp/sweet/&quot;&gt;Honda Sweet Mission&lt;/a&gt;
--投稿音声
--テキスト入力したメッセージをしゃべらせる

**Live Form
投稿した内容を反映して、見た目が変更される
-&lt;a href=&quot;http://amaztype.tha.jp/&quot;&gt;amaztype&lt;/a&gt;
--検索結果表示
-&lt;a href=&quot;http://www.uniqlo.com/us/&quot;&gt;Uniqlo USA&lt;/a&gt;
--GAPなどの有名ブランドが既にいるアメリカで、個性をアピールするサイトにしたかった
--膨大な商品のデータを使ってモザイクを作成する
-&lt;a href=&quot;http://eye.kddi.com/&quot;&gt;KDDI EYE PROJECT&lt;/a&gt;
-&lt;a href=&quot;http://kashiwasato.com/&quot;&gt;KASHIWA SATO&lt;/a&gt;
--色をシンプルに見せる
--Eye-Project に比べて、少し肩の力を抜いたような見せ方
-&lt;a href=&quot;http://gyre-omotesando.com/&quot;&gt;GYRE&lt;/a&gt;
--text-to-speach＋音声加工（ローパス・ハイパス）
--うずまき

**まとめ
いろいろ実験して「あたりまえ化」しておく。やりつくして「あたりまえ化」したものを、次の作品のベースとして活用できる。

新しいものを実現していくだけではなく、当然のこととして乗り越えていく。技術に囚われないために技術を学ぶ。

**感想
考え方の手法は自分と大差ないんだけど、出てきたもののインパクトはすごい。まだまだ精進あるのみか。

自分としては、かっこいいことよりも分かりやすいことを実践していきたい。作例に出てきた KASHIWA SATO のサイトにしても、「落ち着かない」「疲れる」という意見が少なくないのも事実（参考：&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://kashiwasato.com/&quot;&gt;はてなブックマーク - KASHIWA SATO&lt;/a&gt;）。

触っていて理解できたときの喜びがあるのは確かだけど、触りたくなる工夫、触らなくても分かる UI を目指していきたい。
</body>
<comments>
<comment>
<username>mal_blue</username>
<body>&gt; type と interface の違い&lt;br&gt;&gt; is は class で type は like&lt;br&gt;わけわかんないですね(ぉ interface は静的型の定義、RecodeType は動的型の定義みたいに思ってましたが。&lt;br&gt;&lt;br&gt;&gt; Rhino は JS2 をやると言っている。既に1.3を実装してる&lt;br&gt;ftp.mozilla.org には 1.7pre がでてるし 1.7 かと。それにしても ３ヶ月くらい前まで spec わからんので JS2/ES4 の予定はないとか Rhino の中の人言ってたのに。&lt;br&gt;&lt;br&gt;リアルタイムレポートありがとうございました。これ以上は Resig 本人にツッコマないと意味ないのでこの辺で(^^</body>
<timestamp>1194019834</timestamp>
</comment>
<comment>
<username>HolyGrail</username>
<body>律儀にじゃんけん大会まで書いてあって笑ったｗ&lt;br&gt;リアルタイムレポート乙です！</body>
<timestamp>1194022092</timestamp>
</comment>
</comments>
</day>
<day date="2007-11-05" title="">
<body>
*kanasan_js1*[JavaScript][event]Kanasan.JS（prototype.js 読書会）に参加した
関西で JavaScript 勉強会を、ということで企画された &lt;a href=&quot;http://cotocoto.jp/event/2429&quot;&gt;Kanasan.JS&lt;/a&gt; に参加してきました。

細かなレポートは各所に上がってるので、今更まとめる必要はなさそうです。技術的なアレコレに関しては、以下の３つのエントリがよくできてます。
-&lt;a href=&quot;http://mono.kmc.gr.jp/~yhara/d/?date=20071103#p01&quot;&gt;Greenbear Diary - Kanasan.JS (別名：prototype.jsのソースにツッコミを入れるオフ) に参加してきました&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/hakobe932/20071103/1194108441&quot;&gt;ちょっとKanasan.JSまでいってきました - はこべにっき#&lt;/a&gt;
-&lt;a href=&quot;http://nanto.asablo.jp/blog/2007/11/04/1889765&quot;&gt;Kanasan.JS レポート: Days on the Moon&lt;/a&gt;
その他のレポートは、主催者のエントリ「&lt;a href=&quot;http://www.kanasansoft.com/weblab/2007/11/kanasanjs_1.html&quot;&gt;Kanasan.JS無事終了しました (Kanasansoft Web Lab.)&lt;/a&gt;」のトラックバックから辿れるので、そちらを参考に。

**K-conbinator
Prototype.K 関数についてだけ補足しておこう。

関数型な世界に K コンビネータとか I コンビネータというものがあるらしい（参考：&lt;a href=&quot;http://en.wikipedia.org/wiki/SKI_combinator_calculus&quot;&gt;SKI combinator calculus - Wikipedia, the free encyclopedia&lt;/a&gt;）。
-(&lt;b&gt;I&lt;/b&gt; x) = x 
-((&lt;b&gt;K&lt;/b&gt; x) y) = x 
Prototype.K は次のように定義されている。
&gt;|javascript|
  K: function(x) { return x }
||&lt;
これって &lt;strong&gt;I コンビネータ&lt;/strong&gt; だよね、というツッコミが入った。

K-conbinator と I-conbinator を JavaScript で実装するとこうなるのかな。
&gt;|javascript|
  I: function(x) { return x },
  K: function(x) { return function(){ return x } }
||&lt;

**感想
以下、感想。

参加者方々のポテンシャルの高さに唖然としてしまった。JavaScript 初心者といっても、他の言語の上級者が多かったようで、「Perl の○○と一緒だね」とか「Ruby の○○だ」とか「Lisp だと○○だよね」といった会話が飛び交ってる。

自分は prototype.js 1.4.1 を使ったこともあるので、開始時点では知ってる部類に入っていたはずなのに、気づいたら会話を理解するのに必死になってきた。レベル高いなぁ…。

今までは「動くものが書ければいいや」派だったんだけど、反省してもっと言語の深いところまで知っていかなきゃな。例えば、prototype の挙動についても、なんとなく理解はしているけど説明はできない。説明できない、ということは理解できてない、ということ。そう考えると、ちょっと凹み気味でした。

あとは、尊敬する JS ブロガーな &lt;a href=&quot;http://nanto.asablo.jp/blog/&quot;&gt;Days on the Moon&lt;/a&gt; の nanto_vi さんにお会いできたのが嬉しかった。ブログから想像してた通り、JS に対する理解が深くてすごい人でした。
</body>
</day>
<day date="2007-11-09" title="">
<body>
*ie_activex_activation*さらば！「このコントロールをアクティブ化して使用するにはクリックしてください」
&lt;a href=&quot;http://blogs.msdn.com/ie/archive/2007/11/08/ie-automatic-component-activation-changes-to-ie-activex-update.aspx&quot;&gt;IEBlog : IE Automatic Component Activation (Changes to IE ActiveX Update)&lt;/a&gt; によると、2008年4月の Windows Update において IE のアクティブ化の問題が解決される、とのことです。

アクティブ化が必要になったのが 2006年4月の Windows Update。Flash や Windows Media Player などを操作するためには、クリックしなきゃならなくなったのです。これは Eolas 社が特許で MS を訴えたのが原因。

で、2007年9月に &lt;a href=&quot;http://japan.internet.com/busnews/20070901/12.html&quot;&gt;和解が成立し&lt;/a&gt;、Microsoft はライセンスを受けることになりました。

リリースの手順は次のようになってるそうです。
+Preview 版リリース＠Microsoft Download Center(2007年12月)
+Vista SP1 と Windows SP3 のプレリリースに搭載
+IE累積パッチにて一般のPCに適用される (2008年4月)

最近は、いろんな Web ページを見ていても、アクティブ化の警告がでることは少なくなってきましたが、昔に作られたコンテンツでたまに出ることがありますね。

気をつけないといけないのは、開発機がアクティブ化必要ない状態だと、うっかりアクティブ化のコードを書き忘れて Windows Update していない古い端末でアクティブ化が必要になって…という事態。Flash に関しては、SWFObject を使えば大丈夫でしょうけど。

関連記事：
-&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2007/11/09/17468.html&quot;&gt;IEのActiveXに関する挙動を2008年4月に変更、クリックを不要に&lt;/a&gt;
-&lt;a href=&quot;http://ajaxian.com/archives/no-more-click-to-activate-no-more-swfobject-ufo&quot;&gt;Ajaxian ≫ No more “Click to Activate”, no more SWFObject / UFO?&lt;/a&gt;
</body>
</day>
<day date="2007-11-12" title="">
<body>
*crossdomain_img*[as]AS で別ドメインの画像を読み込むときの注意点
ActionScript を使って 外部ドメインの画像を読み込むときの注意点を調べてみた。

AS3 で調べたけど、AS2 でもセキュリティの機構自体は同じ（だと思う）。

**読み込み方
Loader クラスを使えば&lt;strong&gt;外部ドメインの画像をロードできる&lt;/strong&gt;。
&gt;|javascript|
var loader:Loader = new Loader();
var req:URLRequest = new URLRequest(&quot;http://www.example.com/sample.gif&quot;);
loader.load(req);
addChild(loader);
||&lt;

画像形式は PNG、GIF、JPEG のみ。BMP はダメ。アニメーション GIF の場合は１フレーム目しか描画されない。

読み込み完了したことを知るためには、contentLoaderInfo プロパティの complete イベントを監視すればよい。ファイルが存在しなかったり、ファイル形式が不正だった場合は ioError イベントが発生する。ioError を listen していない場合には例外が投げられる。
&gt;|javascript|
loader.contentLoaderInfo.addEventListener(&quot;complete&quot;, completeHandler);
loader.contentLoaderInfo.addEventListener(&quot;ioError&quot;, ioErrorHandler);
||&lt;

読み込んだ画像は、回転・拡大したり、透明度を変えたり、フィルタをかけたりすることが可能だ。以下の例を見ていただきたい。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FImageLoader1.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=200&amp;amp;h=80&amp;amp;title=magnify+mixi+logo&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

この例では、mixi のロゴを img.mixi.jp のドメインから動的に読み込んでいる。ColorMatrixFilter で紫色に変色させ、DisplacementMapFilter でマウスの上を歪ませている。

ソースは &lt;a href=&quot;http://tech.nitoyon.com/misc/swf/ImageLoader1.as&quot;&gt;こちら (77行)&lt;/a&gt;。（歪ませる部分は &lt;a href=&quot;http://yamasv.blog92.fc2.com/blog-entry-80.html&quot;&gt;miscellaneous [ActionScript 3.0] DisplacementMapFilterで虫眼鏡効果&lt;/a&gt; を参考にさせてもらいました）

**セキュリティサンドボックス侵害への対応
外部ドメインから画像を読み込んで、いろいろできるのは分かっていただけただろうか。だが、１つできないことがある。BitmapData.draw() を使って BitmapData に転写しようとすると、セキュリティサンドボックス侵害の例外が発生するのだ。
&gt;&gt;
セキュリティサンドボックス侵害 : BitmapData.draw:http://localhost/ImageLoader1.swf は http://img.mixi.jp/img/basic/common/mixilogo001.gif にアクセスできません。ポリシーファイルが必要ですが、このメディアがロードされたとき、checkPolicyFile フラグが設定されませんでした。
&lt;&lt;

同様に、Loader で読み込んだ音声ファイルを SoundMixer.computeSpectrum() しようとしたときにも例外が発生する。

このように、&lt;strong&gt;外部ドメインからロードしたメディアに対して、ピクセルデータやオーディオデータに直接アクセスすることは許可されない&lt;/strong&gt;。表示・再生はできるのに、そのメディアを構成するデータを見ることはできない、というわけだ。

対処法は以下の２通り。

***1. crossdomain.xml が用意されている場合
画像が置いてあるドメインのクロスドメインポリシーファイル（いわゆる crossdomain.xml）で、アクセスが許可されている場合、データとしてアクセスできる。

(追記) AS2 では crossdomain.xml があっても、BitmapData.draw() できないらしい。

例えば、Flickr のようなサービスでは、全てのドメインからのアクセスを認める設定が&lt;a href=&quot;http://farm2.static.flickr.com/crossdomain.xml&quot;&gt;記述されている&lt;/a&gt;。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; ?&gt; 
&lt;!DOCTYPE cross-domain-policy SYSTEM &quot;http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd&quot;&gt;
&lt;cross-domain-policy&gt;
  &lt;allow-access-from domain=&quot;*&quot; secure=&quot;true&quot; /&gt; 
&lt;/cross-domain-policy&gt;
||&lt;
一方、mixi にも crossdomain.xml はあるのだけど、現時点では&lt;a href=&quot;http://mixi.jp/crossdomain.xml&quot;&gt;任意のドメインからのアクセスは許可されていない&lt;/a&gt;。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot; ?&gt; 
&lt;!DOCTYPE cross-domain-policy SYSTEM &quot;http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd&quot;&gt;
&lt;cross-domain-policy&gt;
  &lt;allow-access-from domain=&quot;*.mixi.jp&quot; secure=&quot;true&quot; /&gt; 
&lt;/cross-domain-policy&gt;
||&lt;

では、実際にロード時に crossdomain.xml を読み込ませてみよう。といっても２箇所修正するだけだ。
&gt;|javascript|
// LoaderContextを準備
var context:LoaderContext = new LoaderContext(true);

var loader:Loader = new Loader();
var req:URLRequest = new URLRequest(&quot;http://www.example.com/sample.gif&quot;);
loader.load(req, context); // 第２引数に context を渡す
addChild(loader);
||&lt;
LoaderContext の checkPolicyFile を true にするところがポイント。これ以外に、Security.loadPolicyFile() メソッドを使って、事前に読み込んでおく方法もある。loadPolicyFile() を使うと、crossdomain.xml 以外の URL からクロスドメインポリシーファイルを読み取ることができる。

crossdomain.xml が存在しない場合、もしくは許可されなかった場合にも、&lt;strong&gt;画像はロードされる&lt;/strong&gt;。ロードした段階では例外も発生しない。BitmapData.draw() しようとした段階になって初めて例外が出るので注意が必要だ。

では、どうやって許可されたかを調べるかというと、実際に試してみて例外を拾うのが一番簡単。
&gt;|javascript|
loader.contentLoaderInfo.addEventListener(&quot;complete&quot;, function(event:*):void{
    var bmd:BitmapData = new BitmapData(loader.width, loader.height);
    try{
        bmd.draw(loader);
    }
    catch(e:SecurityError){
        trace(e.toString());
    }
});
||&lt;
もう１つの方法として、loader.contentLoaderInfo.childAllowsParent で調べることもできる。
&gt;|javascript|
loader.contentLoaderInfo.addEventListener(&quot;complete&quot;, function(event:*):void{
    if(loader.contentLoaderInfo.childAllowsParent) {
        // あとはお好きに
    }
});
||&lt;
どちらでもお好きな方を。

具体例を１つ。
&lt;!--&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FImageLoader2.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=60&amp;amp;title=twitter+color+picker&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;--&gt;
&lt;s&gt;assets2.twitter.com から動的に twitter のロゴを読み取って getPixel している。ロゴの上にマウスを持っていくと、マウスの下の色が表示される。ソースは &lt;a href=&quot;http://tech.nitoyon.com/misc/swf/ImageLoader2.as&quot;&gt;こちら (44行)&lt;/a&gt;&lt;/s&gt;。

（追記）twitter.com の crossdomain.xml の制約が強化されて、getPixel 出来なくなりました。

Firebug の Net タブを見れば、crossdomain.xml とロゴを拾ってきていることが確認できるだろう。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071112/20071112015258.png&quot; width=&quot;352&quot; height=&quot;192&quot; alt=&quot;Firebugで確認&quot;&gt;&lt;/center&gt;&lt;

***2. crossdomain.xml が用意されていない場合
諦めろ。もしくは、自鯖に proxy となる CGI を設置するしかない。

**おまけ
その他、注意点、気づいたことなど。
-crossdomain.xml が用意されているサイトでも、BitmapData として扱う必要がなければ普通に load したほうがよい。リクエストするファイルが少なくなる分、処理が早くなる
-今回は Loader で別ドメインの画像を読み取る話だったが、別ドメインの SWF を読み取るときにはもう少し複雑になる。ApplicationDomain や System.allowDomain() が関係してくる。
-Loader でロードするときには、Cookie も一緒に投げられる。例えば、http://mixi.jp/logout.pl を踏ませることで、mixi からログアウトさせることも可能だし、自分のプロフィールページを開かせて足跡帳を作ることも可能。とはいえ、&amp;lt;img src&amp;gt; で踏ませるのと同じことなので、Flash だから危険、という問題でもない。
-URLLoader で別ドメインのデータを読み取るときには、必ず crossdomain.xml がチェックされる。URLLoader 自体がデータを読み取るものだから、と考えると納得のいく仕様だろう。

関連URL：
-&lt;a href=&quot;http://livedocs.adobe.com/flex/201_jp/html/05B_Security_176_09.html&quot;&gt;ロードされたメディアへのデータとしてのアクセス -- Flex 2.01&lt;/a&gt;
-&lt;a href=&quot;http://livedocs.adobe.com/flex/2_jp/docs/00001857.html&quot;&gt;コンテンツの動的ロード -- Flex 2&lt;/a&gt;
-&lt;a href=&quot;http://level0.cuppy.co.jp/2007/10/_bitmap.php&quot;&gt;外部ドメインの画像を Bitmap 操作する際に｜_level0.CUPPY&lt;/a&gt;
-&lt;a href=&quot;http://blog.graffiti-web.org/archives/2006/01/post_113.html&quot;&gt;graffiti-blog: 画像を単色に平均化&lt;/a&gt; のコメント欄

</body>
<comments>
<comment>
<username>オーイシ</username>
<body>Google map API + PV3D関係の疑問すっきりました。</body>
<timestamp>1212488536</timestamp>
</comment>
</comments>
</day>
<day date="2007-11-13" title="">
<body>
*twitter_tracker*[as][twitter]ついったー足あとちょう
ついったーの ID とメールアドレスを抜き出すよ！

（追記）2008/3/9 18:00 crossdomain.xml が修正されて、抜き出せなくなったようです…。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FTwitterTracker.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=320&amp;amp;h=80&amp;amp;title=Twitter+Tracker&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

ソースはこんなの！（61行）
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.text.*;
    import flash.net.*;

    [SWF(width=&quot;400&quot;, height=&quot;100&quot;, backgroundColor=&quot;#ffffff&quot;)]
    public class TwitterTracker extends Sprite {
        private var textField:TextField;
        
        public function TwitterTracker() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var tf:TextFormat = new TextFormat();
            tf.size = 15;

            textField = new TextField();
            textField.wordWrap = true;
            textField.multiline = true;
            textField.defaultTextFormat = tf;

            textField.text = &quot;loading...&quot;;
            textField.width = 400;
            addChild(textField);

            var loader:URLLoader = new URLLoader();
            loader.addEventListener(Event.COMPLETE, completeHandler);
            loader.addEventListener(&quot;ioError&quot;, errorHandler);
            loader.load(new URLRequest(&quot;http://twitter.com/account/settings&quot;));
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            var html:String = loader.data;
            if(html.indexOf('value=&quot;Sign In&quot;') != -1) {
                // logged out
                textField.text = &quot;ついったーにはログインしてないみたい。\nYou are not logged in to Twitter!!&quot;;
            }
            else {
                // login
                var idMatch:Array = html.match(/&lt;input\s+id=&quot;user_screen_name&quot;[^&gt;+]+value=&quot;([^&quot;]+)&quot;/);
                var emailMatch:Array = html.match(/&lt;input\s+id=&quot;user_email&quot;[^&gt;]+value=&quot;([^&quot;]+)&quot;/);

                if(idMatch &amp;&amp; emailMatch) {
                    var id:String = idMatch[1];
                    var email:String = emailMatch[1];
                    textField.htmlText = &quot;ついったーID は &lt;font color='#ff0000'&gt;&lt;b&gt;&quot; + id + &quot;&lt;/b&gt;&lt;/font&gt; だね。&lt;br&gt;&quot;
                      + &quot;E-mail は &lt;font color='#008000'&gt;&lt;b&gt;&quot; + email + &quot;&lt;/b&gt;&lt;/font&gt; だよね。&quot;;
                }
                else {
                    textField.text = &quot;no match:&quot; + idMatch + &quot;:&quot; + emailMatch;
                }
            }
        }

        private function errorHandler(event:Event):void {
            textField.text = &quot;Error!!!: &quot; + event.toString();
        }
    }
}
||&lt;

いちおう補足しておくと、Cookie を抜いたわけではなくて、Cookie つきで twitter.com に GET した結果の HTML をパースしてるだけだよ。crossdomain.xml はすごいね！

関連： &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071112/crossdomain_img&quot;&gt;AS で別ドメインの画像を読み込むときの注意点 - てっく煮ブログ&lt;/a&gt;

</body>
</day>
<day date="2007-11-14" title="">
<body>
*event_11_17*[flex][event]11月17日のイベントご案内
東京と京都で面白そうなイベントがありますよ。どちらも今からでも間に合います！

**東京の方へ
&lt;a href=&quot;http://www.milliontimes.net/&quot;&gt;ミリオンタイムズスクウェア　キャリアアップセミナー&lt;/a&gt; というのが開催されます。3K とか &lt;a href=&quot;http://www.atmarkit.co.jp/news/200710/31/ipa.html&quot;&gt;7K&lt;/a&gt; と言われる業界で、IT技術者が幸せになるために、というテーマでの講演会とパネル討論（無料）です。就職活動前の学生さんや、現役の技術者さん、転職を考えてる人にとっても有意義なイベントだと思います。

講演では「ニコニコ動画」仕掛け人のドワンゴ 溝口さんによる「ドワンゴの求めるエンジニア ～ニコニコ動画はなぜ生まれたか（仮題）」という内容のなので、その辺目当てでもアリでしょう。

と、なぜこんな告知をしてるかというと、協賛企業に自分の勤務先が名を連ねてるからです。といっても、第一回はとても面白かったので（参考：&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070427/p1&quot;&gt;刺激的な一日 - てっく煮ブログ&lt;/a&gt;）、時間に余裕のあるひとは是非是非。

関連リンク：
-&lt;a href=&quot;http://blogs.yahoo.co.jp/masataka_hashimoto/50398681.html&quot;&gt;ミリオンタイムズスクウェア　キャリアアップセミナー - 橋本昌隆 株式会社フューチャーラボラトリ - Yahoo!ブログ&lt;/a&gt;
-&lt;a href=&quot;http://blog.goo.ne.jp/kimuchi_nishinippori/e/4a04a8be72e6ffecfa52483f4055df23&quot;&gt;キャリアアップセミナーのお誘い - 北海亭の上で働く社長ブログダイエット&lt;/a&gt;
-&lt;a href=&quot;http://blog.8maki.jp/2007/11/1117.html&quot;&gt;11/17(土) パネルに出させてもらうことになりました。 // 起業家・Webデザイナー・SE→CIOを目指しつつの大学生のアレ&lt;/a&gt;

**関西の方へ
こちらは２回目の告知になっちゃいますが…&lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?Flex2%CA%D9%B6%AF%B2%F1%C2%E829%B2%F3%A1%F7%B5%FE%C5%D4%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;FxUG＠京都&lt;/a&gt;が開催されます。

私もリクエストが多かったカスタムコンポーネントについて発表しようと思っています。他にも京都らしく、五山の送り火インターネット中継の話題とかあるらしいですよ。

それはそうと、ここ最近、微妙に Flex が注目を集め始めてますね。
-&lt;a href=&quot;http://journal.mycom.co.jp/articles/2007/11/12/flex2/index.html&quot;&gt;【ハウツー】ゼロからはじめるFlex 2 - Flex 2で作る簡単なWebカタログと商品注文フォーム (1) Adobe Flex 2を使ってみよう | パソコン | マイコミジャーナル&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://journal.mycom.co.jp/articles/2007/11/12/flex2/index.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://journal.mycom.co.jp/articles/2007/11/12/flex2/index.html&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
-&lt;a href=&quot;http://zapanet.info/blog/item/1137&quot;&gt;それ、Flexで！（左から右へ受け流すサンプル付き）&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://zapanet.info/blog/item/1137&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/entry/image/http://zapanet.info/blog/item/1137&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
ということで、この記事をみて Flex に興味をもった人もぜひおいでませ。
</body>
</day>
<day date="2007-11-19" title="">
<body>
*flex_custom_component*[flex]Flexカスタムコンポーネントの作り方
&lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?Flex2%CA%D9%B6%AF%B2%F1%C2%E829%B2%F3%A1%F7%B5%FE%C5%D4%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;FxUG 第29回勉強会＠京都&lt;/a&gt;の発表資料を公開します。

複合コンポーネント、既存コンポーネントの拡張、さらに UIComponent の createChildren() や updateDisplayList() について触れています。

かなりマニアックな内容になってます。会場にいた人のどれぐらいの方に有意義だったか恐ろしくて聞けませんでした…。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fflex_custom_component%2Fslide.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=380&amp;amp;h=289&amp;amp;title=Flex+Custom+Component&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;
(表示されないときはリロードしてください)

**使い方：
:次のページ:→ or Space
:前のページ:← or Shift + Space
:最初のページ:Home
:最後のページ:End
:指定ページへ移動:ページ番号+Enter


**関連資料：
-&lt;a href=&quot;http://tech.nitoyon.com/misc/flex_custom_component/flex_custom_component.ppt&quot;&gt;資料 (パワーポイント形式)&lt;/a&gt; （Windows+PowerPoint2003以外ではたぶん崩れます）
-&lt;a href=&quot;http://tech.nitoyon.com/misc/flex_custom_component/slide.as&quot;&gt;プレゼンソースコード (as)&lt;/a&gt;

SlideShare にアップロードしたのですが、あまりにも重かったため、自分で SldieShare 風のものを作ってみました。
</body>
<comments>
<comment>
<username>AWAWA</username>
<body>初参加でしたが、とても刺激になりました。&lt;br&gt;今度サンプル作って仕事先で提案してみようと思います。ありがとうございました！&lt;br&gt;質問なのですが、資料はFxUGのサイトではなく、発表者の方のブログ等にUPする形で運用されているのでしょうか？他にUPしてくださった方が居たとしてもURLとか分からなくて・・。</body>
<timestamp>1195473507</timestamp>
</comment>
<comment>
<username>naggg</username>
<body>Flex野郎じゃない僕ですけど、だいぶ勉強になりました～&lt;br&gt;Flexのコンポーネントって高機能だからうらやましいですね。さっそくいじってみようかと思って、試しに Flex SDK から SWC を Flash CS3 に持っていってあれこれしてみたんですが、使えなかったです・・・&lt;br&gt;&lt;br&gt;って Flex 買えって話ですね。</body>
<timestamp>1195484237</timestamp>
</comment>
<comment>
<username>miyanami</username>
<body>こんにちは、miyanami です。勉強会ではありがとうございました。&lt;br&gt;カスタムコンポーネントの作り方、非常に興味深く聞かせて頂きました。技術的な事は、まだまだ手を動かせていないので追従できてないのすが、超初心者の私にも、とてもわかりやすかったです。&lt;br&gt;※私もブログもってるので、トラックバックさせて頂きました。&lt;br&gt;　今後ともよろしくお願い致します。</body>
<timestamp>1195615567</timestamp>
</comment>
<comment>
<username>sinh</username>
<body>もうpptはダウンロードできないぞよか？&lt;br&gt;よろしくお願いします。</body>
<timestamp>1262761067</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; sinh さん&lt;br&gt;URL 修正しました。これでダウンロードできると思います。</body>
<timestamp>1262794655</timestamp>
</comment>
<comment>
<username>ryan5500</username>
<body>勉強になりました！flexコンポーネントの資料を読んでも勘所がわからなかったので，助かりました．</body>
<timestamp>1269055068</timestamp>
</comment>
</comments>
</day>
<day date="2007-11-20" title="">
<body>
*live_coding5*[event]LiveCoding#5 に参加します
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071120/20071120000608.jpg&quot; width=&quot;400&quot; height=&quot;127&quot; alt=&quot;LiveCoding#5&quot;&gt;&lt;/center&gt;&lt;
ここ最近、告知ブログになってしまってますが、このたび縁あって &lt;a href=&quot;http://cotocoto.jp/event/2936&quot;&gt;LiveCoding#5&lt;/a&gt; でライブコーディングすることになりました。
12月1日(土)＠大阪です。丸ビルの近くです。ということで&lt;a href=&quot;&lt;a href=&quot;http://tech.nitoyon.com/marubiru/&quot;&gt;丸ビル RSS リーダー&lt;/a&gt; を使って画像を作ってみました。

&lt;strike&gt;角界&lt;/strike&gt;各界（Perl、Ruby、C++、Haskel...などなど）のすごい人が集まるらしく、もはや技術力では太刀打ちできなさそうなので、Flex の手軽さなんかをアピールしてみようかと思ってます。

持ち時間は20分で事前準備禁止。一発勝負らしいので、当日までに秀丸のチューニングをしていって、コーディング効率を上げるようにしていこっと。

申し込みは http://cotocoto.jp/event/2936 からどうぞ。飲食代、飲み代込みで3,000円と良心価格設定。定員少な目なので申し込みはお早めに。

**関連エントリ：
-&lt;a href=&quot;http://ujihisa.nowa.jp/entry/f3d7e6293f&quot;&gt;rubyneko - LiveCoding#5の案内&lt;/a&gt;：主催者の ujihisa さん
</body>
</day>
<day date="2007-11-21" title="">
<body>
*uniqlo_grid_line*[as]UNIQLO_GRID みたいに「うねうね」揺れる線
既に各所で話題になっている &lt;a href=&quot;http://www.uniqlo.com/grid/&quot;&gt;UNIQLO_GRID&lt;/a&gt; ですが、ドラッグしたときに線が「うねうね」と揺れる様がステキだったので、マネしてみました。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FUneuneLine.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=300&amp;amp;title=uneune+line&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;
ドラッグして遊んでみてください（表示されない場合はリロードを）。

手書き風効果に使えそうですね。揺れ具合など改善の余地はたくさんありそうです。

それはそうと、どうやってアルゴリズムを想像したかを記録しておきます。
+右クリックから拡大して、UNIQLO_GRID の線がベクターであることを確認
+少ししか動かしていないときは直線として描画されていることを発見
+曲線になる条件は、移動距離や移動時間ではなく、mouseMove イベントの発生回数ではないかと仮定（実際は違うかも）
+曲線になった瞬間、途中に通った場所がベジェ曲線の中間点として採用されることを発見
+試験実装→そこそこそれっぽく動く
+マウスを早く動かすと、汚いことを発見→マウスの移動距離が既定値を超えると、その点をベジェ曲線の中間点、コントロールポイントとして採用するようにした
+完成！

ソースコードは以下に（93行）：
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;

    [SWF(backgroundColor=&quot;#ffffff&quot;)]
    public class UneuneLine extends Sprite {
        private var start:Point;            // 描画開始地点
        private var controls:Array;         // コントロールのリスト
        private var anchors:Array;          // アンカーポイントのリスト
        private var cur:Point;              // 現在のマウス地点
        private var prev:Point;             // 直前のコントロールもしくはアンカーポイント
        private var count:int;              // マウスの移動数
        private const WAIT:int = 20;        // マウスの移動数の閾値
        private const DISTANCE:int = 20;    // マウスの移動距離の閾値
        private const RANDOM:Number = 3;    // 揺れ具合

        public function UneuneLine() {
            stage.addEventListener(&quot;mouseDown&quot;, mouseDownHandler);
            addEventListener(&quot;enterFrame&quot;, enterFrameHandler);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            // イベント登録
            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);

            // パラメータ初期化
            count = 0;
            start = new Point(event.stageX, event.stageY);
            cur = start.clone();
            prev = start.clone();;
            controls = [null];
            anchors = [start];
        }

        private function mouseMoveHandler(event:MouseEvent):void {
            cur.x = event.stageX; cur.y = event.stageY;
            count++;

            if(count == WAIT || count &lt; WAIT &amp;&amp; Point.distance(prev, cur) &gt; DISTANCE) {
                // コントロールポイント追加
                prev = cur.clone();
                controls.push(cur.clone());
                count = WAIT;
            }
            else if(count == WAIT * 2 || Point.distance(prev, cur) &gt; DISTANCE) {
                // アンカーポイント追加
                prev = cur.clone();
                anchors.push(cur.clone());

                // コントロールポイントの位置を修正
                var p1:Point = Point(anchors[anchors.length - 2]);
                var c:Point = Point(controls[anchors.length - 1]);
                c.x = c.x * 2 - (p1.x + cur.x) / 2;
                c.y = c.y * 2 - (p1.y + cur.y) / 2;

                count = 0;
            }
        }

        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);

            start = null;
            cur = null;
        }

        private function enterFrameHandler(event:Event):void {
            graphics.clear();

            if(start) {
                // 始点へ移動
                graphics.lineStyle();
                graphics.moveTo(anchors[0].x, anchors[0].y);

                // ベジェ曲線を描画
                graphics.lineStyle(1, 0);
                for(var i:int = 1; i &lt; anchors.length; i++) {
                    graphics.curveTo(
                        controls[i].x + Math.random() * RANDOM - RANDOM / 2, 
                        controls[i].y + Math.random() * RANDOM - RANDOM / 2, 
                        anchors[i].x  + Math.random() * RANDOM - RANDOM / 2, 
                        anchors[i].y  + Math.random() * RANDOM - RANDOM / 2);
                }

                // 終点へ移動
                graphics.lineTo(cur.x, cur.y);
            }
        }
    }
}
||&lt;
</body>
</day>
<day date="2007-11-26" title="">
<body>
*flex2_box2dflashas3*[as][box2d]mxmlcでBox2DFlashAS3のサンプルをビルドする方法
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071126/20071126032920.jpg&quot; width=&quot;450&quot; height=&quot;166&quot; alt=&quot;Box2DFlashAS3&quot;&gt;&lt;/center&gt;&lt;
GIGAZINE などでも&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20071118_box2dflashas3/&quot;&gt;紹介された&lt;/a&gt;、話題の物理エンジン &lt;a href=&quot;http://box2dflash.sourceforge.net/&quot;&gt;Box2DFlashAS3 1.4.2&lt;/a&gt; を試してみました。

ダウンロードは &lt;a href=&quot;http://sourceforge.net/projects/box2dflash&quot;&gt;SourceForge.net: Box2DFlashAS3&lt;/a&gt; から。

パッケージに含まれている主要なファイルは以下の通り。
|*Engine フォルダ|Box2DFlashAS3 の本体です。|
|*General フォルダ|デモで利用しているユーティリティクラスが入っています。|
|*TestBed フォルダ|デモ８種類とその基底クラスが入っています。|
|*Main.as|デモをカーソルキーで切り替える機能などを実装したクラスです。|
|*PhysTest.fla|これをコンパイルすると SWF ができあがるようです。|
|*PhysTest.swf|デモのコンパイル済み SWF です。&lt;a href=&quot;http://box2dflash.sourceforge.net/&quot;&gt;Box2DFlashAS3&lt;/a&gt; に展示してあるデモがこのファイル。|

Flash CS3 は持ってないので、.fla なファイルは開けません。

そこで、Main.as を mxmlc でコンパイルしてみるとエラーが…。

むきー！　絶対に動かしてやる！！

&lt;strong&gt;(追記) 1.4.3 からは、mxmlc で Main.as をコンパイルできるようになっています。以下に書いてある修正および警告を出なくする工夫は不要です。&lt;/strong&gt;

**Main.as を修正
Main.as をコンパイルして実行すると、
&gt;&gt;
変数 m_aboutTextN は定義されていません。
&lt;&lt;
という例外が出るので、まずはこれを解決。

ソースを見てみると、50行目に次のような内容が。
&gt;|javascript|
    // textfield pointer
    m_aboutText = m_aboutTextN;
||&lt;
m_aboutTextN は Main.as には含まれていない。おそらく PhysTest.fla で定義されたシンボルなのでしょう。

ってことで、スクリプトを次のように修正。
&gt;|javascript|
    // textfield pointer
    m_aboutText = new TextField();//m_aboutTextN;
    addChild(m_aboutText);
||&lt;
これで実行時の例外は出なくなった。

**コンパイル オプション
Box2DFlashAS3 の移植が中途半端で、コンパイル時に警告が大量に出てしまう。警告をよく見ると、変数や戻り値の型宣言が行われていないようだ。CS3 では警告すらでないのかな？

ということで、コンパイル オプションを次のようにしてみた。
&gt;|
mxmlc --strict=false --warnings=false --default-background-color=#414647 -default-size 640 360 Main.as
|&lt;
見やすくしたらこうなる。
&gt;|
mxmlc --strict=false \
      --warnings=false \
      --default-background-color=#414647 \
      -default-size 640 360 \
      Main.as
|&lt;

警告を無視するために --strict=false、警告を出力しないために --warnings=false、さらに背景色と SWF のサイズを指定するオプションもつけている。

**完成
Main.swf が出力されて、&lt;a href=&quot;http://box2dflash.sourceforge.net/&quot;&gt;Box2DFlashAS3&lt;/a&gt; のトップページにある SWF を吐き出すことができた。

やったー。

 --strict=false にしているのが切ないので、警告が出なくなるパッチを誰かが書いてくれないかなぁ。
</body>
</day>
<day date="2007-11-27" title="">
<body>
*box2d_simple_sample*[as][box2d]Box2DFlashAS3 の単純なサンプルと使い方
&gt;&lt;div style=&quot;background:#ffff99; color:#990000; border:2px solid red; padding: .5em; font-weight: bold;&quot;&gt;このチュートリアルは、Box2DFlashAS3 バージョン 1.4.2 について説明しています。最新の 2.0.2 では多くの API が変更になっています。2.0.2 の使い方については、[http://d.hatena.ne.jp/nitoyon/20090428/box2dflashas3_2_0_2:title] をご覧ください&lt;/div&gt;&lt;

&lt;a href=&quot;http://box2dflash.sourceforge.net/&quot;&gt;Box2DFlashAS3&lt;/a&gt; のデモは見る分には魅力的なのだけど、勉強し始めるときにはソースが複雑すぎる。

ということで、分かりやすく、かつ、見てて楽しいものを作ってみた。
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBox2dSimpleSample.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=480&amp;amp;title=Box2dFlashAS3+simple+sample&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;
（表示されない場合はリロードしてください。）

簡単なチュートリアルを作成してみました。参考にどうぞ。
+世界の作成
+床の作成
+積み木の作成
+シミュレーションの開始
+描画

**1. 世界の作成
シミュレーションを行うための世界を作成する。

worldAABB というのは衝突判定のパラメータの模様。&lt;a href=&quot;http://www.box2d.org/manual.html&quot;&gt;Box2D User Manual&lt;/a&gt; によるとあまり重要ではないパラメータらしい。お約束というところか。
&gt;|javascript|
var worldAABB:b2AABB = new b2AABB();
worldAABB.minVertex.Set(-100.0, -100.0);
worldAABB.maxVertex.Set(100.0, 100.0);
||&lt;

次に重力を設定する。y 軸正方向に 10.0。物理をかじったことある人にはおなじみの値（正確には 9.80665… [m/s&lt;sup&gt;2&lt;/sup&gt;]）。
&gt;|javascript|
var gravity:b2Vec2 = new b2Vec2(0.0, 10.0);
||&lt;

で、生成。第3パラメータは doSleep。詳細未調査。
&gt;|javascript|
m_world = new b2World(worldAABB, gravity, true);
||&lt;

**2. 床の作成
まずは、床をあらわす Shape の定義を作る。
&gt;|javascript|
var wallSd:b2BoxDef = new b2BoxDef();
wallSd.extents.Set(300 / m_physScale / 2, 10 / m_physScale);
wallSd.localRotation = Math.random() * Math.PI / 8;
||&lt;
300×10 の四角形で、傾きはランダムに定める。

この Shape を Body に入れる。Body は複数の Shape を格納できるグループのようなもの。たとえ１つの Shape であっても、Body に追加しなければ、Box2d の world には配置できない。
&gt;|javascript|
var wallBd:b2BodyDef = new b2BodyDef();
wallBd.position.Set(300 / m_physScale / 2, 250 / m_physScale);
wallBd.AddShape(wallSd);
||&lt;
これで、Body の定義ができた。定義を作っただけでは何も配置されない。CreateBody を使って実体を生成する。
&gt;|javascript|
m_world.CreateBody(wallBd);
||&lt;
定義はクラスのようなものと考えると分かりやすいかもしれない。CreateBody でインスタンスを作成するわけだ。

**3. 積み木の作成
同じようにして積み木を作成していく。
&gt;|javascript|
var sd:b2BoxDef = new b2BoxDef();
sd.density = 1;
sd.friction = 0.2;

var bd:b2BodyDef = new b2BodyDef();
bd.AddShape(sd);
for (var i:int = 0; i &lt; 10; i++) {
    sd.extents.Set(30 / m_physScale, 10 / m_physScale);
    bd.position.Set(100 / m_physScale, (160 - 40 - i * 20) / m_physScale);
    m_world.CreateBody(bd);
}
||&lt;
:density:0 以外に設定すると、固定されない（自由落下する）ようになる。
:friction:摩擦ぐあいを表すパラメータ。0だとよく滑る。
:restitution:はね返り具合。

**4. シミュレーションの開始
enterFrame の中で次の関数を実行する。
&gt;|javascript|
m_world.Step(1 / 30, 10);
||&lt;
-第一引数（timeStep）は１回のステップで進める秒数。
-第二引数（iterations）はシミュレーションの精度。小さいとパフォーマンスがよくなり、大きいと正確になる（めり込んだりしない）

**5. 描画
Box2dFlashAS3 は、もともとが C++ のコードなだけに、描画処理が含まれていない。

自分で描画しなきゃならないのがめんどくさいといえばめんどくさいが、物理エンジンといえば地味な見た目になりがちなので、自分で装飾できるのは魅力的にも思える。

例えば、BitmapData のテクスチャを張ったり、もしくは、BitmapData 上に描画したりしてもよい。PV3D で 3D 空間に表示したりしても面白いかもしれない。

ここでは、デモのソースコードから四角形を描画するコードだけを借用した。実際には、ヒモを描画するコードが必要だったりするので、それらは TestBed/Test.as をご覧いただきたい。

**ソース
106行ありますよ。ダウンロードは&lt;a href=&quot;http://tech.nitoyon.com/misc/swf/Box2dSimpleSample.as&quot;&gt;こちらから&lt;/a&gt;。

(追記)1.4.3 では、import Engine を import Box2d に変更すれば動きます。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package {
    import Engine.Dynamics.*;
    import Engine.Collision.*;
    import Engine.Collision.Shapes.*;
    import Engine.Common.Math.*;
    import flash.events.Event
    import flash.display.*;
    import flash.text.TextField;

    [SWF(backgroundColor=&quot;#ffffff&quot;, width=&quot;350&quot;, height=&quot;200&quot;)]
    public class Box2dSimpleSample extends Sprite {
        private var m_world:b2World;
        private var m_physScale:Number = 10;
        private var count:int = 0;  // loop counter

        public function Box2dSimpleSample() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var text:TextField = new TextField();
            text.text = &quot;CLICK TO START!!!&quot;;
            text.x = text.y = 100;
            addChild(text);

            stage.addEventListener(&quot;click&quot;, function(event:Event):void {
                text.visible = false;
                init();
            });
            addEventListener(&quot;enterFrame&quot;, function(event:Event):void {
                Update();
            });
        }

        private function init():void {
            count = 0;

            // Construct a world object
            var worldAABB:b2AABB = new b2AABB();
            worldAABB.minVertex.Set(-100.0, -100.0);
            worldAABB.maxVertex.Set(100.0, 100.0);
            var gravity:b2Vec2 = new b2Vec2(0.0, 10.0);
            m_world = new b2World(worldAABB, gravity, true);

            // Create floor
            var wallSd:b2BoxDef = new b2BoxDef();
            wallSd.extents.Set(300 / m_physScale / 2, 10 / m_physScale);
            wallSd.localRotation = Math.random() * Math.PI / 8;
            var wallBd:b2BodyDef = new b2BodyDef();
            wallBd.position.Set(300 / m_physScale / 2, 250 / m_physScale);
            wallBd.AddShape(wallSd);
            m_world.CreateBody(wallBd);

            // Add bodies
            var sd:b2BoxDef = new b2BoxDef();
            sd.density = 1;
            sd.friction = 0.2;
            var bd:b2BodyDef = new b2BodyDef();
            bd.AddShape(sd);
            for (var i:int = 0; i &lt; 10; i++) {
                sd.extents.Set(30 / m_physScale, 10 / m_physScale);
                bd.position.Set(100 / m_physScale, (160 - 40 - i * 20) / m_physScale);
                m_world.CreateBody(bd);
            }
        }

        public function Update():void {
            if(!m_world) {
                return;
            }

            // Update physics
            count++;
            if(count &gt; 300) {
                init();
            }
            m_world.Step(1 / 30, 10);

            // Render
            graphics.clear();
            for (var bb:b2Body = m_world.m_bodyList; bb; bb = bb.m_next) {
                for (var s:b2Shape = bb.GetShapeList(); s != null; s = s.GetNext()) {
                    DrawShape(s);
                }
            }
        }

        public function DrawShape(shape:b2Shape):void {
            if(shape.m_type == b2Shape.e_polyShape) {
                var poly:b2PolyShape = shape as b2PolyShape;
                var tV:b2Vec2 = b2Math.AddVV(poly.m_position, b2Math.b2MulMV(poly.m_R, poly.m_vertices[i]));

                graphics.beginFill(0x999999, count &gt; 290 ? (300 - count) / 10.0 : 1);
                graphics.lineStyle(1,0xffffff,1);
                graphics.moveTo(tV.x * m_physScale, tV.y * m_physScale);

                for (var i:int = 0; i &lt; poly.m_vertexCount; ++i) {
                    var v:b2Vec2 = b2Math.AddVV(poly.m_position, b2Math.b2MulMV(poly.m_R, poly.m_vertices[i]));
                    graphics.lineTo(v.x * m_physScale, v.y * m_physScale);
                }
                graphics.lineTo(tV.x * m_physScale, tV.y * m_physScale);

                graphics.endFill();
            }
        }
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2007-11-29" title="">
<body>
*box2dflashas3_bitmap*[as][box2d]Box2DFlashAS3 の見た目を豪華にしてみる
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071127/box2d_simple_sample&quot;&gt;前回&lt;/a&gt; のサンプルを改造して、見た目に一味加えてみた。

&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBox2dSimpleSample2.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=480&amp;amp;title=Box2dFlashAS3+simple+sample&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;

ちょっぴり実写志向。（表示されない場合はリロードをお願いします）

原理は簡単。Box2dFlashAS3 は、もともとが C++ のコードなだけに、エンジンに描画処理が含まれていない。前回も自前で lineTo を使って描画してたのだけど、今回は事前に Sprite を用意しておいた。enterFrame で b2Body の位置と角度を Sprite に反映させている。

ただ、物理エンジンの初期化と Sprite の描画の両方を AS3 で書いているので、ソースコードが無駄に長い。もうちょっと複雑になるときは、しっかり設計したほうがよさそうだ。

だるまの絵は以下のサイトから借用させていただいた。無駄にアフィリエイト（笑）。

[rakuten:tokyo-treasures:10000630:detail]

ソースコードは以下に(139行)。

(追記)1.4.3 では import Engine のところを import Box2d に変更すれば動きます。
====
&gt;|javascript|
package {
    import Engine.Dynamics.*;
    import Engine.Collision.*;
    import Engine.Collision.Shapes.*;
    import Engine.Common.Math.*;
    import flash.events.Event
    import flash.display.*;
    import flash.text.TextField;

    [SWF(backgroundColor=&quot;#ffffff&quot;, width=&quot;350&quot;, height=&quot;200&quot;)]
    public class Box2dSimpleSample2 extends Sprite {
        private var count:int = 0;  // loop counter
        private var first:Boolean = true; // init flag

        // Box2d
        private var m_world:b2World;
        private var m_physScale:Number = 10;
        private var m_floor:b2Body;
        private var m_blocks:Array;

        // Sprites
        private var spriteFloor:Sprite;
        private var spriteBlocks:Array;
        [Embed(source=&quot;daruma.png&quot;)]
        private var daruma:Class;
        private const colors:Array = [0x333366, 0xffffdd, 0xcc0000, 0xffcc00, 0x006600];

        // display param
        private static const LOOP:int = 280;
        private static const FADE_OUT:int = 20;

        public function Box2dSimpleSample2() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var text:TextField = new TextField();
            text.text = &quot;CLICK TO START!!!&quot;;
            text.x = text.y = 100;
            addChild(text);

            stage.addEventListener(&quot;click&quot;, function(event:Event):void {
                text.visible = false;
                init();
            });
        }

        private function init():void {
            count = 0;

            // init sprites
            if(first){
                first = false;

                // init floor sprite
                spriteFloor = new Sprite();
                spriteFloor.graphics.beginFill(0x808080);
                spriteFloor.graphics.drawRect(-300 / 2, -20 / 2, 300, 20);
                spriteFloor.graphics.endFill();
                addChild(spriteFloor);

                // init blocks sprite
                spriteBlocks = [];
                for(i = 0; i &lt; colors.length; i++) {
                    var s:Sprite = new Sprite();
                    s.graphics.beginFill(colors[i]);
                    s.graphics.lineStyle(0, 0x999999);
                    s.graphics.drawRoundRect(-28, -10, 56, 20, 10, 10);
                    s.graphics.endFill();
                    addChild(s);
                    spriteBlocks.push(s);
                }
                s = new Sprite();
                var bmp:DisplayObject = s.addChild(new daruma());
                bmp.x = -bmp.width / 2;
                bmp.y = -bmp.height / 2;
                addChild(s);
                spriteBlocks.push(s);

                addEventListener(&quot;enterFrame&quot;, function(event:Event):void {
                    Update();
                });
            }

            // Construct a world object
            var worldAABB:b2AABB = new b2AABB();
            worldAABB.minVertex.Set(-100.0, -100.0);
            worldAABB.maxVertex.Set(100.0, 100.0);
            var gravity:b2Vec2 = new b2Vec2(0.0, 10.0);
            m_world = new b2World(worldAABB, gravity, true);

            // Create floor
            var wallSd:b2BoxDef = new b2BoxDef();
            wallSd.extents.Set(300 / 2 / m_physScale, 20 / 2 / m_physScale);
            var wallBd:b2BodyDef = new b2BodyDef();
            wallBd.position.Set(300 / m_physScale / 2, 250 / m_physScale);
            wallBd.rotation = Math.random() * Math.PI / 8;
            wallBd.AddShape(wallSd);
            m_floor = m_world.CreateBody(wallBd);

            // Add bodies
            var sd:b2BoxDef = new b2BoxDef();
            sd.density = 1;
            sd.friction = 0.2;
            var bd:b2BodyDef = new b2BodyDef();
            bd.AddShape(sd);
            m_blocks = [];
            for (var i:int = 0; i &lt; spriteBlocks.length; i++) {
                sd.extents.Set(30 / m_physScale, (i == 5 ? 30 : 10) / m_physScale);
                bd.position.Set(100 / m_physScale, (120 - i * 20 - (i == 5 ? 18 : 0)) / m_physScale);
                m_blocks.push(m_world.CreateBody(bd));
            }
        }

        public function Update():void {
            count++;
            if(count &gt; 300) {
                init();
            }

            // Update physics
            m_world.Step(1 / 30, 10);

            // Render
            var alpha:Number = (count &gt; LOOP - FADE_OUT ? (LOOP - count) / FADE_OUT : 
                                count &lt; FADE_OUT        ? count / FADE_OUT : 1);
            applyBodyToSprite(spriteFloor, m_floor, alpha);
            for(var i:int = 0; i &lt; m_blocks.length; i++) {
                applyBodyToSprite(spriteBlocks[i], m_blocks[i], alpha);
            }
        }

        private function applyBodyToSprite(sprite:Sprite, body:b2Body, alpha:Number):void{
            sprite.x = body.m_position.x * m_physScale;
            sprite.y = body.m_position.y * m_physScale;
            sprite.rotation = body.m_rotation * 180 / Math.PI;
            sprite.alpha = alpha;
        }
    }
}
||&lt;
</body>
</day>
<day date="2007-12-02" title="">
<body>
*livecoding_5*[event][flex]LiveCoding#5 でコーディングしてきた
&lt;a href=&quot;http://cotocoto.jp/event/2936&quot;&gt;LiveCoding #5&lt;/a&gt; でコーディングしてきました。

「はてブビューワーをFlexで作る」というのをやってみました。

**成果物
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071202/20071202021042.jpg&quot; width=&quot;450&quot; height=&quot;211&quot;&gt;&lt;/center&gt;&lt;
完成品→&lt;a href=&quot;http://tech.nitoyon.com/misc/live_coding5/test.swf&quot;&gt;http://tech.nitoyon.com/misc/live_coding5/test.swf&lt;/a&gt;
-私のはてなブックマーク一覧が表示されます
--上のリンクは件数を減らしていますが、本番では3,000件以上を表示していました
-ヘッダ部分でソートできます
-選択した状態で [open] ボタンを押すと、別ページで開きます
-検索のところに文字列を入れるとタイトルからリアルタイムで絞込みできます

**やったこと
+http://b.hatena.ne.jp/はてなID/config?mode=export から RSS1.0 形式でブックマーク一覧をダウンロードする
+冒頭の「 xmlns=&quot;http://purl.org/rss/1.0/&quot; 」を削除する。これは Flex の DataGrid で名前空間つきの XML を扱えないから（なんとかしてほしい）。
+rascut を起動して、Test.mxml の簡単なのを書いてみる
+ランゲージリファレンスの DataGrid のサンプルをコピペ
+不要な部分を削って、URLLoader でロードした XML を DataGrid に突っ込む
+表示できた！（おー）
+ボタンクリックされたときにページを表示するようにする
+TextInput を作って、filterFunction でフィルタリング機能を作る
+タグの一覧をパースして、タグの個数を Object に突っ込むところを作る
+タグクラウドを表示したかったけど時間切れ

**感想
PR したかったポイントは表現できたかな…。
-エディタとコマンドラインで Flash 開発できる（開発環境の Flex SDK は無料）
-DataGrid に XML を突っ込んだらそのまま表示できる(！)
-3,000件（1.92MB）もある XML を難なくパースできる
-E4X 気持ちいいよね
-DataGrid は高機能

実は、5. のところまでは事前に研究していたのですが、そのときに E4X の名前空間で１時間ぐらいはまりました。DataGrid のソースを読んだのですが、DataGrid は名前空間つきの XML を表示できないようで、結局は上の 2. のひどい方法で対処しました。

LiveCoding は事前コーディング禁止だったので、半分は反則技ですね。とはいえ、研究してないと20分間悩んで終わっていたので、必要な技術の下調べは必要かもしれません。

あと、トップバッターで感覚が分からずひたすらコーディングしたのですが、他の人は喋りながらやっていたので、ある程度は解説しながらやったほうがよかったかな。

**ソースコード
ソースコードは &lt;a href=&quot;http://tech.nitoyon.com/misc/live_coding5/test.mxml&quot;&gt;こちら&lt;/a&gt; に置いておきました。

いちおうここにも張っておきます(72行)
====
&gt;|javascript|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!-- DataGrid control example. --&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot; applicationComplete=&quot;init()&quot;&gt;
  &lt;mx:Script&gt;
    &lt;![CDATA[
      private function init():void
      {
        var loader:URLLoader = new URLLoader();
        loader.addEventListener(&quot;complete&quot;, complete);
        loader.load(new URLRequest(&quot;xml/dump.xml&quot;));
      }

      private function complete(event:*):void
      {
        var loader:URLLoader = URLLoader(event.target);
        var xml:XML = XML(loader.data);

        dg.dataProvider = xml..item;

        parseTag(xml);
      }

      private function parseTag(xml:XML):void
      {
        var ns:Namespace = new Namespace(&quot;http://purl.org/dc/elements/1.1/&quot;);
        var tags:Object = {};
        for each(var tag:XML in xml..ns::subject)
        {
          tags[tag.toString()] = tags[tag.toString()] ? tags[tag.toString()]+ 1 : 1;
        }
        trace(tags);

        var a:Array = [];
        for(var id:String in tags)
        {
          trace(id + &quot; &quot; + tags[id]);
        }
      }

      private function clickHandler():void
      {
        var url:String = dg.selectedItem.link.toString();
        
        navigateToURL(new URLRequest(url));
      }


      private function changeHandler():void
      {
        dg.dataProvider.filterFunction = function(item:Object):Boolean
        {
          return item.title.indexOf(q.text) != -1;
        }
        dg.dataProvider.refresh();
        trace(&quot;change&quot;);
      }
    ]]&gt;
  &lt;/mx:Script&gt;

      &lt;mx:HBox&gt;
        &lt;mx:Text text=&quot;検索&quot;/&gt;
        &lt;mx:TextInput id=&quot;q&quot; change=&quot;changeHandler()&quot;/&gt;
      &lt;/mx:HBox&gt;

      &lt;mx:DataGrid id=&quot;dg&quot; width=&quot;100%&quot; height=&quot;100%&quot; rowCount=&quot;5&quot;&gt;
          &lt;mx:columns&gt;
              &lt;mx:DataGridColumn dataField=&quot;title&quot; headerText=&quot;title&quot;/&gt;
              &lt;mx:DataGridColumn dataField=&quot;description&quot;/&gt;
          &lt;/mx:columns&gt;
      &lt;/mx:DataGrid&gt;
      &lt;mx:Button label=&quot;open&quot; click=&quot;clickHandler()&quot;/&gt;
&lt;/mx:Application&gt;
||&lt;

</body>
</day>
<day date="2007-12-03" title="">
<body>
*ruby_abc*[ruby]Ruby で スイーツ(笑)関数
**Ruby はじめました(冷やし中華的な発音で)
LiveCoding#5 にて 「Ruby とか Haskell は分かってて当たり前よね」 という空気だったので、今更ながらに Ruby を勉強しはじめた。

Haskell は難しいらしいので、ちょっと先延ばし。

参考資料：
-&lt;a href=&quot;http://dev.ariel-networks.com/articles/workshop/ruby/&quot;&gt;プログラミング言語Ruby ? ありえるえりあ&lt;/a&gt;
-&lt;a href=&quot;http://blog.masuidrive.jp/index.php/2007/08/13/php-to-rails/&quot;&gt;masuidrive on rails ≫ Blog Archive ≫ PHPユーザの為のRuby/Rails入門&lt;/a&gt;

**初めてのコーディング
LiveCoding 後に cuzic さん邸で LiveCoder を中心に反省会というか雑談をしてた。

そのときに話題に上った「スイーツ（笑）」関数で &lt;strong&gt;フィボナッチ数&lt;/strong&gt; を求めるようにしてみた。
&gt;|ruby|
def スイーツ(笑)
    if 笑 == 1 || 笑 == 2
        return 1
    end
    return スイーツ(笑 - 1) + スイーツ(笑 - 2)
end

(1..10).each{|i| puts スイーツ(i)}
||&lt;

**出力
うまくいってる。わーい。
&gt;|sh|
&gt;ruby -KU Test.rb
1
1
2
3
5
8
13
21
34
55
||&lt;
UTF-8 で保存して、-KU オプションをつけて実行した。

**ちょっと改善
三項演算子も使えるようだ。あと、Perl みたいに return は省略できるわけね。ふむふむ。
&gt;|ruby|
def スイーツ(笑)
  笑 == 1 || 笑 == 2 ? 1 : スイーツ(笑 - 1) + スイーツ(笑 - 2)
end
||&lt;
これより短くできるんだろうか？　えろい人に期待。

**雑感
-irb がいい！
--すぐに試せる
--サンプルをちょっと変えたときにどうなるか分かる
--methods とかでメソッド一覧も見れるから、リファレンス代わりにも使える
-オブジェクト指向！
--[] とか + すらもメソッドだったりする設計が好き。内部設計を変に隠そうとしてないから取っ付きやすい。
--&quot;hoge&quot;.object_id が毎回違うあたりの潔さがステキ
--だからこそ、シンボルが重要になるわけね。ふむふむ。
-スコープはまだよく分からん
--&lt;a href=&quot;http://blog.masuidrive.jp/index.php/2007/08/13/php-to-rails/&quot;&gt;masuidrive on rails ≫ Blog Archive ≫ PHPユーザの為のRuby/Rails入門&lt;/a&gt;の17ページ目に出てくるサンプルが、書いてあることと挙動が違う
--と思ったら、&lt;a href=&quot;http://moriq.tdiary.net/20070829.html&quot;&gt;3 日坊主日記 - Rubyのスコープ&lt;/a&gt; で突っ込まれてた
--じゃあ、どういうときに変数スコープができるんだろ

**続きます
次回は、Web2.O(笑) を作る予定。
</body>
<comments>
<comment>
<username>cuzic</username>
<body>先日は大変お世話になりましたっ。&lt;br&gt;またいつでもお越しくださいませ。&lt;br&gt;&lt;br&gt;Ruby のスコープは、do ～ end とクラス、モジュール、メソッド定義で新しいスコープが作られるはずですよ。</body>
<timestamp>1196642946</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>お世話になりました。そして、ありがとうございます。&lt;br&gt;なるほど。do～end あたりまで学習が進んだら試してみます！</body>
<timestamp>1196657019</timestamp>
</comment>
<comment>
<username>YasuyukiMiura</username>
<body> def スイーツ(笑)&lt;br&gt;   笑-3 &lt; 0 ? 1 : スイーツ(笑 - 1) + スイーツ(笑 - 2)&lt;br&gt; end&lt;br&gt;とかどうですか。</body>
<timestamp>1196772919</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-04" title="">
<body>
*ico_gpl*ICO の GPL 違反について詳しい友達に聞いてみた
先日、話題になった &lt;a href=&quot;http://japanese.engadget.com/2007/11/29/ico-gpl/&quot;&gt;プレイステーション2ゲーム『ICO』にGPL違反発覚 - Engadget Japanese&lt;/a&gt; という記事に「GPL ライセンスのライブラリを利用しているからソースを公開しなければならない」とあった。

この手の GPL 関連のニュースは今まで何度も出てきてたけど、いまいち腑に落ちてなかったので詳しい友人に聞いてみた。組み込みLinuxみたいな仕事をしてる人なので、そこそこ信用できるのではないかと。

以下、そのまとめ。（あまり詳しくない人間がまとめているので、間違いがあったらツッコミください）

**GPL と LGPL
例えば、glibc（GNU C Library）はよく使われるライブラリだけど、これをリンクした途端に「はい全部 GPL ね」っていうのは余りに乱暴なので、LGPLっていうライセンスで公開されている。

LGPL なライブラリを動的リンクするだけなら、そのソフトウェアを公開するライセンスに関する制約は生まれない。

ただし、LGPLの場合は、最終的なプログラムを所有するユーザが、LGPLなライブラリだけアップデートできるようにするために、再リンクできるようにしとかないといけない、といった制約はある。

それに対し、GPL なライブラリだと、動的リンクでも GPL に縛られるようになる（とするが一般的のようだ）。

**「ICO」の件
今回の ICO では「libarc」という GPL のライブラリを利用していた。

だから余裕でアウトになる。

GPL を含んでいるバイナリには GPL が適用されるわけで、そのソースを公開しないといけない。

GPL の公開範囲は、厳密に言うとかなり曖昧なのが現状で、抜け道というかグレーゾーンはある。例えば、プロセス間通信して GPL なバイナリと通信しているだけだよ、と主張すると、GPL が適用されるかは微妙になってくる。

この辺のグレーなところを包括しよう、というのが今話題の GPLv3 だそうだ。

**補足
Software Licence は民事なので、実は、訴えられない限りは（社会的評判はさておき）大丈夫だったりする。

さらに、GPL はしょせん仕様許諾なので、提供者から GPL でない個別ライセンスを提供してもらう（金払うとかコミュニティごと買収するとか）っていう手もある。

**参考リンク
-&lt;a href=&quot;http://www.ibm.com/developerworks/jp/opensource/library/itm-oss2/&quot;&gt;オープンソースで行こう！: 第2回 オープンソースライセンス事情を俯瞰する&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/futsu-9/20071202/p1&quot;&gt;ICOのGPL違反問題 - フツーな日常&lt;/a&gt;
-&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0609/01/news011.html&quot;&gt;ITmedia エンタープライズ：GPLにまつわる10個の誤解 (1/3)&lt;/a&gt;
-&lt;a href=&quot;http://ja.wikipedia.org/wiki/GNU_General_Public_License&quot;&gt;GNU General Public License - Wikipedia&lt;/a&gt;
-&lt;a href=&quot;http://ja.wikipedia.org/wiki/GNU_Lesser_General_Public_License&quot;&gt;GNU Lesser General Public License - Wikipedia&lt;/a&gt;
</body>
</day>
<day date="2007-12-06" title="">
<body>
*recent_bookmark*最近ブックマークしたページ
Web を巡回していて気になったページは、&lt;a href=&quot;http://b.hatena.ne.jp/nitoyon/&quot;&gt;自分のはてなブックマーク&lt;/a&gt; に追加していってます。

はてブに埋もれさせておくのはもったいないんだけど、単独で記事にするのも大げさかな、というものをピックアップして、ちょろっと補足していってみます。

枠内がブックマークしたときの自分のコメント、その下が補足コメントです。

**芸術の感じ方
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://www.excite.co.jp/News/bit/00091195484774.html&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://www.excite.co.jp/News/bit/00091195484774.html&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.excite.co.jp/News/bit/00091195484774.html&quot;&gt;「ピカソの絵ってヘン」って言っても良いですか | エキサイトニュース&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;解説に翻弄されず、ただ楽しもう。←音楽で例えると、CD聞く時間よりライナーノーツ読む時間の方が長いなんてありえない。数百文字の解説を読むのなんて最初から諦めて、作品と向き合った方がいいのかもしれん。
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
好きな音楽聴いたり、ニコニコ動画みたり、そういうときと同じ姿勢で高尚な芸術にも触れ合いたいものだ。美術館に行くと、ついつい展示品に添えられた説明を読んで納得してしまうが、それは自分の感じ方に自信がないから、他人の解説に頼りがちになってるんだよな。本当は感じ方なんて人それぞれなはず。大事なのは「他人がどう思っているか」ではなく「自分がどう思うか」。「考える」のではなく「感じる」姿勢を忘れないようにしよう。

**最近見つけた素敵なサイト
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://www.volll.com/&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://www.volll.com/&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.volll.com/&quot;&gt;volll&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;JSをうまく使った１画面Webサイト。ページ内スクロール。Flashはほとんど使わず、JSアニメーションで動いてる。JSオフでもそれなりに見れるのも素敵。 via &lt;a href=&quot;http://www.webcreme.com/&quot;&gt;Web Creme&lt;/a&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
このサイトは久々に自分の中でヒットした Web デザイン。JS だけでも、センスある人が作るといいサイトができる、というよい見本。

**ブログって何よ
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/tokuhirom/20071130/1196380700&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://d.hatena.ne.jp/tokuhirom/20071130/1196380700&quot; alt=&quot;&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tokuhirom/20071130/1196380700&quot;&gt;「ひととおりできあがったらオープンソースにして公開します」の罠 - TokuLog 改め だまってコードを書けよハゲ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;「一通り整理してから資料公開します」「一通りまとめてからブログで公開します」とかもある。まとめずに勢いで公開した方がいいことある。サービスだけじゃなくて、人間も「永遠のベータ版」でいいと思うこのごろ。
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
ブログを書くときに、きちんとした記事にしようとすると、いつまで経っても何も書けない。てきとーにやるのが一番。読む立場から考えても、前提から解説していく杓子定規な記事よりも、本質をズバッと書いてある記事のほうが読みやすかったりする。

知ってることよりも知らないことを書いたほうが、理解度が深まっていいこと多いね。間違ってたら、誰かが優しく教えてくれる。すばらしい。

amachang の &lt;a href=&quot;http://d.hatena.ne.jp/amachang/20070419/1177005134&quot;&gt;親友へ。ブログを書こう。&lt;/a&gt; の心境が最近分かってきた。

**Web のワイドショー化
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://tail.s68.xrea.com/blog/2007/12/post_112.html&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://tail.s68.xrea.com/blog/2007/12/post_112.html&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://tail.s68.xrea.com/blog/2007/12/post_112.html&quot;&gt;しっぽのブログ： マスコミ以上に一次情報にあたらない、撤回しないネットマスコミ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;痛いニュースのワイドショー化。読者は面白ければよいし、管理人はアクセス増えれば満足。構造はマスコミと一緒。補足をするこのエントリの声が本家より小さいところも一緒。結局こういうところに行き着くのかねぇ。
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
炎上を楽しむ空気に違和感があった理由が分かった。なんだか切ない。

**パワポ2007が起動しない
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://genky.justblog.jp/genky/2007/10/powerpoint_view_2dde.html&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://genky.justblog.jp/genky/2007/10/powerpoint_view_2dde.html&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://genky.justblog.jp/genky/2007/10/powerpoint_view_2dde.html&quot;&gt;Genkyのメモ帳： PowerPoint Viewer 2007 が起動しない場合の対処法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;PowerPoint Viewer 2007 が起動しない問題を解決する方法を分かりやすく解説。ちなみに、1041が日本語ロケールID、1033は米国英語のロケールID。MS公式の文章は&lt;a href=&quot;http://support.microsoft.com/kb/929353/en&quot;&gt;http://support.microsoft.com/kb/929353/en&lt;/a&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
バグや不具合についての情報を support.microsoft.com できちんと公開してる点については、Microsoft はもっと評価されてもいいはず（怪しい自動翻訳で萎えたりもするんだけど）。

こういうブログ記事のほうが分かりやすかったりするから、ついついそっちを見ちゃうんだけど、レジストリやファイルをいじるような手順は MS が公開している一次情報で確認してから実施したいところ。

**ただのネタ
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://chaosch.blog106.fc2.com/blog-entry-253.html&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://chaosch.blog106.fc2.com/blog-entry-253.html&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://chaosch.blog106.fc2.com/blog-entry-253.html&quot;&gt;寿司に溺れるＪＫです・・・ カオスちゃんねる&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;就職して最初の給料日に、会社の先輩に回転寿司に連れて行かれました。お店に入ると、いろんな寿司が回っていました。先輩は「ヒラメ」とすぐに注文していたけど、僕は寿司を食べるのが初めてだったので（わっふる
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
リンク先にちなんだネタ。もちろんフィクションです。

**新しいサービスにぐちぐち
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20071127_vector_ad_free/&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://gigazine.net/index.php?/news/comments/20071127_vector_ad_free/&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20071127_vector_ad_free/&quot;&gt;Vector、有料ソフトを無料で使えるようにするサービス開始 - GIGAZINE&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;タイトルで期待したけど、10年前のビジネスモデルで脱力。アプリケーションの一部に広告入れるフレームワークを開発者に提供できるならすごいのに。
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
いまどきシェアウェアなんてはやらないから、結局 Web サービス＋広告が無難になっちゃう。ローカルアプリでも広告ビジネスしたい！

**経済のからくり
&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://res2ch.blog76.fc2.com/blog-entry-2463.html&quot;&gt;&lt;img src=&quot;http://img.simpleapi.net/small/http://res2ch.blog76.fc2.com/blog-entry-2463.html&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;hatena-asin-detail-image&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://res2ch.blog76.fc2.com/blog-entry-2463.html&quot;&gt;２ちゃんねる実況中継 マクドナルド原価一覧表&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li class=&quot;hatena-asin-detail-label&quot;&gt;２ちゃんねる実況中継 マクドナルド原価一覧表&lt;/a&gt;:真偽はともかくとして、サイドメニューやセットで儲けてることがよく分かる。「セットはいかがですか」には理由があるわけだ。コンビニが唐揚げやおでんをPRしまくるのも同じ理由ですね。
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;

宣伝するからには裏がある。

**おしまい
次回は、最近 Twitter にポストした内容をまとめるかもしれません。
</body>
</day>
<day date="2007-12-07" title="">
<body>
*ruby_abc2*[ruby]Ruby で Web2.0（笑）
Ruby 勉強第２弾。前回の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071203/ruby_abc&quot;&gt;スイーツ（笑）で関数定義&lt;/a&gt; に引き続いて、今回はクラスと Mix-in を試してみた。

ModuleO に O というメソッドを定義しておき、クラスメソッド、インスタンスメソッド、特異メソッドとして Mix-in している。
&gt;|ruby|
# モジュールを定義
module ModuleO
  def O(*args)
    # クラスを取得する
    cls = self.kind_of?(Class) ? self : self.class

    #  &lt;class name&gt;.0 を出力
    print &quot;#{cls.to_s}.0&quot;

    # 引数があれば出力
    unless args.empty?
      print &quot;(#{args[0].to_s})&quot;
    end

    # 改行
    puts
  end
end

# クラスメソッドとして Mix-in
class Web2
  extend ModuleO
end

# インスタンスメソッドとして Mix-in
class DoCoMo2
  include ModuleO
end
ドコモ2 = DoCoMo2.new

# 特異メソッドとして Mix-in
ActionScript3 = &quot;AS3&quot;
ActionScript3.extend ModuleO

# 実験！
Web2.O(&quot;笑&quot;)       # Web2.0(笑)
ドコモ2.O(&quot;笑&quot;)    # DoCoMo2.0(笑)
ActionScript3.O    # String.0
||&lt;

**ポイント
どのケースでもクラスを取得するために
&gt;|ruby|
self.kind_of?(Class) ? self : self.class
||&lt;
と書いてみた。

クラスメソッドとして Mix-in されるときは、self はクラス自身を指す（上の例だと Web2 クラス）。だから、self.kind_of?(Class) は true になる。

インスタンスメソッドおよび特異メソッドとして Mix-in されるときは、self がインスタンスを指す（上の例だと ドコモ2 と ActionScript3）。なので、self.kind_of?(Class) は false になって、self.class でクラスを取得している。

もっといい書き方はあるんだろか。

**ちなみに
Web2.O とあるけど、メソッド名に 0（ゼロ）は使えないので、大文字の O（オー）で代用してます。
</body>
</day>
<day date="2007-12-10" title="">
<body>
*adobe_new_design*アドビの新サイトがすごいことになってる
まあまあ、何はともあれ、次のキャプチャを見てくれ。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071210/20071210003047.jpg&quot; width=&quot;448&quot; height=&quot;297&quot; alt=&quot;アドビについて&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
これはアドビの「&lt;a href=&quot;http://www.adobe.com/jp/aboutadobe/&quot;&gt;会社情報 &amp;gt; アドビについて&lt;/a&gt;」のページの一画面だ。

Adobe が先週末にサイトデザインを一新して、何気なく色んなページを見て回っていたときに発見したんだけど、この画像、どう見ても日本語だ。

「ディッ」と読める。

ん？

これ？

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071210/20071210003046.gif&quot; width=&quot;192&quot; height=&quot;48&quot; alt=&quot;ディック&quot;&gt;

消費者金融の「ディック」。「ィ」の折れ曲がり具合といい、これとしか思えない。

もしや、「消費者金融で借金してでもアドビの製品を買いましょう」というメッセージなのか？

何はともあれ、会社情報を表示するページで関連のない別会社の看板を表示して、しかもそれが消費者金融というのは、ちょっといかがなものかと思ってしまう…。いや、消費者金融を悪く言うつもりはないんだけど…。

**よくあることなのかもね
深読みはいいとして、実は&lt;a href=&quot;http://www.adobe.com/aboutadobe/&quot;&gt;英語版の会社情報のページ&lt;/a&gt;でも同じ画像が使われている。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071210/20071210003044.jpg&quot; width=&quot;350&quot; height=&quot;207&quot; alt=&quot;About Adobe&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
ということで、おそらく日本語が読めない人間が「この写真はクールだぜ！」とかなんとか言って、文字の内容までは考えずにイメージ画像に採用したんだろう。

そういや、「日本人は意味も分からずに横文字を使うから、ネイティブの人が読んだらギョッとすることがある」という話を聞いたことがある。

今回のケースはその逆バージョンなのかもしれない。たしかにこれはギョッとする。

ここから学べることとしては…写真素材を使う場合には、そこに書いてある文字を英和辞典で調べるぐらいのことはしましょう、ってことぐらいか。

（2007/12/10 23:00 追記） Adobe 日本法人側で対策したようで、日本版のサイトでは上記の画像は出なくなりました。&lt;a href=&quot;http://www.my-chicken-heart.com/2007/12/post_153.html&quot;&gt;残念なことにつめが甘い。アドビのサイトのあの画像が修正されたとおもったら・・・: マイチキンハート&lt;/a&gt; によると、日本版でも背景画像としてうっすら使われているようです。英語版にはまだ残っているので、興味のある人は &lt;a href=&quot;http://www.adobe.com/aboutadobe/&quot;&gt;英語版&lt;/a&gt; を見てください。
</body>
<comments>
<comment>
<username>通りすがり</username>
<body>これは笑えますねぇ&lt;br&gt;&lt;br&gt;ついでにアドビ日本法人が、全くの木偶の坊だってことの証明ですね。&lt;br&gt;バグ一つ治す能力のない日本法人は消えて無くなればいいと思います。</body>
<timestamp>1197232219</timestamp>
</comment>
<comment>
<username>Pepe</username>
<body>昔、知り合いの海外出身の方に聞いた話。ハワイで背中に「Kinki」という文字が入った上着（ジャケット？）を着ていた東洋人の集団がいたそうな。それを見たその方は大爆笑したそうな。何でかって？「Kinki ＝ ヘンタイ」を意味するからですよ ^_^; たぶん、日本からのツアー団体だったと思われます。 「近畿」をローマ字にしたんだと思います。迷子にならないようにみんな同じ上着を帰させられてたのかな．．．一人ならまだしもヘンタイ集団ですよ（爆</body>
<timestamp>1197233355</timestamp>
</comment>
<comment>
<username>peropero</username>
<body>あはははは。&lt;br&gt;変な日本語刺青彫られてる外人みたいですねぇ。&lt;br&gt;…大手企業だったらもうちょっと調べろと。</body>
<timestamp>1197245253</timestamp>
</comment>
<comment>
<username>i2i</username>
<body>ディックって発音を英語に直すと、dick だよねぇ。&lt;br&gt;&lt;br&gt;・・・いいのかなぁ。いいのかなぁ。</body>
<timestamp>1197247875</timestamp>
</comment>
<comment>
<username>soulram</username>
<body>確かに、英訳はマズいかんじですよね・・・＾＾</body>
<timestamp>1197250264</timestamp>
</comment>
<comment>
<username>ディック</username>
<body>なかなかおもしろい　http://jim.hyu.jp</body>
<timestamp>1197255140</timestamp>
</comment>
<comment>
<username>ってことは・・・</username>
<body>『KinKi Kids』って『変態の子供たち』って意味にｗ</body>
<timestamp>1197261363</timestamp>
</comment>
<comment>
<username>おいおい</username>
<body>変態なら Kinki じゃなくて Kinky でしょ？&lt;br&gt;書くなら英和辞典で調べるぐらいのことはしましょうw</body>
<timestamp>1197269759</timestamp>
</comment>
<comment>
<username>okinagatarasihime</username>
<body>クールすぎますｗ</body>
<timestamp>1197270870</timestamp>
</comment>
<comment>
<username>うーんと</username>
<body>普通にイイと思います。</body>
<timestamp>1197274060</timestamp>
</comment>
<comment>
<username>peropero</username>
<body>日本のサイトは消えたみたい・・・（´・ω・`）</body>
<timestamp>1197277141</timestamp>
</comment>
<comment>
<username>CFJ</username>
<body>ディックってダイエーの子会社だったけどGEが買収したのじゃなかった？&lt;br&gt;と、思って調べてみたら米シティバンクのシティグループの一員のCFJって会社がやってる。同じ米系の会社ってコトだね。</body>
<timestamp>1197277182</timestamp>
</comment>
<comment>
<username>Pandasista</username>
<body>やや、どうも。 はてな村ではパン田ジス太のkazzenです。&lt;br&gt;「ディック」ほってんとり、おめでとうございます。&lt;br&gt;僕の息子も喜んでいます。 えぇ、ギンギンに。</body>
<timestamp>1197384784</timestamp>
</comment>
<comment>
<username>そういう訳で</username>
<body>近畿大学の英語ロゴのTシャツはいいお土産になるそうです</body>
<timestamp>1197389797</timestamp>
</comment>
<comment>
<username>宣伝</username>
<body>こちらよろしく！！&lt;br&gt;http://ameblo.jp/rfid-huis-eric9080/</body>
<timestamp>1197469130</timestamp>
</comment>
<comment>
<username>ディックって言うな</username>
<body>大日本インキ化学工業の略称の音読と同じですね。&lt;br&gt;しかし、英語圏企業の会社なのにこの程度のリサーチもできないとは困ったものです。</body>
<timestamp>1197534144</timestamp>
</comment>
<comment>
<username>toby</username>
<body>http://eow.alc.co.jp/Kinki%20/UTF-8/&lt;br&gt;kinki 特に見当たらないのですが、スラングですかね？？？</body>
<timestamp>1198327930</timestamp>
</comment>
<comment>
<username>ディックはやめました</username>
<body>紛らわしいので DIK(ディックと読んでいた) は看板変えました。</body>
<timestamp>1199881345</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-11" title="">
<body>
*boost_asign*[c++]C++ の std::vector に v += 3, 1, 4 で push_back
&lt;a href=&quot;http://d.hatena.ne.jp/faith_and_brave/20071127/1196154125&quot;&gt;boost::assign使ってみた - Faith and Brave - C++で遊ぼう&lt;/a&gt; にて boost::assign の使い方が紹介されていた。
&gt;|cpp|
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;shand/foreach.hpp&gt;
#include &lt;boost/assign/std/vector.hpp&gt;

using namespace std;
using namespace boost::assign;

int main()
{
    vector&lt;int&gt; v;

    v += 3, 1, 4; // ！！！

    for(unsigned int i = 0; i &lt; v.size(); i++)
        cout &lt;&lt; v[i] &lt;&lt; endl;

    return 0;
}
||&lt;
おおおおお、なんかすごい…！

普通なら
&gt;|cpp|
    v.push_back(3);
    v.push_back(1);
    v.push_back(4);
||&lt;
と書かなきゃならないところを
&gt;|cpp|
    v += 3, 1, 4;
||&lt;
と書ける。

自分の C++ の常識からするとびっくりするような書き方なのだけど、C++ ではカンマ演算子は一番優先度が低く設定されていて、
&gt;|cpp|
    ((v += 3), 1), 4;
||&lt;
という順番で実行されるわけだ。+= 演算子では、戻り値として list_inserter クラスが返されていて、これのカンマ演算子がオーバーロードされているらしい。

**boostのソースを再現
試しに、boost のソースに当たってみたが、テンプレート使いまくりで理解が困難だったので、このサンプルを動かすのに必要な機能だけを抽出してみた。
&gt;|cpp|
#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

// list_inserter クラスの定義
template&lt;class T&gt;
class list_inserter
{
private:
    std::vector&lt;T&gt;&amp; c;

public:
    list_inserter( vector&lt;T&gt;&amp; c ) : c( c)
    {}
    
    list_inserter&amp; operator,( const T&amp; r )
    {
        c.push_back( r );
        return *this;
    }

    list_inserter&amp; operator()( const T&amp; t )
    {
        c.push_back( t );
        return *this;
    }
};

// += 演算子の定義
template&lt; class T &gt;
inline list_inserter&lt;T&gt;
operator+=( std::vector&lt;T&gt;&amp; c, T v )
{
    return list_inserter&lt;T&gt;( c )( v );
}
||&lt;

operator+=( std::vector&lt;T&gt;&amp; c, T v ) で vector に対する += 演算子を定義している。普通なら、vector に push_back するだけなんだけど、ここで list_inserter を作成して返している。

結果として、次のカンマで list_inserter のカンマ演算子オーバーロードが呼ばれて、vector に push_back されるというわけだ。

**list_inserter を汎用的に
上の list_inserter は型を vector&lt;T&gt; に決め打ちしているが、実際の boost のコードは vector だけじゃなく、他のコンテナ(map とか queue とか...)にも対応している。

どうやってるかというと、コンテナに要素を追加するためのクラスが用意されている。
-vector の場合は boost::assign_detail::call_push_back
-map の場合は boost::assign_detail::call_insert
といった具合。

list_inserter では、このクラス経由でコンテナに追加している。上の list_inserter で c.push_back( t ) と決めうちしてる部分が、追加するためのクラスのメソッド呼び出しに変わるわけだ。

この仕組みのおかげで、コンテナの実体が vector なのか map なのかによらず、同じコードで実装できるようになる。デザパタでいうところの Strategy パターンってとこだろうか。

</body>
</day>
<day date="2007-12-12" title="">
<body>
*pipes_page_fetch*[pipes]Yahoo! Pipes の Page Fetch モジュールでスクレイピングし放題
このブログでも何度か Yahoo! Pipes の話題は取り上げてきましたが、&lt;a href=&quot;http://blog.pipes.yahoo.com/2007/12/06/new-fetch-page-module-and-nice-web-path-enhancement/&quot;&gt;先日実装された「Page Fetch」モジュール&lt;/a&gt;は素敵すぎます。ほんとに。

今まで、Yahoo! Pipes といえば、XML・CSV か Yahoo が提供してるサービスのデータを加工することしかできませんでした。それが、「Page Fetch」モジュールの登場により、&lt;strong&gt;任意の Web ページを加工&lt;/strong&gt;できるようになったのです。

Yahoo! Pipes の使い道といえば、次の２つだと思います。
:1. RSSリーダーで読むための XML 作り:複数の RSS を結合したり、見た目を整えたりして、自分専用の RSS を作る。&lt;br&gt;（例）&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070424/bookmarked_summary&quot;&gt;サイトの最新被ブックマークを livedoor Reader で読むための Pipes&lt;/a&gt;
:2. Web サービスとの連携:JSONP に対応してるので、JavaScript と組み合わせてサーバーレスに色々できる。crossdomain.xml に対応しているので、ActionScript と組み合わせてサーバーレスに色々できる。&lt;br&gt;（例）&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071025/p1&quot;&gt;丸ビルRSSリーダー&lt;/a&gt;
このいずれに関しても、「Page Fetch」モジュールで可能性が広がってきます。

**1. RSSリーダーで読むための XML 作り
任意のページの HTML を取ってこれるようになったおかげで
-RSS 配信していないページの RSS を作れます。
-全文配信していないページの RSS の全文配信版を作れます。

ためしに、作ったのがこれ。&lt;a href=&quot;http://www.fujiwarashinya.com/talk/index.php&quot;&gt;Shinya talk&lt;/a&gt; という藤原新也さんのブログの RSS を作成してみました。
-&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/shinya_talk_rss&quot;&gt;Shinya talk を RSS 化&lt;/a&gt;
ソースはこんな感じ。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071212/20071212093138.jpg&quot; width=&quot;450&quot; height=&quot;353&quot;&gt;&lt;/center&gt;&lt;
+Fetch Page でページを取得して、「&amp;lt;a id=&quot;」で分割（配列ができる）
+Rename を使って title, description, link に移動（配列を RSS 形式に変換）
+Regex を使って不要な部分を取り除いて、URL や本文を抽出

RSS は http://pipes.yahoo.com/nitoyon/shinya_talk_rss?_render=rss から取得できます。レッツ購読。

**2. Web サービスとの連携
こっちは例を見てもらうほうが早いかな。&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hatebucount&quot;&gt;はてブ ブックマーク件数一括取得API&lt;/a&gt; というのを作ってみました。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071212/20071212093137.jpg&quot; width=&quot;350&quot; height=&quot;155&quot;&gt;&lt;/center&gt;&lt;

はてなブックマークのブックマーク件数を一括で取得するための Pipe です。Web サービスから使うイメージを醸し出すために API と名づけてます。

はてなが用意する &lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%B7%EF%BF%F4%BC%E8%C6%C0API?kid=146686&quot;&gt;ブックマーク件数取得 API&lt;/a&gt; は XML-RPC なので JS や AS からは扱いづらいし、RSS にもブックマーク数が入っていません。&lt;a href=&quot;http://i.hatena.ne.jp/idea/3693&quot;&gt;はてなアイデア - HTML→RSS で情報が落ちすぎ。ブックマーク数、できればタグとカテゴリもつけてほしい&lt;/a&gt; という要望が放置されているところを見ると、今後も RSS にブックマーク件数が追加される予定はなさそうです。

ってことで、「Page Fetch」モジュールを使って、ページ内のブックマーク一覧をスクレイピングしてます。JS や AS からこの API を使うこともできますし、サーバー側の Perl や PHP から XML をパースして利用も OK。

Yahoo! Pipes 側にキャッシュが効いてるので、はてなのサーバーに負荷をかけすぎる心配もありません。

***応用例
この Pipe を活用して、&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hatebu_bookmark_ranking&quot;&gt;複数ドメインの人気エントリランキング&lt;/a&gt; というのを作ってみました。雰囲気を知るには &lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hatebu_bookmark_ranking?url1=http%3A%2F%2Fwww.100shiki.com%2F&amp;url2=http%3A%2F%2Fgigazine.net%2F&amp;url3=http%3A%2F%2Fd.hatena.ne.jp%2F&quot;&gt;サンプルデータつき&lt;/a&gt; のものを見たほうがイメージが沸きやすいかもしれません。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071212/20071212093134.jpg&quot; width=&quot;350&quot; height=&quot;175&quot;&gt;&lt;/center&gt;&lt;

通常、URL 別でしか人気エントリを見れないのですが、複数のURLで集計できます。

複数の場所でサイトを運営してる人は、自分が運営してるサイトを入れてみるとちょっと楽しいと思います。ブログの端っこに貼り付けてもいいかもしれませんね。

**注意点
ちょっとはまったところ。
:正規表現が必要:正規表現が分からないと自作するのはきつい。HTML はたいてい複数行なので s オプションをつけるのを忘れずに。
:なぜかパースできない HTML がある:ヘルプには「robots.txt を設置していたり、meta タグで noindex しているサイトはパースできない」とあるが、それ以外のページでも失敗することがある。どうせ正規表現でパースするんだから好きにさせてほしい。
:最後に正規化される:a タグに rel=&quot;nofolow&quot; が追加されたり、相対リンクが消えたり、HTML 的に変なところを正規化する。途中のモジュールをプレビューしたときも HTML が正規化されているが、正規化は一番最後に走るので混乱しないよう。スクレイピングするサイトのソースを見ながら作業したほうがよさそう。
:かなり面倒:Yahoo! Pipes の応答速度が結構遅くて、１箇所変更しては２～３秒待っては確認を繰り返す必要あり。根気が必要。
地味に少しずつ機能追加されていってる Yahoo! Pipes ですが、まだまだできることは限られています。やりたいことを実現するには頭をひねらないといけません。けれども、そういうところも含めて論理パズルのようで楽しかったりもします。

**関連リンク
-&lt;a href=&quot;http://blog.fkoji.com/2007/12071331.html&quot;&gt;Yahoo! Pipesに任意のウェブページを切り取って分割できるFetch Pageモジュールが追加された - F.Ko-Jiの「一秒後は未来」&lt;/a&gt;
-&lt;a href=&quot;http://muumoo.jp/news/2007/12/12/0pageloader.html&quot;&gt;URLを渡すとページの内容(htmlソース)をJSONPとかで取得できるAPIをYahoo! Pipesで作った(管理人日記) - むぅもぉ.jp&lt;/a&gt;
-&lt;a href=&quot;http://www.ac.cyberhome.ne.jp/~mattn/cgi-bin/blosxom.cgi/software/lang/javascript/20071212120815.htm&quot;&gt;Big Sky :: JSONでHTMLを取得するYahoo! Pipesが凄い&lt;/a&gt;
</body>
</day>
<day date="2007-12-13" title="">
<body>
*jquery_jsonp*[JavaScript]jQuery で JSONP ２通り
jQuery を使って JSONP でリクエストする方法を２通り紹介するよ。

**その１: $(&quot;&amp;lt;script&amp;gt;&quot;)
&lt;code&gt;document.createElement()&lt;/code&gt; を &lt;code&gt;$()&lt;/code&gt; を使って実現する。
&gt;|javascript|
$(&quot;&lt;script&gt;&quot;)
    .attr('type', 'text/javascript')
    .attr('src', &quot;http://www.example.com/jsonp.cgi?param1=value1&amp;callback=myCallback&quot;)
    .appendTo($(&quot;head&quot;));

function myCallback(json){
    // ロード完了時にここが呼ばれる
}
||&lt;

http://www.example.com/jsonp.cgi?param1=value1&amp;callback=myCallback にリクエストがいく。

&lt;code&gt;callback&lt;/code&gt; のところは、サービスによって指定の仕方が違うかもね。

**その２: $.ajax
&lt;code&gt;$.ajax&lt;/code&gt; の &lt;code&gt;dataType&lt;/code&gt; で &lt;code&gt;jsonp&lt;/code&gt; が使える。
&gt;|javascript|
$.ajax({
    url : &quot;http://www.example.com/jsonp.cgi&quot;,
    dataType : &quot;jsonp&quot;,
    data : {
        param1 : &quot;value1&quot;
    },
    success : function(json){
        // ロード完了時にここが呼ばれる
    },
    error : function(){
        alert('error');
    }
});
||&lt;
こっちの方がシンプルに書ける。コールバック用の関数は jQuery が自動的に生成して、結果に応じて &lt;code&gt;success&lt;/code&gt; や &lt;code&gt;error&lt;/code&gt; を呼び出してくれる。

API によってはコールバックを指定するためのパラメータが &lt;code&gt;callback&lt;/code&gt; ではなくて、別の名前の場合がある。このときは &lt;code&gt;jsonp&lt;/code&gt; パラメータを指定する。
&gt;|javascript|
$.ajax({
    url : &quot;http://www.example.com/jsonp.cgi&quot;,
    dataType : &quot;jsonp&quot;,
    data : {
        param1 : &quot;value1&quot;
    },
    jsonp : &quot;jsoncallback&quot;, // ← !!!これ!!!
    success : function(json){
        // ロード完了時にここが呼ばれる
    },
    error : function(){
        alert('error');
    }
});
||&lt;

裏側では、http://www.example.com/jsonp.cgi?jsoncallback=jsonp1197507452843&amp;_=1197507453671&amp;param1=value1 という URL にリクエストが行く。&lt;code&gt;jsonp1197507452843&lt;/code&gt; というのが jQuery が動的に生成するコールバック関数。呼び終わったら、ちゃんと自分自身を &lt;code&gt;undefined&lt;/code&gt; にしているので、グローバル名前空間を汚すのも一瞬で済むようだ。

</body>
<comments>
<comment>
<username>ujihisa</username>
<body>jQueryすげぇぇぇぇぇぇぇぇぇぇぇ</body>
<timestamp>1197509502</timestamp>
</comment>
<comment>
<username>ajax まにあ</username>
<body>jsonp万歳</body>
<timestamp>1222317020</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-17" title="">
<body>
*haiku_rss*[pipes]Yahoo! Pipes で「はてなハイク」用のRSSを作った
&lt;a href=&quot;http://h.hatena.ne.jp/&quot;&gt;はてなハイク&lt;/a&gt; が楽しい。

ちょろっと絵を描いて、リロードしたらスターがついていて、すぐ反応がもらえるところがうれしくなる。はてなスターのおかげでリアルタイム性が増えてる気がする。

で、まだ RSS が吐かれていないようなので、Yahoo! Pipes の Page Fetch モジュールを使って、野良 RSS を作成してみた。

-http://pipes.yahoo.com/nitoyon/hatena_haiku_rss

(追記 12/18) &lt;a href=&quot;http://d.hatena.ne.jp/hatenahaiku/20071218/1197977474&quot;&gt;RSS が出力されはじめた&lt;/a&gt;ようですが、画像は URL だけしか吐かれていないようです。&lt;strong&gt;画像系の追っかけなら私の RSS の方がお薦めですよ！！&lt;/strong&gt;

(追記 12/25) HTML が変わってスクレイピングに失敗していたので、これを機に RSS を加工して画像を埋め込むように修正しました。

**livedoor Reader で購読するとこんな感じ
投稿者のアイコンも本家と同じサイズで配置されます。
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071217/20071217094726.jpg&quot; width=&quot;200&quot; height=&quot;231&quot; border=&quot;1&quot;&gt;

**使い道
-特定のキーワードの RSS を購読
--&lt;a href=&quot;http://h.hatena.ne.jp/keyword/%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%95%E3%82%93&quot;&gt;はてなデフォルトさん&lt;/a&gt; とか、&lt;a href=&quot;http://h.hatena.ne.jp/keyword/%E6%97%A5%E6%9C%AC%E3%81%AE%E3%83%AD%E3%82%B4&quot;&gt;日本のロゴ&lt;/a&gt; とか、&lt;a href=&quot;http://h.hatena.ne.jp/keyword/%E3%81%8A%E7%B5%B5%E3%81%8B%E3%81%8D%E3%81%97%E3%82%8A%E3%81%A8%E3%82%8A&quot;&gt;お絵かきしりとり&lt;/a&gt; とか絵の多いものが楽しいかも
-自分の id に対する発言を購読
-特定の絵がうまい人の発言を購読
といったあたり。

**弱点は
:複数購読してるときに、どの RSS も「はてなハイクRSS」になってしまう:Yahoo! Pipes 側で対応してくれないかなぁ。どうしても嫌な人は、Clone してタイトルを変えたものを複数作るとよいかと。
:HTMLが変わったら…:スクレイピングにはありがちな悲劇。落ち着いたころに、はてな側で RSS を吐くようにしてくれたら嬉しいですね。
</body>
</day>
<day date="2007-12-20" title="">
<body>
*kyoto_bus*[pipes]京都市バスの路線別 停留所取得API公開
今回も Pipes ネタ。例によって Fetch Page モジュール。今まで「Page Fetch」だと勘違いしてたが、どうやら「Fetch Page」だったらしい。あちゃー。

で、本題。京都市バスの路線別 停留所 API を &lt;a href=&quot;http://pipes.yahoo.com/nitoyon/kyoto_busstop&quot;&gt;Yahoo! Pipes で作ってみた&lt;/a&gt;。

**サンプル作ってみた
この Pipes を使ったサンプルを作ってみた。→ &lt;a href=&quot;http://tech.nitoyon.com/misc/js/kyoto_bus/&quot;&gt;京都バス案内 (デモ)&lt;/a&gt;

&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/misc/js/kyoto_bus/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071220/20071220092540.jpg&quot; width=&quot;450&quot; height=&quot;340&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

-左の系統一覧を選択したら、右側に詳細が出る。
-停留所をクリックしたら時刻表が表示される。

JavaScript＋jQuery＋JSONP で実装してるよ。

そのまんまだけど、API 使ってる気分になってきた。

**すごくない？
絶対に API を公開しそうにない京都市交通局の HTML を使って、外部の人間が勝手に API 化しちゃってるわけですよ。

Web 1.0 なページを、無理やり Web 2.0 化ですよ。なんでもかんでもマッシュアップですよ。

Yahoo! Pipes なので、もれなく JSONP にも対応、crossdomain.xml にも対応、RSS 出力にも対応、Yahoo! だからそこそこ信頼性ある、などなど申し分ないスペック。

自分でサーバー側のスクリプト書くと、動かなくなったらどうしようとか、負荷分散はどうしようとか、ディスクいっぱいになったらどうしようとか、無駄に心配することが増えるけど、そういうストレスからも開放。

自分はサーバーサイドを考えずに、クライアント側に注力したい人間なので、Yahoo! Pipes は楽しいサービスなのです。あと、落ちてたら Yahoo! のせいにできるし…(笑)

**仕組み
まあ、詳しくはソースを見てもらうとして、簡単に概要を説明。

まず、入力された系統番号から京都市交通局の URL を構築する。17号系統なら &lt;a href=&quot;http://www.city.kyoto.jp/kotsu/busdia/keitou/kto/017.htm&quot;&gt;http://www.city.kyoto.jp/kotsu/busdia/keitou/kto/&lt;strong&gt;017&lt;/strong&gt;.htm&lt;/a&gt; といった具合。

この URL に対して Fetch Page モジュールで取得して、正規表現でごにょごにょっと RSS を作り上げる。

結果、&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/kyoto_busstop?_render=rss&amp;num=017&quot;&gt;こんな RSS&lt;/a&gt; になるわけです。

最寄の観光地の情報が含まれてるのが京都っぽいですね。
</body>
<comments>
<comment>
<username>水道水</username>
<body>にとよんさん、すごい！！&lt;br&gt;&lt;br&gt;pipesは、自分のコードを非公開にしつつ、RSS（URLへのアクセス）の公開は可能なのでしょうか？</body>
<timestamp>1198122083</timestamp>
</comment>
<comment>
<username>Inetgate</username>
<body>水道水 さん、&lt;br&gt;&lt;br&gt;Pipesは作ったものをPublishした時点でソースを含めて全体に公開されてしまいます。とはいえ、他人の作ったPipesは編集出来ないようになっており、無理矢理編集しようとするとClone（要するにコピー）がMy Pipesのページに作成されます。&lt;br&gt;&lt;br&gt;個人的には、あそこに作ったPipesが、どの程度の個数、他の人にコピーされていくのかが、作成者の名誉になっていると思っています。&lt;br&gt;&lt;br&gt;シンプルで便利なものを作れば、それだけ他の人にコピー（利用）されるようです。&lt;br&gt;# 別にコピーされたからといって減るもんでもないので．．．</body>
<timestamp>1199767405</timestamp>
</comment>
<comment>
<username>mokari99</username>
<body>「絶対に API を公開しそうにない京都市交通局」っていうところが本当にすごいと思いました。</body>
<timestamp>1200935903</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-21" title="">
<body>
*flash2007*あなたの「すごい Flash 2007」を教えてほしい
(追記) &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071225/p1&quot;&gt;集計結果をまとめました&lt;/a&gt;。でもまだまだ募集中です！

久々に Flash なエントリ。今年から本格的に Flash / ActionScript を勉強し始めて、いろんな Flash サイトや ActionScript のサンプルを見てきたので、自分のお気に入りを選んでみようと思った。

で、せっかくなので自分以外の人のお気に入りも知りたい！

いいものを知りたいし、どういう物をすごいと思うかでその人のことが分かるかなー、と。

ということで大募集。

**募集概要
あなたが今年すごいと思った Flash を教えてください！！

***対象となる Flash
-今年発表された Flash でなくても、あなたが今年すごいと思ったものを教えてください！
-Flash ならなんでも OK
--フルフラッシュサイトとか
--HTML の一部に埋め込まれている Flash とか
--どこかのブログ載っていたサンプル Flash とか
--Flex でも、AIR でも…
--自分が作った Flash でも
-１個でも10個でも好きなだけ教えてほしい
-どこが「すごい」のか書いてあれば、なおさら嬉しい

***参加方法
これも自由に。このブログを見ているあなたの「すごい Flash」を聞きたい。
-ここのコメント欄でも
-ブログ持ってる人は自分のブログでも
-はてブや del.icio.us なんかのコメント欄でも
思い出すたびにコメント欄に書き込んでくれるぐらいの勢いで教えてほしい。

**よろしくおねがいします！
気軽に教えてください。

自分がすごいと思ったものは、週明けぐらいの次回のエントリにて。

*fulltext_feed*[pipes]Yahoo! Pipes で強制全文配信化
そろそろ Yahoo! Pipes ネタも飽きてきたので、このエントリで一区切り。

今回は Yahoo! Pipes を使って、本文が一部分しか含まれていない RSS を全文配信にしてしまいます。題材として、&lt;a href=&quot;http://ameblo.jp/wakatsuki/&quot;&gt;若槻千夏のブログ『マーボー豆腐は飲み物です』&lt;/a&gt; を取り上げましょう。

**完成品、どん。
-&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/wakatsuki&quot;&gt;マーボー豆腐は飲み物です 全文配信化RSS&lt;/a&gt;
-RSS 版は http://pipes.yahoo.com/nitoyon/wakatsuki?_render=rss

**仕組み
Loop モジュールがポイントですよ。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20071221/20071221015504.jpg&quot; width=&quot;450&quot; height=&quot;465&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
+Fetch Feed で RSS を取ってくる。
+Loop モジュールの中に Fetch Page を入れて、item.link の URL を取ってくる。
+取得した HTML から Regex モジュールで本文を抜き出す。
+Rename モジュールで description を上書きする。

Feed の数だけ Fetch Page しています。なかなか極悪。

できたー、と思ったら、もっと汎用的なものを作ってる人がいました。

Ameblo 全部に対応した Pipes です。
-&lt;a href=&quot;http://pipes.yahoo.com/closer_nabeshimaeido/amebloall&quot;&gt;Pipes: Ameblo Content All&lt;/a&gt;

**お薦め情報源など
Yahoo! Pipes の最新情報は &lt;a href=&quot;http://blog.pipes.yahoo.com/&quot;&gt;Pipes Blog&lt;/a&gt; で仕入れることができます。開発チームが追加した機能やちょっとした Tips を紹介してくれます。

ちなみに、私が作った Pipes は http://pipes.yahoo.com/nitoyon/ から見ることができます。といっても、全部このブログで紹介してますが。

それ以外にも、Yahoo! Pipes 上には数多くの Pipes が公開されています。&lt;a href=&quot;http://b.hatena.ne.jp/entrylist?url=http%3A%2F%2Fpipes.yahoo.com%2F&amp;sort=eid&quot;&gt;はてなブックマーク - pipes.yahoo.com の新着エントリー&lt;/a&gt; あたりをウォッチしてみると、いろいろ発見できそうですね。

**おまけ
１つ面白いのを発見したので最後に紹介しましょう。

&lt;a href=&quot;http://pipes.yahoo.com/pipes/pipe.info?_id=krYP4oZg3BGiikp59IS63A&quot;&gt;Pipes: Japanese Idol Photo on Flickr&lt;/a&gt; という Pipes です。Flickr からアイドル写真を抜き出してくれます。

アイドルを抽出する方法が気になってソースを覗いてみたら、なんと、Pipe の中にアイドル名が生で埋め込まれていました。力技！！　というか作者の趣味がよく分かりますｗ
</body>
<comments>
<comment>
<username>ll_koba_ll</username>
<body>GOD&lt;br&gt;http://naggg.jp/god/&lt;br&gt;神懸かったAS3の技術に驚いた！</body>
<timestamp>1198206974</timestamp>
</comment>
<comment>
<username>suztomo</username>
<body>Fuwatterつくりました!&lt;br&gt;http://suztomo.net/fuwatter/</body>
<timestamp>1198212201</timestamp>
</comment>
<comment>
<username>ll_koba_ll</username>
<body>株式会社ガジェログ&lt;br&gt;http://www.gadgelog.com/&lt;br&gt;軽くてサクサク動く。雰囲気も好き。&lt;br&gt;&lt;br&gt;グリコ乳業　プッチンプリン スペシャルサイト&lt;br&gt;http://pucchin.jp/&lt;br&gt;プッチンプリン物語がおもしろい。&lt;br&gt;&lt;br&gt;飼ウカウゲーム牧場　|　グリコ息抜き牧場&lt;br&gt;http://www.glico.co.jp/bokujo/game/game.htm&lt;br&gt;牛がかわいい。&lt;br&gt;&lt;br&gt;ConverseRussia.Ru - Tra-la-la with a piece of bwahaha - News&lt;br&gt;http://www.converserussia.ru/&lt;br&gt;ゴチャゴチャ感が好き</body>
<timestamp>1198216379</timestamp>
</comment>
<comment>
<username>zyass_tak</username>
<body>分かりやすいUI、ページ内での配慮(新着)、ページ全体の軽さ&lt;br&gt;2007で自分の一番ヒットはFICCさん会社ページです。&lt;br&gt;http://www.ficc.jp/</body>
<timestamp>1198220249</timestamp>
</comment>
<comment>
<username>やきいも</username>
<body>http://eye.kddi.com/content.html&lt;br&gt;KDDIのflashです。&lt;br&gt;１つ１つの動画が全部で１つの動画みたいに&lt;br&gt;動いてておもしろかったです。</body>
<timestamp>1198243314</timestamp>
</comment>
<comment>
<username>ujihisa</username>
<body>Desktop Tower Defense&lt;br&gt;あれに何百時間奪われたことやら</body>
<timestamp>1198259352</timestamp>
</comment>
<comment>
<username>suztomo</username>
<body>uniclock、お姉さんがリズムに合わせてダンスする時計というアイデアが素敵だった。</body>
<timestamp>1198277971</timestamp>
</comment>
<comment>
<username>zk3</username>
<body>Splice&lt;br&gt;http://www.splicemusic.com/&lt;br&gt;Flashでここまで音声をいじるのか…という衝撃と、UIの作りこみっぷり等々色んな意味で衝撃的でした個人的に。</body>
<timestamp>1198291010</timestamp>
</comment>
<comment>
<username>FurnitureGiver</username>
<body>いっぱいあるので2つに分けます。まず&lt;br&gt;BiggsGlimore: http://www.biggs-gilmore.com/&lt;br&gt;Cannon: http://www.canon-europe.com/eos400d/&lt;br&gt;DailyMotion: http://www.dailymotion.com/jukebox3d&lt;br&gt;DesignsBlind: http://clients.designisblind.com/boxwood/winesofsubstance.com/r5/</body>
<timestamp>1198311860</timestamp>
</comment>
<comment>
<username>FurnitureGiver</username>
<body>さらに&lt;br&gt;Mr.doob : http://mrdoob.com/&lt;br&gt;Nike：http://nike.com/jumpman23/m4/&lt;br&gt;NitroGroup: http://www.nitrogroup.com/&lt;br&gt;これらはPapervision3DのMailingListで紹介されたものです。&lt;br&gt;ちなみに僕もチョイいじってますが(http://furnituregiver.blog51.fc2.com/)、半端じゃないほどのクオリティーです。</body>
<timestamp>1198311932</timestamp>
</comment>
<comment>
<username>tk3</username>
<body>クレラップのバナーです。&lt;br&gt;http://www.interactive-salaryman.com/pieces/krewrap_j/mac.html</body>
<timestamp>1198325517</timestamp>
</comment>
<comment>
<username>sukesam</username>
<body>自分のサイトですが、、、&lt;br&gt;http://jirox.net/as3/BlurHighlight/&lt;br&gt;画像のジェネレータ系で、画像のハイライトや角丸を行います。&lt;br&gt;今まではサーバに一度送信してからのUIでしたが、&lt;br&gt;これはブラウザ上でリアルタイムにパラメータ変更後のイメージが&lt;br&gt;見れるので、自分的には革新的だと思っています。</body>
<timestamp>1198516654</timestamp>
</comment>
<comment>
<username>bigchu</username>
<body>インテルのスペック対決&lt;br&gt;http://www.intel.co.jp/jp/personal/campaign/promotion/index.htm#/splash/</body>
<timestamp>1198585870</timestamp>
</comment>
<comment>
<username>m&amp;m’z</username>
<body>あの～ 自分が開発に関わっているので、、、&lt;br&gt;http://www.tsukuba.info/mapoint/g/&lt;br&gt;ストリートビューのFLV版みたいなものです。&lt;br&gt;地図上のＶＭアイコンにカーソルを近づけると青い矢印が&lt;br&gt;表示されるので、行きたい方向をクリックして下さい。</body>
<timestamp>1198660351</timestamp>
</comment>
<comment>
<username>pica2</username>
<body>●モリィの書庫（仮）&lt;br&gt;http://www7a.biglobe.ne.jp/~morry/&lt;br&gt;ゲームのFANサイトなので、趣旨違いの可能性はありますが凝りまくりのFlashなのに表示ももたつかないし素晴らしい。&lt;br&gt;手当たり次第にクリックしまくるのが正しい遊び方です（多分）</body>
<timestamp>1198748255</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>いいですね、これ。&lt;br&gt;pipesコピーさせて貰いました。&lt;br&gt;Amebloは1ページ1記事だったり無駄にアクセス数稼ぎとか面倒でした。&lt;br&gt;普通に全文配信してほしいものです。</body>
<timestamp>1201609111</timestamp>
</comment>
<comment>
<username>eimei</username>
<body>「Ameblo 全部に対応した Pipes です。」&lt;br&gt;いいですね、これ。&lt;br&gt;そっかーモジュール化もできるのか、、知らんかった。&lt;br&gt;http://es.prit.jp/php-rss/index.php</body>
<timestamp>1212211455</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-25" title="">
<body>
*p1*すごい Flash 2007 集計結果
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071221/flash2007&quot;&gt;前回の募集エントリ&lt;/a&gt; に多数のコメントありがとうございます。初めて見るものも多くておもしろいです。

私もまとめましたよ。気合入れて書いたので &lt;a href=&quot;http://tech.nitoyon.com/as/sugoi_flash_2007.html&quot;&gt;本家のほうに掲載&lt;/a&gt; しておきました((というのは嘘で大人の事情です。分かりやすくいうとアフィリエイト目的です。あとは察すべし))。かなり長くなっちゃったけど、渾身の記事なので時間見つけて読んでくれると嬉しいです。

まだまだ募集中ですが、教えてもらったすごい Flash を紹介していきます（随時追加）。あくまで個人ブログでの突発的企画なので、数も少ないですが、何かの参考になれば幸いです。

※ このブログで募集したこともあって、技術的なものや広告コンテンツが中心になってます。


**ブログエントリ
-&lt;a href=&quot;http://d.hatena.ne.jp/guri_2/20071222/1198296310&quot;&gt;わたしの「すごい Flash 2007」まとめ - Attribute=51&lt;/a&gt;
-&lt;a href=&quot;http://ra66it.net/blog/index.php?ID=689&quot;&gt;2007年 すごいと思った Flash のサイト | ra66it.net&lt;/a&gt;
-&lt;a href=&quot;http://tech.nitoyon.com/as/sugoi_flash_2007.html&quot;&gt;この Flash がすごい 2007 [てっく煮]&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/fk_2000/20071225/p2&quot;&gt;わたしがすごいと思った Flash はこれ！ - ネットランダム&lt;/a&gt;
-&lt;a href=&quot;http://level0.cuppy.co.jp/2007/12/2007web.php&quot;&gt;2007年のWebサイトを振り返ってみる｜_level0.CUPPY&lt;/a&gt; （応募していただいたわけではないけど、Flash を中心としたサイトをまとめてらっしゃるので、勝手にリンクさせてもらいます。）
**ブックマーク
&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/nitoyon/20071221/flash2007&quot;&gt;はてなブックマーク&lt;/a&gt;、&lt;a href=&quot;http://clip.livedoor.com/page/http://d.hatena.ne.jp/nitoyon/20071221/flash2007&quot;&gt;livedoor Clip&lt;/a&gt;、&lt;a href=&quot;http://del.icio.us/url/a8c4e1f560cc2597ff07d6c85e067fc0&quot;&gt;del.icio.us&lt;/a&gt; などで教えてもらったもの。

星は私のお薦め具合（３点満点）。コメントは私の主観。
-&lt;a href=&quot;http://d.hatena.ne.jp/koyachi/20071016/1192476930&quot;&gt;YouTubeをAscii Artで再生するGreasemonkeyスクリプト - koyachiの日記&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★&lt;/font&gt;&lt;br&gt;動画を外からアスキーアートに加工していく。ちなみに、最新の Flash Player では &lt;a href=&quot;http://saqoosha.net/2007/07/22/609/&quot;&gt;YouTube の画像を BitmapData として取得する手法&lt;/a&gt; は &lt;a href=&quot;http://saqoosha.net/2007/12/19/628/&quot;&gt;使えなくなった&lt;/a&gt; ので注意が必要。
-&lt;a href=&quot;http://lab.andre-michelle.com/fl-909&quot;&gt;FL 909&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★★&lt;/font&gt;&lt;br&gt;AS3 で音遊びの先駆け。この辺の技術をライブラリ化したのが &lt;a href=&quot;http://code.google.com/p/popforge/&quot;&gt;popforge&lt;/a&gt;。
-&lt;a href=&quot;http://coderepos.org/share/wiki/FlMML&quot;&gt;FlMML - CodeRepos::Share - Trac&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★&lt;/font&gt;&lt;br&gt;popforge を活用して、ピコピコ音楽を再生できるようにしたライブラリ。はてなダイアリーに &lt;a href=&quot;http://d.hatena.ne.jp/hatenadiary/20071011/1192086766&quot;&gt;MML 記法&lt;/a&gt; として取り込まれて一大ブームを巻き起こした。

**コメント欄
紹介者の名前とコメントは &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071221/flash2007#c&quot;&gt;コメント欄&lt;/a&gt; をご覧ください。

星は私のお薦め具合（３点満点）。コメントは私の主観。好き勝手言っててホントすいません。
-&lt;a href=&quot;http://naggg.jp/god/&quot;&gt;GOD&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;写真１枚ネタ。Flash はほとんど関係ない…(笑)。同じ作者の&lt;a href=&quot;http://www.trick7.com/blog/2007/12/11-075046.php&quot;&gt;年賀状を届けにいくよツアー2007&lt;/a&gt;も面白い。
-&lt;a href=&quot;http://suztomo.net/fuwatter/&quot;&gt;Fuwatter - Explore fuwafuwa twitter!&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;&lt;br&gt;Twitter をビジュアライズ。Twitter は Flash だけに限らず、外部でいくつものサービスが出来たのが印象的だった。
-&lt;a href=&quot;http://www.gadgelog.com/&quot;&gt;株式会社ガジェログ&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★★&lt;/font&gt;&lt;br&gt;アニメ風の疑似3D。各物体の位置と大きさだけ変化させて3Dっぽく見せている。現実的な3Dの落としどころとして興味深い。
-&lt;a href=&quot;http://pucchin.jp/&quot;&gt;グリコ乳業　プッチンプリン スペシャルサイト&lt;/a&gt; &lt;br&gt;プッチンプリン物語がお薦めだそう。
-&lt;a href=&quot;http://www.glico.co.jp/bokujo/game/game.htm&quot;&gt;飼ウカウゲーム牧場　|　グリコ息抜き牧場&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;牛育てをするキャンペーンサイト。アカウント取らなきゃいけないようだったので試さなかった。お試しのリンクがあると、障壁は減るのに。
-&lt;a href=&quot;http://www.converserussia.ru/&quot;&gt;ConverseRussia.Ru - Tra-la-la with a piece of bwahaha&lt;/a&gt; &lt;br&gt;いかにもコンバースっぽいごちゃごちゃしたトップページ。個人的には、酔うのでこの手のサイトは苦手。クリッカブルな場所も分からないので、すぐ嫌になる。
-&lt;a href=&quot;http://www.ficc.jp/&quot;&gt;FICC inc. | Creative Solutions&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★&lt;/font&gt;&lt;br&gt;あえて Flash で HTML っぽい情報量の多いページを作った感じ。作りこみに脱帽だが、ここまで作りこむと、逆にキーボードで操作できない点に不満が残ってしまう。
-&lt;a href=&quot;http://eye.kddi.com/content.html&quot;&gt;EYE-PROJECT BY KDDI&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;動画をタイル状に並べたのが印象的。AS3 を使ったサイトとしても先駆け。fladdict さんの関連エントリ（&lt;a href=&quot;http://fladdict.net/blog/2007/03/eyeproject_by_kddi_1.html&quot;&gt;その１&lt;/a&gt;、&lt;a href=&quot;http://fladdict.net/blog/2007/03/flex2.html&quot;&gt;その２&lt;/a&gt;）も必見。
-&lt;a href=&quot;http://www.handdrawngames.com/DesktopTD/game.asp&quot;&gt;Desktop Tower Defense&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;&lt;a href=&quot;http://blog.pasonatech.co.jp/masuda/399/4047.html&quot;&gt;睡眠不足になる&lt;/a&gt;などと紹介されて、各所ではまる人が続出した Flash ゲーム。私ははまらずに避けて通った。
-&lt;a href=&quot;http://www.uniqlo.jp/uniqlock/&quot;&gt;UNIQLOCK&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★★&lt;/font&gt;&lt;br&gt;インパクトがでかかった UNIQLO のキャンペーンサイト。その後にリリースされた &lt;a href=&quot;http://www.trick7.com/blog/2007/07/07-083220.php&quot;&gt;WORLD UNIQLOCK&lt;/a&gt; や &lt;a href=&quot;http://www.uniqlo.com/grid/&quot;&gt;UNIQLO_GRID&lt;/a&gt; なども面白かった。
-&lt;a href=&quot;http://www.splicemusic.com/&quot;&gt;Splice: Make Music. Remix Music. &gt; Meet. Mix. Mashup.&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;AS3 で音声 RIMIX できるサイト。音マニアには堪らないかも。
-&lt;a href=&quot;http://www.biggs-gilmore.com/&quot;&gt;Creative Problem Solving - Biggs|Gilmore&lt;/a&gt; &lt;br&gt;トップページの写真プレビューが3D。動作が重い自己満足系。こういった3Dの使い方が続けば、Flash うぜーと思う人は続出すると思う。
-&lt;a href=&quot;http://www.canon-europe.com/eos400d/&quot;&gt;Canon EOS 400D&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;写真をつなぎ合わせて疑似3Dにしている EOS のヨーロッパ版キャンペーンサイト。ロードに時間かかるし、動作も重い。すごいと紹介されなければ、真っ先にブラウザ閉じてる。技術的には面白いと思う。
-&lt;a href=&quot;http://www.dailymotion.com/jukebox3d&quot;&gt;Dailymotion - 動画を共有する&lt;/a&gt; &lt;br&gt;やたら重いので、すぐ閉じた。この手のサイトはなくなってほしい。Flash の評判を下げるだけ。
-&lt;a href=&quot;http://clients.designisblind.com/boxwood/winesofsubstance.com/r5/&quot;&gt;WINES OF SUBSTANCE - Washington State Periodic Table of Wines&lt;/a&gt; &lt;br&gt;PV3D 使った UI。重いけど、ぎりぎり許容範囲か。個人サイトなら、これぐらい好き勝手やるのも、まあアリかな。どうせ同業者しか見ないんだし。
-&lt;a href=&quot;http://mrdoob.com/&quot;&gt;Mr.doob&lt;/a&gt; &lt;br&gt;重いので注意。PV3D の新機能がすごいよね、というデモ。技術デモなら多少重くても許すが、普通のサイトで使ってたら二度と訪れない。
-&lt;a href=&quot;http://nike.com/jumpman23/m4/&quot;&gt;M4&lt;/a&gt; &lt;br&gt;Nike が PV3D 使ったコンテンツ。
-&lt;a href=&quot;http://www.nitrogroup.com/&quot;&gt;Nitro Group&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★&lt;/font&gt;&lt;br&gt;3D を効果的に使ったサイト。ぐりぐり動く様子が気持ちいい。PV3D を使った数少ない成功例。だけどもローディングに時間かかりすぎるので、普通の人はたぶん待たない。
-&lt;a href=&quot;http://www.interactive-salaryman.com/pieces/krewrap_j/mac.html&quot;&gt;クレラップのバナー&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★★&lt;/font&gt;&lt;br&gt;Web ならではの面白いバナー。TVCM のように洗練されたアイデアに感動。
-&lt;a href=&quot;http://jirox.net/as3/BlurHighlight/&quot;&gt;BlurHighlight&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★★&lt;/font&gt;&lt;br&gt;ASで画像加工。AS 使えばサーバーに投げることなくプレビューできるジェネレータが作れるので、操作感が圧倒的に向上するはず。
-&lt;a href=&quot;http://www.intel.co.jp/jp/personal/campaign/promotion/index.htm#/splash/&quot;&gt;インテル：パソコンの中ではこのくらいの変化は、もう常識&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★&lt;/font&gt;&lt;br&gt;自分のCPUとintelの最新CPUが戦う、という視点が面白い。
-&lt;a href=&quot;http://www.tsukuba.info/mapoint/g/&quot;&gt;つくば市地図情報システム「つくばMapoint(GoogleMap版)」｜茨城県｜つくば市｜&lt;/a&gt;&lt;br&gt;Google Maps に Flash をオーバーレイ。FLV 再生。
-&lt;a href=&quot;http://www7a.biglobe.ne.jp/~morry/&quot;&gt;モリィの書庫（仮）&lt;/a&gt; &lt;font color=&quot;#F4B128&quot;&gt;★★★&lt;/font&gt;&lt;br&gt;ゲームのファンサイトということで、ゲームっぽい見た目がおもしろい。音のON/OFFを選べたり、HTML（＋JavaScript）版を用意していたり、作りこみがすごい。残念なのは、トップページの先が、地味な HTML なところ。トップページと雰囲気をそろえて、気分を損ねないようになれば文句なし。

まだまだ募集中ですよ！！！

ちょっと思ったこと。根っからの Flash 屋さんは、フルフラッシュサイトにこだわりがちなんだろうか。意外にも、ニコニコ動画や Ustream を挙げる人がいないくて不思議だった。広く使われたという意味では、今年１番の Flash 事例だと思うんだけどな。技術畑出身の人がサイトの一部にうまいこと Flash を組み込んでいく流れは今後も止まらないだろう。
</body>
</day>
<day date="2007-12-26" title="">
<body>
*air_guide*[air][書籍]読まずに紹介「AIR プログラミングガイド」
&lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/as30/&quot;&gt;ActionScript 3.0メモ&lt;/a&gt; や &lt;a href=&quot;http://www.saturn.dti.ne.jp/~npaka/flash/apollo10/index.html&quot;&gt;Adobe AIRメモ&lt;/a&gt; でお馴染みの布留川さんの AIR 本が出版されたようです。
asin:4839926077:detail
布留川さんとは asin:4756150322:title の共著仲間(?)でもあります。

それはそうと、AIR はβ版が出るたびに仕様が変わっているのが不安です。特に、アプリケーション記述ファイル(ADF)は α版、β1、β2、β3 で全く互換性がないという…。正式リリースは 2008年初めとのことだったけど、Adobe の上条さんのブログによると
&gt;http://cuaoar.jp/2007/12/air-3.html:title&gt;
ベータ 3 は正式リリース前の最後のベータになる予定（いまのところ）ですので、今後大幅な変更は無いものと思われます。
&lt;&lt;
とのこと。「いまのところ」に不安を感じるのは私だけでしょうか…。

なにはともあれ、正式版が出るまでは私は静観の予定でございます。

*as_event_extra_arg*[as]イベントハンドラに追加のパラメータを渡す
&lt;a href=&quot;http://www.reflektions.com/miniml/template_permalink.asp?id=438&quot;&gt;Reflektions miniml &gt; AS3 : passing extra arguments to an event handler&lt;/a&gt; より。

AS3 でイベントハンドラに追加の値を渡したいときにはどうするか。

**送信側から渡すとき
イベントオブジェクトにパラメータをくっつけて dispatch する。リンク先で紹介されている方法がこれ。

イベントを送信するコードを自分が作る場合は一番素直かと。パラメータは全ての listener に伝達される。

個人的には、イベントの種類ごとにクラスを定義するのはめんどくさい。そんな人には、DynamicEvent クラスを作っておくのがお薦め。
&gt;|javascript|
package {
    import flash.events.Event;

    public dynamic class DynamicEvent extends Event {
        public function DynamicEvent(type:String, 
                                     bubbles:Boolean = false,
                                     cancelable:Boolean = false) {
            super(type, bubbles, cancelable);
        }

        override public function clone():Event {
            return new DynamicEvent(type, bubbles, cancelable);
        }
    }
}
||&lt;
Flex SDK には mx.events.DynamicEvent というクラスが定義されている。中身も同じ。SDK で開発してる人は、そっちを使うのがよろしいかと。

送信側はこう。
&gt;|javascript|
var event:DynamicEvent = new DynamicEvent(&quot;myEvent&quot;);
event.param1 = &quot;文字列&quot;;
event.param2 = [1, 2, 3];  // 配列もOK
dispatchEvent(event);
||&lt;
受信する側はこう。
&gt;|javascript|
addEventListener(&quot;myEvent&quot;, function(event:DynamicEvent):void {
    trace(event.param1); // 文字列
});
||&lt;
dynamic クラスなので、コード補完してくれないし、入力ミスしたときにエラーにもならない。それが嫌ならクラスとして定義すべきなんだけど、めんどくさいときはこれでいくのが楽なのでおすすめ。

**受信側で追加する場合
送信側に手が出せないときとか、受信側で追加のパラメータを付け加えるときには、クロージャ使うのが手軽。
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class MyClass extends Sprite {
        // コンストラクタ
        public function MyClass() {
            var counter:int = 0;
            stage.addEventListener(&quot;click&quot;, function(event:Event):void {
                clickHandler(event, counter++);
            });
        }

        // イベントハンドラ
        private function clickHandler(event:Event, counter:int):void {
            trace(counter);
        }
    }
}
||&lt;

プライベートな変数にしてもいいけど、その場合はクラス内全体からアクセスする必要がある場合に絞ったほうがよいだろう。
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class Test extends Sprite {
        // プライベート変数に
        private var counter:int;

        // コンストラクタ
        public function Test() {
            counter = 0;
            stage.addEventListener(&quot;click&quot;, clickHandler);
        }

        // イベントハンドラ
        private function clickHandler(event:Event):void {
            trace(counter);
            counter++;
        }
    }
}
||&lt;

</body>
</day>
<day date="2007-12-27" title="">
<body>
*cmpop*[jQuery][javascript][as]論理演算子（&amp;&amp; と ||）を応用する
jQuery のソースコードを見ていて面白いのがあった。

&gt;|javascript|
function add(a, b){
    addImpl(b &amp;&amp; a, b || a);
}


function addImpl(a, b){
    // ...
}
||&lt;

理解するためには、論理演算子を詳しく理解する必要がある。

**論理演算子詳細
JavaScript（というか ECMAScript）の論理演算子は、評価結果が true/false で返される訳ではなく、結果が確定した時点で評価した値が返される。

まずは、|| を試してみよう。
&gt;|javascript|
alert(2 || 0);         // 2
alert(2 || 3);         // 2
alert({} || null)      // [object Object]

alert(0 || 3);         // 3
alert(0 || 0);         // 0
alert(0 || undefined); // undefined
||&lt;
左オペランドが true として評価できるなら、左オペランドの値自身が返る。右オペランドはどんな値だったとしても評価結果が返る。

ECMAScript の仕様書から抜き出すと、こういう手順になってる。
+左オペランドを評価する
+左オペランドの結果を Boolean に変換
+変換結果が true なら、&lt;strong&gt;左オペランドの評価結果&lt;/strong&gt;を返す
+右オペランドを評価
+&lt;strong&gt;右オペランドの評価結果&lt;/strong&gt;を返す
alert(0 || 0) と alert(0 || undefined) の結果が違うあたりが面白い。

次は、&amp;&amp;。
&gt;|javascript|
alert(2 &amp;&amp; 3);         // 3
alert(1 &amp;&amp; {})         // [object Object]

alert(2 &amp;&amp; 0);         // 0
alert(null &amp;&amp; 3);      // null
alert(0 &amp;&amp; undefined); // 0
||&lt;
左オペランドが true として評価できるなら、右オペランドの評価結果が返り、そうでない場合は左オペランドの結果が返る。

ECMAScript の仕様書には次のようにある。
+左オペランドを評価する
+左オペランドの結果を Boolean に変換
+変換結果が false なら、&lt;strong&gt;左オペランドの結果&lt;/strong&gt;を返す
+右オペランドを評価する
+&lt;strong&gt;右オペランドの評価結果&lt;/strong&gt;を返す

ということで、ECMAScriptは、論理演算子の結果が Boolean とは限らないわけだ。Perl や Ruby でも似たような感じなので、スクリプト系ではこういう仕様が多いのかな。

ちなみに、3 &gt; 1 は 3 とはならずに true となるので注意が必要。

**で、最初の例に戻る。
&gt;|javascript|
function add(a, b){
    addImpl(b &amp;&amp; a, b || a);
}


function addImpl(a, b){
    // ...
}
||&lt;
add が呼ばれたときに、a と b が undefined でない場合、
-b &amp;&amp; a =&gt; a
-b || a =&gt; b
なので、addImpl に適切に a と b が渡る。

a が undefined でなく、b が省略された場合（つまり、undefined の場合）は、
-b &amp;&amp; a =&gt; undefined
-b || a =&gt; a
となる。

**まとめると、
&gt;|javascript|
add(3);
||&lt;
と
&gt;|javascript|
add(undefined, 3);
||&lt;
が同じになる。第１引数を省略できるわけだ。

**感想
デフォルト引数の感覚からいくと、省略可能な引数は後ろにあってほしいんだけどな…。
ただ、論理演算子で処理を実行する技はよく使うので覚えておいたほうがよさげ。
-JavaScript で undefined を防ぐために param || {};
-Perl で open(FILE, &quot;foo.txt&quot;) or die;
とかはよく見るよ。

</body>
<comments>
<comment>
<username>yossy44</username>
<body>return cache[key] || (cache[key] = new Hoge());&lt;br&gt;とかよくやる</body>
<timestamp>1198753779</timestamp>
</comment>
</comments>
</day>
<day date="2007-12-30" title="">
<body>
*kotoshi_matome*今年まとめ（自己満足）
**今年の人気エントリ
ブックマーク御礼。
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070320/apollo_preview1&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - Apollo 触ってみた。すごすぎ。&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00503.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071212/pipes_page_fetch&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;Yahoo! Pipes の Page Fetch モジュールでスクレイピングし放題 - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00325.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070125/p1&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;はてブのCSSをカスタマイズしてみた [tech.nitoyon.com@hatena]&lt;/strong&gt;&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00275.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071001/tyouzetsu_as&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - ActionScript 的超絶技巧発表会に参加してきました&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00238.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070914/how_to_install_rascut&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - ActionScript やるなら入れとけ。rascut 導入と使い方。&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00180.png&quot;&gt;
+&lt;a href=&quot;http://tech.nitoyon.com/apollo/tutorial/html-js.html&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;HTML JS版 Apollo アプリを作ってみる [てっく煮]&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00169.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070603/how_to_use_google_gears&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - Google Gears の使い道&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00160.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070327/p1&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - あまり語られていない Apollo のセキュリティについてまとめてみた&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00151.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071210/adobe_new_design&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;アドビの新サイトがすごいことになってる - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00148.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070629/four_operations_implementation_in_javascript&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - 四則演算を JavaScript で実装する&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00141.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070510/flash_on_twitter&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;てっく煮ブログ - すごく楽しかった Flash 談義のログをまとめてみたよ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00113.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071220/kyoto_bus&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;京都市バスの路線別 停留所取得API公開 - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00110.png&quot;&gt;
+&lt;a href=&quot;http://tech.nitoyon.com/marubiru/&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;丸ビル RSS リーダー&lt;/strong&gt;&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00110.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070721/wcan_mini_tetris_as3&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;てっく煮ブログ - ActionScript3.0でテトリスを作ってみる&lt;/strong&gt;&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00096.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071030/es4_overview&quot; class=&quot;bookmark&quot; target=&quot;_blank&quot;&gt;ECMAScript 4 の Draft をざっくり読んでみた - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00086.png&quot;&gt;
全部思い入れがあるんだけど、「書いたもの」より「作ったもの」が評価されたほうが嬉しかったりする。上で言うと、3. 13. 14. あたり。

**発表資料まとめ
いろいろ発表した。
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070520/flex_and_wpf&quot;&gt;Flex と WPF の概要&lt;/a&gt;＠東京勉強会
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070520/as_for_flasher1&quot;&gt;ActionScript for Flasher(1)&lt;/a&gt;＠てら子
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070731/flex_internals1_mxml&quot;&gt;Flex Internals1 ～MXML 再入門～&lt;/a&gt;＠FxUG
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070721/wcan_mini_tetris_as3&quot;&gt;ActionScript3.0でテトリスを作ってみる&lt;/a&gt;＠WCAN mini
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070828/p1&quot;&gt;ActionScript と Flex のレイアウト&lt;/a&gt;＠FxUG
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071002/potrace&quot;&gt;ラスタ→ベクタ変換する AS ライブラリ &quot;PotrAs&quot;&lt;/a&gt;＠ActionScript 的超絶技巧発表会
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071025/p1&quot;&gt;丸ビルRSSリーダー&lt;/a&gt;＠FxUG＋てら子
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071119/flex_custom_component&quot;&gt;Flexカスタムコンポーネントの作り方&lt;/a&gt;＠FxUG
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071202/livecoding_5&quot;&gt;LiveCoding#5 でコーディング&lt;/a&gt;＠LiveCoding#5

**2008年抱負
幅を広げていきたい。
</body>
</day>
<day date="2008-01-04" title="">
<body>
*p1*謹賀新年
お正月は、紅白見ながらコーディングしたり、箱根駅伝見ながらコーディングしたり、高校のときの同級生と新年会したりした。

新年会での１コマ。同い年の友人が技術者なのだけど、ここ数年はコーディングしてなくて、仕事はもっぱらプロジェクト管理だそうだ。そういう話を聞くとちょっと焦る。35歳定年説を信じるなら自分のプログラマとしての寿命はあと7年。寿命が来て使い物にならなくなったとき、今のコーディングしかできない状態じゃ仕事にありつけない。

最近、そういう漠然とした不安を打ち消すために、35歳までは実は長いと思うようにしている。自分が本格的にプログラムを書き始めたのが21歳ぐらい。書き始めて7年、定年までも7年。いろいろ勉強してきたけどまだ折り返し地点なのだ。今まで勉強してきたことと同じ分量だけ学べる、と考えるとワクワクもしててくる。ゴールしてからまだ走り続ける、という選択肢もないわけではない。今はひたすら走り続けることにしよう。

話は変わってこのブログの話。

ActionScript ネタについては、日本語でこれ以上続けてもあまりメリットはなさそうなので、実験として英語で情報発信をしてみることにする。外国人に Cooooooooool!!!! といわれるのが今年の目標。

ActionScript なサンプルが載ってるブログなら &lt;a href=&quot;http://yamasv.blog92.fc2.com/&quot;&gt;miscellaneous&lt;/a&gt; さんが質、量ともに豊富なのでお勧め。&lt;a href=&quot;http://nutsu.com/blog/&quot;&gt;NUTSU&lt;/a&gt; さんとか、&lt;a href=&quot;http://100th.blog96.fc2.com/&quot;&gt;百匹目の猿&lt;/a&gt; さんも更新頻度は高くないけど面白い。ActionScript のサンプルを見たい人はそっちをウォッチしていただきたく。

ここは、もうちょっと力を抜いて、雑多なネタを書き込んでいこうかな、と。何はともあれ今年もよろしくお願いします。

**追記 (2008/1/5 18:00)
紹介したブログが livedoor Reader の&lt;a href=&quot;http://reader.livedoor.com/ranking/hot.html&quot;&gt;注目度ランキング&lt;/a&gt;で上位に。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080105/20080105183252.jpg&quot; width=&quot;334&quot; height=&quot;242&quot;&gt;&lt;/center&gt;&lt;
隠れた名ブログが発掘されるきっかけになったのなら、それはとても喜ばしいことです。新年初喜び！！
</body>
</day>
<day date="2008-01-07" title="">
<body>
*pageant_security*pageant.exe の仕組みと危険性
PuTTY で SSH2 接続するとき、毎回パスフレーズを入力するのがめんどくさいという理由で pageant を常時起動してる人も多いのでは。

そんな pageant の仕組みと、使っていく上でのリスクが気になったので、ちょっくらソースを読んでみた。

**プロセス間通信の仕組み
PuTTY や WinSCP3 など、pageant を利用するアプリケーションは、何らかの方法で pageant と通信しているはずだ。この通信処理を実装しているのが winpgntc.c であり、PuTTY も WinSCP3 もソースコードに winpgntc.c を含んでいる。

***リクエスト側
細かくなるけど、PuTTY や WinSCP3 がリクエストするときの手順は次のようになっている。
+pageant の（非表示になっている）ウインドウを FindWindow 関数で探し出す。
+CreateFileMapping 関数でプロセス間で共有できるメモリを確保する。メモリ名は「PageantRequest[スレッドID]」。
+共有メモリに所定の形式でリクエスト用の ID やデータを突っ込む。詳細は後述。
+1. で取得したウインドウに WM_COPYDATA メッセージを送る。パラメータの COPYDATASTRUCT には AGENT_COPYDATA_ID（0x804e50ba）と 2. で作成した共有メモリ名が入っている。

***pageant 側
次に WM_COPYDATA を受信したあとの pageant.exe の処理をみていく。winpgnt.c の WndProc 関数にて実装されている。
+WM_COPYDATA を受け取ったら、パラメータをチェックする（パラメータに AGENT_COPYDATA_ID が渡されていない場合はエラーを返す）。
+同じくパラメータの共有メモリ名をもとに、OpenFileMapping 関数を使って共有メモリを開く。
+(WinNT 系のみ) 共有メモリの owner と pageant.exe を起動したユーザーが同じかどうかを確認する。異なる場合はエラーを返す（pageant を起動したユーザー以外がリクエストできなくするため）。
+リクエストに応じて処理を行い、結果を共有メモリに書き込む（answer_msg 関数）。

**pageant と PuTTY でやり取りされるデータ
通信の仕組みが分かったので、次は SSH2 接続するときの流れを見ていく。

リクエストの種類に応じた ID が定義されている。
&gt;|
SSH1_AGENTC_REQUEST_RSA_IDENTITIES
&lt;strong&gt;SSH2_AGENTC_REQUEST_IDENTITIES&lt;/strong&gt;
SSH1_AGENTC_RSA_CHALLENGE
&lt;strong&gt;SSH2_AGENTC_SIGN_REQUEST&lt;/strong&gt;
SSH1_AGENTC_ADD_RSA_IDENTITY
SSH2_AGENTC_ADD_IDENTITY
SSH1_AGENTC_REMOVE_RSA_IDENTITY
SSH2_AGENTC_REMOVE_IDENTITY
SSH1_AGENTC_REMOVE_ALL_RSA_IDENTITIES
SSH2_AGENTC_REMOVE_ALL_IDENTITIES
|&lt;

このうち、PuTTY が SSH2 するときには、SSH2_AGENTC_REQUEST_IDENTITIES と SSH2_AGENTC_SIGN_REQUEST のみが利用される。

処理の流れを見てみよう。
+PuTTY が接続先のサーバーに SSH2 接続を開始し、公開鍵と公開鍵で署名（暗号化）されたデータを受け取る。署名前のデータはサーバーのみが知っている。
+PuTTY は pageant に SSH2_AGENTC_REQUEST_IDENTITIES をリクエストする。この結果、pageant が知っている鍵の一覧を取得できる。秘密鍵ではなく、公開鍵の一覧が渡されることに注意。
+PuTTY は 1. で知った公開鍵が、2. の一覧に存在するか調べる。存在する場合は、pageant が秘密鍵を知っていることを意味する。存在しない場合は、pageant の利用を諦める。
+PuTTY は 1. でサーバーから得た公開鍵と暗号化されたデータを pageant に渡す。このときのリクエスト ID が SSH2_AGENTC_SIGN_REQUEST。データを秘密鍵で署名してくれ、ということ。
+SSH2_AGENTC_SIGN_REQUEST を受け取った pageant は、メモリ上に保有している秘密鍵で与えられたデータを署名して、共有メモリに書き込んで PuTTY に処理を返す。
+PuTTY は秘密鍵を知ることなく、秘密鍵で署名されたデータを受け取る。
--サーバーが公開鍵で署名したデータを、秘密鍵で署名した状態。つまり、サーバーが暗号化する前の原文を知ることができた。
--これ以降の通信では、共通鍵が用いられるので pageant の出番はない。
注目すべきは、pageant が保有している秘密鍵が外に漏れることはないこと。pageant は秘密鍵は漏らさず、与えられたデータを秘密鍵で署名する機能だけを公開している。

**分かったこと
当たり前のことなんだけど、pageant が起動中は（同じユーザー権限で起動している）&lt;strong&gt;任意のプロセスが pageant が知っている秘密鍵を使って、データを署名できる&lt;/strong&gt;。

悪意のあるプロセスは、プロセス間通信を利用して SSH 接続を開始するのに十分な情報を知ることができるわけだ。しかも、これらのプロセス間通信は、利用者が気づかないところで行われる（警告のウインドウは表示されない）。

この問題に対処すべく、PuTTY ごった煮版の pageant では、右クリックのメニューに「常に要求を確認」という項目が追加されている。チェックしておくと、何らかのプロセス（PuTTY や WinSCP3 を含む）が秘密鍵での署名を要求してきたときに、次のような確認ダイアログが出るようになる。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080106/20080106021940.png&quot; width=&quot;300&quot; height=&quot;97&quot;&gt;&lt;/center&gt;&lt;
悪意のあるプロセスが署名しようとしても、その手前で気づけるわけだ。Windows Vista の UAC のようなイメージ。ちょっと面倒だけど、落としどころの１つとしては妥当な線かもしれない。

もちろん、pageant を使う上でのリスクは、まだまだ残っている。一番でかい危険性は、メモリ上に生の秘密鍵を持っているところ。秘密鍵とパスフレーズが同時にばれたような状態だ。メモリダンプされたら一貫の終わり。pageant が起動した状態でハイバネートすると、生の秘密鍵が HDD に書かれてしまう。

**おまけ：ssh-agent は？
OpenSSH FreeBSD 版の ssh-agent にも軽く目を通してみた。こちらは socket でプロセス間通信している模様。送信元プロセスの uid 比較も行っているようだ（参考：&lt;a href=&quot;http://opengrok.creo.hu/dragonfly/xref/src/crypto/openssh-4/ssh-agent.c#after_select&quot;&gt;ssh-agent.c&lt;/a&gt;）。

ssh-agent のマニュアルによると
&gt;http://www.unixuser.org/~euske/doc/openssh/jman/ssh-agent.html:title&gt;
エージェントは要求されたチャンネルを経由して秘密鍵を送るようなことは決してしません。かわりに、秘密鍵が必要な操作はすべてエージェント側でおこない、結果だけが要求した側に返されるようになっています。このためエージェントを使うことによって秘密鍵がクライアントに漏れるようなことはありません。
&lt;&lt;
とあるので、pageant と似たような仕組みなんだろう。

とはいえ、root 権限を持っている人は、su して ssh-agent と通信はできるはず。試してないけど。信頼できない人が管理しているサーバーで、ssh-agent を利用するのは、たとえ一時的であっても控えたほうがよさそうだ。

ssh-agent のご利用も計画的に。

</body>
<comments>
<comment>
<username>anonymous</username>
<body>Pageant の内部仕様について、大変参考になりました。&lt;br&gt;SSH2の認証の流れについて解説されていますが、「暗号化されたデータ」が使われるのはSSH1の方式で、SSH2では共通鍵を秘密鍵で署名したものをクライアントからサーバに送ることで確認をしています。</body>
<timestamp>1202991107</timestamp>
</comment>
<comment>
<username>127</username>
<body>&gt;信頼できない人が管理しているサーバーで、ssh-agent を利用するのは&lt;br&gt;キーロガー的な事されたらパスワード認証のほうがヤバいです。&lt;br&gt;信用できないサーバを経由して別のサーバに入るときはせめてエージェントフォワーディングしたほうが良いかと思います…が、PTYに細工されるとログイン中にニセの表示を出しながら裏で操作されたり、ログアウト操作をダミーと差し替えてセッションを再利用されてしまう可能性があるのでやっぱりダメですね。&lt;br&gt;&lt;br&gt;結論、信用出来ないサーバからはSSHせず、ポートフォワーディングで通過するに限るのではないかと。</body>
<timestamp>1340657893</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; 127 様&lt;br&gt;ご指摘ありがとうございます。&lt;br&gt;たしかに信頼できないサーバーで SSH すること自体が危険ですね。</body>
<timestamp>1341331150</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-11" title="">
<body>
*kanasan_js2*[event]Kanasan.JS JavaScript第5版読書会#2 のお知らせ
14日の祝日に &lt;a href=&quot;http://cotocoto.jp/event/18208&quot;&gt;Kanasan.JS JavaScript第5版読書会#2&lt;/a&gt; があるらしいですよ。

朝の9:30～17:00までみっちり一日 JavaScript！
-&lt;a href=&quot;http://groups.google.co.jp/group/kanasanjs/web/kanasan-js-javascript52?hl=ja&quot;&gt;Kanasan.JS JavaScript第5版読書会#2 &amp; 懇親会 - Kanasan.JS : JavaScript Workshop in Kansai | Google グループ&lt;/a&gt;

**豪華な参加者！
なんと、あの amachang が東京から来るらしい！
&gt;http://b.hatena.ne.jp/amachang/20080108#bookmark-7021137:title&gt;
参加しまーす。大阪 5 年ぶりっす＞＜
&lt;&lt;

関西のJS重鎮（勝手に決めた）の &lt;a href=&quot;http://nanto.asablo.jp/blog/&quot;&gt;nanto_vi さん&lt;/a&gt;も参加表明！

[twitter:583736472:detail]

**こぞってご参加ください
基本はサイ本読書会ですが、今回は LT 形式での発表もある模様。現時点での発表者と内容はこんな具合。
-&lt;a href=&quot;http://groups.google.co.jp/group/kanasanjs/web/kanasan-js-javascript52-lightning-talk?hl=ja&quot;&gt;Kanasan.JS JavaScript第5版読書会#2 Lightning Talk 一覧 - Kanasan.JS : JavaScript Workshop in Kansai | Google グループ&lt;/a&gt;

入門とはいいつつ、ハイスキルな参加者が多いのでレベルは高いと思います。刺激を受けまくるのは間違いないでしょうし、質問すれば優しく教えてくれるはずなので、お暇な方はぜひぜひ参加してみましょう。

ちなみに、定員は228名だそうです。多杉！（&lt;a href=&quot;http://groups.google.co.jp/group/kanasanjs/browse_thread/thread/7e27f08c759349e3?hl=ja&quot;&gt;参考&lt;/a&gt;）。

残念ながら、私は仕事が山積みで参加できそうにありません…。行きたい…。amachang と nanto_vi さんのトークを横で聞いてみたい…。

isbn:4873113296:detail
</body>
<comments>
<comment>
<username>ujihisa</username>
<body>ユー来ちゃいなYO!</body>
<timestamp>1199982343</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>行きたいYO!</body>
<timestamp>1199982546</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-15" title="">
<body>
*jquery_event*[jQuery][javascript]jQuery の bind, unbind の裏側
jQuery のソースを呼んでいて、イベント登録のところが複雑だったので備忘録として記しておく。

バージョンは 1.2.1。

**そもそもの目的
DOM 標準の removeEventListener は、element と type(click, submit, blur など) と listener の３つを指定する必要がある。
&gt;|javascript|
element.removeEventListener(click, listener, false);
||&lt;

jQuery ではイベント解除に unbind という便利な関数が用意されている。
+element, type, listener を指定して解除する（通常の removeEventListener と同じ）
+element, type を指定して全てのイベントハンドラを解除する
+element から全てのイベントを解除する
例えば、
&gt;|javascript|
$(&quot;#foo&quot;).unbind();
||&lt;
とすると、#foo なエレメントに（jQuery 経由で）bind したイベントを全て解除できる。

1. は通常の removeEventListener そのままなんだけど、2. や 3. をどうするかが腕の見せ所。

**実現方法
3. を実現するためには、ある element に割り当てられた全てのイベントハンドラを知れる必要がある。これを実現するために、element をキーにしたハッシュを作成することにする。

このハッシュを、仮に hash としておく。（実際には、element[(new Date()).getTime()] に作成される）

***bind の裏側
bind は次のようにして使う。
&gt;|javascript|
$(&quot;foo&quot;).bind( type, fn );
||&lt;

このとき、裏側では次のように動いている。
+fn に guid を設定する。guid はイベントハンドラに一意につけられた id。
+type と guid をキーにして、イベントハンドラを保持する（hash.events[type][guid] = fn）。
--element から登録された type 一覧を知ることができる
--element と type から登録された fn の一覧を知ることができる
+element に type のイベントが登録されていない場合は、element.addEventListener(type, &lt;特製ハンドラ&gt;, false) する。
--複数回 bind しても、登録されるイベントハンドラはこの特製ハンドラ１つだけ
--このハンドラが呼ばれると、hash.events[type] に保存されている fn（実際に bind で登録されたイベントハンドラ）を順番に呼び出す。
element と type が同じなら、１回しか addEventListener が呼び出されず、同じイベントハンドラを使いまわしている。

***unbind の裏側
-element, type, fn を指定した場合
++hash.events[type] から fn の guid を削除する
++hash.events[type] が空になったときは、removeEventHandler する
-element, type を指定した場合
++hash.events[type] を空にする
++removeEventListener する
-element のみ指定されたとき
++hash.events から全ての type を列挙して、removeEventListener する
++hash.events も初期化する

element と type について登録されているハンドラ数が 0 になったときのみ、removeEventListener が走る。複数のハンドラが登録されている場合は、ハッシュを修正するだけで OK。

***さらに
さらにもうちょっと面白いのが、addEventListener で登録される特製ハンドラは、element に対して同じ関数が使い回されている。

特製ハンドラはイベントが実行されると、
+第一引数（event）から event.type でイベントの種類を調べる。
+hash.events[event.type] で実際に呼び出すべき関数一覧を取得する。
+これを順番に呼び出す。

この仕組みのおかげで、element が分かれば、実際に addEventListener されている特製イベントハンドラを割り出せるわけだ。removeEventListener するときに、type によって実装を変える必要がなくなる。

で、これとは別に、イベントハンドラに追加の data を渡す仕組みや、クロスブラウザの仕組みなどが入っていて、かなり複雑。

**あとがき
分かりやすく書こうと思ったけど複雑ですね…。

ソース読んだほうが早いよ！という人は、直接 &lt;a href=&quot;http://jqueryjs.googlecode.com/svn/tags/1.2.1/src/event.js&quot;&gt;ソース（event.js）&lt;/a&gt; を読んでみたほうがよいかも。bind から呼ばれるのが add、unbind から呼ばれるのが remove ですよ。

</body>
</day>
<day date="2008-01-16" title="">
<body>
*dounavi_blog_rss*[pipes]動ナビブログ全文配信RSS
「今年は力を抜いて雑多なネタを」と&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080104/p1&quot;&gt;宣言した&lt;/a&gt;わりには濃いネタが続いたので小ネタを。

Yahoo! Pipes で &lt;a href=&quot;http://blognavi.info/news/&quot;&gt;動ナビブログ&lt;/a&gt; の全文配信フィードを作りました。
-http://pipes.yahoo.com/nitoyon/dounavi_blog?_render=rss

例によって、Fetch Page モジュールが大活躍。

Fetch Page を紹介して以来、全文配信化するフィードを作る人が増えてきてるようだ。そのあたりのフィード集をまとめて、１つのエントリにしたら面白そうなんだけど誰かやらないかなぁ…。

**関連
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071212/pipes_page_fetch&quot;&gt;Yahoo! Pipes の Page Fetch モジュールでスクレイピングし放題 - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071221/fulltext_feed&quot;&gt;Yahoo! Pipes で強制全文配信化 - てっく煮ブログ&lt;/a&gt;
**おまけ
id:higeorange さん作の、&lt;a href=&quot;http://pipes.yahoo.com/higeorange/dounavi&quot;&gt;動画ファイルナビゲーター最速更新情報 RSS&lt;/a&gt; というのも発見。こっちはモロにエロなので取り扱いは慎重に。
</body>
</day>
<day date="2008-01-17" title="">
<body>
*primitive_and_object*オブジェクトと参照の分かりやすい説明
&lt;a href=&quot;http://www.func09.com/wordpress/archives/176&quot;&gt;func09 ≫ コリン・ムック「今から始めるActionScript 3.0」に行ってきました&lt;/a&gt; がすごく分かりよい。

ActionScript 3.0 の話となってるけど、「変数」や「オブジェクト」は、多くのプログラミング言語に共通する重要な概念だ。プリミティブ型がコピーされることを値渡しといい、オブジェクトへの参照がコピーされることを参照渡しといったりする。

自分も最初は違いが分からずにずいぶん苦しめられたものだ。このあたりをしっかり理解することが脱初心者への重要な鍵であり、逆に理解できてないと意味不明な挙動に困り果ててしまう。

それにしても、ここまで明確かつ分かりやすい説明にはなかなかお目にかかれない。初心者にこそこういう情報は必要なはずなんだけど、悲しいかな世の中の初心者向け入門書の多くは重要なところをぼかしてしまっているものが大勢を占めている気がする。

さすがはコリンさん。Adobe がわざわざお金を出してまで日本に呼んだ理由が分かった気がする。これが無料セミナーだったんだから太っ腹だ。

(追記) &lt;a href=&quot;http://chikura.fprog.com/index.php?UID=1200647817&quot;&gt;文字列変数コピーは参照コピーである&lt;/a&gt; にて、「プリミティブ型も参照渡しだよ」という説明がされています。合わせて読むと、より理解が深まることでしょう。ありがたや。

isbn:0596526946:detail

*adobe_mac_air*[air]AIR 違い
自分の twitter からの転載。

[twitter:605360142:detail]

[twitter:605362002:detail]

[twitter:605356352:detail]
</body>
</day>
<day date="2008-01-19" title="">
<body>
*htmlwrapper*[as]htmlwrapper は使えない
&lt;a href=&quot;http://code.google.com/p/htmlwrapper/&quot;&gt;htmlwrapper - Google Code&lt;/a&gt; が気になったので触ってみた。

AS3 で HTML をパースして Sprite に表示してしまおう、という代物。AS3 でブラウザ実装か！？と期待を抱かせる。

試しに crossdomain.xml を置いてる Twitter を開いてみたところ
&gt;|
Your HTML is not well formed, check this out for help...
http://infohound.net/tidy/
|&lt;
と怒られた。

へー、HTML チェックが厳格なんだー、と思ってソースをよくよく眺めてたら、URLLoader で拾った結果を XML クラスのコンストラクタに突っ込んでるだけ…。

おいおい、XHTML しかダメなのか。ならばと、XHTML なサイトを表示させようとしてみるも、XML クラスに突っ込む前にこんな文字列になった。
&gt;|
&lt;html&gt;&lt;&lt;html&gt;s&lt;html&gt;c&lt;html&gt;r&lt;html&gt;i&lt;html&gt;p&lt;html&gt;t&lt;html&gt; &lt;html&gt;t&lt;html&gt;y&lt;html&gt;p&lt;ht
ml&gt;e&lt;html&gt;=&lt;html&gt;&quot;&lt;html&gt;t&lt;html&gt;e&lt;html&gt;x&lt;html&gt;t&lt;html&gt;/&lt;html&gt;j&lt;html&gt;a&lt;html&gt;v&lt;html&gt;
a&lt;html&gt;s&lt;html&gt;c&lt;html&gt;r&lt;html&gt;i&lt;html&gt;p&lt;html&gt;t&lt;html&gt;&quot;&lt;html&gt; &lt;html&gt;s&lt;html&gt;r&lt;html&gt;c&lt;h
tml&gt;=&lt;html&gt;&quot;&lt;html&gt;/&lt;html&gt;j&lt;html&gt;s&lt;html&gt;/&lt;html&gt;g&lt;html&gt;a&lt;html&gt;.&lt;html&gt;j&lt;html&gt;s&lt;html
&lt;html&gt;l&gt;&gt;&lt;html&gt;&lt;&lt;html&gt;/&lt;html&gt;s&lt;html&gt;c&lt;html&gt;r&lt;html&gt;i&lt;html&gt;p&lt;html&gt;t&lt;html&gt;&gt;&lt;html&gt;
|&lt;
そこそこ適当な HTML でも valid な XML になるように正規表現でごにょごにょしてるんだけど、そこが暴走しているご様子。

このライブラリは、どうやら既存の HTML を表示することを狙ってるんじゃなく、ある程度厳格に書いた HTML を Flash で表示できるようにして、簡単に View を組み立てることを目標にしているようだ。

&lt;a href=&quot;http://htmlwrapper.googlecode.com/svn/trunk/docs/json_notes.txt&quot;&gt;json_notes.txt&lt;/a&gt;を見てると、独自 CSS を定義して、
&gt;|css|
.myClassStyle {
    shape: json('{&quot;type&quot;:&quot;box&quot;}');
}
||&lt;
とかやって図形表示したいよねー、みたいな話が出てきてる。

うーん。微妙。

誰か、Firefox を AS3 に移植してよ。猛者現れろ！
</body>
</day>
<day date="2008-01-20" title="">
<body>
*designer_and_flasher*Flash 屋さんは世間が思うほどデザイナではない
去年、仕事で Flash をやってる人の集まりに積極的に顔を出したのだけど、Flash の世界はデザイナ寄りではなくて、どちらかというとプログラマ寄りなんだということに驚いた。

私が Flash をやってる人に持っていたイメージは、絵を描かせたらうまくて、デザインもバリバリしている、というものだったけど実は違うらしい。ほとんどの会社ではデザイナと Flash 担当者は分業されているようだ。もしくは、デザインが決まった状態でお仕事が来たりするらしい。

だから、Flash やる人は Photoshop や Illustrator と向かい合って唸ったりはしない。デザイナが Photoshop や Illustrator で作ったものを、Flash 上に配置していくところから仕事が始まる。
====
この作業は、HTML のページを作るときに、HTML や CSS の設計を考えるのに似ている。まず、下絵からパーツごとに画像を切り出す。次に、HTML の階層構造に似た感じで、ムービークリップの階層構造を作って、素材を配置していく。同時に、スクリプトから扱うための id も設定する。ここで設計が狂うと後々辛くなってくるので、そこそこ経験が必要だ。

次は動きをつけていく。Flash といえば、タイムライン上でのコマ送りアニメーションのイメージが強いが、マウスの動きなどに反応するようなインタラクティブなサイトでは、JavaScript に似た言語（ActionScript）でのコーディングを行う。JavaScript には Script.aculo.us のようなアニメーション用のライブラリがあるが、Flash にも有名なアニメーション用のライブラリがある（AS2 だと FuseKit、AS3 だと Tweener など）。

サーバーのデータを動的に引っ張ってくるサイトの場合、さらにコーディング量は増える。Ajax と同じように非同期通信を書くことになる。ここまで来ると、Flash CS3 でマウスを動かす姿からは程遠く、エディタ上でのコーディングする時間がほとんどになってくる。サーバー側の PHP や DB の実装まで担当している人もいるようだ。

Flash はアートな世界だと思っていた人はちょっと意外かもしれない。デザインするのではなく、デザインされたものに動きをつけていくのが仕事なのだ。

もちろん、気持ちいい動きを追求したり、操作感を追及したり、とセンスが必要なのは間違いない。けれども、それだけではダメで、プログラマ的な素養も求められる職種なのだ。

だから、Flash 系の勉強会でよく話題に上がるのは、「デザイナーから渡された PSD ファイルのここが酷かった」とか「どれそれのライブラリが便利そうだ」「こういうコードの書き方がいい」といった話。間違っても「前衛芸術なら誰それがいいよね」とか「ミッドセンチュリーがさぁ」といった話題は出てこない。

(追記) これらの話は、あくまで私がお会いした Flash をやってる人から聞いた話をまとめたものです。完全にデザイナー寄り・アニメータ寄りの Flash 使いさんもいらっしゃるようですし、Web 屋さんでもASは使わずに完成度の高い仕事をされている方も多くいらっしゃるようです。

半分プログラマ、半分デザイナの不思議な世界。知らない人は覗いてみたら面白いかもしれない。え？　覗く機会がない？　いやいや、関西の人あるんですよ。怖い物見たさで参加してみるのもよろしいかと。
&gt;&gt;
**第11回 大阪てら子「なぎまぐの Flash ライブコーディング featuring たけし」
気鋭おとぼけ Flasher なぎまぐ (ganephics design,inc.) が、たけし (CEO) を迎えて Flash ライブコーディングやりまーす。 

-場所：株式会社カラーズ大阪事務所 http://www.colors.jp/ （地図：http://colors.zz.tc/ ） 
-日時：2008/1/27（日）14:00～ （2 次会 19:00ぐらいから） 
-定員：15 名ぐらい 

コーディングなので、画面デザインがすでにできあがってるものに動きとか仕組みとかをつけていくっていうのをライブでやるわけですね。 

やっぱ具体的になにか作りながらの方がいろいろと勉強になるですよ。まだ何作るか決めてないぽいですけど、みんなのリクエストにもきっと応えてくれるはずなので、普段疑問に思ってることとかわかんないことがあったらここに書き込んでおきましょう。そのへんの回答もうまいこと組み入れながらやってくれます。 

例） 
-Photoshop から Flash にもってくと色が変わっちゃうんだけど？ 
-なんかもっと効率的に PSD からパーツを切り出す方法はないの？ 
-jsfl とかってのが便利らしいけど、具体的には? 
&lt;&lt;
先日の LiveCoding#5 でも、Flash でのコーディングが人気だったし、半日使って Flash の世界を体験してみるのも面白いかと。参加申し込みは &lt;a href=&quot;http://mixi.jp/view_event.pl?id=27038108&amp;comm_id=1863819&amp;page=all&quot;&gt;こちら&lt;/a&gt; から。

以上、半分小話、半分宣伝でした。
</body>
</day>
<day date="2008-01-24" title="">
<body>
*p1*Ajaxian で紹介してもらったよ
１週間ほど前に、&lt;a href=&quot;http://ajaxian.com/&quot;&gt;Ajaxian&lt;/a&gt; でブログの記事を&lt;a href=&quot;http://ajaxian.com/archives/as3query-jquery-port-to-actionscript&quot;&gt;取り上げてもらいました&lt;/a&gt;。

&lt;a href=&quot;http://ajaxian.com/&quot;&gt;Ajaxian&lt;/a&gt; というのは JavaScript を中心とした Web 技術を紹介する英語のブログです。Ajax ブームも一段落した感はありますが、Ajax の新ネタを仕入れるなら Ajaxian と言われていたぐらいに有名なサイトです。

このエントリでは、取り上げてもらうまでの経緯と、その後の反響をみていきます。
====
**取り上げてもらう方法
昨年11月の Shibuya.js のとき、id:kstn さんとお話する機会がありました。

id:kstn さんは Selenium IDE の作者としても有名ですが、以前、&lt;a href=&quot;http://d.hatena.ne.jp/kstn/20070504/1178275407&quot;&gt;JS Commander&lt;/a&gt; が Ajaxian に &lt;a href=&quot;http://ajaxian.com/archives/js-commander-javascript-console-via-proxy&quot;&gt;取り上げられていた&lt;/a&gt;のです。

そこで、思い切って
&gt;&lt;blockquote&gt;
「どうやって Ajaxian に紹介してもらったんですか？」
&lt;/blockquote&gt;&lt;
と聞いてみたところ、
&gt;&lt;blockquote&gt;
「紹介してよ、ってメールを書いた」
&lt;/blockquote&gt;&lt;
と教えてもらいました。

少し意外でした。

Ajaxian はスタッフが巡回して探してきた記事を載せているのかと思いきや、どうやら自薦でも載っけてくれるようです。

**時は流れて
お正月に jQuery を AS3 に移植しました。

AS3 版 jQuery は英語圏でも受け入れてもらえそうだったし、むしろ、世界中の人に使ってもらいたかったので、Ajaxian で紹介してもらおう！と決心しました。

ここ数年間、Ajaxian の全ての記事に目を通してきたので、「このネタならいけそう」という確信もありました。

今回は Ajaxian の効果測定のために、あえてこのブログでは紹介せずに Ajaxian の紹介だけでどこまで行けるか試してみることにしました。

**英語の記事を書く
まずは、英語の記事を書かなくてはなりません。

といっても、和英辞典で検索しつつ、検索エンジンで例文を探してきたり、思いついた文を検索して自然な文か調べたり…。ほとんど機械作業です。例えば、記事の冒頭の部分は &lt;a href=&quot;http://jbox2d.org/&quot;&gt;JBox2D Demos&lt;/a&gt; の文章とほとんど同じだったりします。

そうやって３時間ぐらいかけて書いた英語を、海外居住経験もあるエンジニアの友人に添削してもらいました。違和感のあるところを教えてもらいつつ、細々修正していって、友人の OK を貰いました。

いよいよ Ajaxian にメールを書きます。

**メール作成
Ajaxian のサイドバーを見たところ、こんな文章がありました。
&gt;&gt;
Please contact us at xxxxx@xxxxxx.com. We would love to hear about any news that we could put up here.
&gt;&gt;
xxxxx@xxxxxx.com にメールください！　このブログで紹介できるニュースなら、どんな内容でもオッケーですよ。
&lt;&lt;
&lt;&lt;
なるほど、ここにメールすればよいんですね。

日本語で考えた文章を英訳すると消極的な文章になりがちなので、英語らしく強気で言い切ってみました。
&gt;&gt;
Hello Ajaxian.

My name is &quot;nitoyon&quot;, Japanese programmer. I read Ajaxian everyday.

I ported jQuery to ActionScript 3.0 callled &quot;as3Query&quot;.
See: http://tech.nitoyon.com/blog/2008/01/as3query_alpha.html

As jQuery is useful to many JavaScript developers, &quot;as3Query&quot; can attract ActionScript developers and Flash designers, I hope.

If you like this library, plese introduce &quot;as3Query&quot; on Ajaxian.com.
Thank you.
&gt;&gt;
Ajaxian の中のひと、こんにちは。

日本人のプログラマーの nitoyon だよ。Ajaxian は毎日読んでるよ。

jQuery を ActionScript 3.0 に移植したんだ。as3Query っていうんだよ。詳しくは、http://tech.nitoyon.com/blog/2008/01/as3query_alpha.html を見てね。

jQuery が JS 開発者にとって便利なように、as3Query も AS 開発者とか Flash デザイナーに喜んでもらえたらいいな、と思ってるんだ。

だから、もし気に入ったら、as3Query を Ajaxian.com で紹介してほしいな。

じゃあね。
&lt;&lt;
&lt;&lt;

**１日経過
メールを送ったのが日本時間で14日の26時ごろでした。

翌日、数時間おきにドキドキしながら Ajaxian を見てみたのですが、反応はありませんでした。メールに返事もありません。

夜になっても反応はないので、諦めて寝ようとしたそのとき、メールボックスに大量のメールが届いているのに気づきました。
&gt;&gt;
「as3Query:alpha version (New Wave ActionScript)」に投稿された新しいコメント
&lt;&lt;
Movable Type の設定をきちんとしてなかったので、コメントが管理者の承認が必要になっていたようです。

大量のコメントとトラックバック…。これはもしや、と思って、Ajaxian を開くと…。

無事に&lt;a href=&quot;http://ajaxian.com/archives/as3query-jquery-port-to-actionscript&quot;&gt;紹介されていました！&lt;/a&gt;　ありがとう、Ajaxian!!!!

ちなみに、Ajaxian の中の人からのメールはありませんでした。

**波及効果
記事に10件ほど英語でコメントがつきました。日本人に比べて、外国の人は気軽にコメントしてくれるようです。「Awesome stuff Nitoyon」とか「Great work!!」「Sooo cool」などと言ってくれました。照れてしまいます。

また、Ajaxian から波及して、いくつかのサイトで紹介されました。
-&lt;a href=&quot;http://www.ajaxgirl.com/2008/01/15/as3query-jquery-port-to-actionscript/&quot;&gt;Ajax Girl&lt;/a&gt;&lt;br&gt;明らかにコピーサイト。文章もキャプチャもそのまま。
-&lt;a href=&quot;http://zhuaxia.com/item/658064171/?logId=207&quot;&gt;抓&amp;#34430; BETA&lt;/a&gt;&lt;br&gt;中国語だけども、こちらも Ajaxian の記事そのまま。
-&lt;a href=&quot;http://flash-focus.blogspot.com/2008/01/as3query.html&quot;&gt;Flash Focus&lt;/a&gt;&lt;br&gt;中身を読んだ上で、新たに文章を書いて紹介してくれている。嬉しい。
-&lt;a href=&quot;http://blog.html.it/archivi/2008/01/17/as3query.php&quot;&gt;&amp;lt;edit&amp;gt; - Il blog di HTML.it&lt;/a&gt;&lt;br&gt;イタリア語(?)でも紹介されている。コメントがいくつかついてるけど読めない…。
-&lt;a href=&quot;http://fnya.cocolog-nifty.com/blog/2008/01/as3query_jquery_667b.html&quot;&gt;あるＳＥのつぶやき: as3Query － jQueryをActionScriptに移植したライブラリ&lt;/a&gt;&lt;br&gt;あるＳＥさんに世界進出？と言われました。がんばります！
-&lt;a href=&quot;http://phpspot.org/blog/archives/2008/01/actionscript3jq.html&quot;&gt;ActionScript3でjQuery「as3Query」:phpspot開発日誌&lt;/a&gt;&lt;br&gt;Ajaxian で紹介されると、phpspot さんところで取り上げられる可能性大です。

さらに、del.icio.us でも &lt;a href=&quot;http://del.icio.us/url/ce8f5e49af8f1f7adaec477f66bf8a3a&quot;&gt;100人以上にブックマーク&lt;/a&gt;されて、&lt;a href=&quot;http://del.icio.us/popular/actionscript&quot;&gt;popular/actionscript&lt;/a&gt; の１位に君臨ました。

しかし、意外にアクセス数は多くありませんでした。1週間で 3000Hit 程度。JS メインな Ajaxian で AS のネタだったし、そんなものなのかもしれません。

**まとめ
Ajaxian を眺めてると、「えーこんなしょうもないネタが載ってるのかよ」というのがそこそこあります。「もっとすごい記事を前に日本のブログで見たのに」というのもあります。

そう考えると、日本のレベルも高いはずなのですが、国内だけで知られているのはもったいないような気がします。例えば、CodeRepos に上がってる JS のライブラリは、内容もすごくて英語のページもあるわけだし、推薦したらすぐにでも掲載されそうです。（勝手に他薦したら作者さんに怒られるかな…）

マニアックなネタでも、世界に幅を広げれば、喜んでくれる人は10倍にも20倍にもなるはずです。英語のページを作って Ajaxian に自薦してみても面白いんじゃないでしょうか。
</body>
<comments>
<comment>
<username>moringo</username>
<body>はじめまして。&lt;br&gt;海外で勝負したいですね。自分もいつか。。。すごいです！&lt;br&gt;JQueryのAS3バージョン後でダウンロードして拝見させていただきます。</body>
<timestamp>1201136880</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-26" title="">
<body>
*as_here_doc*[as]AS3 でヒアドキュメントもどき
E4X＋CDATA 使えばいいんじゃないだろか。
&gt;|javascript|
    var s:String = &lt;&gt;&lt;![CDATA[bar
foo
&lt;p class=&quot;test&quot;&gt;なんでも書けるよ！&lt;/p&gt;

あははは
]]&gt;&lt;/&gt;;

    trace(s);
/* 出力はこうなる
bar
foo
&lt;p class=&quot;test&quot;&gt;なんでも書けるよ！&lt;/p&gt;

あははは
*/
||&lt;

&quot; とか \ をエスケープするのが面倒な場合に便利かも。

(関連) &lt;a href=&quot;http://d.hatena.ne.jp/brazil/20060512/1147427737&quot;&gt;ヒアドキュメント、E4X - 実用&lt;/a&gt;
</body>
</day>
<day date="2008-01-28" title="">
<body>
*math_curve*[as]勝手に添削：数学的な曲線を描画する
&lt;a href=&quot;http://moringo.moo.jp/wordpress/?p=60&quot;&gt;[ActionScript3.0] 数学的な曲線を描画する サイクロイド、三葉線、螺旋等[AS3] | moriBlog - ActionScriptとか、気になるニュースのメモ&lt;/a&gt; が面白かったのだけど、ソースが気になったので勝手に添削してみた。

**気になったところ
こんな調子で draw01～draw07まで並んでる。
&gt;|javascript|
//円を描く(中心点座標を引数に)
function draw01(xp:Number,yp:Number):void{
    canvas = new MovieClip();
    addChild(canvas)
    canvasArray.push(canvas)
    var shape01:DrawCircle = new DrawCircle(canvas,Math.random()*180,xp,yp);
}

//三葉線を描く(中心点座標を引数に)
function draw02(xp:Number,yp:Number):void{
    canvas = new MovieClip();
    addChild(canvas)
    canvasArray.push(canvas)
    var shape02:DrawThreeLeaves = new DrawThreeLeaves(canvas,Math.random()*180,xp,yp);
}

//（アルキメデスの）螺旋を描く(中心点座標を引数に)
function draw03(xp:Number,yp:Number):void{
    canvas = new MovieClip();
    // 以下略...
||&lt;

draw01～draw07 を呼ぶところも悲しいぐらいの列挙。
&gt;|javascript|
if(curveMode == &quot;circle&quot;)draw01(mouseX,mouseY);
else if(curveMode == &quot;ThreeLeaves&quot;)	draw02(mouseX,mouseY);
else if(curveMode == &quot;Archimedes&quot;)	draw03(mouseX,mouseY);
// 以下略...
||&lt;

ほとんど同じ内容なのに、ベタッと勢いで書き下されているのは気持ち悪い。まとめて１箇所で処理したくなるのがプログラマ魂。

**どうするか
共通部分を見極めて、くくりだしていく。違うところは変数なりオブジェクトなりで表現する。
====
drawXX 関数をみてみると、new するクラスが違うぐらい。なので、クラス一覧を shapes という配列に入れちゃう。
&gt;|javascript|
private var shapes:Array = [DrawCircle, DrawThreeLeaves, 
    DrawArchimedes, DrawAsteroid, DrawHypocycloid, 
    DrawLissajous, DrawFourLeaves];
||&lt;
こうしてしまえば、あとは１つの関数を呼び出すだけで、７個の関数を代用できる。
&gt;|javascript|
    function draw(xp:Number, yp:Number):void{
        var Drawer:Class = shapes[curveMode] as Class;
        if(!Drawer){
            return;
        }

        canvas = new MovieClip();
        addChild(canvas)
        canvasArray.push(canvas)
        new Drawer(canvas,Math.random()*180, xp, yp);
    }
||&lt;
curveMode は 0～7 の数字。キーボード入力イベントハンドラで次のようにして設定している。
&gt;|javascript|
    private function KeyDownHandle(e:KeyboardEvent):void{
        if(49 &lt;= e.keyCode &amp;&amp; e.keyCode &lt; 49 + shapes.length){
            curveMode = e.keyCode - 49; // ← ココ！
            dtext.text = names[curveMode];
        }
        else if(e.keyCode == 49 + shapes.length){
            eraser();
        }
    }
||&lt;
1～8までのキーコードが１ずつ増えていってるのを利用している。49 というマジックナンバーが気持ち悪い場合は、&quot;0&quot;.charCodeAt(0) などと書けばいいと思う。

呼び出す関数が１つになったので、draw01～draw07 を呼んでいたところはこう書ける。条件分岐いらないよ！
&gt;|javascript|
    function clickHandle(e:MouseEvent):void{
        draw(mouseX, mouseY);
    }
||&lt;

**こうなったよ
全体として、ソースはこんな感じになった。mxmlc でビルドできるように、一部に手は入れたが、可能な限り元々の設計は残しておいた。

&lt;a href=&quot;http://moringo.moo.jp/wordpress/?p=60&quot;&gt;元のソース&lt;/a&gt;に比べて、随分とすっきりした。ただ、元のものにはあった半径のパラメータが消えていたり、内サイクロイド(DrawHypocycloid)でコンストラクタの引数の数が違って例外が出たりする。

まだまだ、不十分なので、もう少しいじっていくことにする。（続く）
&gt;|javascript|
package{
import flash.display.*;
import flash.events.*;
import flash.text.*;

public class Test extends Sprite{
    private var dtext:TextField;
    private var canvasArray:Array = [];

    private var curveMode:int = 0;

    private var shapes:Array = [DrawCircle, DrawThreeLeaves, DrawArchimedes, 
        DrawAsteroid, DrawHypocycloid, DrawLissajous, DrawFourLeaves];
    private var names:Array = [&quot;円&quot;, &quot;三葉線&quot;, &quot;螺旋&quot;, &quot;アステロイド曲線&quot;, 
        &quot;内サイクロイド&quot;, &quot;リサジュー曲線&quot;, &quot;四葉線&quot;];

    public function Test(){
        addChild(dtext = new TextField());
        dtext.text = names[curveMode];

        stage.addEventListener(MouseEvent.CLICK,clickHandle);
        stage.addEventListener(KeyboardEvent.KEY_DOWN,KeyDownHandle);
    }

    private function draw(xp:Number, yp:Number):void{
        var Drawer:Class = shapes[curveMode] as Class;
        if(!Drawer){
            return;
        }

        canvas = new MovieClip();
        addChild(canvas)
        canvasArray.push(canvas)
        new Drawer(canvas,Math.random()*180, xp, yp);
    }

    private function clickHandle(e:MouseEvent):void{
        draw(mouseX, mouseY);
    }

    private function eraser():void{
        for(var i:int = 0; i &lt; canvasArray.length; i++){
            removeChild(canvasArray[i]);
        }
        canvasArray = [];
    }

    private function KeyDownHandle(e:KeyboardEvent):void{
        if(49 &lt;= e.keyCode &amp;&amp; e.keyCode &lt; 49 + shapes.length){
            curveMode = e.keyCode - 49;
            dtext.text = names[curveMode];
        }
        else if(e.keyCode == 49 + shapes.length){
            eraser();
        }
    }
}
}
||&lt;
</body>
<comments>
<comment>
<username>moringo</username>
<body>添削された本人です。&lt;br&gt;超勉強になります！ありがとうございます。&lt;br&gt;&lt;br&gt;重複ソースが多いと自分でも感じてました。&lt;br&gt;配列をうまく使ってくくりだすわけですね。&lt;br&gt;&lt;br&gt;元々プログラマでないこともあって、至らないところが&lt;br&gt;多々ありますが、恥を忍んで、これからもソースも公開していきます！</body>
<timestamp>1201483711</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>喜んでもらえてよかったです。&lt;br&gt;嫌がられないかと、ちょっとドキドキしてました。&lt;br&gt;&lt;br&gt;ソース公開されているオープンな姿勢に感謝です！</body>
<timestamp>1201567338</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-29" title="">
<body>
*math_curve2*[as]勝手に添削：数学的な曲線を描画する (2)
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080128/math_curve&quot;&gt;勝手に添削：数学的な曲線を描画する&lt;/a&gt; の完結篇。

今回は図形クラスに手を入れていく。

図形ごとに異なるクラスを定義しているんだけど、描画のルーチンは同じものだ。異なるのは座標計算の部分だけ。

ならば、座標データを外からパラメータとして渡すようにしてやろう。こんな具合に。
&gt;|javascript|
private var shapes:Array = [
    {
        text : &quot;円&quot;,
        rad : 180,
        fx : function(r:Number, t:Number, x:Number):Number{
            return r * Math.cos(t) + x
        },
        fy : function(r:Number, t:Number, y:Number):Number{
            return r * Math.sin(t) + y
        }
    },
    {
        text : &quot;三葉線&quot;, 
        rad : 180,
        fx : function(r:Number, t:Number, x:Number):Number{
            return r * Math.sin(3 * t) * Math.cos(t) + x
        },
        fy : function(r:Number, t:Number, y:Number):Number{
            return r * Math.sin(3 * t) * Math.sin(t) + y
        }
    },
    // (以下略)
||&lt;
あとは、このオブジェクトを食う描画クラスを作る。

Tweener みたいな使い方ができるように、static なメソッドに変えた。
&gt;|javascript|
import flash.display.Sprite;
import flash.events.Event;

class PolarDrawer{
  // 描画メソッド (Sprite, 円の半径, 中心x, 中心y, Object)
  static public function draw(m:Sprite, cx:Number, cy:Number, shape:Object):void {
    var rad:Number = shape.rad * Math.random();
    var angle:Number = 0;

    m.graphics.lineStyle(1, 0xff0000);
    m.graphics.moveTo(shape.fx(rad, angle, cx), shape.fy(rad, angle, cy));

    m.addEventListener(Event.ENTER_FRAME, function(e:Event):void{
      angle += 0.05
      m.graphics.lineTo(shape.fx(rad, angle, cx), shape.fy(rad, angle, cy))

      if(angle &gt;= 2*Math.PI){
        m.removeEventListener(&quot;enterFrame&quot;, arguments.callee);
      }
    });
  }
}
||&lt;
shapes[i] を PolarDrawer.draw() を呼び出せば描画できる。クリック時イベントで次のように呼び出している。
&gt;|javascript|
  private function clickHandler(e:Event):void{
      var s:Sprite = new Sprite();
      addChild(s);
      PolarDrawer.draw(s, mouseX, mouseY, shapes[curveMode]);
  }

||&lt;

はい、だいぶシンプルになりました。行数はたった105行！ (ソースは最後に掲載)

**シンプルは重要
デザイン用のコードなんだから勢いでもいいじゃないか、と考える人もいるだろうけど、個人的にはデザイナの人にこそ綺麗なコードを書いてもらいたいと思ってる。

というのも、修正前のコードは7つのクラスに描画ルーチンが散らばっていた。例えば、次のような実験をしようにも、めんどくさくて青ざめてしまう。
-色を少しずつ変えて線を引きたい
-線の太さを変えたい
-線を引く開始角度をランダムにしたい
今回の改造で描画処理が１箇所に集約されたので、これらの実験が簡単に実現できるようになった。気軽に試して芸の肥やし(?)にできるというわけだ。

ただ、最初からきれいに書こうとしてたら、何もかけなくなってしまう。自分も最初は勢いで書き始める方だ。

コードを整形するのは、&lt;strong&gt;同じコードを３箇所以上に書きたくなったとき&lt;/strong&gt;にしている。同じものが散らばっているとメンテナンスが大変だし、後でソースを読むときに違う部分を探し出すのが面倒だからだ。

**心構えをマスターしよう
プログラム言語が分かってきたら、OOP の概念とかデザインパターンに行ってしまうよりも前に、ソースをシンプルに書く方法を身につけていくのがよいと思う。

そんな「心構え」を教えてくれるのがこの本。
isbn:4894712288:detail
既存のコードをきれいに、シンプルにしていくためのレシピが多数紹介されている。今回や前回のエントリで行った改造も、全部この本に載ってるレシピで説明できる。

挙動を変えずに、ソースを変更していくこと（＝リファクタリング）を学ぶにはうってつけ。去年読んだんだけど、&lt;strong&gt;もうちょっと早くこの本に出会ってればなぁ&lt;/strong&gt;…と後悔した。自信をもってお薦めできる数少ない良本！

本で紹介されているソースコードは Java だけど、最初の導入でちょっと長めなソースがでてくるぐらいで、ほとんどが概念的なコード。ActionScript しか知らない人でも違和感なく読めると思う。ActionScript も Java みたいなもんだし。

**ソースコード
きもい書き方で行数を短くしてたりするけど、そこはご愛嬌で。
====
&gt;|javascript|
package{
import flash.display.Sprite;
import flash.events.*;
import flash.text.TextField;

public class Test extends Sprite{
    private var dtext:TextField;
    private var curveMode:int = 0;
    private var vertex:int = 5; // for hypocycloid

    private var shapes:Array = [
        {
            text : &quot;円&quot;,
            rad : 180,
            fx : function(r:Number, t:Number, x:Number):Number{return r * Math.cos(t) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * Math.sin(t) + y}
        },
        {
            text : &quot;三葉線&quot;, 
            rad : 180,
            fx : function(r:Number, t:Number, x:Number):Number{return r * Math.sin(3 * t) * Math.cos(t) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * Math.sin(3 * t) * Math.sin(t) + y}
        },
        {
            text : &quot;螺旋&quot;, 
            rad : 15,
            fx : function(r:Number, t:Number, x:Number):Number{return r * t * Math.cos(t) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * t * Math.sin(t) + y}
        },
        {
            text : &quot;アステロイド曲線&quot;, 
            rad : 150,
            fx : function(r:Number, t:Number, x:Number):Number{return r * Math.pow(Math.cos(t), 3) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * Math.pow(Math.sin(t), 3) + y}
        },
        {
            text : &quot;内サイクロイド&quot;, 
            rad : 30,
            fx : function(r:Number, t:Number, x:Number):Number{return r * (vertex * Math.cos(t) + Math.cos(vertex * t)) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * (vertex * Math.sin(t) - Math.sin(vertex * t)) + y}
        },
        {
            text : &quot;リサジュー曲線&quot;, 
            rad : 180,
            fx : function(r:Number, t:Number, x:Number):Number{return r * Math.sin(2 * t) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * Math.sin(3 * t) + y}
        },
        {
            text : &quot;四葉線&quot;,
            rad : 150,
            fx : function(r:Number, t:Number, x:Number):Number{return r * Math.sin(2 * t) * Math.cos(t) + x},
            fy : function(r:Number, t:Number, y:Number):Number{return r * Math.sin(2 * t) * Math.sin(t) + y}
        }
    ];

    public function Test(){
        addChild(dtext = new TextField());
        dtext.text = shapes[curveMode].text;

        stage.addEventListener(MouseEvent.CLICK,clickHandler);
        stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownHandler);
    }

    private function clickHandler(e:Event):void{
        PolarDrawer.draw(Sprite(addChild(new Sprite())), mouseX, mouseY, shapes[curveMode]);
    }

    private function erase():void{
        for(var i:int = numChildren - 1; i &gt;= 0; i--)
            if(getChildAt(i) is Sprite)
                removeChildAt(i);
    }

    private function keyDownHandler(e:KeyboardEvent):void{
        if(49 &lt;= e.keyCode &amp;&amp; e.keyCode &lt; 49 + shapes.length){
            curveMode = e.keyCode - 49;
            dtext.text = shapes[curveMode].text;
        }
        else if(e.keyCode == 49 + shapes.length)
            erase();
    }
}
}

import flash.display.Sprite;
import flash.events.Event;

class PolarDrawer{
    // 描画メソッド (Sprite, 円の半径, 中心x, 中心y, Object)
    static public function draw(m:Sprite, cx:Number, cy:Number, shape:Object):void {
        var rad:Number = shape.rad * Math.random();
        var angle:Number = 0;

        m.graphics.lineStyle(1, 0xff0000);
        m.graphics.moveTo(shape.fx(rad, angle, cx), shape.fy(rad, angle, cy));

        m.addEventListener(Event.ENTER_FRAME, function(e:Event):void{
            angle += 0.05
            m.graphics.lineTo(shape.fx(rad, angle, cx), shape.fy(rad, angle, cy))

            if(angle &gt;= 2*Math.PI)
                m.removeEventListener(&quot;enterFrame&quot;, arguments.callee);
        });
    }
}
||&lt;
</body>
<comments>
<comment>
<username>moringo</username>
<body>今回も、非常に参考になりました。ありがとうございます。&lt;br&gt;奇麗なコードを書くと多くのトライができ、メンテ性や効率もアップってことですね。わかっていつつも具体的な方法が掴めていなくて。。。&lt;br&gt;&lt;br&gt;早速お勧め本Amazonで注文しました。&lt;br&gt;精進します。</body>
<timestamp>1201570568</timestamp>
</comment>
</comments>
</day>
<day date="2008-01-30" title="">
<body>
*as_func_obj*[as]AS3 で関数かつクラスっぽいオブジェクトを作る
jQuery では、$ を関数としてもハッシュとしても使っている。
-$(&quot;#foo&quot;)  → エレメントを選択
-$.each() → ユーティリティ関数の呼び出し

as3Query でも同じようにやりたかったんだけど、いい方法が思いつかずに苦しんでた。

**失敗例 1
$ を public な function として定義する。

Function は dynamic なクラスなので、$[&quot;each&quot;] = function(){} とすれば関数を代入できる。$[&quot;each&quot;] で呼び出せる。

けども、$.each とすると、静的型付け言語の宿命でコンパイルエラーになってしまう。

**失敗例 2
$ をクラスにしてみたら、$() がキャストと解釈されて、$(&quot;#foo&quot;) が実行時のキャストエラーになった…。

**失敗例 3
Function を extends しようとしたら、final だって怒られた。

**失敗例 4
Proxy クラスを使ってみたけども、キャスト時の挙動は決められないようだ。

**ひらめいた
Object にしちゃえばよかったんだ！
&gt;|javascript|
package {
    public const $:Object = function():void {
        if(!$.each){
            $.each = function():void{
                trace(&quot;each called&quot;);
            }
        }

        trace(&quot;$ called&quot;);
    }
}
||&lt;
Object なので $.each のチェックは実行時。よって、コンパイルが通る。

実行結果はこんな具合。
&gt;|javascript|
$();       // $ called
$.each();  // each called
||&lt;

ただ、これだと $() を呼んだあとじゃないと、$.each が使えない。

ちょっと泥臭く対応したらこうなった。
&gt;|javascript|
package {
    public const $:Object = function():Function {
        var f:Function = function():void{
            trace(&quot;$ called&quot;);
        }
        f.each = function():void{
            trace(&quot;each called&quot;);
        }

        return f;
    }();
}
||&lt;

無名関数の中で、のちほど $ になる関数 f を宣言しておいて、each を代入している。

$ 自体は public なオブジェクトなのでプログラムの最初のほうで初期化される。初期化時に無名関数が評価されて、each が設定された f が $ に代入されるというわけだ。

実行結果はこんな具合。
&gt;|javascript|
$.each();  // each called
$();       // $ called
||&lt;

**感想
なんだか JavaScript ちっくで楽しい。同じようにすれば、JavaScript 風のクラス定義もできるような気がする。
</body>
</day>
<day date="2008-02-08" title="">
<body>
*p1*XML の冠詞は A ではなく AN
英語で記事を書いていて気がついたんだけど、技術用語の冠詞って、A ではなく AN になるものが多い。

例えば XML だと
&gt;&gt;
Create a XML node.
&lt;&lt;
は間違っていて、
&gt;&gt;
Create &lt;strong&gt;an&lt;/strong&gt; XML node.
&lt;&lt;
と書くべきだ。

(参考)
-&lt;a href=&quot;http://www.google.co.jp/search?num=100&amp;hl=ja&amp;inlang=ja&amp;safe=off&amp;ie=Shift_JIS&amp;oe=Shift_JIS&amp;q=%22an+xml+node%22&amp;btnG=%8C%9F%8D%F5&amp;lr=&quot;&gt;&quot;an xml node&quot; - Google 検索&lt;/a&gt; (約 32,100 件)
-&lt;a href=&quot;http://www.google.co.jp/search?num=100&amp;hl=ja&amp;inlang=ja&amp;safe=off&amp;ie=Shift_JIS&amp;oe=Shift_JIS&amp;q=%22a+xml+node%22&amp;lr=&quot;&gt;&quot;a xml node&quot; - Google 検索&lt;/a&gt; (約 13,500 件)

一般に母音から始まる名詞のときに a ではなく an になる。XML がなんで an XML かというと、読みが「エックスエムエル」であり、母音から始まっているものとみなされるようだ。

ということで、同じ X から始まる技術用語でも、XAML（ザムル）は「a XAML」と書く人が多い。
-&lt;a href=&quot;http://www.google.co.jp/search?num=100&amp;hl=ja&amp;inlang=ja&amp;safe=off&amp;ie=Shift_JIS&amp;oe=Shift_JIS&amp;q=%22a+XAML%22&amp;btnG=%8C%9F%8D%F5&amp;lr=&quot;&gt;&quot;a XAML&quot; - Google 検索&lt;/a&gt; (約 27,500 件)
-&lt;a href=&quot;http://www.google.co.jp/search?num=100&amp;hl=ja&amp;inlang=ja&amp;safe=off&amp;ie=Shift_JIS&amp;oe=Shift_JIS&amp;q=%22an+XAML%22&amp;btnG=%8C%9F%8D%F5&amp;lr=&quot;&gt;&quot;an XAML&quot; - Google 検索&lt;/a&gt; (約 2,550 件)

**AN が多い理由
それにしても、冠詞 an の技術用語の多いことよ。例えば、ざっと思いついただけでも、HTTP・SMTP・FTP…なんかは、全て冠詞は an にするのが通常なようだ。

と、ここまで考えて、技術用語だから多いわけじゃなく、アルファベット読みしたらの母音から始まるものが多いんじゃないか…。

試しに列挙してみた。

:アルファベット読みしたら母音から始まるもの:AEFHILMNORSX
:アルファベット読みしたら子音から始まるもの:BCDGJKPQTUVWYZ

&lt;strike&gt;おお。母音から始まるものの方が多い！&lt;/strike&gt; ←初稿では、P と U を母音側にいれてしまってました…。お恥ずかしい。

(追記) 子音から始まる物の数の方が多いんだけど、それでもほぼ同数。U は単体では母音なのに、アルファベット読みすると子音になるあたりが興味深いですな。

**まとめ
冠詞に気をつけよう。

P のどこが母音から始まるんだ。気をつけろ、自分。
</body>
<comments>
<comment>
<username>kanasan</username>
<body>”P”は子音からのような...</body>
<timestamp>1202460699</timestamp>
</comment>
<comment>
<username>mej</username>
<body>”U”もアルファベット読みすると子音からですよね&lt;br&gt;上の”P”と合わせると子音スタートのほうが数の上では逆転するわけですが、それはそれとしても母音スタートって多いですね&lt;br&gt;なかなか面白かったです</body>
<timestamp>1202472352</timestamp>
</comment>
</comments>
</day>
<day date="2008-02-09" title="">
<body>
*box2d_example*[as][box2d]Box2dFlashAS3 を活用した Flash ゲーム「引越し奉行」
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080209/20080209013351.jpg&quot; width=&quot;400&quot; height=&quot;201&quot;&gt;&lt;/center&gt;&lt;
&lt;a href=&quot;http://www.skt-products.com/contents/hikkoshi.html&quot;&gt;引越し奉行&lt;/a&gt;が面白い。

２次元物理エンジンの Box2dFlashAS3 をゲームに応用している。物理エンジンなだけに、ぶつかったあとの動きが面白い。家が壊れても荷物さえ届けば高得点というシュールさが素敵。いや、むしろ家がほどよく壊れたほうが点数高くなってるよ、コレ…。

Box2dFlashAS3 は2D物理シミュレーションだけを担当するライブラリなので、シミュレーションした結果をどうやって見せるかは Flash 作者にゆだねられている。このゲームのようにアニメタッチの絵と組み合わせてもいいし、リアルなテクスチャと組み合わせてもいい。見せ方は作者次第なので、Flash 的なテクニックと組み合わせやすい。その辺が、他の物理エンジンに比べて、Flash やってる人には魅力的なのかもしれない。

自分も、Box2d あたりを使ってネタっぽいものを作りかけてるんだけど、b2BodyDef と b2Body の違いがいまいち分かってなかったり、外から位置をいじるにはどうするかが分かってなかったり…応用して作りこむには、もうちょっと勉強が必要そう。誰か解説してケロ。

最近の気になった Box2dFlashAS3 記事。
-&lt;a href=&quot;http://d.hatena.ne.jp/technohippy/20080203#1202009227&quot;&gt;Box2Dユーザマニュアル - ずっと君のターン&lt;/a&gt;
-おっぱい揺れシミュレータ
--&lt;a href=&quot;http://d.hatena.ne.jp/flashrod/20080202&quot;&gt;おっぱい揺れシミュレータの作り方 - flashrod&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/technohippy/20080206#1202318874&quot;&gt;もう一つのおっぱい揺れシミュレータの作り方&lt;/a&gt;
-&lt;a href=&quot;http://www.ficc.jp/labs/archives/ando/box2dflashas3/&quot;&gt;FICC LABS | Box2DFlashAS3での衝突判定&lt;/a&gt;
-&lt;a href=&quot;http://un-q.net/2008/01/wcan_mini_actionscript_vol4_bo.html&quot;&gt;WCAN mini ActionScript Vol.4 で発表したやつ Box2DFlashAS3 (Unknown Quality)&lt;/a&gt; (プレゼンも Box2d)
</body>
<comments>
<comment>
<username>fladdict</username>
<body>b2BodyDefとb2Bodyの違いは、クラスとインスタンスみたいな感じだと思います。 b2BodyのDefinitionがb2BodyDefで、その設定を元に実際に作られる剛体がb2Body。</body>
<timestamp>1202530867</timestamp>
</comment>
<comment>
<username>kazuki0413</username>
<body>初めまして！「引越し奉行」を検索してやってきました。&lt;br&gt;自分もBox2DFlashAS3を使っていて思いましたが&lt;br&gt;「引越し奉行」はかなりセンスが良いですよね。&lt;br&gt;自分もこれくらいのセンスやネタがあればなぁと思います。&lt;br&gt;それではお邪魔しましたー</body>
<timestamp>1202872009</timestamp>
</comment>
</comments>
</day>
<day date="2008-02-12" title="">
<body>
*draw_circle*[as]BASIC 風に円を書く
&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080212/20080212015044.png&quot; width=&quot;493&quot; height=&quot;126&quot;&gt;&lt;
回顧主義的 Flash。

小学生のころ、BASIC でドラえもんを描こうとして挫折したのを思い出しました。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBasicCircle.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=470&amp;amp;h=384&amp;amp;title=10+CLS%3ACIRCLE(50%2C100)%2C10%2C2&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;
&gt;&lt;noscript&gt;(Flash Player 9.0 以降がインストールされている場合は、ここにFlashが表示されます)&lt;/noscript&gt;&lt;

PC-98 とかだともっと速く描画できるんでしょうが、私が愛用していた MSX はこんな感じでした。MSX マガジンよりも MSX-FAN のほうが好きでした。んなことはどうでもいいですね、はい。

アルゴリズムは &lt;a href=&quot;http://www2.starcat.ne.jp/~fussy/algo/algo2-1.htm&quot;&gt;円を描く (1)円弧描画のアルゴリズム&lt;/a&gt; あたりを参考にしてます。処理に時間がかかってるように見せるために、あえて途中で setTimeout を入れてます。

ソースの見所は、dispatchEvent で無名関数から無名関数を呼び出しているあたり。短いコードならではの威勢のいい実装となっております。

ソース(61行)：
&gt;|javascript|
package{
    import flash.display.*;
    import flash.events.Event;
    import flash.utils.setTimeout;

    public class BasicCircle extends Sprite{
        static private const COLOR:Array = [
            0x000000, 0x2424db, 0x6c6cff, 0x24ff24, 0x48ff6d, 
            0xb62424, 0x48ffdb, 0xff2424, 0xff6d6d, 0xdb24db, 
            0xdb6ddb, 0x242491, 0xdbb648, 0xb6b6b6, 0xffffff
        ];
        static private const TIMEOUT:int = 10;
        
        public function BasicCircle(){
            stage.scaleMode = &quot;noScale&quot;;

            var bmd:BitmapData = new BitmapData(256, 192);
            var bmp:Bitmap = new Bitmap(bmd);
            bmp.scaleX = bmp.scaleY = 2;
            addChild(bmp);

            addEventListener(&quot;complete&quot;, function(event:Event):void{
                drawCircle(bmd, 
                    256 * Math.random(), 
                    192 * Math.random(), 
                    50 * Math.random() + 50, 
                    COLOR[Math.floor(Math.random() * COLOR.length)]);
            });
            dispatchEvent(new Event(&quot;complete&quot;));
        }

        private function drawCircle(bmd:BitmapData, x0:int, y0:int, r:int, col:uint):void{
            var x:int = r;
            var y:int = 0;
            var F:int = -2 * r + 3;

            setTimeout(function():void{
                if ( x &lt; y ) {
                    dispatchEvent(new Event(&quot;complete&quot;));
                } else {
                    bmd.setPixel( x0 + x, y0 + y, col );
                    bmd.setPixel( x0 - x, y0 + y, col );
                    bmd.setPixel( x0 + x, y0 - y, col );
                    bmd.setPixel( x0 - x, y0 - y, col );
                    bmd.setPixel( x0 + y, y0 + x, col );
                    bmd.setPixel( x0 - y, y0 + x, col );
                    bmd.setPixel( x0 + y, y0 - x, col );
                    bmd.setPixel( x0 - y, y0 - x, col );
                    if ( F &gt;= 0 ) {
                        x--;
                        F -= 4 * x;
                    }
                    y++;
                    F += 4 * y + 2;

                    setTimeout(arguments.callee, TIMEOUT);
                }
            }, TIMEOUT);
        }
    }
}
||&lt;

</body>
<comments>
<comment>
<username>lets_skeptic</username>
<body>懐かしい。PC-8801mk2もこんな感じでしたね。</body>
<timestamp>1202784989</timestamp>
</comment>
</comments>
</day>
<day date="2008-02-20" title="">
<body>
*illusion_test*[as]GIGAZINE に載ってた錯視を検証する
&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20080219_optical_illusion/&quot;&gt;錯視画像の色は本当に同じ色なのか検証してみました - GIGAZINE&lt;/a&gt; が面白かったので、実証コードを書いてみた。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FIllusionTest.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=280&amp;amp;title=IllusionTest&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9.0 以降がインストールされている場合は、ここにFlashが表示されます)&lt;/noscript&gt;&lt;

四角をドラッグすると、色が変わっていくように見える…けど実は変わってない。不思議だ。背景をクリックで背景色のON/OFFが切り替わるよ。

ソースはこちら(46行)：
&gt;|javascript|
package{
    import flash.display.*;
    import flash.geom.*;
    import flash.events.Event;

    public class IllusionTest extends Sprite{
        function IllusionTest(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var toggle:Boolean = true;
            stage.addEventListener(&quot;click&quot;, function(event:*):void{
                if(event.target != stage) return;
                graphics.clear();
                drawGrad(toggle ? 0x000000 : 0xffffff, 0xffffff, 400, 300, graphics);
                toggle = !toggle;
            });
            stage.dispatchEvent(new Event(&quot;click&quot;));

            var s1:Sprite = createBox(); s1.x = 100;
            var s2:Sprite = createBox(); s2.x = 250;
        }

        private function createBox():Sprite{
            var s:Sprite = new Sprite();
            drawGrad(0x242424, 0x626262, 80, 80, s.graphics);
            s.addEventListener(&quot;mouseDown&quot;, function(event:*):void{
                setChildIndex(s, numChildren - 1);
                s.startDrag();
            });
            s.addEventListener(&quot;mouseUp&quot;, function(event:*):void{s.stopDrag();});
            s.buttonMode = true; s.useHandCursor = true;
            s.y = 100;
            addChild(s);
            return s;
        }

        private function drawGrad(col1:uint, col2:uint, w:Number, h:Number, g:Graphics):void{
            var m:Matrix = new Matrix();
            m.createGradientBox(w, h);
            g.beginGradientFill(&quot;linear&quot;, [col1, col2], [100, 100], [0x00, 0xff], m);
            g.drawRect(0, 0, w, h);
            g.endFill();
        }
    }
}
||&lt;

</body>
<comments>
<comment>
<username>fujioka0729</username>
<body>目がチカチカしました &gt;&lt; b</body>
<timestamp>1203573294</timestamp>
</comment>
<comment>
<username>Anpan</username>
<body>わかりやすい</body>
<timestamp>1203587345</timestamp>
</comment>
<comment>
<username>shinichiman2000</username>
<body>リアルタイムで動かせる錯視画像ってないので面白かったです。</body>
<timestamp>1204304398</timestamp>
</comment>
</comments>
</day>
<day date="2008-02-26" title="">
<body>
*flex3_air*[flex][air]Flex 3 SDK と AIR 1.0 公開されたけど…
ついに、Flex 3 SDK と AIR 1.0 が公開されました。
-&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2008/02/adobe_air_3.cfm&quot;&gt;akihiro kamijo: Adobe AIR 1.0 リリース&lt;/a&gt;

けど、&lt;strong&gt;Flex 2 Builder と Flex 2 SDK が落とせなくなった&lt;/strong&gt;。困った。自分が探すのが下手なだけかと思って、うろうろしたけど見つからず。

米 Adobe の &lt;a href=&quot;http://www.adobe.com/products/flex/&quot;&gt;Flex ページ&lt;/a&gt; は完全に Flex Builder 3 と Flex 3 SDK に変わってる。http://www.adobe.com/go/flex_trial から More Flex downloads とか See all downloads をクリックしたが見つからず。Flex 2 の文字はなし。いろいろ探して、&lt;a href=&quot;http://www.adobe.com/support/flex/downloads_updaters.html#flex2&quot;&gt;Adobe Flex Support Center&lt;/a&gt; に Flex 2 Builder への直リンクは見つけた。

日本 Adobe の &lt;a href=&quot;http://www.adobe.com/jp/products/flex/&quot;&gt;Flex ページ&lt;/a&gt; には Flex 2 SDK とあるものの、リンク先は Flex 3 Builder に変わってる。Flex 3 SDK は日本語のサイトからは落とせない模様。

Adobe labs からは Hotfix3 つきの &lt;a href=&quot;http://labs.adobe.com/technologies/flex/sdk/flex2sdk.html&quot;&gt;Flex 2.0.1 は落とせる&lt;/a&gt;模様。Hotfix2 はhttp://www.adobe.com/jp/support/flex/ts/documents/kb402000.htm から。

Flex 2 SDK/Builder をまだまだ現役で使ってる人も多いだろうに。大丈夫なのか。突然リンクが消えてしまう手法は Photoshop とか Illustrator のリリースでは許されるのかもしれないけど、開発ツールで同じことをやるのはやめてほしいものだ。
</body>
<comments>
<comment>
<username>os0x</username>
<body>http://www.adobe.com/cfusion/entitlement/index.cfm?e=flex3email&lt;br&gt;で、&lt;br&gt;/pub/flex/sdk/flex_sdk_3.zip&lt;br&gt;を&lt;br&gt;/pub/flex/sdk/flex_sdk_2.zip&lt;br&gt;にしたらダウンロードできたw&lt;br&gt;Builderは見つからなかった。。</body>
<timestamp>1204283561</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-03" title="">
<body>
*fxug36*Flex3勉強会第36回＠大阪
as3Query について発表しました。

AS3 だけじゃなく、Flex な場面にも使えるよ、というサンプルをライブコーディングっぽいノリで紹介しました。

as3Query といえば、発表時に Ajaxian にメールしたのは&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080124/p1&quot;&gt;先日書いたとおり&lt;/a&gt;なんだけど、同じく jQuery の作者でもある Resig さんにもメールしてたわけですよ。で、その返事が、数日前に帰ってきた！　「This is very very cool!」って言ってもらえた。メール出してから40日後にメールくれる Resig たん、ありがとう。

懇親会で数人の方に「すげー便利そう」と言ってもらえて、ちょっと嬉しかった。最初に公表して以来、ソースをいじれてないのをなんとかしたい。

同じく、懇親会にて。Adobe の海外エバンジェリストの人が来ていたので、日本法人の人を経由して、「Flex 2 SDK をダウンロードできるようにしてね」とお願いしておいた。「Adobe labs には一応あるお」と言われたから、「ONLY HotFix3!!! Not HotFix 2!!」と行き当たりばったりの英語で PR しておいた。「オーケー、トップページからたどれるようにしておくよ」みたいなことを言ってたように聞こえたので、そのうち対処されると期待。

メモ: 2.0.1 HotFix2 は &lt;a href=&quot;http://www.adobe.com/jp/support/flex/ts/documents/kb402000.htm&quot;&gt;Flexテクニカルノート：Flex 2.0.1 Hotfix 2&lt;/a&gt; から落とせるようだ。日本語 Language Pack もある。
</body>
</day>
<day date="2008-03-05" title="">
<body>
*flex_sdk_oss*Flex SDK の OSS 化
&lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=340&quot;&gt;BeInteractive! [FlexSDK(コンパイラ含む)が正式にオープンソースに]&lt;/a&gt;

ああ、意外に気づいていない人は多かったのね。自分は、Flex 3 SDK を落とすよりも前に、ソースをざっとみて楽しんでました。&lt;a href=&quot;http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/swfutils/src/java/flash/swf/SwfDecoder.java&quot;&gt;SwfDecoder.java&lt;/a&gt; とか &lt;a href=&quot;http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/swfutils/src/java/flash/swf/SwfEncoder.java&quot;&gt;SwfEncoder.java&lt;/a&gt; を見るだけでも楽しそう。

ところで、
&gt;http://www.be-interactive.org/index.php?itemid=340:title&gt;
独自のコンパイラを作ったり、独自のFlexSDKを作っても何も問題が無いことになります。ただし、MPLの性質上、これを利用して作った物はMPLとして公開しなければならないでそこは注意しましょう。
&lt;&lt;
とあるけど、MPL はソースの組み込みには寛容な模様。
&gt;http://www.mozilla-japan.org/MPL/mpl-faq.html:title&gt;
MPL 下のファイルや、MPL 下のコードをコピーした新たなファイルへの変更はすべて、この「変更」に相当し、MPL が適用されます。独自コードのみを含む新しいファイルは「変更」と見なされず、MPL の対象外となります。
&lt;&lt;
Flex SDK のコンパイラやデバッガのソースコードを流用しつつ、ラッピングするような感じでコーディングすれば、ラッピング部分のソース公開の義務は発生しないということになる。製品として販売しても OK のようだ。

ってことで、Flash or Flex 用の便利コンパイラ＆デバッガが商用・非商用を問わず、雨後の筍のようにニョキニョキと現れてくるんじゃないかなーと想像してます。
</body>
</day>
<day date="2008-03-06" title="">
<body>
*flex_3_org*Flex 3 SDK オープンソース版のディレクトリ構造
チェックアウトしてみた。
-http://opensource.adobe.com/svn/opensource/flex/sdk/

**ファイル容量
全部で&lt;strong&gt;780M&lt;/strong&gt;。

ただ、branches/3.0x と tags/3.0.0.477 と trunk の構造が同じなので、どれか１つなら容量は 1/3 ぐらいになる。
-branches/3.0x : 270M
-tags/3.0.0.477 : 215M
-trunk : 290M

**ディレクトリ構成
Flex 3 SDK に含まれているファイルも多い。

Flex 3 SDK に含まれてないもの一覧：
:collateral:ライセンス関係の文章が入ってる。MPL と矛盾するようなことが書いてる気がするんだけど、よく分からん。ライセンス、難しい。
:development:Eclipse と連携するための設定ファイル(?)。コンパイラやデバッガを Eclipse と結合できるのかな(?)
:in:AIR とか Flash Player のバイナリ。ソースは公開されてない部分。
:modules フォルダ:SDK の Java ソースコード。今回 OSS 化された部分の肝。&lt;ul&gt;&lt;li&gt;antTasks → flexTasks.jar&lt;/li&gt;&lt;li&gt;asc → asc.jar&lt;/li&gt;&lt;li&gt;compiler → mxmlc.jar, compc.jar, fcsh.jar, flex-compiler-oem.jar, asdoc.jar, optimizer.jar, digest.jar, copylocale.jar&lt;/li&gt;&lt;li&gt;debugger → fdb.jar (コマンドライン デバッガ)&lt;/li&gt;&lt;li&gt;&lt;/li&gt;swfutils → swfutils.jar、swfdump.jar （SWF 解析ツール。&lt;a href=&quot;http://dsas.blog.klab.org/archives/51195764.html&quot;&gt;DSAS開発者の部屋:Flex SDKのswfutilsでswfとXMLの相互変換を試してみる&lt;/a&gt; が参考になる）&lt;/li&gt;&lt;/ul&gt;3.0.0.477 には asc と swfutils はなくて、コンパイル済みのものが置いてある。
:mustella:自動ビルド＆テストツール。
:tools:雑多なツール。現状では dependencychecker のみ。

（参考）http://opensource.adobe.com/wiki/display/flexsdk/SDK+Organization

</body>
</day>
<day date="2008-03-07" title="">
<body>
*p1*[flex][as]Windows で Flex SDK をビルドしてみた
Windows XP で、オリジナル mxmlc から SWF を作るところまで。

まずは、README.txt に従って、下準備。

**J2SDK の導入
&lt;a href=&quot;http://java.sun.com/products/archive/j2se/1.4.2_14/index.html&quot;&gt;Archive: Download Java 2 SDK, Standard Edition, v 1.4.2_14 (J2SE)&lt;/a&gt; から j2sdk1.4.2_14 をダウンロード。

C:\j2sdk1.4.2_14 にインストールする。

**Apache Ant の導入
http://archive.apache.org/dist/ant/binaries/ より &lt;a href=&quot;http://archive.apache.org/dist/ant/binaries/apache-ant-1.6.2-bin.zip&quot;&gt;apache-ant-1.6.2-bin.zip&lt;/a&gt; をダウンロード。

C:\apache-ant-1.6.2 に展開。

**Cygwin の導入
http://cygwin.com/ から setup.exe を実行。

全てデフォルトで。

**環境設定
ここからは &lt;a href=&quot;http://opensource.adobe.com/wiki/display/flexsdk/Build+and+Test&quot;&gt;Build and Test - Flex SDK - Confluence&lt;/a&gt; を見ながら。

trunk、tags、branches の中からビルドするものを選ぶ。ここでは、trunk でビルドしてみることにする。

cygwin を起動。trunk のフォルダに移動して、setup.sh を実行する。
&gt;|sh|
cd flex/sdk/trunk
source setup.sh
||&lt;
エラーが出た。
&gt;|sh|
bash: $'\r': command not found
bash: $'\r': command not found
bash: $'\r': command not found
bash: setup.sh: line 41: syntax error near unexpected token `$'in\r''
'ash: setup.sh: line 41: `case `uname` in
||&lt;
setup.sh の改行コードを LF にしたらうまくいった。
&gt;|sh|
$ source setup.sh
setup.sh: Setting default  ANT_HOME=/cygdrive/c/apache-ant-1.6.2
setup.sh: Setting default JAVA_HOME=/cygdrive/c/j2sdk1.4.2_14
||&lt;
ant や j2sdk が見つからない場合は、
&gt;|
setup.sh: setup.sh: &lt;strong&gt;WARNING&lt;/strong&gt;: JAVA_HOME does not exist:
        /cygdrive/c/j2sdk1.4.2_14
|&lt;
のように警告がでる。この場合、正しい場所に導入するか、setup.sh のほうをいじって、パスを変更するべし。再度、setup.sh を叩いて WARNING が出ないことを確認しよう。
**ビルド
えいーっ
&gt;|sh|
ant -q main
||&lt;
出力
&gt;|
$ ant -q main
cygpath: can't convert empty path
     [echo] Building lib/swfutils.jar
     [echo] Building lib/swfdump.jar
    [javac] 注: 一部の入力ファイルは推奨されない API を使用またはオーバーライド
しています。
    [javac] 注: 詳細については、-deprecation オプションを指定して再コンパイルし
てください。
     [echo] Building lib/fdb.jar

(中略)

     [echo] Compiling frameworks/projects/flash_integration/libs/FlexComponentBa
se.swc
     [echo] ant main target completed on 03/07/2008 12:45:21 午前

BUILD SUCCESSFUL
Total time: 3 minutes 5 seconds
|&lt;
中途半端に日本語なのが気持ち悪いが &lt;a href=&quot;http://opensource.adobe.com/wiki/display/flexsdk/Build+and+Test&quot;&gt;Build and Test - Flex SDK - Confluence&lt;/a&gt; とだいたい同じ出力になった。

**出力結果
lib フォルダに色々できてる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080307/20080307013438.png&quot; width=&quot;416&quot; height=&quot;97&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

mxmlc.jar だけじゃなく、mxmlc_ja.jar (日本語版)まで出力されてたりするのがびっくり。

ついでに、framework.swc （mx パッケージの下）なんかもコンパイルされてる。その辺も含めてビルドするのか…。

**テスト実施
&gt;|sh|
ant -q checkintests
||&lt;
Flash Player が起動して、自動でテストが始まるのが愉快。
&gt;|
$ ant -q checkintests
cygpath: can't convert empty path
     [echo] launching player and swf
     [echo] compiling checkinapp
     [echo] launching player and swf

BUILD SUCCESSFUL
Total time: 37 seconds
|&lt;
途中でプレーヤーを触ると、例外が出ることがある。UI のテストなんだから、そんなもんか。

**コンパイル
&gt;|
$ bin/mxmlc.exe Test.as
設定ファイル &quot;N:\program\as\flexsdk\trunk\frameworks\flex-config.xml&quot; をロードし
ています
N:\program\as\flexsdk\trunk\Test.swf (683 bytes)
|&lt;
mxmlc を使う場合は LF に変換しないとエラーになる。

うまくいってるか半信半疑。ならば…。

**ソースをいじる
世界で１つだけの mxmlc を作る。

modules\compiler\src\java\flex2\tools\Compiler.java に次のようなソースが。
&gt;|java|
    /**
     * The entry-point for Mxmlc.
     * Note that if you change anything in this method, make sure to check Compc, Shell, and
     * the server's CompileFilter to see if the same change needs to be made there.  You
     * should also inform the Zorn team of the change.
     *
     * @param args
     */
    public static void main(String[] args)
    {
        mxmlc(args);
        System.exit(ThreadLocalToolkit.errorCount());
    }
||&lt;

おお、これが mxmlc のエントリポイントのようだ。ならば、main の先頭に
&gt;|java|
        System.out.print(&quot;Hello World\n&quot;);
||&lt;
と突っ込む。

mxmlc をリビルドする。全部ビルドすると時間かかるので、compiler のみをビルドしよう。
&gt;|
$ ant -q &lt;strong&gt;compiler&lt;/strong&gt;
cygpath: can't convert empty path
(中略)
     [echo] Building lib/mxmlc.jar
     [echo] Building lib/mxmlc_ja.jar
(中略)

BUILD SUCCESSFUL
Total time: 17 seconds
|&lt;

準備は整った。オリジナルな mxmlc で ActionScript をコンパイルしてみる。
&gt;|
$ bin/mxmlc.exe Test.as
&lt;strong&gt;Hello World&lt;/strong&gt;
設定ファイル &quot;N:\program\as\flexsdk\trunk\frameworks\flex-config.xml&quot; をロードし
ています
N:\program\as\flexsdk\trunk\Test.swf (683 bytes)
|&lt;
ヤター！！　ちゃんと Flash Player で再生できるよ！

**TODO
&lt;a href=&quot;http://jacwright.com/blog/69/hacking-the-flex-sdk/&quot;&gt;Hacking the Flex SDK&lt;/a&gt; の人は Bindable の挙動をいじるところまでやってる。もう一息。

</body>
</day>
<day date="2008-03-08" title="">
<body>
*asc_build*[as]Flex SDK の asc をビルドしてみた
ソース公開された Flex 3 SDK には ActionScript -&gt; ActionScript ByteCode 変換する asc.jar のソースコードも含まれている。これをビルドしてやろうというお話。

**下準備
modules/asc/README.txt によると、jdk 1.5 以降が必要とのこと。推奨されている &lt;a href=&quot;http://java.sun.com/products/archive/j2se/5.0_13/index.html&quot;&gt;5.0_13&lt;/a&gt; をインストールした。Ant 1.6.2 以降も必要らしいが、これは &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080307/p1&quot;&gt;Flex SDK をビルドした&lt;/a&gt; ときに入れたので省略。

**環境変数設定
cygwin を起動して、PATH と JAVA_HOME と ANT_HOME を設定。
&gt;|sh|
$ cd trunk/modules/asc/build/java
$ export JAVA_HOME=&quot;c:/Program Files/Java/jdk1.5.0_13&quot;
$ export ANT_HOME=&quot;c:/apache-ant-1.6.2&quot;
$ export PATH=&quot;/cygdrive/c/Program Files/Java/jdk1.5.0_13/bin:/cygdrive/c/apache-ant-1.6.2/bin:$PATH&quot;
||&lt;

**ビルド
&gt;|sh|
$ ant clean main
||&lt;
出力：
&gt;|
Buildfile: build.xml

clean:

clean:

classes:
    [javac] Compiling 220 source files to N:\program\as\flexsdk\trunk\modules\asc\build\java\classes
    [javac] 注:一部の入力ファイルは推奨されない API を使用またはオーバーライドしています。
    [javac] 注:詳細については、-Xlint:deprecation オプションを指定して再コンパイルしてください。
    [javac] 注:入力ファイルの操作のうち、未チェックまたは安全ではないものがあります。
    [javac] 注:詳細については、-Xlint:unchecked オプションを指定して再コンパイルしてください。

jar:
      [jar] Building jar: N:\program\as\flexsdk\trunk\modules\asc\lib\asc.jar
      [jar] Building MANIFEST-only jar: N:\program\as\flexsdk\trunk\modules\asc\lib\abcdump.jar
      [jar] Building jar: N:\program\as\flexsdk\trunk\modules\asc\lib\abcdump.jar
      [jar] Building MANIFEST-only jar: N:\program\as\flexsdk\trunk\modules\asc\lib\ash.jar
      [jar] Building jar: N:\program\as\flexsdk\trunk\modules\asc\lib\ash.jar

main:

BUILD SUCCESSFUL
Total time: 12 seconds
|&lt;
lib フォルダに asc.jar が出力されている。

**確認
１年ほど前に、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070201/tamarin_trial&quot;&gt;Tamarin と遊んでみた&lt;/a&gt; ときのソースコード
&gt;|javascript|
// hoge.as : 正規表現で grep
import avmplus.*;
var re = RegExp(System.argv[0]);
var line;
while (line = System.readLine()) 
  if (line.match(re))
    System.write(line + '\n');
||&lt;
をビルドしてみる。
&gt;|
$ bin/asc.exe hoge.as

hoge.abc, 221 bytes written
|&lt;
できた！

実行は付属の avmplus_s.exe で。
&gt;|
$ bin/windows/avmplus_s.exe hoge.abc -- var &lt; hoge.as
var re = RegExp(System.argv[0]);
var line;
|&lt;
コマンドライン引数を与えるためには -- が必要になっていてちょっと悩んだ。

**おわり
来週末に開かれるという Shibuya.abc で発表したいんだが、先は険しい…。

付け焼刃では火傷しそう。

*adobe_flex_oss_flex*[flex][as]Free Adobe Flex SDK と Open Source Flex SDK
opensource.adobe.com では２種類の Flex SDK が公開されている。

「Free Adobe Flex SDK」と「Open Source Flex SDK」だ。

「Free Adobe Flex SDK」が、いわゆる Flex 3 SDK。

では、「Open Source Flex SDK」が何かというと、こちらは完全にオープンソースなパッケージとなっている。この中に含まれている全てのものについて、ソースコードが公開されている、というわけだ。

Free Adoe Flex SDK に含まれていて、Open Source Flex SDK に含まれていないものには次のようなものがある。
-AIR 実行環境 (adt, adl)
-Flash Player
他にもいくつかのファイルがあるが、これらのファイルは「Adobe Add-ons for Open Source Flex SDK」として別途パッケージングされている。

つまり、
&gt;|
Free Adobe Flex SDK = Open Source Flex SDK
        + Adobe Add-ons for Open Source Flex SDK
|&lt;
というわけだ。

Free Adobe Flex SDK を使う場合、&lt;a href=&quot;http://www.adobe.com/products/eulas/index.html&quot;&gt;Adobe - Adobe product license agreements&lt;/a&gt; と &lt;a href=&quot;http://www.adobe.com/products/eula/third_party/&quot;&gt;Adobe - Products : Third Party Software Notices&lt;/a&gt; に同意しなきゃならんのだけど、Open Source Flex SDK を使う限りは、MPL の範囲内で自由にできるようだ。

Adobe product license agreements は長くてよく分からんので、OSS の方を使ったほうが何となく安心かもしれん。

（参考）&lt;a href=&quot;http://opensource.adobe.com/wiki/display/flexsdk/Downloads&quot;&gt;Downloads - Flex SDK - Confluence&lt;/a&gt; 

</body>
<comments>
<comment>
<username>なまえ</username>
<body>はじめまして&lt;br&gt;違いがわかってスッキリしました。&lt;br&gt;ありがとうございます</body>
<timestamp>1226503992</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-10" title="">
<body>
*twitter_crossdomain*Twitter の crossdomain.xml 問題について。
&lt;a href=&quot;http://hamachiya.com/junk/twlog/&quot;&gt;ついったー足あと帳&lt;/a&gt; 関連でこんなブログ記事を発見した。

&gt;http://d.hatena.ne.jp/skubota/20080309#1205047724:title&gt;
今回は twitterのprotectな発言とかsettingからメールアドレスの取得や変更なんかできちゃってたわけで…
&lt;&lt;
**変更？？
間違った情報が広がるとよくないので勝手に補足。

この記事には誤解がある。

確かに取得はできるけど、&lt;strong&gt;変更はできない&lt;/strong&gt;。実際に試した私が言うんだから間違いない。（補足）ためしたのは、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071113/twitter_tracker&quot;&gt;ついったー足あとちょう&lt;/a&gt;を作ったらへん。今は仕様変わってるかも(?)

たぶん、サーバー側でリファラを見て弾いてるんだと思う。SWF からリクエストする場合は、SWF の URL がリファラとしてつくようになっている。リファラをなしにして送ったらうまく行くことも確認した。

だから、
&gt;http://d.hatena.ne.jp/rna/20080309/p1:title&gt;
swf からのクロスドメインアクセスに対しては通用しないであろう。よって、(1)メールアドレスの変更、(2)パスワードリセット (3) パスワード変更 → 完全に乗っ取り完了 という攻撃は可能だと考えられる。
&lt;&lt;
と書いてあるけど、これは間違い。

変更前のゆるゆる crossdomain.xml であったとしても、リファラで弾かれるため、メールアドレスを変更させることはできない。

**メールアドレス変更を実現するには
では、ゆるい crossdomain.xml だったと仮定して、リンクを踏ませるだけでメールアドレスを変更させる方法はあるのか。

1つの方向性としては、リファラを飛ばさなくする方法がある。

例えば、一昔前の Flash Player はリファラを詐称してリクエストを送信できた。

今はどうか知らないけど、https なサーバーからリクエストするとリファラが飛ばない、という話も聞いたことがある。

（追記）はてブコメントより、https から http へのリファラを飛ばさないのはブラウザの標準的な挙動のよう（&lt;a href=&quot;http://www.nitoka.net/archives/2006/12/httpshttp.html&quot;&gt;参考&lt;/a&gt;）。HTTP1.1 の RFC で SHOULD NOT と書いてあるようだ。id:os0x さん、ありがとうございます。

Flash Player って、実はけっこう脆弱で、定期的にセキュリティーアップデートが行われてる。現状、&lt;strong&gt;脆弱じゃない Flash Player は最新の 9.0.115 のみ&lt;/strong&gt;となっている。
&gt;http://www.adobe.com/jp/support/security/bulletins/apsb07-20.html:title&gt;
Adobe Flash Playerにクリティカルな脆弱性が発見されました。攻撃者がこの潜在的な脆弱性を悪用することに成功した場合、当該システムが攻撃者によって制御される恐れがあります。 この脆弱性は、エンドユーザが作為的なSWFファイルをFlash Playerに読み込ませることによって、攻撃者に悪用される恐れがあります。

(中略)

Adobe Flash Player 9.0.48.0およびそれ以前のバージョンをご利用のお客様には、最新バージョンの9.0.115.0（Win版、Mac版およびLinux版）へのアップグレードを推奨します。
&lt;&lt;
古いバージョンを使っている人は、可能な限り&lt;a href=&quot;http://www.adobe.com/shockwave/download/flash/trigger/jp/3/index.html&quot;&gt;最新版にアップグレード&lt;/a&gt;したほうがいいだろう。バージョン確認は &lt;a href=&quot;http://www.adobe.com/jp/support/flashplayer/ts/documents/tn_15507.htm&quot;&gt;Adobe Flash Player のバージョンテスト&lt;/a&gt; にて。

余談だけど、9.0.115 では crossdomain.xml を含め、セキュリティーポリシーが大幅に変更になっている（&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2007/12/flash_player_90_1.cfm&quot;&gt;akihiro kamijo: Flash Player 9.0.115.0 セキュリティポリシー変更について&lt;/a&gt;）。逆に言えば、ここで強化されている場所は、古いバージョンの弱点でもあるわけで、その辺を攻めれば、悪いことはいくらでもできそうだ。そういう意味でも、可能な限り最新版にアップグレードしよう。


別の方向性としては、ブラウザのバグを突いたり、Twitter のバグを突いたりする方法が考えられる。

いずれにせよ、私の結論は以下の通り。
-以前の crossdomain.xml は、壮絶にゆるゆる
-情報の更新は（たぶん）リファラチェックで弾かれている
-→ crossdomain.xml の問題だけを使ってのアカウント乗っ取りは不可能
-→ ブラウザや Flash Player の脆弱性を組み合わせることで、乗っ取る方法はあるはず

**コミュニケーションだけじゃなく、セキュリティも「ゆるい」Twitter
勝手な想像だけど、Twitter は、
-「取得」は自由にできる
-「変更」はちょっときびしめに認証をかける
というポリシーで作ってるんだと思う。

取得のゆるさを象徴するエピソードとして、Twitter friends＋JSONP の例が挙げられる。
&gt;http://d.hatena.ne.jp/shinichitomita/20070520/1179659949:title&gt;
どうやら以下のJSONPリクエストで、いまWebサイトにアクセスして来ている人のTwitter friendsが取得できるらしい

http://twitter.com/statuses/friends.json?callback=onLoadTwitterFriends

かなり画期的というか挑戦的な仕様。
&lt;&lt;
これを使えば、ページを踏んだ人の Friends 一覧を取れる。つまり、「足あと帳」の１歩手前まで行ける、というわけだ。これが怖い人は、Twitter を使わないときは、ログアウトしとくしかない。

(追記) コメント欄でid:shinichitomita さんに教えてもらいました。user.timeline を使えば JSONP でユーザー名を取れる模様。ということで、何も Flash を使わなくても、JavaScript で「ついったー足あと帳」は作れちゃう。確認は id:shinichitomita さんによる&lt;a href=&quot;http://www.geocities.jp/stormriders999/twittergreeting.html&quot;&gt;デモ&lt;/a&gt; を参照あれ。こっちらについても、Twitter の中の人に文句を言ったら修正されるかもしれないし、修正されないかもしれない。

このような「取得」のゆるさが理由で、Twitter API を活用したサービスを作る人が多発して、それがまた Twitter の人気を押し上げたのは事実。取得の「ゆるさ」は、半ば、確信犯なんじゃないかなー、と思ってたりする。

他にも、Twitter には穴はいろいろあって、&lt;a href=&quot;http://twitter.g.hatena.ne.jp/nitoyon/20071113/1194883177&quot;&gt;http://tinyurl.com/22c7p9 遊び&lt;/a&gt; にも書いたんだけど、http://twitter.com/account/delete_picture のリンクを踏むだけでプロフィール画像が消えてしまったりする。img src で埋め込むだけで、いじわるできちゃったりもする。KOWAINE!!

**関連リンク
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071113/twitter_tracker&quot;&gt;ついったー足あとちょう - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071112/crossdomain_img&quot;&gt;AS で別ドメインの画像を読み込むときの注意点 - てっく煮ブログ&lt;/a&gt;
</body>
<comments>
<comment>
<username>shinichitomita</username>
<body>user.timeline でユーザ名もとれるみたいなので、JSONPだけでもあしあと帳はできるみたいです。&lt;br&gt;http://d.hatena.ne.jp/shinichitomita/20070520/1179671973</body>
<timestamp>1205128501</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。追記しておきました！</body>
<timestamp>1205132174</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-11" title="">
<body>
*avmplus*[tamarin]Tamarin Central の avmplus を VC++ 2005 でビルドする
最近、ビルドしてばっかりだけど、今度は avmplus をビルドしてみた。

基本、&lt;a href=&quot;http://developer.mozilla.org/ja/docs/Tamarin_Build_Documentation&quot;&gt;Tamarin Build Documentation - MDC&lt;/a&gt; に沿って。

Mercurial というバージョン管理ツールを使ってるらしいので、&lt;a href=&quot;http://www.selenic.com/mercurial/wiki/index.cgi/BinaryPackages&quot;&gt;BinaryPackages - Mercurial&lt;/a&gt; から hg.exe を入手。

&gt;|
$ hg clone http://hg.mozilla.org/tamarin-central tamarin-central
|&lt;
ってやってしばらく待機。過去の履歴を全部落としてくるのが Mercurial の特徴なのかな。そこそこ時間がかかる。

zlib を手に入れといて、platform/win32/avmplus_8.sln を VC++2005 で開く。

ビルドしたら
&gt;|
error C2733: オーバーロードされた関数 '_interlockedbittestandset' の C リンケージの 2 回以上の宣言は許されません。
C:\Program Files\Microsoft Visual Studio 8\VC\include\intrin.h(944) : '_interlockedbittestandset' の宣言を確認してください。
|&lt;
というエラーが出たので検索してみたら、Windows SDK 6.0 の問題らしい(参考：&lt;a href=&quot;http://forums.microsoft.com/MSDN-JA/ShowPost.aspx?PostID=1723473&amp;SiteID=7&quot;&gt;Windows SDK for Windows Vistaとintrin.h - MSDN フォーラム&lt;/a&gt;)。

ってことで、avmplus.h の #include &lt;intrin.h&gt; をコメントアウトしたらうまくいった。Windows SDK 6.1 では解決してるのかも。

続いて、ErrorConstants.cpp で
&gt;|
warning C4819: ファイルは、現在のコード ページ (932) で表示できない文字を含んでいます。
error C2001: 定数が 2 行目に続いています。
|&lt;
が大量に出た。

各国語対応のメッセージを保持してるファイルらしい。そんなんどうでもいいので、
&gt;|c|
        LangName languageNames[kLanguages] =
        {
            { &quot;en&quot;,     LANG_en },
            { &quot;de&quot;,     LANG_de },
            { &quot;es&quot;,     LANG_es },
            { &quot;fr&quot;,     LANG_fr },
            { &quot;it&quot;,     LANG_it },
            { &quot;ja&quot;,     LANG_ja },
            { &quot;ko&quot;,     LANG_ko },
            { &quot;zh-CN&quot;,  LANG_zh_CN },
            { &quot;zh-TW&quot;,  LANG_zh_TW },

        };
||&lt;
をシンプルに
&gt;|c|
        LangName languageNames[kLanguages] =
        {
            { &quot;en&quot;,     LANG_en },
        };
||&lt;
と書き換えた。各国語のエラーメッセージを含む errorConstants も英語以外は削除しておいた。

こんだけいじったら、ビルドできましたよーっと。

(追記) 
-&lt;a href=&quot;http://blog.katsuma.tv/2008/04/build_tamarin_on_macosx.html&quot;&gt;MacOSXでTamarinをビルド - blog.katsuma.tv&lt;/a&gt;

*qutto_design*ぱくりから始めるデザイン
デザインって、できものの組み合わせ、と言い切ると語弊があるのかな。

でも、プログラミングもそんなかんじ。自分の持ってる引き出しの中から、目的に向かって適切に関数やクラスを組み合わせていく。ある程度の知識があれば、ある程度のものは作れるようになる。

世間で天才と言われるようなすごい人は、発想力とか創造性とか勢いとか、いろいろ敵わないなー、と思うんだけど、自分にそれがあるかは別として、第一歩としてマネをしながら試行錯誤していかないことには始まらない。

言い訳がすんだところで、今日の作品。

クッとくるデザインを集めた「クッとデザイン」。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080311/20080311011215.jpg&quot; width=&quot;400&quot; height=&quot;155&quot; alt=&quot;qutto design&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
このロゴにクッときた、ローンチしてみたいぜ、という人はご連絡ください。

</body>
<comments>
<comment>
<username>kirara_397</username>
<body>ちょっとクッときました。アリじゃないでしょうか</body>
<timestamp>1205208457</timestamp>
</comment>
<comment>
<username>cu39</username>
<body>コードページ警告が乱発されるのは&lt;br&gt;&lt;br&gt;http://www.ccm.media.kyoto-u.ac.jp/~aoyama/index.php?Note%2FPrograming%2FWin32#ta9a749f&lt;br&gt;&gt; BOM無しのUTF-8を認識できないのが原因．&lt;br&gt;&lt;br&gt;らしいので、ErrorConstants.cpp を開いた状態で「ファイル＞保存オプションの詳細設定」を選び、エンコードをUTF-8 シグネチャ付きにした上で上書き保存してビルドしたら通りました。&lt;br&gt;&lt;br&gt;私はVS 2008 Stdで確認しましたが、05でも参考になるのではと。</body>
<timestamp>1251894939</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おお、ありがとうございます。なるほど、BOMをつければいいんですね。今度遭遇したら確認してみます。</body>
<timestamp>1251904911</timestamp>
</comment>
<comment>
<username>cu39</username>
<body>http://support.microsoft.com/kb/912790/ja&lt;br&gt;2005だとこういうのも出てたみたいですね。&lt;br&gt;08で再現してるのがあれですが……。</body>
<timestamp>1251998289</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-12" title="">
<body>
*air_as_flex_poster*[air][flex][as]AIR・AS3・Flex3のクラス相関図ポスターが公開中
&lt;a href=&quot;http://weblogs.macromedia.com/flexteam/archives/2008/02/update_on_flex.cfm&quot;&gt;Flex Team: Update on Flex, ActionScript, AIR Posters&lt;/a&gt; から入手できます。

公開当初は、Flex Builder 3 の購入が条件だったようですが、いつの間にか、誰でもダウンロードできるようになってますよ。

97MB の巨大 PDF、計５枚の迫力です。
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080313/20080313001155.jpg&quot; width=&quot;480&quot; height=&quot;475&quot;&gt;
四角１つがクラス１つになっていて、メソッド・プロパティ名が四角の中に列挙されています。

つまり、でかい四角は複雑なクラスというわけ。中でも目を引くのが、Flex の UIComponent と ListBase。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080313/20080313001403.jpg&quot; width=&quot;300&quot; height=&quot;257&quot;&gt;&lt;/center&gt;&lt;
こいつらのせいで Flex が複雑になってるいっても過言ではない・・・。個人的には、UIComponent は Sprite を継承すべきじゃなかったと思うんですよね…。

ちなみに、Flex2 時代の Flex2 と AS3 のポスターはこちらにあります。
-http://flex.org/download/FX2API_01.pdf
-http://www.flex.org/download/AS3API_01.pdf

チートシートとして手元に置くにはちょっと細かすぎるかもしれませんが暇なときに眺めてみると面白いと思います。

</body>
</day>
<day date="2008-03-14" title="">
<body>
*gihyo_flex3*[as]gihyo.jp で ActionScript の連載記事を始めました
&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0001&quot;&gt;プログラマのためのFlash遊び方：第1回　無料でFlash作りに挑戦！Flex 3 SDKを導入してみよう｜gihyo.jp … 技術評論社&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080314/20080314020030.jpg&quot; width=&quot;450&quot; height=&quot;97&quot; border=&quot;0&quot;&gt;&lt;/a&gt;

&lt;a href=&quot;http://gihyo.jp/&quot;&gt;gihyo.jp&lt;/a&gt;でActionScript 3.0 の連載記事を始めさせて頂きました。

「&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0001&quot;&gt;第1回　無料でFlash作りに挑戦！Flex 3 SDKを導入してみよう&lt;/a&gt;」が公開されましたので、ActionScript 3.0 に興味がある方はよろしければどうぞ。

JavaScript と比較してみたり、ちょっと個性をだしてみました。

当初は Flex 2 SDK で執筆していたのですが、「いざ公開！」というタイミングで、AIR 1.0・Flex 3 がリリースされ、さらには Adobe のサイトから Flex 2 SDK が&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080226/flex3_air&quot;&gt;ダウンロードできなくなってしまい&lt;/a&gt;、急遽 Flex 3 で書き直しました。

そのおかげ(?)で、Flex 3 SDK の解説としては(たぶん)日本初になったわけで、それはそれでよかったのかもしれません。
</body>
</day>
<day date="2008-03-18" title="">
<body>
*shibuya_abc*[as]Shiubya.abc#1 で発表しました：avmplus拡張とwinQuery
&lt;a href=&quot;http://wiki.libspark.org/trac/wiki/Shibuya.abc_1&quot;&gt;Shibuya.abc#1&lt;/a&gt; で発表してきました。

動画がニコニコ動画に上がる予定だったのですが、uStream からダウンロードできないらしく、１人だけアップロードされていない状態となってます…。興味がある人は、取り急ぎ uStream からご覧ください。
-http://www.ustream.tv/recorded/2o8n8htgxYXueGkQTAXR47mVyZs1EGo5

(2007/3/21追記) ニコニコにアップされた！
[niconico:sm2717689]

発表資料も置いておきます。
&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fshibuya-abc1%2Fshibuya-abc1.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=Shibuya.abc%231+avmplus+and+winQuery&amp;amp;border=%23000000%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;（Flash Player 9.0 がインストールされていたら、ここに表示されます）&lt;/noscript&gt;

資料中で「参照あれ」と書いてる beinteractive の人の資料は&lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=343&quot;&gt;このへん&lt;/a&gt;からご覧あれ。

&lt;strike&gt;…が、なんか今、Windows XP で見たら挙動が怪しいので、あとで何とかします。当日、「AVMPLUS_INTERACTIVE は avmplus.h にある」と言ってましたが、あとで調べたら avmshell.h の間違いでした。こちらも修正しておきます。&lt;/strike&gt; ← 修正しました。

&lt;strike&gt;ソース公開ももうちょっとお待ちください…。&lt;/strike&gt; → 公開しました。&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080319/winquery_source&quot;&gt;winQuery ソース＆バイナリ公開&lt;/a&gt;
</body>
</day>
<day date="2008-03-19" title="">
<body>
*winquery_source*[as]winQuery ソース＆バイナリ公開
&lt;a href=&quot;http://wiki.libspark.org/trac/wiki/Shibuya.abc_1&quot;&gt;Shibuya.abc#1&lt;/a&gt; で意外に好評だった winQuery のモックアップ版を公開しました。

-http://snippets.libspark.org/trac/browser/as3/Shibuya.abc-1/winQuery

勢いで作って試験もほとんどしてないので、色々と動作が怪しいと思いますが、興味のある人は試してみてください。

**バイナリで遊ぶ
bin と lib の下をダウンロードしてください。あと、J2RE1.4.2 以上も必要です。

コマンドプロンプトで、
&gt;|
avmplus -i
|&lt;
とするとコンソールが起動します。

あとは、いろいろパラメータ指定して楽しめます。

&gt;|sh|
# 全部のウインドウを表示
print($(&quot;*&quot;));

# トップレベルのウインドウを表示
print($(&quot;*:root&quot;));

# トップレベルの可視状態のウインドウを表示
print($(&quot;*:root:visible&quot;));

# メモ帳を全部閉じる
$(&quot;.notepad:root&quot;).remove();

# メモ帳を整列する
#  (引数)
#    0: 縦に整列 (デフォルト)
#    1: 横に整列
#    2: 重ねて整列
$(&quot;.notepad:root&quot;).order(0);

# 電卓のボタンの横幅を小さくする
$(&quot;.calc:root button&quot;).attr(&quot;width&quot;, 10);
||&lt;

**ビルドする
Visual C++ 2005 Pro でビルドしてます。Express Edition でもいけるはず。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080311/avmplus&quot;&gt;Tamarin Central の avmplus を VC++ 2005 でビルドする&lt;/a&gt; に従って avmplus をビルドできるようになってから、&lt;a href=&quot;http://snippets.libspark.org/trac/browser/as3/Shibuya.abc-1/winQuery/shell&quot;&gt;shell&lt;/a&gt; の下の一部のファイルを上書きしてリビルドすれば OK。詳しくは、&lt;a href=&quot;http://snippets.libspark.org/trac/browser/as3/Shibuya.abc-1/winQuery/how-to-build.txt&quot;&gt;how-to-build.txt&lt;/a&gt; を参照あれ。

*adobe_max_2008*Adobe MAX 2008 Japan は 2009年開催！
via &lt;a href=&quot;http://www.onflex.org/ted/2008/03/max-2008-mark-your-calendars.php&quot;&gt;Ted On Flex: MAX 2008 - Mark your calendars!&lt;/a&gt;

&gt;|
Adobe MAX - North America
San Francisco, CA, US
November 16-19, 2008
Attendee Goal: 5800

Adobe MAX - Europe
Milan, Italy
December 1-4, 2008
Attendee Goal: 3000

Adobe MAX - Japan
Tokyo, Japan
&lt;strong&gt;January 29-30, 2009&lt;/strong&gt;
Attendee Goal: 1500
|&lt;
日本は2009年1月29日(木)～30日(金)らしい。

</body>
</day>
<day date="2008-03-20" title="">
<body>
*gihyo2*[as]gihyo.jp 連載２回目
公開されましたよ。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0002&quot;&gt;プログラマのためのFlash遊び方：第2回　お絵かきしながら学ぶActionScript 3.0（前編）｜gihyo.jp … 技術評論社&lt;/a&gt;

実践的にいきたかったのだけど、文法を中途半端に説明するのは嫌だなーと思ってるうちに、気がついたらがっつり解説してた。ごまかしも善意の嘘もなくしたつもりなので、他言語の経験者には分かりやすくなってるはず。

ただ、初心者にはつらいかも。プログラミング初心者は、@IT でクラスメソッドの吉村さんが連載中の &lt;a href=&quot;http://www.atmarkit.co.jp/fwcr/index/index_as3.html&quot;&gt;ActionScript入門&lt;/a&gt; がよいかも。こっちは、「変数とは」というところから説明していて、ActionScript入門というよりかは、プログラミング入門になっていて、これはこれで面白い試み。

うちは Flash っぽい表現の世界をプログラマの人に体験してもらう方向でがんばってみます。後編もご期待ください。
</body>
<comments>
<comment>
<username>cactusman</username>
<body>どもです。java-ja第六回の申し込みありがとうございます。一応、発表者の欄に記載しておきましたので、10分~20分程度の内容でお願いします。</body>
<timestamp>1206265305</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-23" title="">
<body>
*java_ja6*[event]java-ja第六回に行ってみることにした
Java はあんまり使ったことないけど、楽しそうなので &lt;a href=&quot;http://java-ja.yoshiori.org/index.php?%E7%AC%AC%E5%85%AD%E5%9B%9E&quot;&gt;第六回 - java-ja&lt;/a&gt; に参加します。余力あればなんか発表する。余力なければ、Shibuya.abc#1 の資料を使いまわす(?)。
</body>
<comments>
<comment>
<username>ujihisa</username>
<body>よろしくでーす</body>
<timestamp>1206304790</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-24" title="">
<body>
*free_of_constraints*制約のない世界で自由に羽ばたけるか
想像できないと人間はイライラするものだ。
&gt;http://d.hatena.ne.jp/kokokubeta/20080320/1206000886:title&gt;
「FLASHって冗長」「FLASHうざいな」と思う。時間がかかるという意味では、Youtubeなどの動画と同じなのだが、動画と違うのは早送り・巻き戻しが自由じゃないことだろうか。あと、FLASH全編が何分あって、いまどこなのかという情報もない。加えて言うなら、このFLASHはなんなのかという情報が（動画に比べれば）少ないかもしれない。この「見通しのきかない感」「コントロールできない感」は重要かと。
&lt;&lt;
例えば、Windows にはコモンコントロールというのが存在する。
&gt;http://d.hatena.ne.jp/ku0522/20080321/1206026730:title&gt;
昔Windows95がまだ最新のWindowsだったころisbn:4756104908:titleっていう本を立ち読みしたときに、に、Windowsのコモンコントロール(Windowsの標準のボタンとか、ツリービューとか、テキストボックスとか、コンボボックスとかそういうやつ)が(UIとして)一番優れているから使うべきなのではなくて、それが&quot;コモン&quot;だから使うべきだ、と書かれていた。
&lt;&lt;
Windows のアプリケーションは、大抵メニューに左から「ファイル」「編集」...と並んでいる。白い横長の四角があれば、文字を入力することを求められていると分かる。小さい丸はラジオボタンで、複数の中から１つを選ぶ。小さい四角はチェックボックスで、複数選択ができると分かる。

Windows を初めて使った人にとって分かりやすいかどうかは別として、Windows の標準的なお作法に則っていれば、少なくとも日常的に Windows を使う人にとっては直感的となる。それがコモンの正体。

Web ページなんかもそう。HTML の表現力には限界がある。その限界のおかげで、Web ページを見ている人にはある程度の「見通し」が提供される。Web ページの標準的なお作法もある。例えば、メニューの位置を変えない、とか、サイトマップへのリンクは右上だ、とか、検索ボックスは設置しよう、とか、そういうの。真似ではないけど、ありがちな形にすれば、分かりやすくなる。

その辺がしっかり守られていると、見ている人間は「困ったとしてもなんとかなるや」という安心感を得られる。

コモンコントロールや HTML は一種の「フレームワーク」と言ってもよいかもしれない。フレームワークは便利な機能を提供するありがたいものなのだけれど、その一方で、一定のお作法を強要する。それは悪いことではなくて、お作法に則ると見通しがよくなるし、平均点のものを作りやすくなる。制限することで、分かりやすくなる、ということだ。

で、Flash サイトや RIA の世界のお話。

制約いっぱいの世界に比べて大いに自由。自由なのは素晴らしいことのはずなんだけど…、逆に言うと共通語がなくなる。制約のある世界で平均点をたたき出していた人が、落第点のものを作ってしまう危険性がある。

フレームワークがない世界では、フレームワークが担当している部分を決めるところから話が始まる。HTML でいうところの、どんなタグがあるか、というレベルにまで手を出さなきゃいけない。チューニングし放題なのは確かなんだけど、労力が増えるし、少しでも気を抜くと、平均点以下のものができあがってしまう。フレームワークが当たり前のように提供する平均点の部分を自分で創らなければならない。フレームワークが考えつくした範囲を、自分が考えなきゃいけない。

自由であるほど手間がかかる。自由であるほど考えることは多い。けれども、自由であるほどうまくいったときの爆発力は高い。自由はハイリスクハイリターン。自由な世界では最初の一歩を踏み出すのも大変だよ、という気がしている。
</body>
</day>
<day date="2008-03-25" title="">
<body>
*traditional_color_hsv*日本の伝統色をHSV空間に配置してみた
&lt;a href=&quot;http://assets.doloreslabs.com/jobs/colors/explorer/&quot;&gt;color label explorer&lt;/a&gt; (※やや重い) が面白かったので、日本の伝統色でやってみた。

データは &lt;a href=&quot;http://2xup.org/repos/&quot;&gt;Japanese Traditional Colors - 日本の伝統色: 2xup&lt;/a&gt; から抽出させてもらったのを使ってる。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080325/20080325013301.png&quot; width=&quot;465&quot; height=&quot;384&quot;&gt;&lt;/center&gt;&lt;
こうやって分布させるだけでも、新たな気づきがあっておもしろい。

内側に密集していて、外側にいくほど（彩度が高くなるほど）色が少なくなる。特に、左下の緑なんてすっからかん。伝統色には、自然を表現する色が多いのに、緑が少ないとは意外。自然界には、彩度が高い色は少ない、ということか。

一応ソースものっけておく。これぐらいなら、JS ででもできそうなんだけど、日ごろの慣れで AS。
&gt;|javascript|
package{
    import flash.display.*;
    import flash.text.TextField;
    import sketchbook.colors.*;
    import com.nitoyon.as3query.*;

    [SWF(backgroundColor=&quot;#000000&quot;)]
    public class TraditionalColor extends Sprite{
        private var box:Sprite;

        public function TraditionalColor(){
            $(stage)
                .attr({
                    align: &quot;TL&quot;,
                    scaleMode: &quot;noScale&quot;
                });

            box = $(Sprite)
                .attr({x : 200, y : 200})
                .appendTo(this)[0];

            for each(var col:Object in colors){
                putColor(col);
            }
        }

        private function putColor(col:Object):void{
            var hsb:Object = ColorUtil.getHSB(col.value);

            var rad:Number = (2 * Math.PI * hsb.h) / 360;
            var r:Number = hsb.s * 2;

            $(TextField)
                .text(col.color)
                .attr({
                    textColor : col.value,
                    autoSize: &quot;left&quot;,
                    selectable: false,
                    x : r * Math.cos(rad),
                    y : r * Math.sin(rad)
                })
                .appendTo(box);
            
        }

        private var colors:Array = [
            {value: 0xfef4f4, color: &quot;桜色 &quot;, yomi: &quot;さくらいろ&quot;},
            {value: 0xfdeff2, color: &quot;薄桜 &quot;, yomi: &quot;うすざくら&quot;},
            // 以下略
        }
    }
}
||&lt;
無駄に as3Query を使ってる。あと、HSV 変換は sketchbook の &lt;a href=&quot;http://sketchbook.libspark.org/trac/browser/as3/trunk/src/sketchbook/colors/ColorUtil.as&quot;&gt;ColorUtil&lt;/a&gt; を使ってる。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20080326/tradcolors_hsv:title]
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>原色大辞典</username>
<body>私も「color label explorer」に触発されて、日本の伝統色をHSB色空間に配置した物を作成していました。ネタがかぶってしまいました。&lt;br&gt;http://www.colordic.org/colorwheel.php</body>
<timestamp>1206560839</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おおー。大きくてよいですね。やはり、絞り込みできると面白いですね。</body>
<timestamp>1206577331</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-26" title="">
<body>
*tradcolors_hsv*各国の伝統色をHSV空間に配置してみた
前回の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080325/traditional_color_hsv&quot;&gt;日本の伝統色をHSV空間に配置してみた&lt;/a&gt; が意外に面白かったので、今度は世界各国のデータで試してみた。

**日本
自然界にある色を中心に、埋め尽くすかのように沢山の色があるのが分かります。色名の由来がまた、素敵なんだよなー。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080325/20080325013301.png&quot; width=&quot;465&quot; height=&quot;384&quot;&gt;&lt;/center&gt;&lt;

**中国
日本に近い。というよりかは、日本がもろに中国の影響を受けたんだろうな。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080326/20080326015713.png&quot; width=&quot;465&quot; height=&quot;430&quot;&gt;&lt;/center&gt;&lt;

**イギリス
日本・中国とは全く違う分布になっていますね。教科書的に均等にばらついていて円に近い。果物とか花とか宝石の名前が多いのかな。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080326/20080326015711.png&quot; width=&quot;465&quot; height=&quot;430&quot;&gt;&lt;/center&gt;&lt;

**フランス
イギリスと同じくばらついているんだけど、右上の紫と、右下の黄色が充実しているのが印象的。紫色が充実しているのは、ワインを表現するため！？　黄色が充実してるのは、チーズを表現するため！？
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080326/20080326015712.png&quot; width=&quot;465&quot; height=&quot;430&quot;&gt;&lt;/center&gt;&lt;

**アメリカ
彩度が高い色（円の外側）が充実しまくっている。超原色だぜ、USA！
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080326/20080326015704.png&quot; width=&quot;465&quot; height=&quot;430&quot;&gt;&lt;/center&gt;&lt;

**アフリカ
特徴的な原色。水色、緑は、他の国には登場すらしていないぐらいに強烈。8bit ゲーム機のような色だ。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080326/20080326020612.png&quot; width=&quot;465&quot; height=&quot;430&quot;&gt;&lt;/center&gt;&lt;

**おまけ
データは &lt;a href=&quot;http://www.nicopon.com/iro/dento.html&quot;&gt;伝統色 - Traditional Colors Category&lt;/a&gt; のものを使わせてもらいました。抽出したデータはせっかくなので zip でまとめておきます。遊ぶときに使ってね。
-http://tech.nitoyon.com/misc/traditional-colors.json.zip

HSV といいつつ、実は、V(明度) の値は使ってないんだけどね…。どこかの偉い人が PV3D 使って３次元空間にプロットしてくれることを期待！

(追記) note.x さんでやってくれた。きれーだなーーー。鮮やかに紅葉している木のようだ。&lt;br&gt;→ &lt;a href=&quot;http://blog.r3c7.net/?p=170&quot;&gt;note.x | [Papervision3D2.0] 日本の伝統色をHSV色空間に3Dプロットしてみた&lt;/a&gt;
</body>
<comments>
<comment>
<username>+39</username>
<body>はじめまして、とても面白いです。&lt;br&gt;3次元でのV表現がんばってくださいｗ</body>
<timestamp>1206478952</timestamp>
</comment>
<comment>
<username>sweetlove</username>
<body>はじめまして。こうして見ると色空間は宇宙みたいですね。&lt;br&gt;古代ギリシャでは、色は神の創造物だとして混色は神への冒涜とされ禁止されていたそうです。そのため鮮やかな純色が多いのでしょうね。&lt;br&gt;&lt;br&gt;ヨーロッパと日本の色の分布の違いは、色彩文化の違いで、鉱物や動物性由来が多いヨーロッパに比べ、日本は植物由来がほとんどです。&lt;br&gt;また日本のように2次色が代表色になっている国はめずらしく、路考茶や利休鼠などの人名に由来する色名があるのも面白いですね。</body>
<timestamp>1206496705</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-28" title="">
<body>
*p1*gihyo.jp 連載３回目
公開されましたよ。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0003&quot;&gt;プログラマのためのFlash遊び方：第3回　お絵かきしながら学ぶ ActionScript 3.0（後編）｜gihyo.jp … 技術評論社&lt;/a&gt;
応用編です。
</body>
<comments>
<comment>
<username>これ</username>
<body>連載楽しみにしています。&lt;br&gt;この連載でFlexに手を出しはじめました。&lt;br&gt;重箱の隅をつつくような質問で申し訳ないのですが・・・&lt;br&gt;for文で&lt;br&gt;for(var i:int = 0; i &amp; CORNER; i++) {&lt;br&gt;とありますが&lt;br&gt;for(var i:int = 0; i &lt; CORNER; i++) {&lt;br&gt;の間違いですよね？＆ｌｔ；の＆だけ出てますか？&lt;br&gt;あとTextの装飾部分で＜font&gt;&lt;b&gt;＜/font＞＜/b＞は&lt;br&gt;HTML的には＜/b＞＜/font＞だと思うのですが・・・</body>
<timestamp>1206683457</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ああ、本当ですね…。確認漏れでした。&lt;br&gt;修正依頼出しておきます。&lt;br&gt;ありがとうございました。</body>
<timestamp>1206850673</timestamp>
</comment>
<comment>
<username>これ</username>
<body>レスありがとうございます。&lt;br&gt;我流で直して動いたものの&lt;br&gt;実際はどうなのか自信無かったもので。&lt;br&gt;いろんなサイトで連載が始まってFlex注目されてますね。&lt;br&gt;今後も連載がんばってください。</body>
<timestamp>1207127101</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-30" title="">
<body>
*java_ja6*[event]java-ja第６回発表資料「ActionScript for JAVAer」
&lt;a href=&quot;http://java-ja.yoshiori.org/index.php?%E7%AC%AC%E5%85%AD%E5%9B%9E&quot;&gt;java-ja 第六回&lt;/a&gt;で発表してきました。JAVA な人に AS をお薦めするプレゼンです。
&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fjava-ja6%2FSlide.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=340&amp;amp;title=ActionScript%20for%20JAVAer&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;(Flash Player がインストールされていると、ここにプレゼン資料が表示されます)&lt;/noscript&gt;&lt;

**自作プレゼンシステムが進化した！
毎回、プレゼンするときにソースコードを改善していってるんだけど、ちょっと前から as3Query を使い始めている。

やっぱり as3Query すごい。

例えば、次のページに移るときのアニメーションはこう書いてる。
&gt;|javascript|
// 前面のオブジェクトをスライド
$(this).children()
  .addTween({
    x : WIDTH * (next ? -1.5 : 1.5),
    time: 1.5,
    onComplete: function():void{
      $(this).remove();
    }
  });
||&lt;
as3Query で列挙した子供に対して Tween を追加している。as3Query＋Tweener 最強。このコードは全ての x 座標が 0 という前提があるんだけど。

連続してスクロールされたときに、もしもスクロール中のものがあったら、上のコードでは誤動作する。そこで、スクロール中のものは事前にステージから取り除いておく。これも as3Query なら超簡単。
&gt;|javascript|
$(&quot;&gt; *[x != 0]&quot;, this).remove();
||&lt;
this 直下の x 座標が 0 でないものはアニメーション中のはずなので削除する。うひー、楽ちん。

ソースコード全体はこちら。
-http://tech.nitoyon.com/misc/java-ja6/Slide.as

*p1*Scala 面白そう
&lt;a href=&quot;http://java-ja.yoshiori.org/index.php?%E7%AC%AC%E5%85%AD%E5%9B%9E&quot;&gt;java-ja 第六回&lt;/a&gt; の発表の中で、Scala が興味深かった。

case class とか views あたりの機能が楽しそう。気軽にクラスが作れるのっていいなぁ。

発表資料は公開されないのかなぁー。&lt;br&gt;
→ (追記) 公開された！ &lt;a href=&quot;http://cappuccino.jp/keisuken/java/java-ja/java-ja-6.html&quot;&gt;Javaからみたスクリプティング&lt;/a&gt;

(関連)
-&lt;a href=&quot;http://d.hatena.ne.jp/yukoba/20080211/p1&quot;&gt;Scala, JavaScript, Java の違い - yukobaの日記&lt;/a&gt;
</body>
<comments>
<comment>
<username>keisuke_n</username>
<body>昨日はお疲れ様でした。AS3を使ってるんでいろいろ参考になりました。&lt;br&gt;ところで昨日録画したビデオ(発表分)って公開してもいいですか?&lt;br&gt;基本的にプレゼン画面しか写ってないはずです。</body>
<timestamp>1206860510</timestamp>
</comment>
<comment>
<username>cactusman</username>
<body>gdgdで申し訳ないです。</body>
<timestamp>1206870621</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>公開OKです！&lt;br&gt;gdgd には感じなかったですよー。問題なしでした。</body>
<timestamp>1206889847</timestamp>
</comment>
</comments>
</day>
<day date="2008-03-31" title="">
<body>
*flash_decompiler_review*[as]OSS で SWF をデコンパイルする(1) - flash-decompiler を使ってみる
AS3 対応のデコンパイラとしては、最近 &lt;a href=&quot;http://www.sothink.com/product/flashdecompiler/index.htm&quot;&gt;Sothink SWF Decompiler 4&lt;/a&gt; というのが登場したようだけど、AS3 に押し寄せる OSS 化の波の力を借りれば、無料でデコンパイルできるんじゃね？

ということで、Google Code で公開されている &lt;a href=&quot;http://code.google.com/p/flash-decompiler/&quot;&gt;flash-decompiler&lt;/a&gt; を試してみた。

まずはどんなものなのかを知るためにビルドしてみる。

**さっそくソース修正
Flex3 SDK で r45 をビルドするにはソースの修正が必要だった。

&lt;a href=&quot;http://code.google.com/p/flash-decompiler/source/browse/trunk/FlashDecompiler/src/com/ludicast/decompiler/util/HeaderParser.as?r=45&quot;&gt;src/com/ludicast/decompiler/util/HeaderParser.as&lt;/a&gt; の5行目、
&gt;|javascript|
    import mx.automation.codec.ArrayPropertyCodec;
||&lt;
をコメントアウト。

src/FlashDecompiler-app.xml で content が設定されていないので、手動で設定してあげる。
&gt;|xml|
   &lt;content&gt;FlashDecompiler.swf&lt;/content&gt;
||&lt;

**ビルド＆実行
ビルド：
&gt;|sh|
amxmlc FlashDecompiler.mxml -source-path+=..\locales\en_US
||&lt;
実行：
&gt;|sh|
adl FlashDecompiler-app.xml
||&lt;

**試しに実行
+URL of Remote SWF に SWF の URL を突っ込む。
+Parse ボタンを押す
+情報が表示される！

Tags タブを開くと、SWF の中のタグ一覧が表示される。タグにはいろんな種類があって、シェイプとか画像とかABCの情報が入ってるようだ。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080323/20080323123718.jpg&quot; width=&quot;350&quot; height=&quot;297&quot;&gt;&lt;/center&gt;&lt;
Tags の中から ABC(ActionScript ByteCode)のものだけを抜き出して表示するのが AS3 Classes。今は、クラス一覧を表示するだけっぽい。

とある Web サービスの SWF を解析した図。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080323/20080323123711.jpg&quot; width=&quot;350&quot; height=&quot;297&quot;&gt;&lt;/center&gt;&lt;
channel3 とか mx.* とかがリストアップされてる。ふむふむ。
**ソース読み
flash-decompiler のソースを覗く。クラス列挙をどうやってるのかが気になる。

まず、DoABC タグを ByteArray で取り出している。DoABC というのは ActionScript ByteCode が格納されているタグの名前のようだ。

次に、ByteArray を com.ludicast.decompiler.util.tamarin.Abc でパースしている。この、Abc というクラス、よく見てみると、tamarin の abcdump.as にある Abc クラスと全く同じ。

どうやら、com.ludicast.decompiler.util.tamarin.* のファイルは、abcdump.as をクラスごとにファイル分割したもののよう。asc.jar だと１ファイルに複数の public なクラスを定義できるけど、mxmlc だとビルドできないからね。

ということは、もう１工夫すれば、abcdump の出力結果を画面に表示することもできるはずだな…&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080401/swfassist_abcdump&quot;&gt;（続く）&lt;/a&gt;

</body>
</day>
<day date="2008-04-01" title="">
<body>
*swfassist_abcdump*[as]OSS で SWF をデコンパイルする(2) - swfassist と abcdump で亜流デコンパイラ
Tamarin の abcdump.as を活用して、SWF をダンプしてみよう。

abcdump を使うためには、まず、SWF の中から ABC(ActionScript ByteCode)を取り出す必要がある。前回取り上げた flash-decompiler を使ってもいいんだけど、せっかくなので、前々から試してみたかった &lt;a href=&quot;http://www.libspark.org/wiki/yossy/swfassist&quot;&gt;swfassist&lt;/a&gt;を使ってみた。

いきなり凝ったものを作るのは大変なので、まずは SWF から ABC を抽出するアプリを AIR で作ってみた。

**サンプルデータ
試しにこの簡単な AS をコンパイルして SWF にする。
&gt;|javascript|
package{
    import flash.display.Sprite;

    public class Test extends Sprite{
        public function Test()
        {
            trace(&quot;test&quot;);
        }
    }
}
||&lt;

SWF に対して、今回作った ABC 切り出しツールを適用する。

切り出された ABC を abcdump でダンプする。
&gt;|javascript|
magic 2e0010
Cpool numbers size 3 1 %
Cpool strings count 13 size 130 46 %
Cpool namespaces count 5 size 9 3 %
Cpool nssets count 0 size 1 0 %
Cpool names count 9 size 25 8 %
MethodInfo count 3 size 13 4 %
InstanceInfo size 8 2 %
ClassInfo size 2 0%
ScriptInfo size 7 2 %
MethodBodies size 76 27 %
script0

class Test extends flash.display::Sprite
{

  function Test():*     /* disp_id -1*/
  {
    // local_count=1 max_scope=1 max_stack=2 code_len=13
    0       getlocal0           
    1       pushscope           
    2       getlocal0           
    3       constructsuper      (0)
    5       findpropstrict      trace
    7       pushstring          &quot;test&quot;
    9       callpropvoid        trace (1)
    12      returnvoid          
  }


  static function Test$cinit():*        /* disp_id 0*/
  {
    // local_count=1 max_scope=1 max_stack=1 code_len=3
    0       getlocal0           
    1       pushscope           
    2       returnvoid          
  }

}


function script0$init():*       /* disp_id 0*/
{
  // local_count=1 max_scope=7 max_stack=2 code_len=35
  0         getlocal0           
  1         pushscope           
  2         getscopeobject      0
  4         getlex              Object
  6         pushscope           
  7         getlex              flash.events::EventDispatcher
  9         pushscope           
  10        getlex              flash.display::DisplayObject
  12        pushscope           
  13        getlex              flash.display::InteractiveObject
  15        pushscope           
  16        getlex              flash.display::DisplayObjectContainer
  18        pushscope           
  19        getlex              flash.display::Sprite
  21        pushscope           
  22        getlex              flash.display::Sprite
  24        newclass            Test
  26        popscope            
  27        popscope            
  28        popscope            
  29        popscope            
  30        popscope            
  31        popscope            
  32        initproperty        Test
  34        returnvoid          
}

OPCODE  SIZE    % OF 51
getlex          14      27%
pushscope       9       17%
popscope        6       11%
getlocal0       4       7%
returnvoid      3       5%
callpropvoid    3       5%
pushstring      2       3%
constructsuper  2       3%
newclass        2       3%
findpropstrict  2       3%
getscopeobject  2       3%
initproperty    2       3%
||&lt;
それっぽいものが出てきたー！

abcdump.as のビルド方法は &lt;a href=&quot;http://www.5etdemi.com/blog/archives/2007/01/as3-decompiler/&quot;&gt;AS3 decompiler&lt;/a&gt; あたりを参照あれ。

SWF から ABC を切り出す AIR のソースコードは以下に。
====
Input.swf を読み出して、out*.abc としてファイル出力するだけの簡単なコードです。

Flex3 + AIR 1.0 で出来てるよ。
&gt;|javascript|
package{
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import org.libspark.swfassist.io.*;
    import org.libspark.swfassist.swf.io.*;
    import org.libspark.swfassist.swf.structures.SWF;

    public class Test extends Sprite{
        public function Test():void{
            loadSWF();
        }
    
        private function loadSWF():void{
            // Input.swf をロード
            var loader:URLLoader = new URLLoader();
            loader.dataFormat = URLLoaderDataFormat.BINARY;
            loader.addEventListener(Event.COMPLETE, completeHandler);
            loader.load(new URLRequest('Input.swf'));
        }

        private function completeHandler(e:Event):void{
            var loader:URLLoader = URLLoader(e.target);

            // swfassist でダンプ
            var input:DataInput = new ByteArrayInputStream(loader.data);
            var context:ReadingContext = new ReadingContext();
            context.needsABCData = true;
            var reader:SWFReader = new SWFReader();
            var swf:SWF = reader.readSWF(input, context);

            // AbcVisitor で visit
            var abcVisitor:AbcVisitor = new AbcVisitor();
            swf.visit(abcVisitor);

            // 情報を出力
            var t:TextField = new TextField();
            t.text = &quot;frame rate: &quot; + swf.header.frameRate + &quot;\nVersion: &quot; + swf.header.version
                + &quot;\nabc count: &quot; + abcVisitor.count;
            addChild(t);
        }
    }
}

import org.libspark.swfassist.swf.tags.AbstractTagVisitor;
import org.libspark.swfassist.swf.tags.DoABC;
import flash.filesystem.*;

class AbcVisitor extends AbstractTagVisitor{
    public var count:int = 0;
    
    // ABC に反応
    override public function visitDoABC(tag:DoABC):void{
        count++;

        if(!tag.abcData){
            return;
        }

        // フレーム名を取り除く
        // framename 0x00 ABC
        var pos:int = 0;
        while(tag.abcData.readByte() != 0){
        }

        // ファイルに出力
        // C:\Documents and Settings\username\Application Data\AppName\Local Store
        var fs:FileStream = new FileStream();
        var file:File = File.applicationStorageDirectory.resolvePath(&quot;out&quot; + count + &quot;.abc&quot;);
        trace(file.nativePath);
        fs.open(file, &quot;write&quot;);
        fs.writeBytes(tag.abcData, tag.abcData.position);
        fs.close();
    }
}
||&lt;
</body>
</day>
<day date="2008-04-03" title="">
<body>
*eventhandler_trace*[as]addEventListener のハンドラに trace
ちょっと便利だと思った Tips。

[twitter:777753272:detail]

確かにこれは楽だ。trace は引数をいくつでも取れるから、こういう技が使えるのか！

例えば、
&gt;|javascript|
stage.addEventListener(&quot;click&quot;, trace);
||&lt;
とすると
&gt;|
[MouseEvent type=&quot;click&quot; bubbles=true cancelable=false eventPhase=1 localX=74.4
localY=16.45 stageX=74.4 stageY=16.45 relatedObject=null ctrlKey=false altKey=fa
lse shiftKey=false delta=0]
|&lt;
となる。素敵。ちょっとしたデバッグに便利かもしれん。

別の便利関数。

[twitter:777755526:detail]

[twitter:777755915:detail]

[twitter:777756199:detail]

あったら便利かも。

以上、他人の発言を勝手にエントリにするメソッドでした。nium さん、beinteractive さん、ありがとう！

</body>
<comments>
<comment>
<username>taka:nium</username>
<body>てっく煮にもってかれたっ！</body>
<timestamp>1207200722</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>１週間、寝かしましたよ！</body>
<timestamp>1207239516</timestamp>
</comment>
</comments>
</day>
<day date="2008-04-04" title="">
<body>
*flex_builder_academic*[flex]Flex Builder3 のアカデミックライセンス無料放出中
学生の人は Flex Builder Pro（89,250円）が無料で手に入れられるらしいよ。

-[https://freeriatools.adobe.com/flex/:title=  Adobe〓 Flex〓 Builder 3 Pro for Education.] (※リンク先修正 2009/06/20)

英語ばっかりで躊躇しちゃうけど、申し込んだ人の説明が分かりやすい。
-&lt;a href=&quot;http://d.hatena.ne.jp/haru-komugi/20080403/1207216503&quot;&gt;Flexのアカデミック版 - PHP,MySQL,Flexな日々＋イラストとか&lt;/a&gt;
申請時には、学生証の画像ファイルにしてアップロードする。スキャナーない場合は、デジカメで撮ってもいいんじゃないかな。

英語のサイトだからてっきり海外の学生だけかと思ってたら、日本人でもいけるっぽい。私は学生じゃないから試せないけど、既に入手した人はいるみたい。

[twitter:776890872:detail]

&gt;http://shunirr.org/archives/108:title=shunirr.org - FlexBuilderのシリアルキーがたった4時間で届いた&gt;
Adobeの仕事早すぎるｗｗｗｗｗもう返信きたwwww
今日の12時頃に申し込んで、いま16時45分なんだけど、もう来た。

学生証をアップロードしたりするから、人力じゃないといけないし、結構時間かかるかなーとおもってたのに、もう来た。
&lt;&lt;

*gihyo4*gihyo.jp 連載４回目
今回はイベント周りです。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0004&quot;&gt;プログラマのためのFlash遊び方：第4回　Flashのイベント処理を理解する｜gihyo.jp … 技術評論社&lt;/a&gt;
addEventListener からイベントのバブリングまで、がっつり丁寧に解説してます。ぜひ読んでみて下さい。
</body>
</day>
<day date="2008-04-07" title="">
<body>
*bakumatsu_hack*幕末古写真ジェネレータをハックする
&lt;a href=&quot;http://labs.wanokoto.jp/olds&quot;&gt;幕末古写真ジェネレーター&lt;/a&gt; というウェブサービスがちょっと前に話題になりました。どんな写真も幕末の写真のように加工してくれる面白いサービスです。

この仕組みを &lt;a href=&quot;http://d.hatena.ne.jp/ryocotan/20080331/p2&quot;&gt;幕末古写真ジェネレーターの仕組み？ - 将来が不安&lt;/a&gt; で解析していたのが面白かったので、続きをやってみることにしました。

→成果を先に見たい人は、&lt;a href=&quot;http://tech.nitoyon.com/bakumatsu/&quot;&gt;こちら&lt;/a&gt; からご覧くださいませ。

**1. 真っ黒な画像を渡す
まずは、真っ黒な写真を幕末風にしてもらいます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080407/20080407013433.jpg&quot; width=&quot;360&quot; height=&quot;270&quot;&gt;&lt;/center&gt;&lt;

これが幕末風にするための型紙です。以降は&lt;strong&gt;テンプレート画像&lt;/strong&gt;と呼ぶことにします。

**2. RGB の階調を渡す
直感的に、ジェネレータの実装は
&gt;|
（元画像＋色補正）＋テンプレート画像
|&lt;
と考えられます。テンプレート画像は得られたので、あとは色補正のパラメータを探れればハック完了です。

そのために、RGB の階調をジェネレータに渡してみました。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080407/20080407013432.jpg&quot; width=&quot;360&quot; height=&quot;270&quot;&gt;&lt;/center&gt;&lt;

結果はこうなりました。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080407/20080407013431.jpg&quot; width=&quot;360&quot; height=&quot;270&quot;&gt;&lt;/center&gt;&lt;

おー。青色がほとんど消えてますね。グラデーションの方は、白飛び・黒飛びしていて、ダイナミックレンジが小さくなっているのも一目瞭然ですね。

**3. 差分をとる
さて、2. で得られた画像ですが、テンプレート画像が邪魔なので、差分をとってやります。

&gt;|
（元画像＋色補正）＋テンプレート画像
|&lt;
からテンプレート画像を引くことで、
&gt;|
（元画像＋色補正）
|&lt;
を手に入れる、という算段です。

プログラムで処理してもいいのですが、Photoshop が手元にある人は、レイヤースタイルの「&lt;strong&gt;差の絶対値&lt;/strong&gt;」が激しく便利でしょう。

２つの画像をレイヤーに配置するだけで、差分をとってくれます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080407/20080407013430.jpg&quot; width=&quot;360&quot; height=&quot;270&quot;&gt;&lt;/center&gt;&lt;

だいぶ雑念が消えましたね。

でも、まだノイズがあります。おそらく、ざらついた印象をつけるために、ランダムでノイズをのせているのでしょう。

**4. ぼかす
ノイズが邪魔なら、平均値を取ればいいですね。平均値を取るにはどうするか。&lt;strong&gt;ぼかしを入れます&lt;/strong&gt;。

Photoshop のフィルタから、「ぼかし」&gt;「ぼかし (ガウス)」を選択します。半径 6px ぐらいにしてやればこんな画像になります。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080407/20080407013429.jpg&quot; width=&quot;360&quot; height=&quot;270&quot;&gt;&lt;/center&gt;&lt;

ノイズがなくなって、のっぺりしました。

上側の４つの四角から、色をスポイトで抜き出します。
&gt;|
#ff0000 -&gt; #212121
#00ff00 -&gt; #414141
#0000ff -&gt; #0d0d0d

#ffffff -&gt; #6d6d6d
#000000 -&gt; #060606
|&lt;
RGB の各成分がどの程度の強さで変換されているかがわかります。

赤(#212121)と緑(#414141)と青(#0d0d0d)を足したら、だいたい白(#6d6d6d)の色になっています。RGB の色調補正を行っている、という推測が正しいことを裏付けていますね。

ここから、色調補正の手順が推測できますね。書き下してみるとこんな感じです。
+ダイナミックレンジをいじる&lt;br&gt;真ん中 1/3～2/3 のみを生かすぐらいに絞る。トーンカーブで表すとこんな具合。&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080407/20080407023941.jpg&quot; width=&quot;300&quot; height=&quot;264&quot;&gt;
+色あいを調整する&lt;br&gt;赤を 1/8、緑を 1/4、青を 1/16 ぐらいまで落とす。

**5. 実装する
アルゴリズムが分かれば、あとは ActionScript で実装するだけです。

&gt;|
（元画像＋色補正）＋テンプレート画像
|&lt;

を順番に実装していきます。サーバーレスで実装したかったので、BitmapData は使っていません。

色調補正は ColorMatrixFilter を２回適用することで実現しました。テンプレート画像との合成は、テンプレート画像を透明度50%で重ねることで実現しました。50% で重ねても薄くならないよう、２つの画像を２倍の明るさで作成しておきました。

出来上がったのが次の Flash です。URL を入力して、ボタンを押すと幕末写真化されますよ。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fbakumatsu%2FBakumatsu.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=Old+Photo&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9.0 以上がインストールされていると、ここに Flash が表示されます)&lt;/noscript&gt;&lt;

かなり本家に近くなった気のではないでしょうか。アルファチャンネルの扱いがオリジナルと違うけど、それは Flash の制限上、やむなし…。

本家に比べて何がすごいかというと、クライアント側だけで画像加工しているので高速です。即座に試せます。

大きな写真を表示させたい場合は、&lt;a href=&quot;http://tech.nitoyon.com/bakumatsu/&quot;&gt;特設ページ 最速幕末古写真ジェネレータ&lt;/a&gt; からどうぞ。

**ソースコード
ソースは以下に(120行)。
====
&gt;|javascript|
package{
    import flash.display.*;
    import flash.text.*;
    import flash.events.*;
    import flash.filters.*;
    import flash.net.*;
    import flash.filters.ColorMatrixFilter;
    
    [SWF(backgroundColor=&quot;#ffffff&quot;)]
    public class Bakumatsu extends Sprite{
        [Embed(source=&quot;BakumatsuTexture.jpg&quot;)]
        private var Texture:Class;

        private var canvas:Sprite;

        public function Bakumatsu(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            // 入力欄
            var tf:TextField = new TextField;
            tf.border = true;
            tf.text = &quot;http://tech.nitoyon.com/img/title-blog.jpg&quot;;
            tf.type = &quot;input&quot;;
            tf.width = 380;
            tf.height = 22;
            tf.x = tf.y = 5;
            addChild(tf);

            // ボタン
            var button:Sprite = new Sprite();
            button.graphics.beginFill(0xcccccc);
            button.graphics.drawRect(0, 0, 50, 22);
            button.graphics.endFill();
            button.filters = [new BevelFilter(2, 45, 0xffffff, 0.5, 0x000000, 0.5)];
            button.mouseChildren = false;
            var label:TextField = new TextField();
            label.width = 50;
            label.height = 22;
            label.htmlText = &quot;&lt;p align='center'&gt;幕末化&lt;/p&gt;&quot;;
            button.addChild(label);
            button.buttonMode = true;
            button.x = 395;
            button.y = 5;
            addChild(button);

            // キャンバス
            canvas = new Sprite();
            canvas.x = 5;
            canvas.y = 35;
            addChild(canvas);

            button.addEventListener(&quot;click&quot;, function(event:Event):void{
                var loader:Loader = new Loader();
                loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);
                loader.contentLoaderInfo.addEventListener(&quot;ioError&quot;, ioErrorHandler);
                var req:URLRequest = new URLRequest(tf.text);
                loader.load(req);

                showMsg(&quot;Loading...&quot;);
            });
            button.dispatchEvent(new Event(&quot;click&quot;));
        }

        private function completeHandler(event:Event):void{
            var li:LoaderInfo = event.currentTarget as LoaderInfo;
            var loader:Loader = li.loader;
            bakumatsuNize(loader);
        }

        private function ioErrorHandler(event:Event):void{
            showMsg(&quot;Not found!!&quot;);
        }

        private function showMsg(msg:String):void{
            var tf:TextField = new TextField();
            tf.htmlText = &quot;&lt;font size='40'&gt;&quot; + msg + &quot;&lt;/font&gt;&quot;;
            tf.autoSize = &quot;left&quot;;
            tf.selectable = false;
            bakumatsuNize(tf);
        }

        private function bakumatsuNize(img:DisplayObject):void{
            while(canvas.numChildren &gt; 0){
                canvas.removeChildAt(0);
            }
            canvas.graphics.clear();
            canvas.addChild(img);

            var f:ColorMatrixFilter = new ColorMatrixFilter([
                 3,  0,  0, 0, -200, 
                 0,  3,  0, 0, -200, 
                 0,  0,  3, 0, -200, 
                 0,  0,  0, 1, 0
            ]);

            var f2:ColorMatrixFilter = new ColorMatrixFilter([
                1 / 4, 1 / 2, 1 / 8, 0, 0, 
                1 / 4, 1 / 2, 1 / 8, 0, 0, 
                1 / 4, 1 / 2, 1 / 8, 0, 0, 
                    0,     0,     0, 1, 0
            ]);
            img.filters = [f, f2];

            var texture:Bitmap = new Texture();
            texture.width = img.width;
            texture.height = img.height;
            canvas.addChild(texture);
            texture.alpha = 0.5;

            // 枠
            img.x = img.y = texture.x = texture.y = 5;
            canvas.graphics.beginFill(0xf3f3f3);
            canvas.graphics.lineStyle(1, 0xcccccc);
            canvas.graphics.drawRect(0, 0, img.width + 10, img.height + 10);
            canvas.graphics.endFill();
            canvas.filters = [new DropShadowFilter(2, 45, 0, 0.4)];
        }
    }
}
||&lt;
</body>
<comments>
<comment>
<username>craran</username>
<body>おそれ入りました…。サーバに優しすぎます…。</body>
<timestamp>1207580290</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。ハックしてごめんなさいーーー。</body>
<timestamp>1207669837</timestamp>
</comment>
<comment>
<username>とうりすがり</username>
<body>えっちょっと&lt;br&gt;重くすごい・・・。</body>
<timestamp>1207962649</timestamp>
</comment>
<comment>
<username>浜村拓夫</username>
<body>これはスゴイ！&lt;br&gt;参考になります＾＾</body>
<timestamp>1226812530</timestamp>
</comment>
</comments>
</day>
<day date="2008-04-09" title="">
<body>
*kyoto_sakura*[photo]京都の桜はきれいですよ
&lt;a href=&quot;http://d.hatena.ne.jp/mereco/20080407/p1&quot;&gt;京都の桜プラス（ちょっといやな）アルファ - メレンゲが腐るほど恋したい&lt;/a&gt; の写真がきれいで感動したので、影響されて、自分も写真を公開してみる。

元の写真がよくないので、トリミングとか色調補正でごまかしまくり。
[f:id:nitoyon:20080409011326j:image]
桜が散ったと思ったら、鴨川沿いには床ができはじめて、梅雨だー梅雨だーと思ってるうちに祇園祭がやってきます。
[f:id:nitoyon:20080409003429j:image:w450]
祇園祭が終わるころには夏になっている。そんな京都が大好きです。
</body>
</day>
<day date="2008-04-10" title="">
<body>
*gihyo5*gihyo.jp 連載第５回
Flash でアニメーションっぽいものを作っていく方法を説明しています。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0005&quot;&gt;プログラマのためのFlash遊び方：第5回　動きのある Flash を作る（前編）｜gihyo.jp … 技術評論社&lt;/a&gt;
まずは自力で実装するところから。次週は tweener です。

*security_kyoto*[event]まっちゃ139勉強会に参加します
まっちゃ139勉強会というセキュリティ勉強会に参加してみます。懇親会も参加するよー。

-&lt;a href=&quot;http://d.hatena.ne.jp/ripjyr/20080419/1203745616&quot;&gt;第14回まっちゃ１３９勉強会 - まっちゃだいふくの日記★とれんどふりーく★&lt;/a&gt;
19日＠京都女子大。メインセッションは、サイボウズラボの&lt;a href=&quot;http://labs.cybozu.co.jp/blog/takesako/&quot;&gt;竹迫さん&lt;/a&gt;！


京都の人、セキュリティに興味のある人、竹迫さんに会いたい人、女子大に入りたい人など、なんでもいいので皆さん参加したらいいと思う。

</body>
</day>
<day date="2008-04-11" title="">
<body>
*swf100_crash*Flash を１ページに100個ぐらい埋め込むとブラウザごと落ちる話
素材的に Flash を使おうと思っていくつも埋め込んでたらブラウザごと落ちた。
-テストページ(&lt;strong&gt;※扱い注意&lt;/strong&gt;)：http://tech.nitoyon.com/misc/swf/crashtest1.html 

9.0.115r debug 版で試してる。IE も Firefox も Opera も落ちた。たぶん Player の問題。通常版とか最新版だと大丈夫なのかも。情報求む。

（追記）コメント欄で色々情報いただいたところによると、環境によって差はあるものの、落ちる人が多いようですね。Mac の人の情報がないけど、Mac だと大丈夫なんだろうか。

（さらに追記）Macでも落ちるようですね。情報ありがとうございました。
</body>
<comments>
<comment>
<username>rarul</username>
<body>IE7(7.0.5730.13)+Flash(WIN 9.0.124.0)で、開くとめちゃくちゃ重くて、5分後くらいに落ちた。&lt;br&gt;0xc0000005とかいってたんで、単純にバッファオーバフローじゃないかな。</body>
<timestamp>1207850052</timestamp>
</comment>
<comment>
<username>M</username>
<body>firefox3b5では正常に表示されますよー。</body>
<timestamp>1207873272</timestamp>
</comment>
<comment>
<username>kinkuma3_gogo</username>
<body>こんにちは。&lt;br&gt;Win+IE7+Fla(9,0,115,)だと落ちなかったですが、&lt;br&gt;Firefoxだと落ちました。なんでしょう。&lt;br&gt;それより、ページを開くと錯覚が見えます。黒べた四角ではさまれる、白地背景の十字の部分がグレーに見えます。これは確か有名な錯覚です。それだけです。</body>
<timestamp>1207873296</timestamp>
</comment>
<comment>
<username>nn</username>
<body>Win+Frefox+Flash(9,0,115,0)で初回落ちず、124アップデート後すぐ落ちる様になり、もしやと思いキャッシュクリアすると、落ちないもののブラウザが固まり、115へダウングレードするも、結局ブラウザが固まる様になりました。キャッシュをクリアしないで2回目に開くとすぐ落ちます。&lt;br&gt;何故初回落ちなかったのか謎です。</body>
<timestamp>1207877525</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>みなさん、いろいろありがとうございます。&lt;br&gt;落ちるのが自分の環境だけじゃなかったようで、安心(?)しました。</body>
<timestamp>1208104447</timestamp>
</comment>
<comment>
<username>kozo-ni</username>
<body>MacOSX Server10.5.2 + Firefox2.0.0.13 + Flash9,0,115,0で落ちませんでしたがブラウザが固まりました。</body>
<timestamp>1208176226</timestamp>
</comment>
<comment>
<username>kozo-ni</username>
<body>Safari3.1でも同様です</body>
<timestamp>1208176493</timestamp>
</comment>
</comments>
</day>
<day date="2008-04-14" title="">
<body>
*getlasterror_reference*getlasterror.so-name.info をリリースしました
getlasterror.so-name.info というサイトを作りました。
-&lt;a href=&quot;http://getlasterror.so-name.info/&quot;&gt;getlasterror.so-name.info&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080414/20080414020945.jpg&quot; width=&quot;450&quot; height=&quot;260&quot;&gt;&lt;/a&gt;

GetLastError() を知らない人には何が嬉しいのかさっぱり分からないサイトです。

完成度は30%ぐらい。500KBのデータをキー入力があるたびに JavaScript で舐め回すという富豪的な動作となっています。ゆえに激重ですが、実用に耐えないほどではないと判断して公開しました。

ちなみに、so-name はローマ字読みで「総なめ」と読んでください。
</body>
</day>
<day date="2008-04-15" title="">
<body>
*bakumatsu_bookmarklet*幕末古写真化ブックマークレットを公開しました
ページの画像を全て幕末古写真化できるようにしました。

以下の JavaScript をコピーしてアドレスバーに入力して実行してください。
&gt;&lt;center&gt;&lt;textarea style=&quot;width:450px&quot; rows=&quot;5&quot;&gt;
javascript:(function(d){if(typeof Bakumatsu != &quot;undefined&quot;){Bakumatsu.convert(d.getElementsByTagName('img'));}else{s=d.createElement('script');s.type='text/javascript';s.src='http://tech.nitoyon.com/bakumatsu/allbakumatsu.js';d.body.appendChild(s);}})(document);
&lt;/textarea&gt;&lt;/center&gt;&lt;

（例）このブログ&lt;br&gt;
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080415/20080415093620.jpg&quot; width=&quot;400&quot; height=&quot;297&quot;&gt;

（例）twitter&lt;br&gt;
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080415/20080415093619.jpg&quot; width=&quot;400&quot; height=&quot;300&quot;&gt;

ニュースサイトの写真を幕末古写真化しても面白いかもしれませんね。どうぞご利用ください。

**ソースコード
-&lt;a href=&quot;http://tech.nitoyon.com/bakumatsu/allbakumatsu.js&quot;&gt;allbakumatsu.js&lt;/a&gt;
-&lt;a href=&quot;http://tech.nitoyon.com/bakumatsu/BakumatsuLayer.as&quot;&gt;BakumatsuLayer.as&lt;/a&gt;
</body>
</day>
<day date="2008-04-16" title="">
<body>
*gzip_compress*JS を gzip 化してファイルサイズ削減してみた
勢いよく公開したものの、全く話題になってない &lt;a href=&quot;http://getlasterror.so-name.info/&quot;&gt;getlasterror.so-name.info&lt;/a&gt; ですが、ちょこちょこいじっていきますよ。

errors.js が500KB弱あるのを何とかしたかったが、errors.js は巨大データを JSON 形式で保存してるものなので、minified は意味なし。そこで、gzip 圧縮してみた。errors.js.gz は gzip --best errors.js で事前に作成しておく。470KB が 120KB になった。

.htaccess で mod_rewrite。データがスタティックだからなせる技。
&gt;|
RewriteEngine on

RewriteBase /

RewriteCond %{HTTP:Accept-Encoding} (x\-)?gzip,?
RewriteRule ^errors\.js$ errors.js.gz
|&lt;
RewriteBase はさくらのレンタルサーバーの安いプランだから必要だったけど、他の環境ではたぶん不要。

参考にしたのはこのへん。
-&lt;a href=&quot;http://sonic64.com/2005-09-15.html&quot;&gt;mod_rewrite でリクエストに応じて gzip 圧縮ファイルを返す&lt;/a&gt;

**AS3 だと
いまんとこ、全部 JS でやってるんだけど、AS3 でやるならどうするのがよいかも調査しておいた。

ByteArray で writeObject したやつを compress しておくとよさげ。ファイルに書き出すために AIR を使った。
&gt;|javascript|
var bytes:ByteArray = new ByteArray();
bytes.writeObject(errors);
bytes.compress();

// ファイルに出力
// C:\Documents and Settings\username\Application Data\AppName\Local Store
var fs:FileStream = new FileStream();
var file:File = File.applicationStorageDirectory.resolvePath(&quot;out.bin&quot;);
trace(file.nativePath);
fs.open(file, &quot;write&quot;);
fs.writeBytes(bytes);
fs.close();
||&lt;
読み出すときは、URLLoader 使って、ByteArray 化したあと、uncompress して readObject すれば復元できる。

こちらは zlib 使ってるらしく、ファイルサイズは同じぐらいの130KBまで小さくなった。

動的なデータで同じことやるなら、 AMF 使うのが素直だと思う。

(追記) 実験してみた：&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080430/rubyamf_serialize&quot;&gt;RubyAmf のシリアライザだけを使う&lt;/a&gt;

</body>
</day>
<day date="2008-04-17" title="">
<body>
*gihyo6*gihyo.jp 連載６回目：tweener
第６回は tweener の使い方です。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0006&quot;&gt;プログラマのためのFlash遊び方：第6回　動きのある Flash を作る（後編）｜gihyo.jp … 技術評論社&lt;/a&gt;
すごく丁寧に解説したつもりなので、ご覧くださいませ。

&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0006?page=3&quot;&gt;３ページ目&lt;/a&gt;の応用例もきれいなので見てくれるとうれしいな、っと。

*coderepos_getlasterror*[getlasterror]getlasterror.so-name.info を CodeRepos にコミットした
アカウント申請してしばらく放置していたけど、&lt;a href=&quot;http://getlasterror.so-name.info/&quot;&gt;getlasterror.so-name.info&lt;/a&gt; のソースを CodeRepos にコミットしてみた。
-http://coderepos.org/share/browser/websites/getlasterror.so-name.info
よろしくお願いします！

*vs2008_one_point*Visual Studio 2008 ワンポイントがいい感じ
Microsoft 運営のブログ、&lt;a href=&quot;http://blogs.msdn.com/vstipsjpn/default.aspx&quot;&gt;Visual Studio 2008 ワンポイント (Sara Ford's Weblog)&lt;/a&gt; がとてもよい感じ。毎日、キャプチャつきで、ちょっとした Tips を公開してくれています。

Visual Studio 2005 以降を使ってる人は RSS 購読をお薦めします。今日は、&lt;a href=&quot;http://blogs.msdn.com/vstipsjpn/archive/2008/04/16/visual-studio-009.aspx&quot;&gt;タブ付きドキュメントを使用して Visual Studio 内でツール ウィンドウを最大化する方法 - #009&lt;/a&gt;。ツールウインドウをメインのタブに移動する方法。そんなことできたのか！

オリジナルの &lt;a href=&quot;http://blogs.msdn.com/saraford/default.aspx&quot;&gt;Sara Ford's WebLog&lt;/a&gt; も購読すれば、１日に２つの Tips が降ってくるようになります。素敵。
</body>
<comments>
<comment>
<username>仕様書作成係</username>
<body>読ませていただきました。&lt;br&gt;大変参考になりました。&lt;br&gt;これからも、良い情報の発信をしていだければと思います。&lt;br&gt;ありがとうございました。</body>
<timestamp>1230012036</timestamp>
</comment>
</comments>
</day>
<day date="2008-04-21" title="">
<body>
*getlasterror_speed_up*[getlasterror][JavaScript]getlasterror.so-name.info を高速化
もっさりしていた &lt;a href=&quot;http://getlasterror.so-name.info/&quot;&gt;getlasterror.so-name.info&lt;/a&gt; の速度を&lt;a href=&quot;http://coderepos.org/share/browser/websites/getlasterror.so-name.info/getlasterror.js?rev=10035&quot;&gt;改善した&lt;/a&gt;。

遅かった原因は jQuery を使っての DOM 操作。生で叩いたら、300ms→30ms ぐらいに改善した。なかなかサクサク動く。

検索は相変わらず合計 500KB 近くある文字列を indexOf している。それでも所要時間 30ms ぐらい。bigram 使うようにしたら大幅に改善したんだけど、bigram をクライアント側で作ったら1秒以上かかるし、サーバー側に置くとデータ量が増える。もうちょっと研究が必要そうだ。

それはそうと、Google に引っかからない。次の課題は SEO 対策か。
</body>
</day>
<day date="2008-04-23" title="">
<body>
*silverlight_study_meeting2*[event][silverlight]Silverlightを囲む会 in大阪#2
大阪で2008/5/16(金)に Silverlight の勉強会があるらしい。
-&lt;a href=&quot;http://www.silverlightsquare.com/page_1208178913506.html&quot;&gt;Silverlight Square - 第2回★募集中&lt;/a&gt;

そろそろ Silverlight も手を出さなきゃな、ということで参加してみます。参加LT の枠が１個余ってるらしいので、何か発表してみようと思う。５分なので自己紹介ぐらいだろうけど。

Silverlight な皆様、よろしくお願いします。
</body>
</day>
<day date="2008-04-24" title="">
<body>
*gihyo_7*gihyo.jp 連載７回目: ジェネレータ作成
第７回は本格的な例ということで、Web2.0 風ロゴジェネレータを ActionScript だけで作成してみました。

こんなの。
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080424/20080424203800.jpg&quot; width=&quot;312&quot; height=&quot;112&quot;&gt;
文字を入力するとリアルタイムに更新されます。

くわしくはこちらから！
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0007&quot;&gt;プログラマのためのFlash遊び方：第7回　Flashでジェネレータを作ってみよう｜gihyo.jp … 技術評論社&lt;/a&gt;
よかったら見てやってください。

*delegate_dispatch*[as]dispatchEvent をイベントハンドラに
イベントハンドラに dispatchEvent を使う発想。これはおもしろい。
-&lt;a href=&quot;http://d.hatena.ne.jp/yasu-log/20080423/1208968384&quot;&gt;addEventListener のハンドラに dispatchEvent - Yasu Log&lt;/a&gt;
イベントがバブリングしないとき、DisplayObject とは独立したバブリング階層を作りたいときに便利そうだ。

EventDispatcher を継承しただけでは個別のバブリングする階層を作れないんだけど、いい方法あるんだろうか。EventDispatcher の独自実装しか手はないのかなぁ。Sprite を使って表示と関係のない階層を作ればいけそうな気はする。
</body>
</day>
<day date="2008-04-25" title="">
<body>
*air_1_1_beta*[air]AIR 1.1 のベータプログラムが開始
日本語版 Adobe AIR 1.1 をいち早くテストできるようになっています。
-&lt;a href=&quot;http://www.adobe.com/jp/products/air/publicbeta/&quot;&gt;Adobe - Adobe AIR： Adobe AIR 1.1ベータプログラム実施中&lt;/a&gt;
AIR 1.1 は日本語に正式に対応する最初の AIR です。

仕事で使う人などは、早めに 1.1 を手に入れて実験してみるとよいのではないでしょうか。バグを見つけて報告したら、今のうちなら正式リリースには間に合うかもしれません。

上記リンクから、ベータプログラムに申し込むと、AIR 1.1 のプレリリース版を利用できるようになります。他にも AIR 1.1 に関するいろいろな情報を参照できます。ただ、これらの情報を公開してしまうと、申し込み時に同意する&lt;strong&gt;プレリリース契約&lt;/strong&gt;（個人受取人向け未公開ソフトに関する契約）という物々しい契約に違反してしまいます。気になる人は、各自、契約を結んで参照してみてください。

*flex3_htmlhelp*[as]flex3_htmlhelp.rb の目次を充実させた
Flex3 リファレンスガイドを HTML ヘルプ化する Ruby スクリプトがちょっと前に公開された。
-&lt;a href=&quot;http://ogijun.g.hatena.ne.jp/secondlife/20080415/1208252029&quot;&gt;flex3.chm - × - ogijunグループ&lt;/a&gt;
けど、完成した CHM を見たら目次が手抜き風…。

ソースを見たら
&gt;|ruby|
# FIXME:unko
||&lt;
と書いてあったので、&lt;a href=&quot;http://coderepos.org/share/changeset/10398/lang/actionscript/htmlhelp/flex3/flex3_htmlhelp.rb&quot;&gt;FIX しておいた&lt;/a&gt;。Ruby は慣れてないので手探り。誰かがさらに Fix してくれたら嬉しいな。

修正後はこんな感じ。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080425/20080425121009.jpg&quot; width=&quot;441&quot; height=&quot;304&quot;&gt;&lt;/center&gt;&lt;
パッケージからクラス一覧にアクセスしやすくなるので、知らないクラスを探しやすくなったよ。

Coderepos にうｐしておいたので、入手はそちらから。
-&lt;a href=&quot;http://svn.coderepos.org/share/lang/actionscript/htmlhelp/flex3/&quot;&gt;/lang/actionscript/htmlhelp/flex3&lt;/a&gt;
-&lt;a href=&quot;http://coderepos.org/share/browser/lang/actionscript/htmlhelp/flex3&quot;&gt;/lang/actionscript/htmlhelp/flex3 - CodeRepos::Share - Trac&lt;/a&gt;

CHMを公開したらすごく便利なんだろうけど、権利的にびみょーなので悲しいところ。Adobe の人に確認したら「グレーです」みたいなことを言われた。グレーって、大人語で黙認という意味なんでしょうか…。よく分かりません＞＜

よく分からないので、CHM は公開してません。ほしい人は環境を用意して自分で作ってください。wget とか Ruby とか scrAPI とか HTML Help Workshop とかを用意するだけ。wget を１時間ぐらい走らせて、ruby を走らせて、HTML Help Workshop で何度か落ちるのに耐えながらコンパイルするだけ。ね、簡単でしょ？

-追記： &lt;a href=&quot;http://code.google.com/p/flashhelp2chm-ja/&quot;&gt;flashhelp2chm-ja - Google Code&lt;/a&gt; というのもあるようだ。&lt;a href=&quot;http://os0x.g.hatena.ne.jp/os0x/20080417/1208402740&quot;&gt;Flex3のヘルプ続き - 0x廃棄階層 - 統治局&lt;/a&gt; が詳しい。
-追記 2009/01/17： http://livedocs.adobe.com/flex/3_jp/flex3jp_documentation.zip からリファレンスを一括で落とせるようになったようです。

</body>
</day>
<day date="2008-04-28" title="">
<body>
*kanmenkan_party*百万ベンチャー(?)交流会に行ってきた
京都の「韓麺館38五条店」で開催された異業種交流会に参加しました。事前申し込みでは90人ぐらいと聞いていたけど、最終的には120人になったらしい。誰も全容を把握していない会になりました。すごい！

最初の席で前の人がはてなの id:stanaka さんだったり、横の人が年商○○億の某社社長だったりして、いきなりすごい話が聞けたりしてびっくり。

その後は席を点々と移りながら、とりあえず色んな人と話してみた。けど、どうしても同年代の技術者っぽい人と話してまう。本当はブログもやってないような１世代上の人のスーツの人とお話するいい機会なはずなんだけど…。

Google の及川さんとお会いするのは&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070427/p1&quot;&gt;ちょうど１年ぶり&lt;/a&gt;。twitter やブログを拝見するに、世界各国に出張されている印象があったので質問してみたところ、別拠点で仕事をしていても距離の壁はほとんど感じないけど、時差の壁だけは越えがたい、時間のずれでイライラするぐらいなら現地に１週間行って一気にやったほうが効率いい、とのことだった。さすがの Google でも時間を飛び超えることはできないのか。それと、一度顔を合わせて握手したあとだと、その後の仕事もスムーズに行く、ともおっしゃっていた。及川さんとお話していると、何かに気づくきっかけになりそうな話が次から次にでてきて本当に面白い。また１年以内にお会いする機会があれば嬉しいな。

その後も席を移りつつ、はてなの近藤さんと Google の及川さんがお話されているのを発見したら横に移動、ニヤニヤしながらお話を聞いていた。ミーハーですいません。

**以下、見つけてきたブログとか。
はてな近藤さんのエントリ。
-&lt;a href=&quot;http://d.hatena.ne.jp/jkondo/20080427/1209251526&quot;&gt;百万ベンチャーの夜 - jkondoの日記&lt;/a&gt; (&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/jkondo/20080427/1209251526&quot;&gt;とそのブックマーク&lt;/a&gt;)
Google 及川さんとはてな近藤さんは恐ろしい勢いで名刺がなくなっていったようです。
-&lt;a href=&quot;http://twitter.com/takoratta/statuses/797472122&quot;&gt;Twitter / Takuya Oikawa: それにしても、名刺がすごい勢いで無くなった。。。びっくり。&lt;/a&gt;
-&lt;a href=&quot;http://h.hatena.ne.jp/jkondo/9245601468572258831&quot;&gt;昨日はよくしゃべった。名刺が全部無くなった。今日は静かにしていよう  - jkondo - はてなハイク&lt;/a&gt;
特に、近藤さんの前には最初から最後まで名刺交換の行列ができていたのが印象的でした。はてなに対する期待度の高さを感じます。

***参加者のエントリ
発見順、随時追加中。
-&lt;a href=&quot;http://ujihisa.nowa.jp/entry/506391029e&quot;&gt;rubyneko - 京都の異業種交流会に行ってきた&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/guccyon/20080427/p1&quot;&gt;異業種交流会 in Kyoto - guccyonikki&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/fujioka0729/20080427/1209297267&quot;&gt;異業種交流会 いん　きょーと - かけだしプログラマの奮闘記&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/satzz/20080427/1209316632&quot;&gt;週末 - satzz online 2.0&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/yaotti/20080426/1209231394&quot;&gt;SICP読書会&amp;異業種交流会 - business*program&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/kozo-ni/20080428/1209362510&quot;&gt;異業種交流会 in 京都,韓麺館 - kozo-niの「何が正しいのかわからん」&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/hakobe932/20080428/1209387450&quot;&gt;最近参加した勉強会 - はこべにっき#&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/yuyarin/20080428/1209363142&quot;&gt;異業種交流会に参加して - yuyarinの日記&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/hanazukin/20080426/1209229274&quot;&gt;異業種交流会なるものに参加してきた - インフラ管理者の独り言（はなずきん＠酒好テム管理者）&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/snow-bell/20080429/1209400770&quot;&gt;SICP勉強会のまとめと異業種交流会 - snow-bellの日記&lt;/a&gt;
-&lt;a href=&quot;http://blog.netswitch.jp/articles/2008/04/28/uuuu-gauche-sicp-interindustrial-party&quot;&gt;netswitch! | uuuu &amp; Gauche本読書会 &amp; SICP読書会 &amp; 異業種交流会&lt;/a&gt;
-&lt;a href=&quot;http://tokuhiro.blog25.fc2.com/blog-entry-12.html&quot;&gt;とにのしたこと　ToNi's Empirical Sequence 異業種交流会に行ってきました&lt;/a&gt;
-&lt;a href=&quot;http://ameblo.jp/saikyo0/entry-10091679268.html&quot;&gt;異業種交流会に参加してきました～｜Fランク大学生の生き様blog&lt;/a&gt;
-&lt;a href=&quot;http://tv-champion2.jugem.jp/?eid=2376&quot;&gt;TVチャンピオン２・なでしこ礼儀作法王選手権チャンピオン日記 | 夜は、大異業種交流会！はてなの近藤さん、NHKの取材中♪&lt;/a&gt;
※漏れがあったら教えてください

***主催者のエントリ
次回は秋ごろに何かできたら、という話になっているようですね。「&lt;a href=&quot;http://d.hatena.ne.jp/heilig_zwei/20080427/1209272489&quot;&gt;知ってたら潜り込んだのに&lt;/a&gt;」という人も今度は参加できるように告知できたらいいなぁ。
-&lt;a href=&quot;http://blogs.yahoo.co.jp/masataka_hashimoto/52977134.html&quot;&gt;異業種交流会　ハイパー - 橋本昌隆 株式会社フューチャーラボラトリ - Yahoo!ブログ&lt;/a&gt;
-&lt;a href=&quot;http://blog.goo.ne.jp/kimuchi_nishinippori/e/88b0fa7355283f0f187bdc339ff471a1&quot;&gt;百万ベンチャー異業種交流会 - 北海亭の上で働く社長ブログダイエット&lt;/a&gt;

***おまけ
ドワンゴ溝口さんの twitter での発言。
-&lt;a href=&quot;http://twitter.com/coji/statuses/797790649&quot;&gt;Twitter / Mizoguchi Coji: ここ1年、twitter が日本人プログラマーに普及して、勉強会も増えて、いわゆるシリコンバレー的なつながりが加速度的に増えてる感じがする。これでなにか一発花火が上がったらと期待せざるを得ない &lt;/a&gt;
確かにそうですね。盛り上がってきてる何かを感じる。

花火の火種は各所で生まれているはず！
</body>
<comments>
<comment>
<username>takoratta</username>
<body>及川です。&lt;br&gt;&lt;br&gt;1年ぶりの再会、大変楽しかったです。Twitter仲間だといつも身近にいるような錯覚がありますね。人の多さにびっくりしましたが、同時に皆さんの熱い思いに大いに刺激されました。&lt;br&gt;&lt;br&gt;今度は秋ですか？ できるだけ参加したいと思います。&lt;br&gt;及川</body>
<timestamp>1209456768</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>わぁ、ご丁寧にありがとうございます。&lt;br&gt;またお会いできる日を楽しみにしています。</body>
<timestamp>1209490192</timestamp>
</comment>
<comment>
<username>ToNi</username>
<body>nitoyonさんこんにちは。&lt;br&gt;&lt;br&gt;京大情報学研究科の西川です。&lt;br&gt;異業種交流会でお話させていただきありがとうございます。&lt;br&gt;とても楽しい時間でした。&lt;br&gt;近いうちに百万遍チャーにお邪魔させていただけたら良いなと思っています。</body>
<timestamp>1210246132</timestamp>
</comment>
</comments>
</day>
<day date="2008-04-30" title="">
<body>
*rubyamf_serialize*[ruby][as]RubyAmf のシリアライザだけを使う
RubyAmf は元々は Flash Remoting のためのライブラリなんだけど、シリアライザだけを使うのも面白いかもしれない。

例えば、これを実行すると、[3, 4] という配列をシリアライズした test というファイルができる。
&gt;|ruby|
require 'app/amf'
require 'io/amf_serializer'

amfobj = RubyAMF::AMF::AMFObject.new()
serializer = RubyAMF::IO::AMFSerializer.new(amfobj)

serializer.reset_referencables
serializer.write([3, 4])

open(&quot;test&quot;, &quot;w&quot;) do |f|
    f.binmode
    f.write serializer.stream
end
||&lt;
Flash 側で開くには、次のようにする。
&gt;|javascript|
package{
    import flash.display.*;
    import flash.net.*;
    import flash.events.*;
    import flash.utils.*;

    public class Client extends Sprite{
        public function Client(){
            var loader:URLLoader = new URLLoader();
            loader.dataFormat = &quot;binary&quot;;
            loader.load(new URLRequest('test'));
            loader.addEventListener(&quot;complete&quot;, function(event:Event):void{
                var bytes:ByteArray = loader.data as ByteArray;
                bytes.objectEncoding = 0; // AMFのバージョン

                // AS3 でデシリアライズ
                var obj:Object = bytes.readObject();
                trace(obj); // [3, 4]
            });
        }
    }
}
||&lt;
trace の結果、[3, 4] と表示される。Ruby でシリアライズした配列を、ActionScript で復元できたことになる。

今回は静的なファイルに書き込んだけど、Ruby を CGI として使って動的にシリアライズした結果を返してもよいだろう。Flash Remoting を SOAP 的だと解釈するなら、こちらの方法は REST 的。リクエストがバイナリじゃない分、デバッグはしやすいと思う。

以下、細かい補足。
-AMFSerializer クラスには write_amf3 というメソッドもあって、こちらは AMF3 対応の模様。その場合は、ActionScript 側では objectEncoding = 3 としてやる。でも、今のところ、AMF0 で困ってない。
-AMFSerializer を単独で利用するために、include RubyAMF::Configuration や include RubyAMF::VoHelper を適宜コメントアウトして使った。elsif(value.is_a?(VoHash)) とかも適宜コメントアウトした。
-サーバ側でファイルに出力する前に Zlib::Deflate.deflate() してやるとデータサイズを削減できる。その場合、SWF 側では ByteArray::uncompress() を呼んでから readObject() してあげる。
だいぶ Ruby に慣れてきた。簡単なソースコードなら読めるようになってきた！

(追記) &lt;a href=&quot;http://yoshimoto.blog.so-net.ne.jp/&quot;&gt;Flex＆Java Blog&lt;/a&gt; さんにて、Java で S2Flex を使って似たようなことをやる方法が紹介されているのを発見しました。&lt;a href=&quot;http://yoshimoto.blog.so-net.ne.jp/2007-12-16&quot;&gt;S2Flex2　Javaで圧縮しFlex2で展開する：Flex＆Java Blog：So-net blog&lt;/a&gt;
</body>
</day>
<day date="2008-05-01" title="">
<body>
*gihyo_8*gihyo.jp 連載８回目: Flex概要
第８回では Flex をざっくりと語っています。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0008&quot;&gt;プログラマのためのFlash遊び方：第8回　Flexで本格Webアプリケーションを作ってみよう｜gihyo.jp … 技術評論社&lt;/a&gt;
まじめに解説しだしたら、それだけで Flex の連載になりそうなので、Flex の面白いところに絞って例を交えながら解説しています。

よろしくお願いします。
</body>
</day>
<day date="2008-05-06" title="">
<body>
*p1*写真ブログ始めた
はてなフォトライフがリニューアルして容量制限が緩和されたらしいので、思い立って写真メインのブログを開始してみた。
-http://kyotolife.g.hatena.ne.jp/nitoyon/
これからは精力的にカメラを持ち歩こう。
</body>
</day>
<day date="2008-05-07" title="">
<body>
*p1*アートと技術
写真ブログを始めたのがきっかけで、久々に写真のレタッチに凝り始めた。頭がちょっとアート方向に寄り始めてきたので、一乗寺にラーメン食べて運動しに行ったついでに &lt;a href=&quot;http://www.keibunsha-books.com/&quot;&gt;恵文社一乗寺店&lt;/a&gt; に寄ってそれ系の本を立ち読みしてみた。そんな中、偶然手にしたこの本に魅了された。
isbn:4120036855:detail
原さんは isbn:4000240056:title の著者としても有名。その原さんのゼミに集まった学生が中心となってまとめたのがこの本だ。

四万十川を分析するだけの本なんだけど、予想外の角度から情報提示がされているのが。見せ方を変えるだけで、なんとなく知っていたものを再認識するきっかけになる。

本の中ではいくつかの「Ex-formation」が紹介されている。その中でも面白かったのが、&lt;strong&gt;川が道路だったと仮定してみる&lt;/strong&gt; だ。

試しに鴨川でやってみた。元画像がこれ。
[f:id:nitoyon:20080507043716j:image]
道路で表現したらこうなった。
[f:id:nitoyon:20080507043715j:image]
川が道路になるなんてことはありえないんだけど、道路というメタファを使って川の広さを体感できるようになった。

道路の広さは感覚的に知っているので、その経験を通じて、川の大きさを再認識できる。

画像加工のクオリティが低くて申し訳ないんだけど、ぜひ、実際に本を手にとって楽しんでみてほしいところ。

で、こういう発想って、気づいたら当たり前なんだけど、なかなか思いつけない。だって、普通考えないでしょ、川を道路で例えようなんて。デザイナというか、クリエイターならではの発想だ。感覚としてはアートに近い。

Web だけを見てると、こういう情報はなかなかありつけない。たまには本屋で立ち読みしてみるのも新鮮でいいな、と思った。

相変わらずまとまりがなくて申し訳ないんだけど、今日、面白いと思った言葉を引用して無理やり締める。
&gt;http://d.hatena.ne.jp/nagaimichiko/20080506/1210063169:title&gt;
「技術は、本当に魅力的なものにはならない。アーティストが、そこに魅力を吹き込まない限り」
&lt;&lt;
</body>
</day>
<day date="2008-05-09" title="">
<body>
*gihyo_9*gihyo.jp 連載９回目: AIR概要
いよいよ最終回です。AIR の紹介してます。
-&lt;a href=&quot;http://gihyo.jp/dev/feature/01/flash-sdk/0009&quot;&gt;プログラマのためのFlash遊び方：第9回　AIRに挑戦｜gihyo.jp … 技術評論社&lt;/a&gt;
当初、５回ぐらいの予定だったのですが、納得いくまで説明しようとしたら倍近い分量になってしまいました。週一のペースでの連載は正直大変でしたが、なんとか形になってよかったと思っています。
</body>
</day>
<day date="2008-05-11" title="">
<body>
*tensai2hentai*[JavaScript]天才を変態に置き換えるブックマークレット
***ソースコード
&gt;&gt;
javascript:void(document.body.innerHTML = document.body.innerHTML.replace(/天才/gi,'変態'));
&lt;&lt;
***利用方法
&lt;a href=&quot;http://b.hatena.ne.jp/t/%E5%A4%A9%E6%89%8D&quot;&gt;はてなブックマーク - タグ 天才&lt;/a&gt;あたりからそれっぽい記事を拾ってきて、ブックマークレットを実行します。

例：&lt;a href=&quot;http://d.hatena.ne.jp/shi3z/20080510/1210433002&quot;&gt;天才よばわり - shi3zの日記&lt;/a&gt; → 変態よばわり
&gt;&lt;center&gt;[f:id:nitoyon:20080511133117g:image]&lt;/center&gt;&lt;
***ライセンス
Public Domain
***ネタ元
[twitter:808032948:detail]

***謝辞
不謹慎とは思いつつ面白すぎるので公開してしまいました。反省はしていません。
</body>
</day>
<day date="2008-05-12" title="">
<body>
*as3_ref*[as][書籍]ActionScript 3.0 逆引きクイックリファレンス
AS3 の逆引きリファレンス本が発売されたようです。
isbn:4839927243:detail
目的別に調べられるようなので、これから AS3 を始める人や API なんて覚えてられないよーという人にはよさそう。

via &lt;a href=&quot;http://labs.anthill.jp/2008/05/actionscript_30.html&quot;&gt;ants Lab. | Flash | お知らせ | ActionScript 3.0 逆引きクイックリファレンス&lt;/a&gt;
</body>
</day>
<day date="2008-05-13" title="">
<body>
*p1*FIVe3D で Keynote 風 Cube トランジッション
最近、いくつかの Flash ブログで &lt;a href=&quot;http://five3d.mathieu-badimon.com/&quot;&gt;FIVe3D&lt;/a&gt; が取り上げられていたので、自分も触ってみた。バージョンは v2.1。

確かにこれは簡単だ。クラス数も少ないし、クラス名が ActionScript のものと似てるので直感的。Sprite3D クラスの graphics プロパティで Graphics3D オブジェクトが取得できて、 beginFill() とか drawCircle() で図が描ける。座標空間は 3D。（参考：&lt;a href=&quot;http://moringo.moo.jp/wordpress/?p=115&quot;&gt;FIVe3D 3D空間に描画 | moriBlog&lt;/a&gt;）

ってことで、Bitmap3D クラスを使って Keynote 風な Cube トランジッションを作ってみた。
&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FFive3dCubeEffect.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=265&amp;amp;title=Cube+transition&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 or above required)&lt;/noscript&gt;&lt;

ソースの考え方は &lt;a href=&quot;http://www.unic8.com/en/news/labs/flexcube-os-x-3d-look-2.html&quot;&gt;unic8 Studios - Flex Cube - 3D OSX look&lt;/a&gt; と同じ。

ただ、FIVe3D は奥行きを一切考えてくれないところに注意が必要。単に座標変換するだけのライブラリなので、前後関係は考慮せずにそのまま表示しちゃう。だからこそ、ライブラリのソースがシンプルなんだけどね。

このサンプルでは困るので回転具合に応じて自力で前後関係を入れ替えてる。Tweener.addTween() の onUpdate のところ。

(追記) Z-Sort の機能を使えば自動でやってくれるようだ。（参考）&lt;a href=&quot;http://moringo.moo.jp/wordpress/?p=122&quot;&gt;[FIVe3D]Z-Sortの続き。Cubeを表示 | moriBlog&lt;/a&gt;

あと、Flex SDK だと fl.motion.Color が必要だとかなんとか怒られたけど、適当にコメントアウトして逃げた。

ソースはこちら（84行）。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.utils.setInterval;
    import five3D.display.*;

    import caurina.transitions.Tweener;

    public class Five3dCubeEffect extends Sprite {
        private const WIDTH:int = 400;
        private const HEIGHT:int = 267;

        [Embed(source=&quot;1.jpg&quot;)]
        private var Image1:Class;
        [Embed(source=&quot;2.jpg&quot;)]
        private var Image2:Class;
        [Embed(source=&quot;3.jpg&quot;)]
        private var Image3:Class;

        private var isCube:int = -1;

        public function Five3dCubeEffect() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            var images:Array = [];
            images.push(new Image1());
            images.push(new Image2());
            images.push(new Image3());

            addChild(images[0]);
            var index:int = 0;

            setInterval(function():void{
                isCube = (Math.random() &lt; 0.5 ? 1 : -1);
                transition(images[index], images[(index + 1) % images.length]);
                index = (index + 1) % images.length;
            }, 3500);
        }

        private function transition(bmp1:Bitmap, bmp2:Bitmap):void {
            var scene:Scene3D = new Scene3D();
            scene.x = WIDTH / 2;
            scene.y = HEIGHT / 2;
            addChild(scene);

            var box:Sprite3D = new Sprite3D();
            box.z = isCube * WIDTH / 2;
            scene.addChild(box);

            var img2:Bitmap3D = new Bitmap3D(bmp2.bitmapData);
            box.addChild(img2);
            img2.x = WIDTH / 2;
            img2.y = -HEIGHT / 2;
            img2.z = -isCube * WIDTH / 2;
            img2.rotationY = -isCube * 90;

            var img1:Bitmap3D = new Bitmap3D(bmp1.bitmapData);
            box.addChild(img1);
            img1.x = -WIDTH / 2;
            img1.y = -HEIGHT / 2;
            img1.z = -isCube * WIDTH / 2;

            Tweener.addTween(box, {
                time: 1.5,
                rotationY: isCube * 90,
                transition: &quot;easeInOutCubic&quot;,
                onStart: function():void{
                    removeChild(bmp1);
                },
                onUpdate: function():void{
                    if(Math.abs(box.rotationY) &gt; 45){
                        box.setChildIndex(img1, 0);
                    }
                },
                onComplete: function():void{
                    box.parent.removeChild(box);
                    addChild(bmp2);
                }
            });
        }
    }
}
||&lt;
</body>
</day>
<day date="2008-05-15" title="">
<body>
*my_first_silverlight2*[silverlight]Silverlight2.0 ではまった話
Silverlight 勉強会に備えて環境をそろえてみた。参考にしたのはこのへん。
-&lt;a href=&quot;http://labs.cybozu.co.jp/blog/kaorun/2008/04/silverlight2sdk_with_javascript_1.html&quot;&gt;Silverlight 2 SDK+JavaScriptで無償の開発環境を作る #1 [環境整備編] (Neutral Scent)&lt;/a&gt;

**MS公式のサンプルが動かない
&lt;a href=&quot;http://go.microsoft.com/fwlink/?LinkId=111131&quot;&gt;ヘルプの CHM 版&lt;/a&gt; の「Dynamic Languages in Silverlight 2」を参考にして触っていたんだけどエラーになる。

こんなエラー。
&gt;|
Silverlight error message     
ErrorCode: 4002
ErrorType: ManagedRuntimeError       
Message: Microsoft.Scripting.ArgumentTypeException: LoadRootVisual() takes exactly 1 argument (1 given)

   場所 Microsoft.Scripting.Ast.Interpreter.ExecuteThrow(CodeContext context, ThrowStatement node)

   場所 Microsoft.Scripting.Ast.Interpreter.EvaluateExpression(CodeContext context, Expression node)

   場所 Microsoft.Scripting.Ast.Interpreter.Execute(CodeContext context, Expression expression)
|&lt;
エラーメッセージ、分かりにくすぎるよ…。

どうやらこのあたりが問題のようだ。
&gt;|javascript|
Import(&quot;System.Windows.Application&quot;)

function App() {
   this.scene = Application.Current.LoadRootVisual(&quot;app.xaml&quot;)
}
||&lt;
他のサンプルと見比べると LoadRootVisual は引数２ついるようだ。

**検索してみた
2ch に同じ問題ではまってる人がいた。
&gt;|
366 ：デフォルトの名無しさん：2008/03/07(金) 23:59:55 
ヘルプの Dynamic Languages in Silverlight 2 
に書いてある通りやったのに 
LoadRootVisual の引数の使い方がおかしいって怒られるぞ・・・ 
IronRuby, IronPython でもダメだ。ほんとに動くのか 
|&lt;
動きません。

で、&lt;a href=&quot;http://d.hatena.ne.jp/coma2n/20080311/1205192784&quot;&gt;Silverlight2 Beta1を入れてみた - Programmable Life&lt;/a&gt; に解決方法を見つけた。JScript だと次のように修正する。
&gt;|
Import(&quot;System.Windows.Application&quot;)
&lt;strong&gt;Import(&quot;System.Windows.Controls.Canvas&quot;) &lt;/strong&gt;

function App() {
   this.scene = 
      Application.Current.LoadRootVisual(&lt;strong&gt;new Canvas()&lt;/strong&gt;, &quot;app.xaml&quot;)
}
|&lt;
やっと動いた…。

自分は元々 Windows 開発者なので、MS のドキュメントは見慣れてるほうだと思うんだけど、それでも CHM ファイルのせいで２時間ぐらい苦しめられた。

もしや、と思って Web のドキュメントを参照したら、ちゃんと修正されていた。
-&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc189024(vs.95).aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/cc189024(vs.95).aspx&lt;/a&gt;
CHM が間違ったまま放置されている…。最新版がどこかから手に入るのかなぁ。

**まとめと雑感
-ドキュメントは最新のものを見よう
-Silverlight は難しい。AS3/Flex の方がドキュメントは分かりやすい。
-Silverlight のはてブ率の低さは異常。すごく優れたドキュメントの &lt;a href=&quot;http://labs.cybozu.co.jp/blog/kaorun/2008/04/silverlight2sdk_with_javascript_1.html&quot;&gt;Silverlight 2 SDK+JavaScriptで無償の開発環境を作る #1 [環境整備編] (Neutral Scent)&lt;/a&gt; が2008年5月15日時点で 14users だなんて！
-Twitter 検索の Flex と Silverlight の RSS を購読してウォッチしてるんだけど、あきらかに Flex やってる人のほうが多い。ネット上では Flex のほうが流行ってきてる印象。スーツな世界では Silverlight のほうが強そうだけど。
</body>
</day>
<day date="2008-05-16" title="">
<body>
*flash_news*Flash がらみで動きが
Silverlight に手を出した瞬間に、Flash 界隈で面白いものが登場するのは嫌がらせですか。

**Flash 10 beta
&gt;http://cuaoar.jp/2008/05/flash-player-10.html:title&gt;
昨秋から Astro のコードネームで情報公開されていた Flash Player 10 のベータ版が Adobe Labs に公開されました。
&lt;&lt;
3D Effects！　Vector！　ByteArrayの直接保存！

関連リンク（随時更新中）：
-&lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=367&quot;&gt;BeInteractive! [FlashPlayer 10 (Astro) パブリックベータがリリース]&lt;/a&gt;
-&lt;a href=&quot;http://www.be-interactive.org/index.php?itemid=369&quot;&gt;BeInteractive! [FlashPlayer10のVectorについて分かっていることまとめ]&lt;/a&gt;
-&lt;a href=&quot;http://wiki.libspark.org/wiki/FlashPlayer/10/API/List&quot;&gt;Flash Player 10 API リスト - Spark project&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/haru-komugi/20080515/1210846164&quot;&gt;Flash 10 betaのインストールと最新機能の使い方 - PHP,MySQL,Flexな日々＋イラストとか&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/haru-komugi/20080516/1210921265&quot;&gt;FlexでFlash10を作成する方法 - PHP,MySQL,Flexな日々＋イラストとか&lt;/a&gt;
-&lt;a href=&quot;http://un-q.net/2008/05/flash_player_10_3d.html&quot;&gt;Flash Player 10 で 3Dしてみた (Unknown Quality)&lt;/a&gt;、&lt;a href=&quot;http://un-q.net/2008/05/flash_player_10_3d_astro.html&quot;&gt;その2&lt;/a&gt;
-&lt;a href=&quot;http://blog.bk-zen.com/2008/05/16/62/&quot;&gt;馬鹿全 - FlashDevelop + Flash Player 10 で遊ぶ&lt;/a&gt;
-&lt;a href=&quot;http://www.senocular.com/flash/tutorials/flash10drawingapi/&quot;&gt;senocular.com Tutorial: Flash Player 10 Drawing API page 1&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/gyuque/20080518#1211098999&quot;&gt;AstroのShaderFilter  - 最速チュパカブラ研究会&lt;/a&gt;
-&lt;a href=&quot;http://blog.boreal-kiss.com/2008/05/18162402.html&quot;&gt;[FLASH 10]お尻プルルン&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/rich850/20080518/p1&quot;&gt;FlashPlayer10でのArrayとVector速度比較 - Richard蒸しパン工場&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/arkw/20080516/1210925411&quot;&gt;File Reference runtime access - AKABANA&lt;/a&gt;

**Google Maps API for Flash
&lt;a href=&quot;http://code.google.com/apis/maps/documentation/flash/&quot;&gt;Google Maps API for Flash - Google Code&lt;/a&gt;
Google マップの API Flash 版。AS3 専用、SWC 形式で提供。Filter かけたり、回転したり、オーバーレイしたり、やり放題ですね！！　回転・変色のサンプルは &lt;a href=&quot;http://gmaps-samples-flash.googlecode.com/svn/trunk/examples/SpinningMap.html&quot;&gt;Spinning Map Example&lt;/a&gt;にて。

関連リンク（随時更新中）：
-&lt;a href=&quot;http://blog.tarotaro.org/archives/93&quot;&gt;タロタローグ ブログ | FlashDevelopでGoogle Maps API for Flashを試す。&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/haru-komugi/20080517/1210960569&quot;&gt;FlexでGoogleMap - PHP,MySQL,Flexな日々＋イラストとか&lt;/a&gt;
-&lt;a href=&quot;http://japonyol.net/editor/archives/2008/05/google-maps-api-flash.html&quot;&gt;Google Maps API for Flash 制作メモ - Seis Pesos&lt;/a&gt;
-&lt;a href=&quot;http://blog.tarotaro.org/archives/94&quot;&gt;タロタローグ ブログ | Google Maps API for Flashの超簡単サンプルで、怪獣に街を歩かせてみた。&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/haru-komugi/20080517/1211029659&quot;&gt;GoogleMap for Flah（全国萌え系ショップ検索） - PHP,MySQL,Flexな日々＋イラストとか&lt;/a&gt;
-&lt;a href=&quot;http://fladdict.net/blog/2008/05/google-maps-api-for-flash.html&quot;&gt;fladdict≫ ブログアーカイブ ≫ Google Maps API for flash雑感&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080518/google_guruguru&quot;&gt;Google Maps をぐーるぐる - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/zk3/20080518/1211118532&quot;&gt;Google Maps APIで「まわせる地図」を作ってみた - zk_diary&lt;/a&gt;

*silverlight_xaml_and_js*[silverlight]Silverlight 2 開発のバリエーション
Silverlight のサンプルを見ていると、ものによって書き方が違って混乱しがち。

１つのサンプルをいくつもの書法で書いておくと、頭の中で変換ができるようになるので学習が進みやすい。

以下、Silverlight 2.0 Beta 1 SDK + Chiron.exe で開発する前提。導入方法は
-&lt;a href=&quot;http://labs.cybozu.co.jp/blog/kaorun/2008/04/silverlight2sdk_with_javascript_1.html&quot;&gt;Silverlight 2 SDK+JavaScriptで無償の開発環境を作る #1 [環境整備編] (Neutral Scent)&lt;/a&gt;
-&lt;a href=&quot;http://gihyo.jp/dev/serial/01/silverlight/0006&quot;&gt;始めよう！Silverlight：第6回　Dynamic SilverlightでHello world｜gihyo.jp … 技術評論社&lt;/a&gt;
あたりを参考に。

**基本形
***HTML の基本形
object タグで埋め込む方法。一番シンプルなのがこれ。
&gt;|html|
&lt;body&gt;
  &lt;object data=&quot;data:application/x-silverlight,&quot;
    type=&quot;application/x-silverlight&quot;
    width=&quot;100%&quot; height=&quot;100%&quot;&gt;
    &lt;param name=&quot;source&quot; value=&quot;app.xap&quot; /&gt;
  &lt;/object&gt;
&lt;/body&gt;
||&lt;

debug を有効にするには、initParams を利用するとよい。
&gt;|html|
&lt;body&gt;
  &lt;div id=&quot;out&quot;&gt;&lt;/div&gt;

  &lt;object data=&quot;data:application/x-silverlight,&quot;
    type=&quot;application/x-silverlight&quot;
    width=&quot;100%&quot; height=&quot;100%&quot;&gt;
    &lt;param name=&quot;source&quot; value=&quot;app.xap&quot; /&gt;
    &lt;param name=&quot;initParams&quot; value=&quot;debug=true,reportErrors=out&quot; /&gt;
  &lt;/object&gt;
&lt;/body&gt;
||&lt;
エラーがあると、&amp;lt;div id=&quot;out&quot;&amp;gt; タグの中にエラーが書き出される。

***XAML の基本形
app/app.xaml に作成。100×100 の赤い四角を (0, 50) の位置に配置している。
&gt;|xml|
&lt;Canvas
  xmlns=&quot;http://schemas.microsoft.com/client/2007&quot;
  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
  x:Class=&quot;System.Windows.Controls.Canvas&quot;&gt;
  &lt;Rectangle Canvas.Top=&quot;50&quot; Width=&quot;100&quot; Height=&quot;100&quot;
    Fill=&quot;Red&quot;/&gt;
&lt;/Canvas&gt;
||&lt;
Y座標が Canvas.Top プロパティで指定するのがちょっと違和感ある。Canvas クラスが処理をするから、こういう書き方をするらしい。

***スクリプトの基本形
app/app.js を作成する。これが xap のエントリポイントとなる。

&gt;|javascript|
Import(&quot;System.Windows.Application&quot;)
Import(&quot;System.Windows.Controls.Canvas&quot;) 

function App() {
   this.scene = Application.Current.LoadRootVisual(new Canvas(), &quot;app.xaml&quot;)
}
App.prototype.start = function() {
}

var app = new App
app.start()
||&lt;
LoadRootVisual() を呼び出して、XAML を読み込んでいる。

start() はあとで拡張するために空にしてある。

**スクリプトのバリエーション
まずは、スクリプトをいくつかの方法で書き直してみる。

Silverlight の魅力はなんといっても DLR（Dynamic Language Runtime）。JavaScript だけじゃなく、他の言語でもスクリプトを書ける。

app.py とすれば Python、app.rb とすれば Ruby のスクリプトとして認識されるようだ。

***app/app.py
Python で書いてみる。
&gt;|python|
from System.Windows import Application
from System.Windows.Controls import Canvas

class App:
   def __init__(self):
      self.scene = Application.Current.LoadRootVisual(Canvas(), &quot;app.xaml&quot;)
   def start(self):pass

App().start()
||&lt;
:pass というのは空のメソッドを書くための方法。Twitter で教えてもらった。ありがたや。

実は Python 初体験。インデント狂っただけでエラーになって、「これが噂の！」と思った。

***app/app.rb
Ruby で書いてみる。
&gt;|ruby|
include System::Windows
include System::Windows::Controls

class App
  def initialize
    @scene = Application.Current.LoadRootVisual(Canvas.new, &quot;app.xaml&quot;)
  end
  def start
  end
end

App.new.start
||&lt;

**XAML のバリエーション
お次は XAML をいくつかの方法で書き直してみよう。

***基本形（再掲）
&gt;|xml|
&lt;Canvas
  xmlns=&quot;http://schemas.microsoft.com/client/2007&quot;
  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
  x:Class=&quot;System.Windows.Controls.Canvas&quot;&gt;
  &lt;Rectangle Canvas.Top=&quot;50&quot; Width=&quot;100&quot; Height=&quot;100&quot;
    Fill=&quot;Red&quot;/&gt;
&lt;/Canvas&gt;
||&lt;

***Fill プロパティを変形
Fill プロパティに Red という文字列ではなく、オブジェクトを渡してみる。
&gt;|xml|
&lt;Canvas
  xmlns=&quot;http://schemas.microsoft.com/client/2007&quot;
  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
  x:Class=&quot;System.Windows.Controls.Canvas&quot;&gt;
  &lt;Rectangle Canvas.Top=&quot;50&quot; Width=&quot;100&quot; Height=&quot;100&quot;&gt;
    &lt;Rectangle.Fill&gt;
      &lt;SolidColorBrush Color=&quot;Red&quot;/&gt;
    &lt;/Rectangle.Fill&gt;
  &lt;/Rectangle&gt;
&lt;/Canvas&gt;
||&lt;
「クラス名.プロパティ」タグの中にオブジェクトをあらわす XML を書く。

このままだと最初の例を冗長にしたにすぎないが、例えば LinearGradientBrush に書き換えれば、グラデーションで塗られるようになる。

***Rectangle をスクリプトで生成
全部 XAML でやろうというサンプルが多くて嫌。スクリプトだけでやる方法を知りたい！

まずは、XAML を空っぽに。
&gt;|xml|
&lt;Canvas
  xmlns=&quot;http://schemas.microsoft.com/client/2007&quot;
  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
  x:Class=&quot;System.Windows.Controls.Canvas&quot;&gt;
&lt;/Canvas&gt;
||&lt;

Rectangle タグをスクリプトで動的に作成してみた。
&gt;|javascript|
Import(&quot;System.Windows.Application&quot;)
Import(&quot;System.Windows.Controls.Canvas&quot;) 
Import(&quot;System.Windows.Shapes.Rectangle&quot;) 
Import(&quot;System.Windows.Media.*&quot;) // Colors, SolidColorBrush

function App() {
   this.scene = Application.Current.LoadRootVisual(new Canvas(), &quot;app.xaml&quot;)
}

App.prototype.start = function() {
   var rect = new Rectangle();
   rect.SetValue(Canvas.TopProperty, 50);
   rect.Width = 100;
   rect.Height = 100;
   rect.Fill = new SolidColorBrush(Colors.Red);
   this.scene.Children.Add(rect);
}

var app = new App
app.start()
||&lt;
new Rectangle() して、プロパティを設定して、Add している。

Cnavas.Top プロパティを設定するには SetValue() メソッドを使ってる。Silverlight 1.0 のドキュメントを見ると rect[&quot;Canvas.Top&quot;] でいけてるようなんだけど、2.0 ではエラーが出る。理由はまだよく分からない。

**HTML のバリエーション
最後に HTML のバリエーションを紹介。

object タグで埋め込むのをやめて、silverlight.js を使って埋め込んでもよい。
&gt;|html|
&lt;head&gt;
   &lt;script src=&quot;silverlight.js&quot; type=&quot;text/javascript&quot; &gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;

  &lt;script type=&quot;text/javascript&quot;&gt;
    var controlID = &quot;SilverlightControl&quot;
    Silverlight.createObjectEx({
      source: &quot;app.xap&quot;,
      parentElement: document.getElementById(&quot;container&quot;),
      id: controlID,
      properties: {
        width:'100%', 
        height:'100%',
        version:'1.1'
      },
      events: {}
    });
  &lt;/script&gt;
&lt;/body&gt;
||&lt;
silverlight.js は SDK インストール時に C:\Program Files\Microsoft SDKs\Silverlight\v2.0\Tools に展開されている。HTML で書くよりも細かな設定ができる印象だ。いくつかの付加機能も魅力的。Flash での swfobject みたいな感じ。

その中でも素敵なのが、エラー発生時に alert でエラーの詳細をレポートしてくれる機能。

alert は嫌だよ、とかリリースするときには抑制したいよね、というときには、
&gt;|
events: {onError: function(){}}
|&lt;
として独自のエラーハンドラを指定するとよい。

</body>
</day>
<day date="2008-05-18" title="">
<body>
*google_guruguru*[as][GoogleMapsAPI]Google Maps をぐーるぐる
さっそく &lt;a href=&quot;http://code.google.com/apis/maps/documentation/flash/index.html&quot;&gt;Google Maps API for Flash&lt;/a&gt; で遊んでみた。

公式のチュートリアルを見ると MXML 必須のように見えるが、Map クラス自体は Sprite を継承してるので、AS3 の範囲だけで遊べる。

回転、フィルタが自由自在ですよ、ということで、ぐるぐる回してみた。ドラッグ時にはマップ全体がぼやけます。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGoogleGuruGuru.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=460&amp;amp;h=360&amp;amp;title=Google+Guru+Guru&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 がインストールされていると、ここにサンプルが表示されます)&lt;/noscript&gt;&lt;

ソースコードはこちら。
====
&gt;|javascript|
package {
    import flash.events.Event;
    import flash.geom.Matrix;
    import flash.filters.BlurFilter;
    import com.google.maps.Map;
    import com.google.maps.MapEvent;
    import com.google.maps.MapType;
    import com.google.maps.LatLng;

    public class GoogleGuruGuru extends Map {
        public function GoogleGuruGuru() {
            super();
            key = &quot;ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg&quot;;

            addEventListener(MapEvent.MAP_READY, function(event:Event):void{
                setCenter(new LatLng(35.003759, 135.769322), 18, MapType.NORMAL_MAP_TYPE);
            });

            var r:int = 0;
            var scale:Number = 1;
            addEventListener(&quot;enterFrame&quot;, function(event:Event):void{
                r = (r + 1) % 360;
                var rad:Number = 2 * Math.PI * r / 360;

                var matrix:Matrix = new Matrix();
                matrix.translate(-stage.stageWidth / 2, -stage.stageHeight / 2);
                matrix.rotate(rad);
                matrix.translate(stage.stageWidth / 2, stage.stageHeight / 2);
                transform.matrix = matrix;
            });

            stage.addEventListener(&quot;mouseDown&quot;, function(event:Event):void{
                filters = [new BlurFilter(10, 10)];
            }, true);
            stage.addEventListener(&quot;mouseUp&quot;, function(event:Event):void{
                filters = [];
            });
        }
    }
}
||&lt;

*silverlight_and_flash*[silverlight]SilverlightとFlashをつなぐ
&lt;a href=&quot;http://www.silverlightsquare.com/page_1208178913506.html&quot;&gt;Silverlightを囲む会 in大阪#2&lt;/a&gt; にて少し時間をいただいて発表しました。

見知らぬ人ばっかりだったので、いつもより長めに自己紹介しています。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fflash_and_silverlight%2FSlide.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=460&amp;amp;h=360&amp;amp;title=Silverlight+and+Flash&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 がインストールされていると、ここにスライドが表示されます)&lt;/noscript&gt;&lt;

**デモ
要 Silverlight 2.0＆Flash Player 9 という激しく見る人を選ぶコンテンツです。

-&lt;a href=&quot;http://tech.nitoyon.com/misc/flash_and_silverlight/demo/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080518/20080518023732.jpg&quot; width=&quot;400&quot; height=&quot;244&quot;&gt;&lt;br&gt;http://tech.nitoyon.com/misc/flash_and_silverlight/demo/&lt;/a&gt;

Silverlight から Flash を操作してます。左側が Silverlight 2、右側が Flash です。

Silverlight の四角をクリックすると、Flash の四角の色が変わります。逆方向もやりたかったのですが、JS で属性を設定する方法が分からなかったのでできていません。

何の役に立つのかはよく分かりません。

ソース一式（スライド含む）は &lt;a href=&quot;http://tech.nitoyon.com/misc/flash_and_silverlight/sources.zip&quot;&gt;こちら&lt;/a&gt; から。

**感想
Flash 界隈では「Silverlight って微妙だよね」という扱いなんだけど、今回の勉強会の参加者でも Silverlight を触ったことある人はほとんどいなかった。「Silverlight に夢見てます」みたいな発言もなかったので、Flash 界隈も MS 開発者界隈も Silverlight の認識はあまり変わらないのかもしれない。

２次会で印象的だった話。『イントラのシステム組むなら ASP.NET とか WPF を選択する』『あえて Silverlight を選択する理由はない』『マス向けの Web サービスなら Ajax か Flash を選択する』。

もちろん、Visual Studio とか C# で Web アプリを開発できるのは MS 開発者には魅力的だし、Ruby や Python で組めるのも Web 開発者へのアピールになるんだけど、いずれにせよ、本格的に使えるのはプレーヤーが普及する数年後になるだろう。

Adobe の立場から考えると、Visual Studio(C#, VB) と DLR に言語的なメリットで勝つのは無理なので、Silverlight が普及するまでの数年で、どれだけ多くの開発者を Flex/AIR に引きずり込めるかが勝負になるのかな。あとは、DRM を理由に Silverlight を採用するサイトが増えるのを避けるために、早く DRM 対応のもろもろを公開していかなきゃね、というところか。

**逆質問への回答
発表者が質問する、という暴挙に出たわけですが、やさしく教えてもらえました。ありがとうございます。

忘れないようにメモしておきます。
:CHMのサンプルが動かなかった:&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080515/my_first_silverlight2&quot;&gt;Silverlight2.0 ではまった話&lt;/a&gt; にて自己解決済み。
:XAMLのサンプルばっかり:&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080516/silverlight_xaml_and_js&quot;&gt;Silverlight 2 開発のバリエーション&lt;/a&gt; にて XAML 相当の内容を JS で作成する方法を解説済み。
:UserControl にタグを複数書いたら動かない:UserControl には１つしか含められない。中にコンテナを入れることはできる。だから、ボタンの中にコンテナを入れて、その中に複数のボタンを置く、ということも実は可能。
:C#、VBな開発とJS, Ruby, Python な開発の関係:C#、VB では MSIL 形式の DLL が生成されてXAP に含まれる。これを CLR が実行する。JS, Ruby, Python はソースがそのまま XAP に含まれていて、CLR で動く DLR がこれを実行する。
:JS で [ScriptableMember()] を設定する方法:JS で属性を設定する方法は誰も知らなかった。でも、できなきゃ不便だからできるんじゃない？というコメントをもらった。
</body>
</day>
<day date="2008-05-19" title="">
<body>
*google_maps_racing_flash*[as][GoogleMapsAPI]Google Maps で鈴鹿サーキット Flash版
&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/1/&quot;&gt;Google Maps で鈴鹿サーキット試走&lt;/a&gt; の Flash 版を作ってみた。題して&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/4/&quot;&gt;Google Maps で鈴鹿サーキット試走 Flash 版&lt;/a&gt;。JavaScript版に比べて回転するところが目新しい。
</body>
<comments>
<comment>
<username>なまえ</username>
<body>う～ん、まともにまがれない</body>
<timestamp>1211322174</timestamp>
</comment>
</comments>
</day>
<day date="2008-05-21" title="">
<body>
*js_func_declaration*[JavaScript]JavaScript の関数定義は真っ先に処理される
JavaScript のイベントハンドラについて段階を追って説明した素晴らしい資料、「&lt;a href=&quot;http://d.hatena.ne.jp/dayflower/20080516/1210917670&quot;&gt;JavaScript のイベントハンドラ - daily dayflower&lt;/a&gt;」に次のような記述があった。
&gt;http://d.hatena.ne.jp/dayflower/20080516/1210917670:title&gt;
JavaScript で関数を定義するのには，下記の3通りの手法があります。

-「function 文」による「関数定義」 
-「function 演算子」による「関数式」 
-Function() コンストラクタ 
Function() コンストラクタについては今回は触れていません。XXX() は「関数定義」，YYY は「関数式」になります。「関数定義」の場合，前述のように関数定義（実装）が前方参照可能になるという大きな違いがあります。
&lt;&lt;

言い換えると、
&gt;|javascript|
window.onload = hoge;
function hoge(){
  // ...
}
||&lt;
は成功するけど、
&gt;|javascript|
window.onload = hoge;
var hoge = function(){
  // ...
}
||&lt;
は undefined になっちゃうよ、という話。

なんとなくそんな気はしていたけど、改めて明言されると理由が気になる。ということで、原典をあたってみた。

原典というのは、もちろん、言わずと知れた&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot; lang=&quot;en&quot; hreflang=&quot;en&quot;&gt;ECMAScript Language Specification&lt;/a&gt; (&lt;a href=&quot;http://bclary.com/2004/11/07/&quot; title=&quot;ECMAScript Language Specification (HTML Version)&quot; hreflang=&quot;en&quot;&gt;HTML 版&lt;/a&gt;、&lt;a href=&quot;http://www2u.biglobe.ne.jp/~oz-07ams/prog/ecma262r3/&quot; title=&quot;Under Translation of ECMA-262 3rd Edition&quot;&gt;日本語版&lt;/a&gt;)。

読み進めたら、14. Program に次のような記述が。
&gt;|
Program :
    SourceElements
SourceElements :
    SourceElement
    SourceElements SourceElement
SourceElement :
    Statement
    FunctionDeclaration

Semantics

The production Program : SourceElements is evaluated
as follows:
 1. Process SourceElements for function declarations.
 2. Evaluate SourceElements.
 3. Return Result(2).
|&lt;
最初に関数定義が処理されたあと、文が処理される模様。

関数定義の処理方法については 13. Function Definition に色々書いてあるので、気になる人はそちらを読み進めていくとよいのだろう。

それはそうと、JavaScript のプログラムは、文もしくは関数定義から成り立っているのか。確かに言われてみればそうなるね！

いずれにせよ、&lt;a href=&quot;http://nanto.asablo.jp/blog/2008/05/18/3522974&quot;&gt;原典を30回は朗読しなきゃいけない&lt;/a&gt;らしいので、自分はまだまだだと思った。
</body>
<comments>
<comment>
<username>hoge</username>
<body>IT戦記のScope Chain of JavaScriptってパワポファイルがそこらへんの説明わかりやすかったんですが、ファイル消えてましたorz&lt;br&gt;&lt;br&gt;Prototype.js を使った JavaScript OOP 講座 #03&lt;br&gt;http://d.hatena.ne.jp/amachang/20060406/1144339901</body>
<timestamp>1211418043</timestamp>
</comment>
</comments>
</day>
<day date="2008-05-22" title="">
<body>
*googlemaps_layer*[GoogleMapsAPI][as]Google Maps で航空写真の上に通常地図を重ねる
マスクで自由な形にくりぬいて、複数のマップを重ねることもできる。
&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGoogleMapsLayer.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=300&amp;amp;title=Overlayed+maps&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が有効の場合、ここに表示されます)&lt;/noscript&gt;&lt;
実用性はないけど。

以下、ソース（99行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package {
    import flash.events.Event;
    import flash.display.Sprite;
    import flash.geom.*;
    import flash.utils.setInterval;
    import com.google.maps.*;
    import com.google.maps.controls.*;
    import caurina.transitions.Tweener;

    public class GoogleMapsLayer extends Sprite {
        private const WIDTH:int = 400;
        private const HEIGHT:int = 300;
        private var maps:Array = [];

        public function GoogleMapsLayer() {
            super();
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            for(var i:int = 0; i &lt; 2; i++){
                initMap(i);
            }
        }

        private function initMap(i:int):void{
            var map:Map = new Map();
            map.key = &quot;ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg&quot;;
            map.setSize(new Point(WIDTH, HEIGHT));
            map.addEventListener(MapEvent.MAP_READY, function(event:Event):void{
                map.setCenter(new LatLng(35.003759, 135.769322), 4, 
                    i != 0 ? MapType.NORMAL_MAP_TYPE : MapType.SATELLITE_MAP_TYPE);
                map.addEventListener(&quot;mapevent_movestep&quot;, changeHandler);
                map.addEventListener(&quot;mapevent_moveend&quot;, changeHandler);
                map.addEventListener(&quot;mapevent_zoomend&quot;, changeHandler);

                var topRight:ControlPosition = new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT, 10, 10);
                var c:ZoomControl = new ZoomControl();
                map.addControl(c);
                c.setControlPosition(topRight);

            });
            addChild(map);
            maps.push(map);

            if(i == 1){
                var m:Sprite = new Sprite();
                addChild(m);
                map.mask = m;
                map.cacheAsBitmap = m.cacheAsBitmap = true;
                startMaskAnimation(m);
            }
        }

        // sync position
        private function changeHandler(event:Event):void{
            if(maps.length != 2) return;

            var me:Map = event.target as Map;
            var other:Map = (me == maps[0] ? maps[1] : maps[0]) as Map;
            if(!me.getCenter().equals(other.getCenter())){
                other.setCenter(me.getCenter());
            }
            if(me.getZoom() != other.getZoom()){
                other.setZoom(me.getZoom());
            }
        }

        private function startMaskAnimation(m:Sprite):void{
            setInterval(function():void{
                var s:Sprite = new Sprite();
                s.x = Math.random() * WIDTH;
                s.y = Math.random() * HEIGHT;
                m.addChild(s);

                var r:int = Math.random() * 300 + 50;
                if(Math.random() &lt; 0.5){
                    s.graphics.lineStyle(20, 0, 1, false, &quot;none&quot;);
                    s.graphics.drawCircle(0, 0, 5);
                }
                else{
                    s.graphics.lineStyle(20, 0, 1, false, &quot;none&quot;, null, &quot;miter&quot;);
                    s.graphics.drawRect(-5, -5, 10, 10);
                    s.graphics.endFill();
                }
                s.rotation = Math.random() * 180;

                Tweener.addTween(s, {
                    time: 5,
                    _scale: Math.random() * 40 + 10,
                    alpha: 0,
                    rotation: Math.random() * 180,
                    onComplete: function():void{
                        m.removeChild(s);
                    }
                });
            }, 500);
        }
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2008-05-23" title="">
<body>
*google_maps_earth2*[GoogleMapsAPI][as]Google Maps で地球儀 (2)
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080523/google_maps_earth&quot;&gt;前回&lt;/a&gt;作ったサンプルは、よくよく見直してみればすごく縮尺が変だった。南極でかすぎだし、アフリカが裏に消えた瞬間には反対側から出てきていた。回転方向も自転と逆だった…。

あまりにひどいので、縮尺通りに作り直した。
&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGoogleEarthAs3_2.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=200&amp;amp;h=200&amp;amp;title=Google+Globe+2&amp;amp;border=%23000000%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以降が有効になっていると、ここに地球儀が表示されます。)&lt;/noscript&gt;&lt;

赤道周りが 510px あったので、地球の半径は 2πで割って81px。意外に小さくなってしまった。かなり地球に近づいたんじゃなかろうか。

以下、ソース(70行)。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.*;
    import flash.filters.DisplacementMapFilter;
    import flash.utils.setInterval;
    import com.google.maps.*;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class GoogleEarthAs3_2 extends Sprite {
        private const WIDTH:int = 800;
        private const HEIGHT:int = 500;
        private const RADIUS:int = 81;
        private var map:Map;

        public function GoogleEarthAs3_2() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            map = new Map();
            map.key = &quot;ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg&quot;;
            map.setSize(new Point(800, 500));
            map.addEventListener(MapEvent.MAP_READY, function(event:*):void{
                var lng:Number = 0;
                var types:Array = [MapType.SATELLITE_MAP_TYPE, MapType.PHYSICAL_MAP_TYPE, MapType.NORMAL_MAP_TYPE];
                var type:int = 0;
                map.setCenter(new LatLng(0, lng), 1, types[0]);
                map.disableDragging();

                setInterval(function():void
                {
                    lng -= 3;
                    type = Math.random() &lt; 0.05 ? (type + 1) % 3 : type;
                    map.setCenter(new LatLng(0, lng), 1, types[type]);
                    lng = lng % 360;
                }, 200);
            });

            var bmd:BitmapData = new BitmapData(WIDTH, HEIGHT, false, 0);
            for(var j:int = 0; j &lt; RADIUS * 2; j++){
                var ay:Number = Math.PI / 2 - Math.acos(1 - j / RADIUS);
                var dy:Number = RADIUS - j - RADIUS * ay;
                var rx:Number = RADIUS * Math.cos(ay);
                for(var i:int = RADIUS - rx; i &lt; RADIUS + rx; i++){
                    var ax:Number = Math.PI / 2 - Math.acos(1 - (i - RADIUS + rx) / rx);
                    var dx:Number = RADIUS - i - rx * ax;

                    bmd.setPixel(i, j, getColor(dx * 3 + 128, dy * 3 + 128, 128));
                }
            }

            var diff:Number = (HEIGHT - 2 * RADIUS) / 2;
            map.filters = [new DisplacementMapFilter(bmd, new Point(diff, diff), 1, 2, 128, 128)];
            var matrix:Matrix = new Matrix();
            matrix.translate(-diff, -diff);
            map.transform.matrix = matrix;
            addChild(map);

            var msk:Sprite = new Sprite();
            msk.graphics.beginFill(0);
            msk.graphics.drawCircle(RADIUS, RADIUS, RADIUS);
            msk.graphics.endFill();
            addChild(msk);
            mask = msk;
        }

        private static function getColor(r:int, g:int, b:int):uint {
            return r * 0x10000 + g * 0x100 + b;
        }
    }
}
||&lt;

*google_maps_earth*[GoogleMapsAPI][as]Google Maps で地球儀
Google Maps API for Flash では、残念ながら地図データを BitmapData.draw() することはできない。だから、PV3D のテクスチャにはできなくて悲しい。

とはいえ、DisplacementMapFilter という最終手段が残っている。地球儀を作ってみた。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGoogleEarthAs3.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=400&amp;amp;title=Google+Globe&amp;amp;border=%23000000%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以降が有効になっていると、ここに地球儀が表示されます。)&lt;/noscript&gt;&lt;

&lt;a href=&quot;http://psyark.jp/?entry=20050925191451&quot;&gt;psyark.jp - DMFチュートリアル2&lt;/a&gt; をすごく参考にした。ほとんどそのまんま。

気になるのが、Google Maps API for Flash の利用条件の「You may not alter or obscure the logos or attribution on the map.」という条項。日本語訳すると「地図上のロゴや権利者の表示は、変えたり隠したりしないでね」ということなんだけど、このサンプルでは完全に隠れてしまっている。

隠したいわけじゃないんだけど、地球儀を実現するには丸くくり抜く関係上、隠さないようにするのは困難だ。著作権の文字は場所や地図のタイプによって変わるので、固定で埋め込む訳にもいかない。Copyright クラスというのはあるんだけど、いまいち使い方が分かってない。そこを解決しないと、商用コンテンツへの応用は難しそうだ。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080523/google_maps_earth2&quot;&gt;Google Maps で地球儀 (2)&lt;/a&gt; に続く。

以下、ソース(69行)。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.*;
    import flash.filters.DisplacementMapFilter;
    import flash.utils.setInterval;
    import com.google.maps.*;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class GoogleEarthAs3 extends Sprite {
        private const WIDTH:int = 800;
        private const HEIGHT:int = 500;
        private const RADIUS:int = 200;
        private var map:Map;

        public function GoogleEarthAs3() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            map = new Map();
            map.key = &quot;ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg&quot;;
            map.setSize(new Point(800, 500));
            map.addEventListener(MapEvent.MAP_READY, function(event:*):void{
                var lng:Number = 0;
                var types:Array = [MapType.SATELLITE_MAP_TYPE, MapType.PHYSICAL_MAP_TYPE, MapType.NORMAL_MAP_TYPE];
                var type:int = 0;
                map.setCenter(new LatLng(0, lng), 1, types[type]);
                map.disableDragging();

                setInterval(function():void
                {
                    lng += 3;
                    type = Math.random() &lt; 0.05 ? (type + 1) % 3 : type;
                    map.setCenter(new LatLng(0, lng), 1, types[type]);
                    lng = lng % 360;
                }, 150);
            });

            var bmd:BitmapData = new BitmapData(WIDTH, HEIGHT, false, 0);
            for(var j:int = 0; j &lt; RADIUS * 2; j++){
                var ay:Number = Math.PI / 2 - Math.acos(1 - j / RADIUS);
                var dy:Number = RADIUS - j - RADIUS * ay;
                var rx:Number = RADIUS * Math.cos(ay);
                for(var i:int = RADIUS - rx; i &lt; RADIUS + rx; i++){
                    var ax:Number = Math.PI / 2 - Math.acos(1 - (i - RADIUS + rx) / rx);
                    var dx:Number = RADIUS - i - rx * ax;

                    bmd.setPixel(i, j, getColor(dx + 128, dy + 128, 128));
                }
            }

            map.filters = [new DisplacementMapFilter(bmd, new Point(50, 50), 1, 2, 192, 150)];
            var matrix:Matrix = new Matrix();
            matrix.translate(-50, -50);
            map.transform.matrix = matrix;
            addChild(map);

            var msk:Sprite = new Sprite();
            msk.graphics.beginFill(0);
            msk.graphics.drawCircle(RADIUS, RADIUS, RADIUS);
            msk.graphics.endFill();
            addChild(msk);
            mask = msk;
        }

        private static function getColor(r:int, g:int, b:int):uint {
            return r * 0x10000 + g * 0x100 + b;
        }
    }
}
||&lt;
</body>
</day>
<day date="2008-05-26" title="">
<body>
*google_earth*[GoogleMapsAPI][as]Google Maps を Google Earth 風にする
Google Earth 風のコントローラをつけてみた。
&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGoogleEarthControl.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=420&amp;amp;h=400&amp;amp;title=Google+Earth&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;
傾かせるところは、例によって DisplacementMapFilter を使っている。

にしても、DisplacementMapFilter は使いづらい。もう少し賢く振舞ってくれるラッパーがほしくなる。写像を定義する関数を渡すと、自動で BitmapData を作ってくれるようなやつ。誰か作ってないかな。

ソースコードはいつもより少し長めの186行なんだけど、コントロールのソースコードを除いたらちょうど100行ぐらい。
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.*;
    import flash.events.*;
    import flash.filters.DisplacementMapFilter;
    import com.google.maps.*;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class GoogleEarthControl extends Sprite {
        private const WIDTH:int = 400;
        private const HEIGHT:int = 400;
        private const VIEWDISTANCE:Number = 500;
        private var map:Map;
        private var mapContainer:Sprite;
        private var bmd:BitmapData;

        public function GoogleEarthControl() {
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            mapContainer = new Sprite();
            addChild(mapContainer);

            map = new Map();
            map.key = &quot;ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg&quot;;
            map.setSize(new Point(WIDTH, HEIGHT));
            map.addEventListener(MapEvent.MAP_READY, function(event:*):void{
                map.setCenter(new LatLng(35.003759, 135.769322), 10, MapType.SATELLITE_MAP_TYPE);

                var mapMask:Sprite = new Sprite();
                mapMask.graphics.beginFill(0);
                mapMask.graphics.drawRect(0, 0, WIDTH, HEIGHT);
                mapMask.graphics.endFill();
                mapContainer.mask = mapMask;

                bmd = new BitmapData(WIDTH, HEIGHT);

                var s1:ScrollBar = new ScrollBar(50);
                addChild(s1);
                s1.rotation = -90
                s1.x = WIDTH - 100; s1.y = 30;
                s1.addEventListener(&quot;change&quot;, function(event:Event):void{
                    updateValue(s1.value);
                });
                s1.dispatchEvent(new Event(&quot;change&quot;));

                var s2:ScrollBar = new ScrollBar(80);
                addChild(s2);
                s2.x = WIDTH - 10; s2.y = 50;
                s2.addEventListener(&quot;change&quot;, function(event:Event):void{
                    map.setZoom((100 - s2.value) / 100 * map.getMaxZoomLevel());
                });
                s2.dispatchEvent(new Event(&quot;change&quot;));

                var r:RotationControl = new RotationControl(-10);
                addChild(r);
                r.x = WIDTH - 60; r.y = 90;
                r.addEventListener(&quot;change&quot;, function(event:Event):void{
                    var matrix:Matrix = new Matrix();
                    matrix.translate(-WIDTH / 2, -HEIGHT / 2);
                    matrix.rotate(r.value * Math.PI / 180);
                    matrix.translate(WIDTH / 2, HEIGHT / 2);
                    map.transform.matrix = matrix;
                });
                r.dispatchEvent(new Event(&quot;change&quot;));
            });
            mapContainer.addChild(map);
        }

        private function updateValue(value:int):void{
            var rad:Number = value / 100 * 60 * Math.PI / 180;
            var p:Number = -Math.sin(rad) / VIEWDISTANCE;

            bmd.lock();
            var HW:int = WIDTH / 2;
            var HH:int = HEIGHT / 2;
            for(var j:int = -HH; j &lt; HH; j++){
                var pj:Number = 1 + j * p;
                for(var i:int = -HW; i &lt; HW; i++){
                    var _x:int = pj * i;
                    var _y:int = pj * j / Math.cos(rad);
                    bmd.setPixel(i + HW, j + HH, getColor((_x - i) * 1 + 0x80, (_y - j) * 1 + 0x80, 0));
                }
            }
            bmd.unlock();

            mapContainer.filters = [new DisplacementMapFilter(bmd, new Point(0, 0), 1, 2, 256, 256, &quot;color&quot;)];
        }

        private static function bounds(val:Number, min:Number = Number.POSITIVE_INFINITY, max:Number = Number.NEGATIVE_INFINITY):Number {
            return Math.max(Math.min(val, max), min);
        }

        private static function getColor(r:int, g:int, b:int):uint {
            return Math.floor(bounds(r, 0, 255)) * 0x10000
                 + Math.floor(bounds(g, 0, 255)) * 0x100
                 + Math.floor(bounds(b, 0, 255));
        }
    }
}

import flash.display.Sprite;
import flash.events.*;
import flash.geom.Point;

class ScrollBar extends Sprite {
    public var value:int;

    public function ScrollBar(_value:int):void {
        value = _value;

        useHandCursor = buttonMode = true;
        graphics.beginFill(0xffffff);
        graphics.lineStyle(0);
        graphics.drawRect(0, -2, 8, 112);
        graphics.endFill();

        var tab:Sprite = new Sprite();
        tab.graphics.beginFill(0xffffff);
        tab.graphics.lineStyle(0);
        tab.graphics.drawRect(-8, 0, 24, 8);
        tab.graphics.endFill();
        tab.y = _value;
        addChild(tab);

        addEventListener(&quot;mouseDown&quot;, function(event:MouseEvent):void {
            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);
            mouseMoveHandler(event);
        });

        var mouseMoveHandler:Function = function(event:MouseEvent):void {
            var p:Point = globalToLocal(new Point(stage.mouseX, stage.mouseY));
            tab.y = Math.min(Math.max(0, p.y), 100);
        }
        var mouseUpHandler:Function = function(event:MouseEvent):void {
            value = tab.y;
            dispatchEvent(new Event(&quot;change&quot;));
            stage.removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }
}

class RotationControl extends Sprite {
    public var value:int = 0;

    public function RotationControl(_value:int):void {
        value = _value;

        useHandCursor = buttonMode = true;
        graphics.beginFill(0xffffff);
        graphics.lineStyle(0);
        graphics.drawCircle(0, 0, 40);
        graphics.drawCircle(0, 0, 32);
        graphics.endFill();

        var tab:Sprite = new Sprite();
        tab.graphics.beginFill(0xffffff);
        tab.graphics.lineStyle(0);
        tab.graphics.drawRect(-44, -8, 16, 16);
        tab.graphics.endFill();
        tab.rotation = _value + 90;
        addChild(tab);

        addEventListener(&quot;mouseDown&quot;, function(event:MouseEvent):void {
            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);
            mouseMoveHandler(event);
        });

        var mouseMoveHandler:Function = function(event:MouseEvent):void {
            var p:Point = globalToLocal(new Point(stage.mouseX, stage.mouseY));
            tab.rotation = p.x == 0 ? 90 : Math.atan(p.y / p.x) / Math.PI * 180 + (p.x &gt; 0 ? 180 : 0);
            value = tab.rotation - 90;
            dispatchEvent(new Event(&quot;change&quot;));
        }
        var mouseUpHandler:Function = function(event:MouseEvent):void {
            value = tab.rotation - 90;
            dispatchEvent(new Event(&quot;change&quot;));
            stage.removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }
}
||&lt;
</body>
</day>
<day date="2008-05-27" title="">
<body>
*driving_simulator_gm*[GoogleMapsAPI]自動車シミュレーター＋Google Maps
&lt;a href=&quot;http://geoquake.jp/webgame/DrivingSimulatorGM/&quot;&gt;2D自動車シミュレーター on Google Maps&lt;/a&gt;がすごい。
&gt;&lt;center&gt;&lt;a href=&quot;http://geoquake.jp/webgame/DrivingSimulatorGM/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080527/20080527092935.png&quot; width=&quot;350&quot; height=&quot;244&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
単体の&lt;a href=&quot;http://geoquake.jp/webgame/DrivingSimulator/&quot;&gt;自動車シミュレーター&lt;/a&gt;を公開されている方なだけあってよくできてるなぁ。

ブログを見たら、&lt;a href=&quot;http://geoquake.jp/blog/2008/05/21/engrish/&quot;&gt;なんだかGoole Maps APIの担当者から連絡きた&lt;/a&gt;そうで。確かにここまで作りこんでたら担当者も嬉しくなって、連絡せずにはいられなくなりそう。

ということで、自分も役に立たないサンプルばっかり作ってないで、たまにはまともなものを作りこんでみよう、と思った。[完成したら公開する]
</body>
<comments>
<comment>
<username>korinchan</username>
<body>ご紹介ありがとうございます。もともと、Google Maps APIをこういう用途に使ってしまっていいんだというのは、nitoyonさんの鈴鹿サーキット試走で教えていただきました。大感謝！</body>
<timestamp>1212127073</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>こちらこそありがとうございます。&lt;br&gt;あそこまでリアルだと衝突判定用の障害物データを入力したくなりますね…！</body>
<timestamp>1212301966</timestamp>
</comment>
</comments>
</day>
<day date="2008-05-28" title="">
<body>
*it_study_calendar*すさまじく充実してる IT 勉強会カレンダー
ここ最近、技術系の勉強会がものすごく多い印象がある。毎日どこかで誰かがやってるんじゃないの、と思ってたら、本当にやっているらしい。

&gt;&lt;center&gt;&lt;a href=&quot;https://www.google.com/calendar/embed?src=fvijvohm91uifvd9hratehf65k%40group.calendar.google.com&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080528/20080528093926.jpg&quot; width=&quot;450&quot; height=&quot;324&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

これは id:hanazukin さんが Google カレンダーで運営中の &lt;a href=&quot;https://www.google.com/calendar/embed?src=fvijvohm91uifvd9hratehf65k%40group.calendar.google.com&quot;&gt;IT 勉強会カレンダー&lt;/a&gt;。休日だけでなく、平日もぎっしり詰まっていて衝撃を受ける。

例えば、今週土曜日は日本全国で14個の勉強会が開催されるらしい。そんなにやってるのか！！

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080528/20080528093927.png&quot; width=&quot;312&quot; height=&quot;293&quot;&gt;

勉強会名をクリックすると、場所と申し込みページが表示される。

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080528/20080528094351.png?changed=1211935517&quot; width=&quot;350&quot; height=&quot;231&quot;&gt;

これはすごいといわざるをえない。

あの勉強会の情報が載ってないよ！というのがあれば、id:hanazukin さんにメールすると記載してくれるみたい。伝えるときのガイドラインは&lt;a href=&quot;http://d.hatena.ne.jp/hanazukin/20080603/1212461856&quot;&gt;IT勉強会カレンダーに情報を下さる方へ&lt;/a&gt;を参照あれ。ただ、協力しようと思って探してみたけど、自分が知ってる勉強会は全部記載されていた…。すさまじい。

ちなみに、新着の勉強会は &lt;a href=&quot;http://www.google.com/calendar/feeds/fvijvohm91uifvd9hratehf65k@group.calendar.google.com/public/basic&quot;&gt;こちらの RSS&lt;/a&gt; から購読できるようなので、興味のある人は合わせてどうぞ。

関連エントリ：
-&lt;a href=&quot;http://d.hatena.ne.jp/hanazukin/20080421/1208750760&quot;&gt;勉強会/セミナ情報を収集している場所 - インフラ管理者の独り言（はなずきん＠酒好テム管理者）&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/hanazukin/20080514/1210731961&quot;&gt;IT 勉強会カレンダーのFeed紹介しておきます - インフラ管理者の独り言（はなずきん＠酒好テム管理者）&lt;/a&gt;

(追記)

マッシュアップ例：
-&lt;a href=&quot;http://utf-8.jp/tool/calsearch.html&quot;&gt;IT 勉強会カレンダー検索&lt;/a&gt; （JavaScript で検索機能を実装）
-&lt;a href=&quot;http://masarusato.com/blog/?p=98&quot;&gt;no-agenda - IT 勉強会カレンダーのFeedを自分向けにしてみた&lt;/a&gt; (Yahoo! Pipesで絞り込み)
</body>
<comments>
<comment>
<username>hanazukin</username>
<body>うわぉ。紹介ありがとうございますー。&lt;br&gt;みんなで情報共有が目的なので、がしがし勉強会情報求ム！って感じです。</body>
<timestamp>1211943974</timestamp>
</comment>
<comment>
<username>sabotenman</username>
<body>はじまして。&lt;br&gt;こんなカレンダーがあるんですね！&lt;br&gt;私も衝撃が走りました！</body>
<timestamp>1211986067</timestamp>
</comment>
<comment>
<username>suyasu</username>
<body>これはすごい便利ですね～！&lt;br&gt;しかし思ってた以上に勉強会って開催されてるんですね</body>
<timestamp>1212024500</timestamp>
</comment>
<comment>
<username>iwashi</username>
<body>管理人はどうやって情報を集めアップしているのだろう？？&lt;br&gt;まさか手作業？？</body>
<timestamp>1212482695</timestamp>
</comment>
</comments>
</day>
<day date="2008-05-29" title="">
<body>
*flash_zero_day*Flash Player最新版にゼロデイでプログラム実行される脆弱性 (一部誤報?)
**追記その１ (2008/5/29 11:00)
Adobe からの報告によると、&lt;strong&gt;最新版では再現してない、Symantecにも確認を取った&lt;/strong&gt;とのこと。ただ、一部で最新版でもクラッシュするという&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0805/29/news030.html&quot;&gt;報告もある&lt;/a&gt;ようなので、結論を出すのはもう少し待ったほうがよさげ。

Adobe の報告を無理やり日本語訳するとこんな感じ。
&gt;&gt;
Flash Player に対する攻撃コードに関する追加情報です。攻撃は &lt;a href=&quot;http://www.adobe.com/go/apsb08-11&quot;&gt;reported by Mark Dowd of the ISS X-Force and wushi of team509, that was resolved in Flash Player 9.0.124.0 &lt;/a&gt;(CVE-2007-0071) で見つかった既知の脆弱性を利用しているようです。未知の脆弱性を突いている訳ではないので、最新の Flash Player 9.0.124.0 はこの攻撃の影響を受けません。攻撃コードについてはまだ調査中であり、新しい情報が出てき次第報告しますが、皆様におかれましては&lt;a href=&quot;http://www.adobe.com/go/getflashplayer&quot;&gt;最新の Flash Player 9.0.124.0&lt;/a&gt; を導入していただくようお願いいたします。

追記： Symantec 社から「Flash Player 9.0.124.0 の全バージョンが今回見つかった攻撃コードに対して脆弱ではない」との確証を得ました。
&gt;http://blogs.adobe.com/psirt/2008/05/potential_flash_player_issue_u_1.html:title&gt;
Here’s an update on our progress investigating the recent reports of a potential Flash Player exploit in the wild. The exploit appears to be taking advantage of a known vulnerability, &lt;a href=&quot;http://www.adobe.com/go/apsb08-11&quot;&gt;reported by Mark Dowd of the ISS X-Force and wushi of team509, that was resolved in Flash Player 9.0.124.0 &lt;/a&gt;(CVE-2007-0071). This exploit does NOT appear to include a new, unpatched vulnerability as has been reported elsewhere &amp;#8211; customers with Flash Player 9.0.124.0 should not be vulnerable to this exploit. We’re still looking in to the exploit files, and will update everyone with further information as we get it, but for now, we strongly encourage &lt;a href=&quot;http://www.adobe.com/go/getflashplayer&quot;&gt;everyone to download and install the latest Flash Player update, 9.0.124.0&lt;/a&gt;.

UPDATE: We've just gotten confirmation from Symantec that all versions of Flash Player 9.0.124.0 are not vulnerable to these exploits.
&lt;&lt;
&lt;&lt;

念のため繰り返しますが、日本語は私が勝手に訳したものです。原文は [http://blogs.adobe.com/psirt/2008/05/potential_flash_player_issue_u_1.html:title] です。

ブックマークコメントで情報をくれた id:kems さん、ありがとうございます。
(/追記 2008/5/29 11:00 ここまで)

**追記その２ (2008/5/29 13:00)
Adobe の上条さんのブログにも情報公開。&lt;a href=&quot;http://cuaoar.jp/2008/05/flash-player-4.html&quot;&gt;akihiro kamijo: Flash Player の脆弱性に関する件のアップデートです&lt;/a&gt;。

上で紹介してる英語のブログを日本語で砕いて説明しています。新しい情報はありません。あくまで経過報告である点が強調されていますね。
&gt;http://cuaoar.jp/2008/05/flash-player-4.html:title&gt;
今回のアタックは 一部に報道されていたように zero-day アタックではなく、最新のバージョンである Flash Player 9.0.124.0 では再現しないことが Symantec 社により確認されたそうです。ただし、この blog 記事の内容は Adobe からの正式な発表ではありませんので、あくまで経過報告としてお伝えしている旨ご了解ください。
&lt;&lt;

(/追記 2008/5/29 13:00 ここまで)

**追記その３ (2008/5/30 19:00)
最新版では影響を受けない、ということで確定のようです。
-&lt;a href=&quot;http://japan.cnet.com/news/sec/story/0,2000056024,20374243,00.htm&quot;&gt;Flash Playerに対する攻撃はゼロデイでなかった--シマンテックが報告を修正:ニュース - CNET Japan&lt;/a&gt;
Adobe による情報はこちら。
-&lt;a href=&quot;http://blogs.adobe.com/psirt/2008/05/more_information_on_recent_fla.html&quot;&gt;Adobe Product Security Incident Response Team (PSIRT): More information on recent Flash Player exploit&lt;/a&gt;
-&lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2008/05/flash_flash_pla.html&quot;&gt;akihiro kamijo: Flash Player の脆弱性の件のフォロー&lt;/a&gt;

(/追記 2008/5/30 19:00 ここまで)

&gt;&lt;p&gt;.&lt;p&gt;.&lt;p&gt;.&lt;p&gt;&lt;

でかい脆弱性が見つかった模様。

:JPCERT:&lt;a href=&quot;http://www.jpcert.or.jp/at/2008/at080009.txt&quot;&gt;Adobe Flash Player の未修正の脆弱性に関する注意喚起&lt;/a&gt;
:ITPro:&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/NEWS/20080528/304425/&quot;&gt;Flash Player最新版に不正コードを実行される脆弱性，Symantecが警告：ITpro&lt;/a&gt;
:IT Media:&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0805/28/news018.html&quot;&gt;既に攻撃多発か？　：Flash Playerにゼロデイの脆弱性、大規模被害の恐れも&lt;/a&gt;
:INTERNET Watch:&lt;a href=&quot;http://internet.watch.impress.co.jp/cda/news/2008/05/28/19718.html&quot;&gt;Flash Playerに新たな脆弱性、サイト改竄と組み合わせた攻撃も発生&lt;/a&gt;
:CNET Japan:&lt;a href=&quot;http://japan.cnet.com/news/sec/story/0,2000056024,20374131,00.htm&quot;&gt;Adobe Flash Playerに未修整の脆弱性、JPCERT/CCが注意喚起:ニュース&lt;/a&gt;
:セキュリティホール memo:&lt;a href=&quot;http://www.st.ryukoku.ac.jp/~kjm/security/memo/2008/05.html#20080528_Flash&quot;&gt;Adobe Flash Player の未修正の脆弱性に関する注意喚起&lt;/a&gt; (各種最新情報へのリンク)
:オジリナルのSecurityFocus社による警告（英語）:&lt;a href=&quot;http://www.securityfocus.com/bid/29386/info&quot;&gt;Adobe Flash Player SWF File Unspecified Remote Code Execution Vulnerability&lt;/a&gt;

分かりやすく説明すると、&lt;strong&gt;悪意のあるページを見ただけでウイルスに感染する危険性がある&lt;/strong&gt; ということです。しかも、攻撃能力を持った SWF が世の中に登場しているようです。Zero Day な Remote Code Execution ですよ。ひえー。

最新版の Flash Player でも影響を受けるため、現状で取れる対策はなし。JavaScript をオフにする Flash Player をアンインストールする、といった消極的対応をとるしかなさそうです。

私はアンチウイルスソフトは使いたくない人なので、メインで使ってるブラウザの Flash Player をアンインストールしました。

記事によると、Symantec では「&lt;a href=&quot;http://www.symantec.com/security_response/writeup.jsp?docid=2008-052714-3021-99&quot;&gt;Downloader.Swif.C&lt;/a&gt;」という名前のウイルスとして認定したので、Norton な人はウイルスパターンを更新すると何とかなるのかもしれません。

(5月29日 1:00追記) McAfee と TrendMicro のサイトを日米両方とも見たけどそれらしい情報は見つからなかった。

asin:B000VP9RPS:detail
</body>
</day>
<day date="2008-05-30" title="">
<body>
*google_earth_plugin*Google Earth API が公開されましたね（ドライビングゲームのサンプルも！）
&lt;a href=&quot;http://code.google.com/apis/earth/&quot;&gt;Google Earth API&lt;/a&gt; が公開されました。あの Google Earth をブラウザに埋め込めるようになったようですね。Flash ではなく、専用のプラグインを利用しているので、まずはインストールが必要です。

最初試したら拡大と回転しかできないように見えたのですが、拡大率を上げれば傾くようです。サンプルの中には、&lt;a href=&quot;http://www.google.com/earth/plugin/examples/milktruck/&quot;&gt;ドライビングゲーム&lt;/a&gt; みたいなものも。しかも、でこぼこした地面の上を走れる！　すごい。

ドライビングゲームはデモムービーにも登場するので、プラグインをインストールしたくない人はこちらが参考になるでしょう。

[http://www.youtube.com/watch?v=6mrG_bsqC6k:movie]&lt;noscript&gt;(&lt;a href=&quot;http://www.youtube.com/watch?v=6mrG_bsqC6k&quot;&gt;デモムービー&lt;/a&gt;)&lt;/noscript&gt;

プラグインのインストールが前提になるので、ちょっと壁は厚いですが、ブラウザで Google Earth というのはなんとも夢が広がりますね。

**Google Earth と私（昔話）
隔世の感があったので、ちょっと昔話。

１年半ほど前、&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/2.html&quot;&gt;Google Earth でもドライビング！&lt;/a&gt; というのを作って公開した。当時はまだドキュメントがなかった Google Earth の COM を叩いて、HTA から Google Earth を操作するものだった。

COM のメソッド一覧からできることを想像して試していったが、KML でアイテムを配置したり、画像を overlay したり、カメラの位置を変えたりするぐらいの機能しかなかった。API 経由でできることが限られていたので、やりたいことの半分ぐらいしかできなかったが、１週間ほどで無理やり形にしたのを覚えている。

「Google Earth でもドライビング！」を公開して１週間後、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20061001/p1&quot;&gt;Google Earth COM APIがβ版として公開された&lt;/a&gt;。勝手な想像だけど、Google の人が「使う人がいるならドキュメントを公開しちゃおう」と思ったのかもしれない。

それからしばらくは Google Earth の最新情報を追うのはやめていたけど、昨日、Google Earth API としてブラウザ用のプラグインが公開された。サンプルのドライビングゲームは、車がでこぼこの地面を走りまくるし、地表の傾きに応じて車の傾きも変わっていた。１年半前には絶対にできなかったものがサンプルとして公開されていた。

Google Earth を使った楽しいアプリケーションが登場するのはこれからだ。１年半前に夢見た未来がやっと今、始まった。
</body>
</day>
<day date="2008-06-01" title="">
<body>
*open_counter*はてなカウンターを晒す
&lt;a href=&quot;http://d.hatena.ne.jp/fk_2000/20080527/p4&quot;&gt;はてなカウンターを公開設定にするのが流行っている&lt;/a&gt;らしいので、自分も公開してみた。

-&lt;a href=&quot;http://counter.hatena.ne.jp/nitoyon/?cid=1&quot;&gt;はてなカウンター nitoyon てっく煮ブログ(id:1)&lt;/a&gt;

例えば、５月の日別アクセス数は&lt;a href=&quot;http://counter.hatena.ne.jp/nitoyon/report?cid=1&amp;date=2008-05-01&amp;mode=access&amp;type=monthly&quot;&gt;こんな感じ&lt;/a&gt;。

&gt;&lt;center&gt;&lt;a href=&quot;http://counter.hatena.ne.jp/nitoyon/report?cid=1&amp;date=2008-05-01&amp;mode=access&amp;type=monthly&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080601/20080601154410.png&quot; width=&quot;450&quot; height=&quot;554&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

やはり休みの日はアクセスが落ちている。特に上旬は大型連休の影響で落ち込んでいる。月末にぐんと伸びてるのがはてブでホットエントリ入りしたとき。

RSS は全文配信の設定にしてるんだけど、実際にブログにアクセスしないとFlash のサンプルを見れないので、他のサイトに比べて RSS リーダーからの流入率が高めになってるのかもしれない。

記録をとり始めた2007年10月頃は１日500前後のアクセスだったけど、最近は倍の1000まで増ているようだ。昨年10月頃の方が記事のクオリティは高かったと思うんだけど、あの頃のがんばりが今のアクセス数に近づいていると信じよう。

皆様、ご覧いただきありがとうございます。これからもよろしくお願いします。
</body>
</day>
<day date="2008-06-02" title="">
<body>
*jsdokan*[JavaScript]JSDokan で JSON をファイルシステムに
&lt;a href=&quot;http://d.hatena.ne.jp/yukoba/20080527/p1&quot;&gt;Windows版FUSE Dokan がオープンソースになったよ！！ - yukobaの日記&lt;/a&gt; が面白そうだったので、ちょっと触ってみた。

Dokan は Windows でファイルシステムを作るためのライブラリ。C, .NET, Ruby から気軽にファイルシステムが使えるようになる。それを id:yukoba さんは Java で動くようにして、さらに Rhino を使って JavaScript 製のファイルシステムをデモしている。

それならば、と C# 経由で JScript を叩くライブラリを作ってみた。題して「&lt;strong&gt;JSDokan&lt;/strong&gt;」。

**JSDokan のサンプル「JsonFS」
JSDokan を使ったサンプルとして JSON をファイルシステムにする「JsonFS」というのを作ってみた。

例えば、このような JSON が...
&gt;|javascript|
private var json:Object = {
    'object1' : {
        '1-1' : &quot;hoge\r\nfuga&quot;,
        '1-2' : 'hoge'
    },
    'object2' : {
        '2-1' : 'foo',
    },
    'array1' : [
        'value1', 'value2', 'value3'
    ],
    'param1' : 'value1',
    'param2' : 'value2'
};
||&lt;
こんなファイル構造になる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080602/20080602114055.jpg&quot; width=&quot;400&quot; height=&quot;268&quot;&gt;&lt;/center&gt;&lt;

オブジェクトと配列がフォルダになる。ファイルの中にはちゃんと値が入るように実装した。

JavaScript のソースコードは &lt;a href=&quot;http://coderepos.org/share/browser/lang/csharp/JSDokan/samples/JsonFS.js&quot;&gt;こんなの&lt;/a&gt;。90行足らずの JavaScript でファイルシステムが作れるなんて！

**JSDokan の使い方
JSDokan のバイナリは&lt;a href=&quot;http://coderepos.org/share/browser/lang/csharp/JSDokan/bin/Release/JSDokan.zip?rev=13056&amp;format=raw&quot;&gt;こちら&lt;/a&gt;。超α版なのでバーチャルマシンなどでの検証を推奨。

マウントするには Dokan をインストールした上で、
&gt;||
JSDokan JsonFS.js J
||&lt;
と実行する。１つ目のパラメータが JavaScript、２つ目のパラメータがドライブ名。

アンマウントするには、Dokan 付属の dokanctl.exe で dokanctl.exe /u J と実行する。

ただし、JSDokan の実行には、&lt;a href=&quot;http://www.microsoft.com/downloads/thankyou.aspx?familyId=0856eacb-4362-4b0d-8edd-aab15c5e04f5&amp;displayLang=ja&quot;&gt;.NET Framework 2.0 ランタイム&lt;/a&gt; が必要です。また、DokanNet のパッケージに入っているバイナリが一部古いバージョンのようなので、JSDokan のパッケージに最新版の DokanNet バイナリを含めています。

JSDokan は MIT ライセンスとします。

**ソースコード
ソースは Coderepos にうｐした。
-&lt;a href=&quot;http://coderepos.org/share/browser/lang/csharp/JSDokan&quot;&gt;JSDokan&lt;/a&gt; (&lt;a href=&quot;http://svn.coderepos.org/share/lang/csharp/JSDokan&quot;&gt;svn&lt;/a&gt;)
-&lt;a href=&quot;http://coderepos.org/share/browser/lang/csharp/JSDokan/samples/JsonFS.js&quot;&gt;JsonFS.js&lt;/a&gt; (&lt;a href=&quot;http://svn.coderepos.org/share/lang/csharp/JSDokan/samples/JsonFS.js&quot;&gt;svn&lt;/a&gt;)
</body>
</day>
<day date="2008-06-03" title="">
<body>
*perl_open*[perl]Perl 2008年のファイルオープン
&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/COLUMN/20080528/304549/&quot;&gt;第1回　Perlの文法の基本：ITpro&lt;/a&gt; という記事の &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://itpro.nikkeibp.co.jp/article/COLUMN/20080528/304549/&quot;&gt;はてブコメント&lt;/a&gt;を見ていたら、Perl なすごい人達が文句言ってた。

&gt;&gt;
&lt;a href=&quot;/otsune/&quot;&gt;&lt;img src=&quot;http://www.hatena.ne.jp/users/ot/otsune/profile_s.gif&quot; class=&quot;hatena-id-icon&quot; alt=&quot;otsune&quot; title=&quot;otsune&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/otsune/20080602#bookmark-8806292&quot;&gt;otsune&lt;/a&gt;  &lt;span class=&quot;comment&quot;&gt;2006年のhyuki Catalyst記事を載せるのもアレなのに2003年の記事を載せるのは無しだろ……open IN, ...のあたりは有害情報なので全力で見逃せ&lt;/span&gt;&lt;br&gt;
&lt;a href=&quot;/TAKESAKO/&quot;&gt;&lt;img src=&quot;http://www.hatena.ne.jp/users/TA/TAKESAKO/profile_s.gif&quot; class=&quot;hatena-id-icon&quot; alt=&quot;TAKESAKO&quot; title=&quot;TAKESAKO&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/TAKESAKO/20080602#bookmark-8806292&quot;&gt;TAKESAKO&lt;/a&gt; &lt;span class=&quot;comment&quot;&gt; ちょｗ→出典：日経Linux 2003年7月号　125ページより&lt;/span&gt;&lt;br&gt;
&lt;a href=&quot;/miyagawa/&quot;&gt;&lt;img src=&quot;http://www.hatena.ne.jp/users/mi/miyagawa/profile_s.gif&quot; class=&quot;hatena-id-icon&quot; alt=&quot;miyagawa&quot; title=&quot;miyagawa&quot; width=&quot;16&quot; height=&quot;16&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/miyagawa/20080602#bookmark-8806292&quot;&gt;miyagawa&lt;/a&gt;  &lt;span class=&quot;comment&quot;&gt; 2008年にこの記事はねーよ、と思ったら2003年の記事をいまさら再掲か。なんでわざわざ古い記事を新しいものかのように出して混乱させる？&lt;/span&gt;
&lt;&lt;

問題があるというソースコードはこんなの。
&gt;|perl|
open IN, '&lt;/etc/passwd';
||&lt;
えー！　どこが問題あるのかさっぱり分からん！！！！！！
====
**調べてみた
2008年流の Perl な書き方を調べるなら &lt;a href=&quot;http://perl-users.jp/&quot;&gt;perl-users.jp&lt;/a&gt;。

早速見つけた。oldtype と modern の書き方が比較されている。
&gt;http://perl-users.jp/nowpast.html:title&gt;
open
-oldtype: open FH, &quot;filename&quot; or die $!; 
-modern: open my $fh, '&lt;', 'filename' or die $!; または file('filename')-&gt;open('r') とか 
&lt;&lt;

**まず $! が分からない
oldtype の $! すら理解できない自分…。Perl は特殊変数が多くて大変なんだよなぁ。しかも、検索エンジンで検索できないのが困り者。

こういうときは、&lt;a href=&quot;http://perldoc.perl.org/perlvar.html&quot;&gt;perlvar&lt;/a&gt; を眺める。どうやら $! はエラーメッセージになるらしい。
&gt;&gt;
If used as a string, yields the corresponding system error string.
&lt;&lt;
どれどれ。
&gt;|sh|
&gt; perl -e &quot;open FH, '__not__found__' or die $!&quot;
No such file or directory at -e line 1.
||&lt;
おー、確かに。

数値リテラルだとエラーコードになるらしい。どれどれ...
&gt;|sh|
&gt; perl -e &quot;open FH, '__not__found__' or print int($!)&quot;
2
||&lt;
ほんとだ。

**MODE を分ける
それでは、modern その１のコードを見てみる。
&gt;|perl|
open my $fh, '&lt;', 'filename' or die $!;
||&lt;
謎だ。

困ってても仕方がないので、perldoc の &lt;a href=&quot;http://perldoc.perl.org/functions/open.html&quot;&gt;open&lt;/a&gt; を見てみた。いくつもの書き方があるようだ。
&gt;|
open FILEHANDLE,EXPR 
&lt;strong&gt;open FILEHANDLE,MODE,EXPR&lt;/strong&gt;
open FILEHANDLE,MODE,EXPR,LIST 
open FILEHANDLE,MODE,REFERENCE 
open FILEHANDLE 
|&lt;
なるほど。今回は２番目の形になってる。MODE を分離して書けるのはセキュリティ的にも素敵だ。これは明日からでも使いたい感じ。


**my $fh の謎
問題は my $fh。なんだこの書き方は。

open の説明をみても良く分からなかったので、&lt;a href=&quot;http://perldoc.perl.org/perlopentut.html&quot;&gt;perlopentut&lt;/a&gt; を見てみた。

そしたら、&lt;a href=&quot;http://perldoc.perl.org/perlopentut.html#Indirect-Filehandles&quot;&gt;Indirect Filehandles&lt;/a&gt; にズバリそのものの記述が（日本語は私が訳したもの）。
&gt;&gt;
open の第一引数はファイルハンドルのリファレンスを指定することもできます。Perl 5.6 では、第一引数が初期化されていない場合、Perl はファイルハンドルを自動的に作成し、第一引数にリファレンスを代入します。
&gt;&gt;
open's first argument can be a reference to a filehandle. As of perl 5.6.0, if the argument is uninitialized, Perl will automatically create a filehandle and put a reference to it in the first argument
&lt;&lt;
&lt;&lt;
なるほど。初期化されてない変数を渡せるわけね。

しかし、メリットがいまいち分からん。続きを読む（同じく、日本語は私が勝手に訳したもの）。
&gt;&gt;
Indrect filehandle を使うと、名前空間の扱いが簡単になります。ファイルハンドルはパッケージ空間に対して global なので、例えば２つのサブルーチンで INFILE を開くとクラッシュしてしまいます。indirect filehandle を利用して my $infile を開いた場合にはクラッシュする心配はありませんし、それ以後に名前の衝突が発生する恐れもありません。
&gt;&gt;
Indirect filehandles make namespace management easier. Since filehandles are global to the current package, two subroutines trying to open INFILE will clash. With two functions opening indirect filehandles like my $infile , there's no clash and no need to worry about future conflicts.
&lt;&lt;
&lt;&lt;
なるほど。これは安心。

open IN, ... 形式がグローバル変数で、open my $in, ... がローカル変数、というイメージ。

読んだり閉じたりするには次のようにする。
&gt;|perl|
print &lt;$fh&gt;;
close $fh;
||&lt;

Perl 5.6 以降限定だけど、これも明日から使えそうなテクニックだ。

**modern その２
modern その２はお手上げ。
&gt;|perl|
file('filename')-&gt;open('r')
||&lt;
file 関数ってなんだ？？　なんかのモジュール？？

(追記) コメント欄でkzysさんに教えてもらいました。Path::Class モジュールのようです（&lt;a href=&quot;http://search.cpan.org/dist/Path-Class/lib/Path/Class.pm&quot;&gt;Path::Class&lt;/a&gt;）。ありがとうございます。ファイルやディレクトリをたどるのが簡単になりそうですね。

**まとめ
-Perl は奥が深い。難しい。
-ハブサイトは初心者にとってありがたい。

(追記) 弾さんも添削してた。ありがたや。参考になります。
-&lt;a href=&quot;http://blog.livedoor.jp/dankogai/archives/51060112.html&quot;&gt;404 Blog Not Found:perl -　勝手に添削 - Perl入門#1@ITPro&lt;/a&gt;
</body>
<comments>
<comment>
<username>kzys</username>
<body>「なんかのモジュール」は Path::Class です。&lt;br&gt;http://search.cpan.org/dist/Path-Class/</body>
<timestamp>1212444103</timestamp>
</comment>
<comment>
<username>tokuhirom</username>
<body>http://perl-users.jp/nowpast.html&lt;br&gt;&lt;br&gt;追記しておきました :)</body>
<timestamp>1212455712</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます！</body>
<timestamp>1212544923</timestamp>
</comment>
</comments>
</day>
<day date="2008-06-05" title="">
<body>
*csharp_jscriptcodeprovider*[JavaScript][C#]C#の JScriptCodeProvider で JScript.NET と仲良くする
C# からJScriptを呼び出すのは楽しい。

何ができるかというと、JScript のソースコードを C# 側で実行時にコンパイルできる。コンパイル後のメソッドを C# から呼び出せたりする。逆に、JScript 側から C# 側のメソッドをコールバックすることもできる。コンパイル結果は DLL として保存もできる。

ってことで、C# や VB.NET のアプリを作ってる人は、JScriptCodeProvider を使って JScript を組み込めば、「スクリプト処理系」を手に入れられるわけだ。プラグインにするもよし、設定ファイルに使うもよし。あ、あと、ちょっと努力すれば、VBScript も組み込めるので、スーツな人も大喜び。

詳しくは &lt;a href=&quot;http://dobon.net/vb/dotnet/programing/eval.html&quot;&gt;文字列の計算式の計算結果を取得する: DOBON.NET&lt;/a&gt; の JScriptCodeProvider を使う方法が参考になる。このページでは CompileAssemblyFromSource() メソッドを使って文字列からコンパイルする方法を紹介しているが、JSDokan では CompileAssemblyFromFile() を使ってファイルからコンパイルしている。この方法が気になる人は、&lt;a href=&quot;http://coderepos.org/share/browser/lang/csharp/JSDokan?rev=13056&quot;&gt;JSDokan&lt;/a&gt; の &lt;a href=&quot;http://coderepos.org/share/browser/lang/csharp/JSDokan/Program.cs?rev=13056&quot;&gt;Program.cs&lt;/a&gt; を見て欲しい。

ここからは、DOBON.NET のページに書いていない外堀をざっくりメモしておく。

**JScript.NET
JScript.NET は ECMAScript 4 を先取りしまくっていて、型付けやクラスをサポートしている。書き方は ActionScript 3 と全く同じ。

&gt;|javascript|
import System;

class Hoge{
    public function doHoge(filename:String):int{
        return 0;
    }
}
||&lt;
型は JavaScript でよく見る型以外でも、import さえしてやれば .NET のクラスは何でも利用できる。アプリで定義したクラスも ReferencedAssemblies として渡してやれば利用できる。ボーダレス！

調べてみたら、&lt;a href=&quot;http://www.microsoft.com/japan/msdn/columns/scripting/scripting07142000.aspx&quot;&gt;2000年に書かれた JScript.NET のドキュメント&lt;/a&gt;があって、そのころから ECMAScript 4 の仕様は固まってないのかよ、と思うとしみじみしてくる。

**配列を渡すには
C# から配列を渡す方法が分からなくてちょっと苦労した。

C# で Array を作るには ArrayPrototype.constructor.CreateInstance() とやって ArrayObject を作ってあげればできたんだけど、それだと C# と JScript の間での処理コストが大きい。

そこで、JScript.NET には「型指定された配列」として、String[] のような型が用意されている。今の ECMAScript4 でいうと、Vector&lt;String&gt; に該当するんだろけど、2000年当時にはそんな仕様なんてなかったのかもしれない。

ってことで、受け取る側のコードは次のようにする。

&gt;|javascript|
class Hoge{
    public function doHoge(hoge:String[]):int{
        // hoge を ふがほげ する
    }
}
||&lt;

**リファレンスを渡すには
JScript にはプリミティブな値を参照渡しする方法がない。一旦、配列に格納してあげて渡すようにした。かっこ悪いけど仕方ない（のかなぁ…）。

**感想
2008年になって Tamarin だとか SquirrelFish だとか、JavaScript をバイトコード化する技術が脚光を浴びだしてきたけど、2000年に同じようなものを MS が開発していたというのが興味深い。

今回、久々に JScript.NET と戯れたのだけど、相変わらず MSDN のドキュメントがあっさりしていて困る。それでも、C# 1.1 のときの IVsaEngine に比べて、C# 2.0 ではだいぶだいぶ直感的になっていた。少なくとも C#1.1 時代よりかは…。

さぁ、みんな JScript.NET で遊ぼうZE!

　

関連エントリ：
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20041008/p1&quot;&gt;JScriptやVBScriptを利用する - てっく煮ブログ&lt;/a&gt;：C や C#1.1 で利用する方法
</body>
</day>
<day date="2008-06-10" title="">
<body>
*mac_firefox3*[as]Mac 版 Firefox3 正式版の Flash Player は日本語入力できないらしい
&lt;a href=&quot;http://piro.sakura.ne.jp/latest/blosxom/mozilla/firefox/2008-06-10_feedback.htm&quot;&gt;Latest topics &gt; Mac版Firefox 3正式版に、日本人ユーザにとって結構致命的な問題が残ってしまいそうな件について - outsider reflex&lt;/a&gt; より。

Mac 版 の Firefox3 では Flash Player 上での日本語入力できないらしい。

ニコニコ動画に日本語のコメント入力できなかったり、Ustream で日本語チャットできなかったり、とFlash で上で文字入力をするサイトでの問題点が指摘されている。

今回のバグとは関係ないけど、Windows でも Flash 上での文字入力は使いにくくて、入力中の候補が変な場所に表示されたり、Ctrl-C でのコピーが失敗したりする。そういう前提もあって、昨年の秋に作った &lt;a href=&quot;http://tech.nitoyon.com/marubiru/&quot;&gt;丸ビルRSSリーダー&lt;/a&gt; ではテキストボックスは HTML で表示して、ExternalInterface 経由で Flash とやり取りするようにした。

とはいえ、Flex とかフル Flash のサイトではどうしようもない。困りましたね。&lt;a href=&quot;http://norahmodel.exblog.jp/9008326/&quot;&gt;norah'# : みんなガンガン Vote しようぜ!!&lt;/a&gt; によると、3.0.1 では修正されるようだけど…。

関連：
-&lt;a href=&quot;http://un-q.net/2008/06/mac_firefox3_flash.html&quot;&gt;Mac版Firefox3ではFlashに日本語入力ができないので (Unknown Quality)&lt;/a&gt;: 独自パッチがあたったものを導入する話。
-&lt;a href=&quot;http://subtech.g.hatena.ne.jp/mala/20080615/1213492297&quot;&gt;ニコニコ動画で日本語入力できない人のためのGreasemonkeyスクリプト - 金利0無利息キャッシング ? キャッシングできます - subtech&lt;/a&gt;: ニコニコだけでもなんとかする話。

*p1*[as][box2d]Box2dFlashAS3 を使った落ちゲー：ロールケーキプレイイングゲーム
RPG ではなく、実写のロールケーキを使った落ちゲーがおもしろい。

&gt;&lt;center&gt;&lt;a href=&quot;http://portal.nifty.com/2008/06/08/b/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080610/20080610102432.jpg&quot; width=&quot;444&quot; height=&quot;250&quot;&gt;&lt;br&gt;@nifty：デイリーポータルZ：ロールケーキプレイングゲーム&lt;/a&gt;&lt;/center&gt;&lt;

同じ種類のケーキが３つ並ぶと消えるんだけど、なんと升目の概念がない。衝突判定を Box2dFlashAS3 を使ってるからこその操作感だ。

一発ネタなんだけど意外に面白い。見てたらロールケーキが食べたくなってきた。ケーキ屋のサイトにこういうゲームがあったら、ついでに通販購入してしまいそうだ。

せっかくなので便乗してアフィリエイトしとく。

[rakuten:kagetudo:849090:detail]
[rakuten:kagetudo:816099:detail]
</body>
<comments>
<comment>
<username>ふるる</username>
<body>どうもlinuxでも似たような問題があるようです&lt;br&gt;ttp://www.d-toybox.com/studio/weblog/show.php?mode=single&amp;id=2008061500</body>
<timestamp>1213538161</timestamp>
</comment>
<comment>
<username>５８４</username>
<body>自分のWindows版Firefox3.0.6でも使えないorz</body>
<timestamp>1234030502</timestamp>
</comment>
<comment>
<username>５８４</username>
<body>自分のWindows版Firefox3.0.6でも使えないorz</body>
<timestamp>1234030656</timestamp>
</comment>
<comment>
<username>911</username>
<body>osxのFirefox4 betaで、再発してる・・・</body>
<timestamp>1293118320</timestamp>
</comment>
</comments>
</day>
<day date="2008-06-11" title="">
<body>
*flash_oop*[書籍]Flash OOP for AS3 が Amazon で予約開始
AS2 時代に異彩を放っていたと評判の isbn:4798106119:title の AS3 版が Amazon で予約開始になったようです。

-&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798116300/nitoyoncom-22/ref=nosim/&quot;&gt;FLASH OOP for ActionScript 3.0 &lt;/a&gt;

&lt;a href=&quot;http://cs3book.flashoop.jp/wiki/&quot;&gt;Wiki&lt;/a&gt; でオープンに執筆がされていた、というのも面白い試み。Wiki で試し読みもできますよ。

&lt;a href=&quot;http://cs3book.flashoop.jp/wiki/index.php?%E5%9F%B7%E7%AD%86%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC&quot;&gt;執筆メンバー&lt;/a&gt;も豪華！

via &lt;a href=&quot;http://un-q.net/2008/06/flash_oop_for_actionscript_30.html&quot;&gt;FLASH OOP for ActionScript 3.0 予約できる (Unknown Quality)&lt;/a&gt;
</body>
</day>
<day date="2008-06-12" title="">
<body>
*e4x_expression*[javascript][as]E4X の変数展開 深追い (1)
E4X の変数展開が &lt;a href=&quot;http://d.hatena.ne.jp/javascripter/20080611/1213137474&quot;&gt;E4Xで変数展開、テンプレート - 素人がプログラミングを勉強するブログ&lt;/a&gt; で取り上げられていた。

&gt;|javascript|
var foo=123;
&lt;&gt;変数fooは{foo}です。&lt;/&gt;.toString();
// &quot;変数fooは123です。&quot;
||&lt;

ほー。

**仕様書では
&lt;a href=&quot;http://os0x.g.hatena.ne.jp/os0x/20080611/1213154953&quot;&gt;E4XのリテラルXMLでの式評価 - 0x廃棄階層 - 統治局&lt;/a&gt; によると、仕様書には次のようなコードがあるらしい。
&gt;|javascript|
var tagname = &quot;name&quot;;
var attributename = &quot;id&quot;;
var attributevalue = 5;
var content = &quot;Fred&quot;;

var x = &lt;{tagname} {attributename}={attributevalue}&gt;{content}&lt;/{tagname}&gt;;
// &lt;name id=&quot;5&quot;&gt;Fred&lt;/name&gt;
||&lt;
タグ名にも属性名にも属性の値にもタグの中身にも使える模様。

仕様書によると、例えばタグ名は次のように解釈される。
&gt;||
XMLTagName : 
  { Expression } 
  XMLName 
||&lt;
{} で囲まれた部分は Expression（式）として評価される。文はダメ。

**試してみた
リテラル XML が評価されるときに中の式の評価も行われる。だから、コンパイル時に値が定まってなくてもOK。
&gt;|javascript|
function xml1(str){
  return &lt;test&gt;{str}&lt;/test&gt;;
}

xml1(&quot;Hello&quot;).toXMLString();
// &lt;test&gt;Hello&lt;/test&gt;
||&lt;

ってことは、演算とか関数呼び出しもOK。
&gt;|javascript|
function xml2(str){
  return &lt;test&gt;{str + &quot;,&quot; + str}&lt;/test&gt;;
}

xml2(&quot;Hello&quot;).toXMLString();
// &lt;test&gt;Hello,Hello&lt;/test&gt;
||&lt;
もいっちょ。
&gt;|javascript|
function xml3(str){
  return &lt;test&gt;{str.substr(2)}&lt;/test&gt;;
}

xml3(&quot;Hello&quot;).toXMLString();
// &lt;test&gt;llo&lt;/test&gt;
||&lt;

ってことは、無名関数実行してもいいよね。
&gt;|javascript|
function xml5(str){
  return &lt;test&gt;{(function(a){return a + a})(str)}&lt;/test&gt;;
}

xml5(&quot;Hello&quot;).toXMLString();
// &lt;test&gt;HelloHello&lt;/test&gt;
||&lt;
いけた。式であれば {} の中に function も入れれる。

ただ、XML リテラルのときしか展開されない。new XML() の中に入れてもダメ。
&gt;|javascript|
var a = 3;
new XML(&quot;&lt;hoge&gt;{a}&lt;/hoge&gt;&quot;).toXMLString()
// &lt;hoge&gt;{a}&lt;/hoge&gt;
||&lt;

**まとめ
ちょっと楽に書けそう。

→&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080613/p1&quot;&gt;その２に続く&lt;/a&gt;。

</body>
</day>
<day date="2008-06-13" title="">
<body>
*p1*[javascript][as]E4X の変数展開 深追い (2)
続き。変数展開するときに、どういうバイトコードになってるか気になったので調べてみた。

ActionScript のコードはこんなの。
&gt;|javascript|
var a = &lt;hoge&gt;{3}&lt;/hoge&gt;;
||&lt;
asc でコンパイルして、abcdump でダンプしたらこうなった。
&gt;||
  0         getlocal0
  1         pushscope
  2         findpropstrict      XML
  4         getproperty         XML
  6         pushstring          &quot;&lt;hoge&gt;&quot;
  8         pushbyte            3
  10        esc_xelem
  11        add
  12        pushstring          &quot;&lt;/hoge&gt;&quot;
  14        add
  15        construct           (1)
  17        getglobalscope
  18        swap
  19        setslot             1
  21        returnvoid
||&lt;
====
**new String() と比較
new String() するコードと比べてみる。
&gt;|javascript|
var a = new String(&quot;hoge&quot;);
||&lt;
ダンプしたらこうなった。
&gt;||
  0         getlocal0
  1         pushscope
  2         findpropstrict      String
  4         pushstring          &quot;hoge&quot;
  6         constructprop       String (1)
  9         getglobalscope
  10        swap
  11        setslot             1
  13        returnvoid
||&lt;

ふむ、似たような形になってるね。

**スタックをつむところだけ抜き出してみる
まずは String のほう。
&gt;||
  4         pushstring          &quot;hoge&quot;
  6         constructprop       String (1)
||&lt;

String は &quot;hoge&quot; をスタックにつんで、コンストラクタを呼び出してる。そのままだ。

対して、XML。
&gt;||
  6         pushstring          &quot;&lt;hoge&gt;&quot;
  8         pushbyte            3
  10        esc_xelem                    
  11        add
  12        pushstring          &quot;&lt;/hoge&gt;&quot;
  14        add
  15        construct           (1)
||&lt;
ちょっと複雑なので順番に。

まず、&quot;&lt;hoge&gt;&quot; という文字列をスタックにつむ。
&gt;||
   +----------------+
   |    &quot;&lt;hoge&gt;&quot;    |
---+----------------+---
||&lt;
続けて、3 もスタックにつむ。
&gt;||
   +----------------+
   |       3        |
   +----------------+
   |    &quot;&lt;hoge&gt;&quot;    |
---+----------------+---
||&lt;

次の、esc_xelem はなんだろう。

&lt;a href=&quot;http://www.adobe.com/devnet/actionscript/articles/avm2overview.pdf&quot;&gt;avm2overview.pdf &lt;/a&gt; によると、XML ノードの値を決定するためのオペレーションで、スタックから値を取り出して文字列に変換するらしい。変換には E4X で定義されている &lt;a href=&quot;http://www.ne.jp/asahi/nanto/moon/specs/ecma-357.html#sec-10.2&quot;&gt;ToXmlString()&lt;/a&gt; を使うようだ。

ってことで、esc_xelem 実行後はこうなる。
&gt;||
   +----------------+
   |      &quot;3&quot;       |
   +----------------+
   |    &quot;&lt;hoge&gt;&quot;    |
---+----------------+---
||&lt;
続けて、add。スタックから２つを取り出して足し算する。
&gt;||
   +----------------+
   |   &quot;&lt;hoge&gt;3&quot;    |
---+----------------+---
||&lt;
次に、&quot;&lt;/hoge&gt;&quot; を push して、add するので最終的には次のようになる。
&gt;||
   +----------------+
   |&quot;&lt;hoge&gt;3&lt;/hoge&gt;&quot;|
---+----------------+---
||&lt;
で、ここで construct を呼ぶので、new XML(&quot;&lt;hoge&gt;3&lt;/hoge&gt;&quot;) した結果がスタックに入るわけだ。

**まとめ
イメージ的には
&gt;|javascript|
var a = &lt;hoge&gt;{3}&lt;/hoge&gt;;
||&lt;
は
&gt;|javascript|
var a = new XML(&quot;&lt;hoge&gt;&quot;
              + ToXmlString(3)
              + &quot;&lt;/hoge&gt;&quot;);
||&lt;
というコードに変換される感じ。

{} の中身は ToXmlString() の引数として扱われる、というイメージで捉えておくと、前回の {} の中に無名関数突っ込んだやつが動いたのも納得できる。

実際には、ToXmlString は内部的な関数なので呼び出せないんだけど、あくまでイメージということで。

ところで、なんで急に ABC をやりだしたかというと、&lt;a href=&quot;http://d.hatena.ne.jp/mzp/&quot;&gt;みずぴー日記&lt;/a&gt; さんの &lt;a href=&quot;http://d.hatena.ne.jp/mzp/20080522/abc&quot;&gt;関数関連のABC&lt;/a&gt; や &lt;a href=&quot;http://d.hatena.ne.jp/mzp/20080518/var&quot;&gt;変数関係の命令&lt;/a&gt; という記事を読んで興味が沸いたから。

みずぴーさんは &lt;a href=&quot;http://d.hatena.ne.jp/mzp/19000202/scheme&quot;&gt;Scheme-abc&lt;/a&gt; という ABC を吐く Scheme コンパイラを OCaml で実装していたりする…。すごい！

あ、あと AVM2 の資料については、公式のものより &lt;a href=&quot;http://www.anotherbigidea.com/javaswf/avm2/AVM2Instructions.html&quot;&gt;AVM2 Instructions&lt;/a&gt; のほうが分かりやすかった。

</body>
</day>
<day date="2008-06-16" title="">
<body>
*as_3d_lessen1*[as]AS3.0 で 3D プログラミングを１から勉強する (1)
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080616/20080616033932.png&quot; width=&quot;433&quot; height=&quot;165&quot;&gt;&lt;/center&gt;&lt;

3D の原理をあまり知らなかったので、ActionScript 3.0 で１から勉強してみた。１からなのでフレームワークは使わず、自力で実装していく。

Web 上には色んな資料があってありがたいだけど、玉石混交な上に、有用なものでも一本道で幅の狭いものが多い。前提知識のない自分にとっては、資料間の関連性を理解するのが大変だった。

なので、なるべく簡単なところからスタートしつつ、広く浅く体験していくことを目標としてみる。まずは、四面体をワイヤーフレームで表示するところからスタートしよう。

**四面体を定義する
まずは、3次元上の点を表現する Point3D クラスを作る。
&gt;|javascript|
class Point3D {
    public var x:Number;
    public var y:Number;
    public var z:Number;

    public function Point3D(_x:Number = 0, _y:Number = 0, _z:Number = 0){
        x = _x;
        y = _y;
        z = _z;
    }
}
||&lt;
四面体を作るために、メインのクラスに４つの点を定義した。
&gt;|javascript|
public class Study3d1 extends Sprite{
    private var p1:Point3D = new Point3D(  0,   0, 100);
    private var p2:Point3D = new Point3D(100,   0,   0);
    private var p3:Point3D = new Point3D(  0, 100,   0);
    private var p4:Point3D = new Point3D(-50, -50, -50);
||&lt;

**２次元空間に表示する
３次元の点を２次元空間に描画する方法を考える。

とはいえ、一番最初のサンプルなので、真上（もしくは真下）から見たところを表示する。つまり、Z の値を無視して表示する。３次元空間上の(0, 0, 100) という点は、(0, 0) に表示する。

プロット先の座標を求めて（といっても、Zの値を無視するだけだけど）、線で結んでやれば四面体を真上から見た図ができた。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080616/20080616033931.png&quot; width=&quot;399&quot; height=&quot;221&quot;&gt;&lt;/center&gt;&lt;

**回転！
これだとあまりにも退屈なので、回転させてみよう。

カメラが回転するのは難しいので、四面体に回転してもらうことにする。こっちはちょー簡単。

ある点 p を原点周りに rad ラジアンだけ回転させるには
&gt;|
p.x =  Math.cos(rad) * x + Math.sin(rad) * y;
p.y = -Math.sin(rad) * x + Math.cos(rad) * y;
|&lt;
とする。(詳しく知りたい人は「回転行列」あたりのキーワードで検索すべし)

x と y を y と z に置き換えれば X 軸周りの回転になるし、z と x に置き換えれば Y 軸周りの回転になる。

マウスの位置に応じて Y 軸周りと Z 軸の周りに回転させるようにしてみた。回転後の座標を線で繋げば回転する四面体の完成だ。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FStudy3d1.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=300&amp;amp;title=3D+Study&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;

ソースはたった86行。ローテクだけど、回転し続けていれば立体に見えなくもない。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2&quot;&gt;第２回&lt;/a&gt;に続く。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1:title]
-[http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2:title]
-[http://d.hatena.ne.jp/nitoyon/20080618/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080620/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080623/as_3d_lessen5:title]
&gt;&lt;/div&gt;&lt;

今回のソースは以下に（86行）。

====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.geom.Point;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class Study3d1 extends Sprite{
        private var p1:Point3D = new Point3D(  0,   0, 100);
        private var p2:Point3D = new Point3D(100,   0,   0);
        private var p3:Point3D = new Point3D(  0, 100,   0);
        private var p4:Point3D = new Point3D(-50, -50, -50);

        private var canvas:Sprite = new Sprite();

        public function Study3d1(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            addChild(canvas);
            canvas.x = 150;
            canvas.y = 150;

            changeHandler(null);
            addEventListener(&quot;enterFrame&quot;, changeHandler);
        }

        private function changeHandler(event:Object):void {
            var pp1:Point3D = rotate(p1);
            var pp2:Point3D = rotate(p2);
            var pp3:Point3D = rotate(p3);
            var pp4:Point3D = rotate(p4);

            canvas.graphics.clear();
            drawPoint(pp1); drawPoint(pp2);
            drawPoint(pp3); drawPoint(pp4);
            drawLine(pp1, pp2); drawLine(pp1, pp3); drawLine(pp1, pp4);
            drawLine(pp2, pp3); drawLine(pp2, pp4); drawLine(pp3, pp4);
        }

        private function drawPoint(p:Point3D):void {
            canvas.graphics.beginFill(0xffffff);
            canvas.graphics.drawCircle(p.x, p.y, 10);
            canvas.graphics.endFill();
        }

        private function drawLine(p1:Point3D, p2:Point3D):void {
            canvas.graphics.lineStyle(3, 0xffffff);
            canvas.graphics.moveTo(p1.x, p1.y);
            canvas.graphics.lineTo(p2.x, p2.y);
            canvas.graphics.lineStyle();
        }

        private function rotate(_p:Point3D):Point3D {
            var ret:Point3D = new Point3D(_p.x, _p.y, _p.z);
            var p:Point;

            // y rotate
            p = rotate2d(ret.z, ret.x, stage.mouseX / 180 * Math.PI);
            ret.z = p.x; ret.x = p.y;

            // z rotate
            p = rotate2d(ret.x, ret.y, -stage.mouseY / 180 * Math.PI);
            ret.x = p.x; ret.y = p.y;

            return ret;
        }

        private function rotate2d(x:Number, y:Number, rad:Number):Point {
            var p:Point = new Point();
            p.x =  Math.cos(rad) * x + Math.sin(rad) * y;
            p.y = -Math.sin(rad) * x + Math.cos(rad) * y;
            return p;
        }
    }
}

class Point3D {
    public var x:Number;
    public var y:Number;
    public var z:Number;

    public function Point3D(_x:Number = 0, _y:Number = 0, _z:Number = 0){
        x = _x;
        y = _y;
        z = _z;
    }
}
||&lt;

</body>
<comments>
<comment>
<username>trshugu</username>
<body>スターフォックスの黎明期をおもいだしたぉ＾＾&lt;br&gt;スーファミのカセットの端子がちょっと増えてたのに驚いたもんです・・・</body>
<timestamp>1213611147</timestamp>
</comment>
<comment>
<username>popcorn</username>
<body>これにテクスチャーと光源、背景があれば、見栄えになりますね。</body>
<timestamp>1213628554</timestamp>
</comment>
<comment>
<username>Iridium</username>
<body>[珠玉混交」ではなく「玉石混淆」もしくは「玉石混交」かと思われ</body>
<timestamp>1213629762</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>Iridiumさん、ありがとうございます！　修正しました。</body>
<timestamp>1213634420</timestamp>
</comment>
</comments>
</day>
<day date="2008-06-17" title="">
<body>
*as_3d_lessen2*[as]AS3.0 で 3D プログラミングを１から勉強する (2) - 行列の導入
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080617/20080617020339.png&quot; width=&quot;448&quot; height=&quot;197&quot;&gt;&lt;/center&gt;&lt;
このまま実装を進めていくとソースが複雑になりそうなので少し地盤を固めておこう。

座標計算を簡潔にするために行列クラスを導入する。

**Matrix3D クラス
前回は軸の周りの回転を公式
&gt;|
p.x =  Math.cos(rad) * x + Math.sin(rad) * y;
p.y = -Math.sin(rad) * x + Math.cos(rad) * y;
|&lt;
を使って直接計算していたけど、ここを行列に置き換えてみる。

ちょうど、3D ライブラリ &lt;a href=&quot;http://five3d.mathieu-badimon.com/&quot;&gt;FIVe3D 2.1&lt;/a&gt; に Matrix3D クラスがあったのでこれを借用した。

X軸周りに rad ラジアン回転する演算は次のように書けるようになる。
&gt;|javascript|
// 回転前の点 p1 を定義
var p1:Point3D = new Point3D(0, 10, 20);

// rad ラジアン回転する行列を作成
var matrix:Matrix3D = new Matrix3D();
matrix.rotateX(rad);

// 行列に p1 を渡すと、回転後の座標が返ってくる
var p2:Point3D   = matrix.transformPoint(p1);
||&lt;
中でやってる計算は前回と全く同じなんだけども、計算式が Matrix3D クラスの中に隠蔽されている分、ソースがすっきりした。

この連載ではライブラリを極力使わない方針なのだけど、行列に関しては例外とさせていただく。さすがに行列演算をフルスクラッチするのは面倒だし、誰が作ってもだいたい同じになるので既存の資産を活用することにした。

PV3D にも同じようなことをする Matrix3D クラスがある。使い方はちょっと違うので要注意。

**行列を使うメリットってなんなのよ
行列と聞くと途端に拒否反応が出る人も多そうなんだけど、&lt;strong&gt;座標変換してくれるありがたい仕組み&lt;/strong&gt;ぐらいに考えておくとよいだろう。

さきほどの例では、行列 matrix は「X軸を中心に rad 回転する」という変換を表している。イメージ的には
&gt;|
      matrix1
p1 ------------&gt; p2
|&lt;
という感じ。点 p1 に matrix を適用すると、場所 p2 に移動する。p2 は p1 を X 軸を中心に rad 回転した場所になっている。

それでは、点 p1 を Y軸方向に rad1 回転したあと、Z 軸方向に rad2 回転させてみよう。ちょうど前回のサンプルのような感じだ。

普通に考えると次のようなコーディングになる。

&gt;|javascript|
// 回転前の点 from を定義
var p1:Point3D = new Point3D(0, 10, 20);

// Y 軸方向に rad1 ラジアン回転する行列 matrix1 を作成
var matrix1:Matrix3D = new Matrix3D();
matrix1.rotateY(rad);

// Z 軸方向に rad2 ラジアン回転する行列 matrix2 を作成
var matrix2:Matrix3D = new Matrix3D();
matrix2.rotateZ(rad2);

// matrix1 と matrix2 を適用
var p2:Point3D = matrix1.transformPoint(p2);
var p3:Point3D = matrix2.transformPoint(p3);
||&lt;

イメージとしては、こんな感じ。

&gt;|
      matrix1          matrix2
p1 ------------&gt; p2 ------------&gt; p3
|&lt;
p1 に matrix1 を適用して、次に matrix2 を適用している。もちろんこれで動くんだけど、例えば点の数が１万個あったとすると、行列の演算は２万回発生することになる。

実は、行列の効果は合成できるので、簡単に高速化できる。matrix1 の効果と matrix2 の効果をあらかじめ合成した行列を作っておく。イメージとしてはこんな感じ。
&gt;|
       matrix1 + matrix2 (=matrix3)
p1 ----------------------------------&gt; p3

※イメージをつかみやすいように「matrix1 + matrix2」と
  記述しているが、数学的には行列の積となる。
|&lt;
これだと、１万個の点があっても、それぞれに matrix3 を１回ずつ適用するだけでOK。合計１万回の演算で済むことになる。ざっくりだけど、座標変換の計算負荷が半分になる。

ソースコードで書くとこうなる。
&gt;|javascript|
// X軸とY軸の周りに回転する行列
var matrix3:Matrix3D = new Matrix3D();
matrix3.rotateY(rad1);
matrix3.rotateZ(rad2);

// 行列を適用
var p3:Point3D = matrix3.transformPoint(p1);
||&lt;

**整備結果
イメージは掴めただろうか。では、実践編。前回のコードを Matrix3D を使いながら拡張していこう。

立方体をいくつも配置してみた。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FStudy3d2.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=300&amp;amp;title=3D+Study2&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;

コアのコードはこんな具合。
&gt;|javascript|
    // 回転行列を作成
    var matrix:Matrix3D = new Matrix3D();
    matrix.rotateY(stage.mouseX / 180 * Math.PI);
    matrix.rotateZ(stage.mouseY / 180 * Math.PI);

    // 描画
    for each(var c:Cube in cubes){
        c.draw(canvas.graphics, matrix);
    }
||&lt;
まず、マウスの位置に応じて、回転する角度を決めて Matrix3D オブジェクトを作成している。そのあと、それぞれの立方体を表す Cube オブジェクトに Matrix3D オブジェクトを与えて、回転具合を伝えている。

Cube オブジェクトの draw() メソッドでは、与えられた行列に応じて座標変換を行って描画している。

前回よりも見た目も凝っているけど、Matrix3D を導入したたので行数はあまり変わらない。もしかしたら、前回よりも読みやすいかもしれない。

**まとめ
行列は座標変換する魔法の箱。理論が分からなくても、イメージを掴みさえすれば、ばんばん使っていったらいいんじゃなかろうか。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080618/as_3d_lessen3&quot;&gt;次回&lt;/a&gt;に続く。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1:title]
-[http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2:title]
-[http://d.hatena.ne.jp/nitoyon/20080618/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080620/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080623/as_3d_lessen5:title]
&gt;&lt;/div&gt;&lt;

ソースは以下に（95行）。
====
要 &lt;a href=&quot;http://five3d.mathieu-badimon.com/&quot;&gt;FIVe3D 2.1&lt;/a&gt; の five3d.geom.Matrix3D クラスと five3d.geom.Point3D クラス。
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import five3D.geom.Matrix3D;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class Study3d2 extends Sprite{
        private var canvas:Sprite;
        private var cubes:Array;

        public function Study3d2(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            cubes = [];
            cubes.push(new Cube(0, 0, 0, 50));
            cubes.push(new Cube(0, 100, 0, 20));
            cubes.push(new Cube(0, -100, 0, 20));
            cubes.push(new Cube(100, 0, 0, 20));
            cubes.push(new Cube(-100, 0, 0, 20));

            canvas = new Sprite();
            addChild(canvas);
            canvas.x = 250;
            canvas.y = 150;

            stage.addEventListener(&quot;mouseMove&quot;, changeHandler);
            changeHandler(null);
        }

        private function changeHandler(event:Event):void {
            canvas.graphics.clear();

            // 回転行列を作成
            var matrix:Matrix3D = new Matrix3D();
            matrix.rotateY(stage.mouseX / 180 * Math.PI);
            matrix.rotateZ(stage.mouseY / 180 * Math.PI);

            // 描画
            for each(var c:Cube in cubes){
                c.draw(canvas.graphics, matrix);
            }
        }
    }
}

import flash.display.Graphics;
import five3D.geom.Point3D;
import five3D.geom.Matrix3D;

class Cube {
    private var points:Array = [];

    public function Cube(x:Number, y:Number, z:Number, len:Number){
        var diff:Function = function(f:Boolean):Number{return f ? len / 2 : -len / 2;};

        // 立方体の頂点８つを作成する
        for(var i:int = 0; i &lt; 8; i++){
            var p:Point3D = new Point3D(x + diff(i % 4 % 3 == 0),  y + diff(i % 4 &lt; 2), z + diff(i &lt; 4));
            points.push(p);
        }
    }

    public function draw(g:Graphics, matrix:Matrix3D):void {
        // 回転後の各頂点の座標を計算
        var p:Array = [];
        for(var i:int = 0; i &lt; points.length; i++){
            var pt:Point3D = matrix.transformPoint(points[i]);
            drawPoint(g, pt);
            p.push(pt);
        }

        // 頂点の間を線で結ぶ
        for(i = 0; i &lt; 4; i++){
            drawLine(g, p[i], p[i + 4]);
            drawLine(g, p[i], p[(i + 1) % 4]);
            drawLine(g, p[i + 4], p[(i + 1) % 4 + 4]);
        }
    }

    private function drawPoint(g:Graphics, p:Point3D):void {
        g.beginFill(0xffffff);
        g.drawCircle(p.x, p.y, 3);
        g.endFill();
    }

    private function drawLine(g:Graphics, p1:Point3D, p2:Point3D):void {
        g.beginFill(0, 0);
        g.lineStyle(1, 0xffffff);
        g.moveTo(p1.x, p1.y);
        g.lineTo(p2.x, p2.y);
        g.lineStyle();
        g.endFill();
    }
}
||&lt;

</body>
<comments>
<comment>
<username>楽しみにしてます</username>
<body>すごくわかりやすく簡単でチープなコード(失礼)なので、VB5CCEなど無料で配布されてるプログラミング環境にも簡単に移植できてテストできます。&lt;br&gt;&lt;br&gt;思えば3Dプログラミングは、基礎を覚えるだけでもDirectXライブラリを&lt;br&gt;叩く下準備からはじめねばならず挫折を繰り返したものです。&lt;br&gt;&lt;br&gt;ありがたいです。</body>
<timestamp>1213685117</timestamp>
</comment>
</comments>
</day>
<day date="2008-06-18" title="">
<body>
*as_3d_lessen3*[as]AS3.0 で 3D プログラミングを１から勉強する (3) - 透視投影
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080618/20080618015334.png&quot; width=&quot;482&quot; height=&quot;224&quot;&gt;&lt;/center&gt;&lt;
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2&quot;&gt;前回&lt;/a&gt;までのサンプルでは、遠くのものも近くのものも同じ大きさで表示していた。これでは立体感がでないので、遠くのものほど小さく表示するようにしたい。

これを実現するには「投影」の方法を考えることになる。投影というのは、3D 上の点を 2D にマッピングすることを指す。今までは、Zの値を無視する方法を利用していたが、この手法には&lt;strong&gt;平行投影&lt;/strong&gt;という名前がついている。

それに対して、今回紹介するのが&lt;strong&gt;透視投影&lt;/strong&gt;だ。遠くのものほど小さく表示できるので、遠近感を表現できる投影方法となっている。

**透視投影ってなあに？
透視投影では「焦点」と「スクリーン」という概念が登場する。焦点は自分の目を表し、スクリーンは 3D の空間を投影する面である、と考えると分かりやすいだろう。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080618/20080618030937.png&quot; width=&quot;470&quot; height=&quot;173&quot;&gt;&lt;/center&gt;&lt;

スクリーンを窓として考えると、もっとすっきりするかもしれない。貴方は窓から外の景色をみている。透明なガラス窓の上に、窓の外の景色を見えた通りに描いていったとしよう。この絵が透視投影後の２次元の図となる。

**透視投影の一般化
透視投影の計算方法は考え方が色々あって混乱しがちなので、最初に一般解を解いておく。

ある点 P1(x, y, z) を透視投影すると、(x&lt;sub&gt;s&lt;/sub&gt;, y&lt;sub&gt;s&lt;/sub&gt;) に移動するものとする。(x&lt;sub&gt;s&lt;/sub&gt;, y&lt;sub&gt;s&lt;/sub&gt;) の求め方を計算しよう。

まずは、ZY 平面で考える。図示するとこんな具合。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080618/20080618015333.png&quot; width=&quot;450&quot; height=&quot;261&quot;&gt;&lt;/center&gt;&lt;

P1 と焦点を結んで、スクリーンと交わったところが投影後の点となる。P1 と P2 の高さ(y)は同じなのだが、スクリーン上には奥の P2 のほうが小さい y の値で投影されている。

それでは、y&lt;sub&gt;s&lt;/sub&gt; を計算しよう。と言っても、小学生レベルの相似の問題なので簡単に解けてしまって、
　　[tex:y_s = \frac{z_s - z_f}{z - z_f}y]
となる。

x&lt;sub&gt;s&lt;/sub&gt; についても同様に解いて、次のようになる。
　　[tex:x_s = \frac{z_s - z_f}{z - z_f}x]

**焦点が原点の場合
焦点を原点にすると計算が簡単になる。スクリーン z&lt;sub&gt;s&lt;/sub&gt; = 1 としてしまえば、
　　[tex:\left\{  \begin{array}x_s = x / z \\y_s = y / z \end{array}]
となる。計算がとても簡単だ。

ただ、前回から作ってるサンプルでは、立体が原点付近に存在しているため、この方法を使うといびつに描画されてしまう。原点から遠ざけてから投影する、といった工夫が必要になるだろう。

**スクリーンが原点にある場合
今度はスクリーン(z&lt;sub&gt;s&lt;/sub&gt;)を原点に移動してみる。式はこうなる。

　　[tex: \left\{ \begin{array}x_s = \frac{-z_f}{z - z_f}x \\ y_s = \frac{-z_f}{z - z_f}y \end{array}]

ここで、z&lt;sub&gt;f&lt;/sub&gt; &amp;lt; z&lt;sub&gt;s&lt;/sub&gt; とすると、z&lt;sub&gt;f&lt;/sub&gt; は 0 より小さい値となる。そこで、スクリーンと焦点の距離を f (= -z&lt;sub&gt;f&lt;/sub&gt;)と置くことで、上の式は次のように書き換えられる。
　　[tex:\left\{ \begin{array}x_s = \frac{f}{z + f}x \\ y_s = \frac{f}{z + f}y \end{array}]

ちなみに、f がどんどん大きくなってくと、x&lt;sub&gt;s&lt;/sub&gt; = x, y&lt;sub&gt;s&lt;/sub&gt; = y に近づく。つまり、焦点がスクリーンから遠ざかると、透視投影の遠近感の影響が少なくなって平行投影に近づいていくことを表す。

**透視投影のデモ
実は、FIVe3D の Point3D クラスには、透視投影を行うメソッドが定義されている。
&gt;|javascript|
public function getPerspective(viewdistance:Number):Number {
    return viewdistance/(z+viewdistance);
}

public function project(perspective:Number):void {
    x *= perspective;
    y *= perspective;
    z = 0;
}
||&lt;
viewdistance というのが、「スクリーンが原点にある場合」の f そのものだ。

このメソッドを利用して、透視投影のデモを作ってみた。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FStudy3d3.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=300&amp;amp;title=3D+Study3&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;

左のスライダで f の値を調整できる。f が小さい（スライダが上）になるほど、図形が歪むのが確認いただけるだろう。

ソースは最後に掲載しておく。スクロールバーの分だけ30行ほど増えているが、ほとんど前回のソースと同じだ。透視投影後の座標を取得する部分は次のようになっている。
&gt;|javascript|
    // 点を透視投影する
    pt.project(pt.getPerspective(f));
||&lt;

**まとめ
透視投影の一般解を求めた。透視投影として紹介される式にはいくつかのパターンがあるが、そのいずれも一般解の形に収まるはずだ。ここでは、２通りの計算を簡単にするパターンを紹介し、後者を利用してデモを行った。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080620/as_3d_lessen3&quot;&gt;次回に続く&lt;/a&gt;。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1:title]
-[http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2:title]
-[http://d.hatena.ne.jp/nitoyon/20080618/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080620/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080623/as_3d_lessen5:title]
&gt;&lt;/div&gt;&lt;

ソースは以下に(153行)。
====
要 &lt;a href=&quot;http://five3d.mathieu-badimon.com/&quot;&gt;FIVe3D 2.1&lt;/a&gt; の five3d.geom.Matrix3D クラスと five3d.geom.Point3D クラス。
&gt;|javascript|
package {
    import flash.display.*;
    import flash.events.Event;
    import flash.utils.Dictionary;
    import five3D.geom.Matrix3D;
    import five3D.geom.Point3D;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class Study3d3 extends Sprite{
        private var canvas:Sprite;
        private var cubes:Array;
        private var rad:Number;
        private var scrollBar:ScrollBar;

        public function Study3d3(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            cubes = [];
            cubes.push(new Cube(0, 0, 0, 50));
            cubes.push(new Cube(0, 100, 0, 20));
            cubes.push(new Cube(0, -100, 0, 20));
            cubes.push(new Cube(100, 0, 0, 20));
            cubes.push(new Cube(-100, 0, 0, 20));
            cubes.push(new Cube(0, 0, 100, 20));
            cubes.push(new Cube(0, 0, -100, 20));

            canvas = new Sprite();
            addChild(canvas);
            canvas.x = 200;
            canvas.y = 150;

            scrollBar = new ScrollBar();
            scrollBar.x = scrollBar.y = 30;
            addChild(scrollBar);

            rad = 0;
            addEventListener(&quot;enterFrame&quot;, changeHandler);
        }

        private function changeHandler(event:Event):void {
            canvas.graphics.clear();

            // 回転行列を作成
            var matrix:Matrix3D = new Matrix3D();
            matrix.rotateX(Math.PI / 6);
            matrix.rotateY(rad / 180 * Math.PI * 3);
            matrix.rotateZ(rad / 180 * Math.PI);

            // 描画
            for each(var c:Cube in cubes){
                c.draw(canvas.graphics, matrix, 150 + scrollBar.value * 3);
            }

            // 角度更新
            rad = (rad + 1) % 360;
        }
    }
}

import flash.display.*;
import flash.events.Event;
import flash.geom.Point;
import five3D.geom.Point3D;
import five3D.geom.Matrix3D;

class Cube {
    private var points:Array = [];

    public function Cube(x:Number, y:Number, z:Number, len:Number){
        var diff:Function = function(f:Boolean):Number{return f ? len / 2 : -len / 2;};

        // 立方体の頂点８つを作成する
        for(var i:int = 0; i &lt; 8; i++){
            var p:Point3D = new Point3D(x + diff(i % 4 % 3 == 0),  y + diff(i % 4 &lt; 2), z + diff(i &lt; 4));
            points.push(p);
        }
    }

    public function draw(g:Graphics, matrix:Matrix3D, f:Number):void {
        // 回転後の各頂点の座標を計算
        var p:Array = [];
        for(var i:int = 0; i &lt; points.length; i++){
            var pt:Point3D = matrix.transformPoint(points[i]);

            // 点を透視投影する
            pt.project(pt.getPerspective(f));

            drawPoint(g, pt);
            p.push(pt);
        }

        // 頂点の間を線で結ぶ
        for(i = 0; i &lt; 4; i++){
            drawLine(g, p[i], p[i + 4]);
            drawLine(g, p[i], p[(i + 1) % 4]);
            drawLine(g, p[i + 4], p[(i + 1) % 4 + 4]);
        }
    }

    private function drawPoint(g:Graphics, p:Point3D):void {
        g.beginFill(0xffffff);
        g.drawCircle(p.x, p.y, 3);
        g.endFill();
    }

    private function drawLine(g:Graphics, p1:Point3D, p2:Point3D):void {
        g.beginFill(0, 0);
        g.lineStyle(1, 0xffffff);
        g.moveTo(p1.x, p1.y);
        g.lineTo(p2.x, p2.y);
        g.lineStyle();
        g.endFill();
    }
}

class ScrollBar extends Sprite {
    public var value:int;

    public function ScrollBar():void {
        useHandCursor = buttonMode = true;
        graphics.beginFill(0xffffff);
        graphics.lineStyle(0);
        graphics.drawRect(0, -2, 8, 112);
        graphics.endFill();

        var tab:Sprite = new Sprite();
        tab.graphics.beginFill(0xffffff);
        tab.graphics.lineStyle(0);
        tab.graphics.drawRect(-8, 0, 24, 8);
        tab.graphics.endFill();
        tab.y = 0;
        addChild(tab);

        addEventListener(&quot;mouseDown&quot;, function(event:Event):void {
            stage.addEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.addEventListener(&quot;mouseUp&quot;, mouseUpHandler);
            mouseMoveHandler(event);
        });

        var mouseMoveHandler:Function = function(event:Event):void {
            var p:Point = globalToLocal(new Point(stage.mouseX, stage.mouseY));
            tab.y = Math.min(Math.max(0, p.y), 100);
            value = tab.y;
        }
        var mouseUpHandler:Function = function(event:Event):void {
            value = tab.y;
            dispatchEvent(new Event(&quot;change&quot;));
            stage.removeEventListener(&quot;mouseMove&quot;, mouseMoveHandler);
            stage.removeEventListener(&quot;mouseUp&quot;, mouseUpHandler);
        }
    }
}
||&lt;

</body>
</day>
<day date="2008-06-20" title="">
<body>
*as_3d_lessen3*[as]AS3.0 で 3D プログラミングを１から勉強する (4) - 面に色を塗る
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080620/20080620012710.png&quot; width=&quot;480&quot; height=&quot;203&quot;&gt;&lt;/center&gt;&lt;
ワイヤーフレームにも飽きてきたので、色を塗ることにしよう。面に色を塗ることを、3D 用語ではシェーディングと呼ぶらしい。今回はその中でもシンプルなフラットシェーディングという技法を取り上げる。

といっても、&lt;a href=&quot;http://codezine.jp/a/article/aid/2235.aspx&quot;&gt;ActionScriptによるWebの3Dグラフィックス再入門 (2) - シェーディングでもっと3Dらしく：CodeZine&lt;/a&gt; で解説されてる通りにコーディングしているので、詳しいことはそちらの記事に譲ろう。

コーディング結果はこうなった。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FStudy3d4.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=300&amp;amp;title=3D+Study4&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;

だいぶ嬉しい感じ。

これで終わるのもさすがに寂しいので、ソースの全体の流れを説明しておこう。
+奥の立方体から描画するために並べ替える
+立方体の面についても奥の面から描画するために並べ替える
+各面の法線ベクトルを求める
+面の明るさを求める
+面を描画する
それぞれについて簡単にみていく。

**1. 奥の立方体から描画するために並べ替える
面を塗るにあたっては、塗る順番が重要になる。先に手前の物体を描いてしまうと、奥の物体が上に描画されてしまう。

そこで、奥のものから順番に塗る必要がある。ここでは一番手軽な Z ソートという手法を使う。立派な名前がついてるが、何のことはない、奥の面から順番に塗っていく手法のことである。

今回のソースでは、まずは立方体ごとに塗る順番を決めることにした。Cube クラスに center プロパティを導入して、Z 座標が大きい（奥のもの）から順番に描画している。
&gt;|javascript|
// 回転行列を作成
var matrix:Matrix3D = new Matrix3D();
matrix.rotateX(Math.PI / 6);
matrix.rotateY(rad / 180 * Math.PI * 3);
matrix.rotateZ(rad / 180 * Math.PI);

// それぞれの立方体の中心のZ座標を取得する
var dic:Dictionary = new Dictionary();
for each(var c:Cube in cubes){
    var center:Point3D = matrix.transformPoint(c.center);
    dic[c] = center.z;
}

// Zソート (奥のものから順番に並べる)
cubes.sort(function(a:Cube, b:Cube):Number {
    return dic[b] - dic[a];
});

// 奥から描画
for each(c in cubes){
    c.draw(canvas.graphics, matrix, 200);
}
||&lt;

Zソートは簡単な分、入り組んだ物体や面が交差するような場合には使えない。そういう複雑な物体を描画するときにどうするかはまだよく分かってない。

**2. 立方体の面についても奥の面から描画するために並べ替える
立方体のそれぞれの面についても、奥の面から順番に描画していく。手順は 1. と同じなので省略。

**3. 各面の法線ベクトルを求める
ここからは面の色を求める作業が始まる。まずは、面の法線ベクトルを求める。法線ベクトルというのは、面に垂直なベクトルのこと。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080620/20080620012709.png&quot; width=&quot;443&quot; height=&quot;221&quot;&gt;&lt;/center&gt;&lt;

まず、面の２辺を表すベクトル v1 と v2 を求める。Point3D のベクトルの差を求めるメソッド subtract を利用している。
&gt;|javascript|
var v1:Point3D = p2.subtract(p1);
var v2:Point3D = p4.subtract(p1);
||&lt;

次に v1 と v2 の外積を計算する。外積は２つのベクトルに垂直なベクトルとなる。
&gt;|javascript|
var n:Point3D = cross(v1, v2);
||&lt;
外積を計算する関数は Point3D に用意されていなかったので自前で作った。
&gt;|javascript|
// 外積
function cross(p1:Point3D, p2:Point3D):Point3D {
    return new Point3D(p1.y * p2.z - p1.z * p2.y,
                       p1.z * p2.x - p1.x * p2.z,
                       p1.x * p2.y - p1.y * p2.x);
}
||&lt;
あと、外積は順番が大事なのでそこに気をつけるべし。v1×v2 は立方体の外側に向かうベクトルだが、v2×v1だと内側に向かうベクトルになってしまう。

最後に、n を単位ベクトル（長さ１のベクトル）にしておこう。
&gt;|javascript|
n.normalize(1);
||&lt;
normalize() は Poitn3D に定義されているものをそのまま活用した。

**4. 面の明るさを求める
光源の方向を表すベクトルを l とする。
&gt;|javascript|
var l:Point3D = new Point3D(0, 0, -1);
||&lt;

l と n の内積を面の明るさとする（ランバートの法則というらしい）。

l も n も単位ベクトルのため、
&gt;|
l・n = |l||n|cosθ = cosθ
(θはlとnの間の角度)
|&lt;
となる。つまり、l と n が同じ向きのときに最も明るくなる。

**5. 面を描画する
明るさが求まれば、あとは色を求めて塗るだけ。
&gt;|javascript|
var product:Number = n.dot(l);

var b:int = 0x3f * product + 0xc0;
g.beginFill(b * 0x10000 + b * 0x100 + b, 0.6);
||&lt;

**まとめ
面を塗ると 3D っぽくなる。幸せ。

あと、id:rch850 さんは早く &lt;a href=&quot;http://codezine.jp/a/article/aid/1872.aspx&quot;&gt;ActionScriptによるWebの3Dグラフィックス再入門：CodeZine&lt;/a&gt; の第３回を執筆すべき。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080623/as_3d_lessen5&quot;&gt;第5回に続く&lt;/a&gt;。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1:title]
-[http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2:title]
-[http://d.hatena.ne.jp/nitoyon/20080618/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080620/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080623/as_3d_lessen5:title]
&gt;&lt;/div&gt;&lt;

ソースコードは以下に(157行)。
====
要 &lt;a href=&quot;http://five3d.mathieu-badimon.com/&quot;&gt;FIVe3D 2.1&lt;/a&gt; の five3d.geom.Matrix3D クラスと five3d.geom.Point3D クラス。

&gt;|javascript|
package {
    import flash.display.*;
    import flash.utils.Dictionary;
    import five3D.geom.Matrix3D;
    import five3D.geom.Point3D;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class Study3d4 extends Sprite{
        private var canvas:Sprite;
        private var cubes:Array;
        private var rad:Number;

        public function Study3d4(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            cubes = [];
            cubes.push(new Cube(0, 0, 0, 50));
            cubes.push(new Cube(0, 100, 0, 20));
            cubes.push(new Cube(0, -100, 0, 20));
            cubes.push(new Cube(100, 0, 0, 20));
            cubes.push(new Cube(-100, 0, 0, 20));
            cubes.push(new Cube(0, 0, 100, 20));
            cubes.push(new Cube(0, 0, -100, 20));

            canvas = new Sprite();
            addChild(canvas);
            canvas.x = 200;
            canvas.y = 150;

            rad = 0;
            changeHandler(null);
            addEventListener(&quot;enterFrame&quot;, changeHandler);
        }

        private function changeHandler(event:Object):void {
            canvas.graphics.clear();

            // 回転行列を作成
            var matrix:Matrix3D = new Matrix3D();
            matrix.rotateX(Math.PI / 6);
            matrix.rotateY(rad / 180 * Math.PI * 3);
            matrix.rotateZ(rad / 180 * Math.PI);

            // それぞれの立方体の中心のZ座標を取得する
            var dic:Dictionary = new Dictionary();
            for each(var c:Cube in cubes){
                var center:Point3D = matrix.transformPoint(c.center);
                dic[c] = center.z;
            }

            // Zソート (奥のものから順番に並べる)
            cubes.sort(function(a:Cube, b:Cube):Number {
                return dic[b] - dic[a];
            });

            // 奥から描画
            for each(c in cubes){
                c.draw(canvas.graphics, matrix, 200);
            }

           // 角度更新
            rad = (rad + 1) % 360;
         }
    }
}

import flash.display.Graphics;
import flash.geom.Point;
import flash.utils.Dictionary;
import five3D.geom.Point3D;
import five3D.geom.Matrix3D;

class Cube {
    private var points:Array = [];
    private var _center:Point3D;

    public function get center():Point3D {
        return _center;
    }

    public function Cube(x:Number, y:Number, z:Number, len:Number){
        _center = new Point3D(x, y, z);

        var diff:Function = function(f:Boolean):Number{return f ? len / 2 : -len / 2;};

        // 立方体の頂点８つを作成する
        for(var i:int = 0; i &lt; 8; i++){
            var p:Point3D = new Point3D(x + diff(i % 4 % 3 == 0),  y + diff(i % 4 &lt; 2), z + diff(i &lt; 4));
            points.push(p);
        }
    }

    public function draw(g:Graphics, matrix:Matrix3D, f:Number):void {
        // 回転後の座標を計算
        var p:Array = [];
        for(var i:int = 0; i &lt; points.length; i++){
            var pt:Point3D = matrix.transformPoint(points[i]);
            p.push(pt);
        }

        // 面の一覧
        var planes:Array = [
            [p[0], p[1], p[2], p[3]],
            [p[7], p[6], p[5], p[4]],
            [p[0], p[4], p[5], p[1]],
            [p[1], p[5], p[6], p[2]],
            [p[2], p[6], p[7], p[3]],
            [p[3], p[7], p[4], p[0]]
        ];

        // 面の中心のZ座標を求める
        var z:Dictionary = new Dictionary();
        for(i = 0; i &lt; planes.length; i++){
            z[planes[i]] = (planes[i][0].z + planes[i][1].z + planes[i][2].z + planes[i][3].z) / 4;
        }

        // Zソート (奥のものから順番に並べる)
        planes.sort(function(a:Array, b:Array):Number {
            return z[b] - z[a];
        });

        // 奥から順番に面を描画
        for each(var plane:Array in planes){
            drawPlane(g, plane[0], plane[1], plane[2], plane[3]);
        }
    }

    private function drawPlane(g:Graphics, p1:Point3D, p2:Point3D, p3:Point3D, p4:Point3D):void {
        // 単位法線ベクトル
        var v1:Point3D = p2.subtract(p1);
        var v2:Point3D = p4.subtract(p1);
        var n:Point3D = cross(v1, v2);
        n.normalize(1);

        // 光源の方向ベクトルとの内積
        var l:Point3D = new Point3D(0, 0, -1);
        var product:Number = n.dot(l);

        // 透視投影しつつ面を塗る
        var b:int = 0x3f * product + 0xc0;
        g.beginFill(b * 0x10000 + b * 0x100 + b, 0.6);
        g.lineStyle(0, 0x666666);
        var p:Point3D;
        p = p1.clone(); p.project(p.getPerspective(500)); g.moveTo(p.x, p.y);
        p = p2.clone(); p.project(p.getPerspective(500)); g.lineTo(p.x, p.y);
        p = p3.clone(); p.project(p.getPerspective(500)); g.lineTo(p.x, p.y);
        p = p4.clone(); p.project(p.getPerspective(500)); g.lineTo(p.x, p.y);
        g.endFill();
    }
}

// 外積
function cross(p1:Point3D, p2:Point3D):Point3D {
    return new Point3D(p1.y * p2.z - p1.z * p2.y,
                       p1.z * p2.x - p1.x * p2.z,
                       p1.x * p2.y - p1.y * p2.x);
}
||&lt;

</body>
<comments>
<comment>
<username>sao</username>
<body>初カキコさせていただきます。&lt;br&gt;&lt;br&gt;最近は奥行きの表現にはZソートではなく、Zバッファという手法がよく使われてます。&lt;br&gt;画面内全てのピクセルにＺ値を持つことによって、ピクセル単位で奥行きを表現できる方法です。&lt;br&gt;でも、もちろんＺバッファ対応してるレンダリングでないと使えませんが^^;&lt;br&gt;&lt;br&gt;Ｚソートでも複雑な物体を描画したいときには、ひたすら１ポリゴンを細かくするという荒業で対応できますＹＯ★&lt;br&gt;&lt;br&gt;３Ｄ連載、楽しみにしてますー</body>
<timestamp>1214072669</timestamp>
</comment>
</comments>
</day>
<day date="2008-06-23" title="">
<body>
*as_3d_lessen5*[as]AS3.0 で 3D プログラミングを１から勉強する (5) - テクスチャを張る
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080623/20080623025423.jpg&quot; width=&quot;483&quot; height=&quot;196&quot;&gt;&lt;/center&gt;&lt;
面を塗ることができたので、面に画像を貼り付けるのも簡単。画像を６つ用意して、立方体の上に貼り付けてみることにする。

といっても前回までとほとんど変わらなくて、各頂点の 2D 上の座標を求めてから、画像を歪めて描画するだけでよい。

問題は「どうやって画像を歪ませるか」という一点のみ。

**ActionScript 3 で画像を歪ませる方法
ここからは完全に AS3 に限定したノウハウになる。

答えは Graphics.beginBitmapFill() メソッドにある。
&gt;|javascript|
public function beginBitmapFill(
    bitmap:BitmapData,      // 表示するビットマップ
    matrix:Matrix = null,   // 変形方法を Matrix で指定
    repeat:Boolean = true,  // リピートするか
    smooth:Boolean = false  // スムース化するか
):void
||&lt;
第二引数の Matrix をうまく渡してやれば、望みの通りの形に歪ませて描画できる。

計算方法がちょっと複雑なので、既成のライブラリを使うのも手だろう。いずれも内部では beginBitmapFill() を利用している。
-&lt;a href=&quot;http://www.d-project.com/flex/009_FreeTransform/&quot;&gt;四角形の自由変形&lt;/a&gt;
-&lt;a href=&quot;http://www.rubenswieringa.com/blog/distortimage&quot;&gt;DistortImage&lt;/a&gt;

特に、前者の &lt;a href=&quot;http://www.d-project.com/flex/009_FreeTransform/&quot;&gt;四角形の自由変形&lt;/a&gt; では、Matrix を生成する仕組みが詳しく解説されている。図つきなのでとても分かりやすい。敬意を表して、このページで紹介されている TransformUtil クラスを活用してみることにする。

&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FStudy3d5.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=300&amp;amp;title=3D+Study5&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;

ちょっと重めなので、クリックしたらスタートするようにした。やってることの大半は前回とほとんど同じ。前回は lineTo() で描画していた部分を、TransformUtil クラスを使って描画するようにしたぐらい。最後にソースコードを掲載しておくので興味ある人はご覧あれ。

**Flash Player 10 では
現在β版が公開されている Flash Player 10 では、3D 表示に便利なクラスやメソッドが追加されている。テクスチャに関しては、Graphics.drawTriangles() メソッドが便利そうだ。

以下のブログが先陣を切って調査している。
-&lt;a href=&quot;http://blog.boreal-kiss.com/2008/06/04233309.html&quot;&gt;[FlashPlayer10]drawTrianglesで球面にテクスチャリング&lt;/a&gt;
-&lt;a href=&quot;http://unbland.org/blog/2008/05/18/22.html&quot;&gt;unbland.net blog - [Flash Player 10 #2] 3D のプリミティブにテクスチャを適用する。&lt;/a&gt;
自前でがんばる Flash Player 9 に比べて、Flash Player 本体に定義されているメソッドを利用できる分、かなりの高速化が実現できるようだ。

**まとめ
テクスチャを張る方法を紹介した。今回は立方体に画像を貼り付ける方法を紹介した。球面のようななめらかな面の場合は、球の表面をいくつもの三角形に分解して同じ方法を適用する。原理は全く同じ。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1:title]
-[http://d.hatena.ne.jp/nitoyon/20080617/as_3d_lessen2:title]
-[http://d.hatena.ne.jp/nitoyon/20080618/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080620/as_3d_lessen3:title]
-[http://d.hatena.ne.jp/nitoyon/20080623/as_3d_lessen5:title]
&gt;&lt;/div&gt;&lt;

ソースコードは以下に（198行）：
====
&gt;|javascript|
package {
    import flash.display.*;
    import flash.events.Event;
    import flash.utils.Dictionary;
    import flash.utils.setInterval;
    import flash.text.TextField;
    import five3D.geom.Matrix3D;
    import five3D.geom.Point3D;

    [SWF(backgroundColor=&quot;0x000000&quot;)]
    public class Study3d5 extends Sprite{
        private var canvas:Sprite;
        private var cubes:Array;
        private var rad:Number;

        public function Study3d5(){
            stage.scaleMode = &quot;noScale&quot;;
            stage.align = &quot;TL&quot;;

            cubes = [];
            cubes.push(new Cube(0, 0, 0, 120));

            canvas = new Sprite();
            addChild(canvas);
            canvas.x = 200;
            canvas.y = 150;

            var textField:TextField = new TextField();
            textField.textColor = 0xffffff;
            textField.text = &quot;click to start&quot;;
            addChild(textField);

            rad = 0;
            var f:Boolean = true;
            stage.addEventListener(&quot;click&quot;, function(event:Event):void{
                if(f){
                    textField.text = &quot;click to stop&quot;;
                    addEventListener(&quot;enterFrame&quot;, changeHandler);
                }else{
                    textField.text = &quot;click to start&quot;;
                    addChild(textField);
                    removeEventListener(&quot;enterFrame&quot;, changeHandler);
                }
                f = !f;
            });
        }

        private function changeHandler(event:Object):void {
            canvas.graphics.clear();

            // 回転行列を作成
            var matrix:Matrix3D = new Matrix3D();
            matrix.rotateX(Math.PI / 6);
            matrix.rotateY(rad / 180 * Math.PI * 3);
            matrix.rotateZ(rad / 180 * Math.PI);

            // それぞれの立方体の中心のZ座標を取得する
            var dic:Dictionary = new Dictionary();
            for each(var c:Cube in cubes){
                var center:Point3D = matrix.transformPoint(c.center);
                dic[c] = center.z;
            }

            // Zソート (奥のものから順番に並べる)
            cubes.sort(function(a:Cube, b:Cube):Number {
                return dic[b] - dic[a];
            });

            // 奥から描画
            for each(c in cubes){
                c.draw(canvas.graphics, matrix, 200);
            }

           // 角度更新
            rad = (rad + 1) % 360;
         }
    }
}

import flash.display.Graphics;
import flash.geom.Point;
import flash.utils.Dictionary;
import five3D.geom.Point3D;
import five3D.geom.Matrix3D;

class Cube {
    [Embed(source=&quot;1.jpg&quot;)]
    private static var Img1:Class;
    [Embed(source=&quot;2.jpg&quot;)]
    private static var Img2:Class;
    [Embed(source=&quot;3.jpg&quot;)]
    private static var Img3:Class;
    [Embed(source=&quot;4.jpg&quot;)]
    private static var Img4:Class;
    [Embed(source=&quot;5.jpg&quot;)]
    private static var Img5:Class;
    [Embed(source=&quot;6.jpg&quot;)]
    private static var Img6:Class;

    private var images:Array = [];

    private var points:Array = [];
    private var _center:Point3D;

    public function get center():Point3D {
        return _center;
    }

    public function Cube(x:Number, y:Number, z:Number, len:Number){
        _center = new Point3D(x, y, z);

        images.push(new Img1());
        images.push(new Img2());
        images.push(new Img3());
        images.push(new Img4());
        images.push(new Img5());
        images.push(new Img6());

        var diff:Function = function(f:Boolean):Number{return f ? len / 2 : -len / 2;};

        // 立方体の頂点８つを作成する
        for(var i:int = 0; i &lt; 8; i++){
            var p:Point3D = new Point3D(x + diff(i % 4 % 3 == 0),  y + diff(i % 4 &lt; 2), z + diff(i &lt; 4));
            points.push(p);
        }
    }

    public function draw(g:Graphics, matrix:Matrix3D, f:Number):void {
        // 回転後の座標を計算
        var p:Array = [];
        for(var i:int = 0; i &lt; points.length; i++){
            var pt:Point3D = matrix.transformPoint(points[i]);
            p.push(pt);
        }

        // 面の一覧
        var planes:Array = [
            [p[0], p[1], p[2], p[3], images[0].bitmapData],
            [p[7], p[6], p[5], p[4], images[1].bitmapData],
            [p[0], p[4], p[5], p[1], images[2].bitmapData],
            [p[1], p[5], p[6], p[2], images[3].bitmapData],
            [p[2], p[6], p[7], p[3], images[4].bitmapData],
            [p[3], p[7], p[4], p[0], images[5].bitmapData]
        ];

        // 面の中心のZ座標を求める
        var z:Dictionary = new Dictionary();
        for(i = 0; i &lt; planes.length; i++){
            z[planes[i]] = (planes[i][0].z + planes[i][1].z + planes[i][2].z + planes[i][3].z) / 4;
        }

        // Zソート (奥のものから順番に並べる)
        planes.sort(function(a:Array, b:Array):Number {
            return z[b] - z[a];
        });

        // 奥から順番に面を描画
        var index:int = 0;
        for each(var plane:Array in planes){
            drawPlane(g, plane[4], plane[0], plane[1], plane[2], plane[3]);
        }
    }

    private function drawPlane(g:Graphics, bmd:BitmapData, p1:Point3D, p2:Point3D, p3:Point3D, p4:Point3D):void {
        // 単位法線ベクトル
        var v1:Point3D = p2.subtract(p1);
        var v2:Point3D = p4.subtract(p1);
        var n:Point3D = cross(v1, v2);
        n.normalize(1);

        // 裏側の面は描画しない
        var l:Point3D = new Point3D(0, 0, -1);
        var product:Number = n.dot(l);
        if(product &lt; 0){
            return;
        }

        // 透視投影しつつ２次元座標に変換する
        var p:Point3D;
        var pp1:Point, pp2:Point, pp3:Point, pp4:Point;
        p = p1.clone(); p.project(p.getPerspective(500)); pp1 = new Point(p.x, p.y);
        p = p2.clone(); p.project(p.getPerspective(500)); pp2 = new Point(p.x, p.y);
        p = p3.clone(); p.project(p.getPerspective(500)); pp3 = new Point(p.x, p.y);
        p = p4.clone(); p.project(p.getPerspective(500)); pp4 = new Point(p.x, p.y);

        // 変形してビットマップを表示
        TransformUtil.drawBitmapQuadrangle(g, bmd, 
            new Point(0, 0), new Point(100, 0), new Point(0, 100), new Point(100, 100), 
            pp1, pp2, pp4, pp3);
    }
}

// 外積
function cross(p1:Point3D, p2:Point3D):Point3D {
    return new Point3D(p1.y * p2.z - p1.z * p2.y,
                       p1.z * p2.x - p1.x * p2.z,
                       p1.x * p2.y - p1.y * p2.x);
}
||&lt;

</body>
</day>
<day date="2008-06-25" title="">
<body>
*googlemaps_kmz*[GoogleMapsAPI][as]Google Maps API for Flash＋KMZ ビューワ
id:gyuque さんによる &lt;a href=&quot;http://d.hatena.ne.jp/gyuque/20080625&quot;&gt;Google Maps API for Flash + KMZ Viewer&lt;/a&gt; がすごい。

そういや、自分が 3D を勉強し始めたのも、Google Maps に KMZ を配置したいからだった。すっかり忘れてた！！

(追記 2008.06.29) テクスチャに対応してる！！ http://d.hatena.ne.jp/gyuque/20080629

*zantetsu_mouse*[box2d][as]Box2dFlashAS3 を使った切りゲー：斬鉄マウス
ついこないだ &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080610/p1&quot;&gt;Box2dFlashAS3 を使ったロールケーキプレイイングゲーム&lt;/a&gt; を紹介したけど、同じ作者の &lt;a href=&quot;http://portal.nifty.com/2008/06/22/b/&quot;&gt;斬鉄マウス&lt;/a&gt; がまた面白い。

&gt;&lt;center&gt;&lt;a href=&quot;http://portal.nifty.com/2008/06/22/b/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080625/20080625092933.jpg&quot; width=&quot;300&quot; height=&quot;251&quot;&gt;&lt;br&gt;@nifty：デイリーポータルZ：斬鉄マウス&lt;/a&gt;&lt;/center&gt;&lt;

マウスを使って色んな物体をぶった切っていく。切った後の効果に物理エンジンの Box2dFlashAS3 が使われていて、これが大変気持ちいい。使いどころの発想がうまいなぁー。

IEだとJavaScriptエラーになったので、Firefox でプレイした。
</body>
</day>
<day date="2008-06-27" title="">
<body>
*color_illusion_generator*Color Illusion Generator をリリースしました
&lt;a href=&quot;http://tech.nitoyon.com/illusion1/&quot;&gt;Color Illusion Generator&lt;/a&gt; というものを作りました。補色を利用した色の錯視を好きな画像から作れます。

例えばこんなやつ。中心の点を見つめ続けてください。白黒の映像になったときに、なぜか色がついて見えます。

&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://tech.nitoyon.com/illusion1/illusion.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fillusion1%2Fsample3.jpg&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=Color+Illusion+Generator&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以降が必要です&lt;/noscript&gt;&lt;/center&gt;&lt;

作成した錯視はブログに埋め込むこともできます。

どうぞご利用ください。

ネタ元：
-&lt;a href=&quot;http://d.hatena.ne.jp/KZR/20080623/p1&quot;&gt;補色残像実験 - Radium Software&lt;/a&gt;
-&lt;a href=&quot;http://www.kotaro269.com/archives/50328924.html&quot;&gt;白黒写真がカラー写真に見えてしまう、残像を利用したイリュージョン:小太郎ぶろぐ&lt;/a&gt;
-&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20060809_color_illusion/&quot;&gt;かつてないレベルで白黒写真に色が付く錯覚画像の作り方 - GIGAZINE&lt;/a&gt;

Flashのソースコード：
-http://tech.nitoyon.com/illusion1/Illusion.as
</body>
<comments>
<comment>
<username>k@2PX</username>
<body>nitoyonさん、お久しぶりです。&lt;br&gt;おお～！びっくりしました。これ面白いです。</body>
<timestamp>1214814888</timestamp>
</comment>
</comments>
</day>
<day date="2008-06-29" title="">
<body>
*winsdk_longest_name*Windows SDK で最も名前が長い定数・関数ベスト6
&lt;a href=&quot;http://d.hatena.ne.jp/kaiseh/20080629/1214716829&quot;&gt;Cocoaで最も名前が長いメソッドベスト10 - kaisehのブログ&lt;/a&gt; によると、Cocoa で一番長いキーワードは50文字とのこと。

長さなら、Windows ヘッダファイルの方が負けないぜ、ということで、Windows SDK 6.0で調べてみました。

**第１位
&gt;|
IIDENTITYAUTHORITY_DOES_TEXTUAL_DEFINITION_MATCH_
TEXTUAL_REFERENCE_FLAG_EXACT_MATCH_REQUIRED
文字数：92
所属ファイル：isolation.h
|&lt;
堂々の第１位は Cocoa にダブルスコア近い92文字の定数。「１行は80文字以内」というコーディング規約をあざ笑うかのような素晴らしい定数ですね。

TEXTUAL と MATCH という単語が２回ずつ登場するあたりが趣深いですね。

**第２位
&gt;|
CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_
UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME
文字数：81
所属ファイル：WinCrypt.h
|&lt;

２位でも80文字越え。WinCrypt.h はこの他にも長い定数のオンパレードとなっております。

こちらの定数でも、PRE_FETCH が２度登場するという素敵な状態となっております。

**第３位
&gt;|
CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_
UPDATE_PRE_FETCH_DIVISOR_DEFAULT
文字数：78
所属ファイル：WinCrypt.h
|&lt;
２位の定数の VALUE_NAME を DEFAULT に置き換えただけの定数です。

**第４位
&gt;|
IWMSPublishingPointCurrentCounters_get_Outgoing
DistributionAllocatedBandwidth
文字数：77
所属ファイル：wmsserver.h
|&lt;

やっと関数宣言の登場です。COM 関係はどうしても長くなりますね、はい。

**第５位
&gt;|
CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_
PRE_FETCH_PERIOD_SECONDS_VALUE_NAME
文字数：77
所属ファイル：WinCrypt.h
|&lt;
貫禄の WinCrypt.h です。

**第６位
&gt;|
PFN_WEBHOST_LISTENER_APPLICATION_POOL_CAN_
OPEN_NEW_LISTENER_CHANNEL_INSTANCE
文字数：76
所属ファイル：listeneradapter.h
|&lt;

実は、１位～５位までは Undocumented な定数・関数でした。ここにきて、やっと MSDN に記述がある定数が登場しました。&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms694118.aspx&quot;&gt;IIS 7.0: WEBHOST_LISTENER_CALLBACKS Structure&lt;/a&gt; に書いてあります。よかったですね。

**まとめ
Windows SDK は Cocoa よりきもい。

使った Perl スクリプトを一応掲載しておきます。
&gt;|perl|
@list=glob('*.h');
%w;
for my $fn(@list){
  open(F,&quot;&lt;$fn&quot;);
  $s=join(&quot;\n&quot;,&lt;F&gt;);
  my @match=($s=~/[A-Z0-9_]{25,}/ig);
  close F;

  for(@match){
    $w{$_} = $fn if defined $_
  }
}

@result = sort {length $b cmp length $a} keys %w;
for(@result){
  print $_ . &quot;(&quot; . $w{$_} . &quot;)\n&quot;;
}
||&lt;
</body>
</day>
<day date="2008-06-30" title="">
<body>
*yoshiori_uranai*Yoshioriの彼女適合試験
&lt;a href=&quot;http://d.hatena.ne.jp/Yoshiori/20080630/1214814814&quot;&gt;id:Yoshiori氏の彼女募集告知&lt;/a&gt;が人気らしいので、便乗して適合試験を作ってみました。

START を押して真ん中の点を15秒間眺めてください。白黒画像に変わった瞬間に髪の毛が赤く見えたら合格です。

&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://tech.nitoyon.com/illusion1/illusion.xml&amp;amp;up_url=http%3A%2F%2Ff.hatena.ne.jp%2Fimages%2Ffotolife%2Fb%2Fbose999%2F20080630%2F20080630165007.jpg&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=Color+Illusion+Generator&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以上が必要です&lt;/noscript&gt;&lt;/center&gt;&lt;

見えた人は、&lt;a href=&quot;http://d.hatena.ne.jp/HolyGrail/20080630/1214814675&quot;&gt;Twitterとかで「付き合ってください！」って発言すればエントリーは完了&lt;/a&gt;らしいので、試験で運試ししたあとにチャレンジしてみるといいと思います。

便乗して宣伝。&lt;a href=&quot;http://tech.nitoyon.com/illusion1/&quot;&gt;Color Illusion Generator&lt;/a&gt;を使って、みんなも楽しい錯視をいっぱい作ろう！

*gohafla_kyoto*ごはんとFlash＠京都のお知らせ
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080630/20080630094349.jpg&quot; width=&quot;450&quot; height=&quot;136&quot;&gt;&lt;/center&gt;&lt;

&lt;a href=&quot;http://teraco.jp/gohafla/&quot;&gt;ごはんとFlash ～おいでやす京都～&lt;/a&gt; が開催されます。

:日時:7月19日（土） 19:00～22:00
:場所:&lt;a href=&quot;http://sarasak2.exblog.jp/&quot;&gt;さらさ花遊小路&lt;/a&gt;
:会費:4,500円

私も行きますよ。噂によると、Spark Project の人とか Progression の人もはるばる東京から来る予定だとか。といっても、プログラミングとかそんなんは全然関係なくて、Flash やってる人が集まってわいわいできたらいいなぁ、という感じのイベントです。タイムラインな人も AS2 な人も Flash これからやりたいんだけど、っていう人もどんどん参加してほしいです！

申し込みは7月1日の 0:00～。先着順なので、気になる人はお早めに。

→(7月1日 0:00追記) 募集開始しました！！　いい感じで集まってるみたい。

→&lt;strong&gt;(7月1日 2:00追記) 定員に達したため締め切りました&lt;/strong&gt;

19日の午前にも素敵なイベントがあるんだけど、それの告知はまた別の機会に。あと、翌日は鎌倉で &lt;a href=&quot;http://level0.cuppy.co.jp/2008/06/gohan_to_flash_20080720.php&quot;&gt;ごはんとFlash 2杯目&lt;/a&gt; が開催されます。関東方面の Flash な人はそっちも要チェック。

**７月の私の予定
盛り沢山すぎる！！
-6日：&lt;a href=&quot;http://services.google.com/events/kyoto-techtalk2008&quot;&gt;Google 技術講演会 in 京都&lt;/a&gt;
-10日：祇園祭神輿洗
-14日～17日：祇園祭宵々々山～巡行・神幸祭
-19日朝：&lt;a href=&quot;http://www.ospn.jp/osc2008-kansai/modules/eguide/event.php?eid=12&quot;&gt;Shibuya.js in Kyoto&lt;/a&gt;
-19日夜：&lt;a href=&quot;http://teraco.jp/gohafla/&quot;&gt;ごはんとFlash ～おいでやす京都～&lt;/a&gt;
-24日：祇園祭還幸祭
-26日：&lt;a href=&quot;http://www.silverlightsquare.com/page_1213418278477.html&quot;&gt;Silverlightを囲む会&lt;/a&gt;＋&lt;a href=&quot;http://www.fxug.net/&quot;&gt;Flex User Group&lt;/a&gt; 共催イベント → 後日告知
</body>
</day>
<day date="2008-07-02" title="">
<body>
*shibuya_js_kyoto*Shibuya.js in Kyoto で発表します
&lt;a href=&quot;http://www.ospn.jp/osc2008-kansai/&quot;&gt;オープンソースカンファレンス2008 Kansai&lt;/a&gt; のセッション、&lt;a href=&quot;http://www.ospn.jp/osc2008-kansai/modules/eguide/event.php?eid=12&quot;&gt;Shibuya.js in Kyoto&lt;/a&gt; で発表します。

他の発表者はこんな感じ。
&gt;http://shibuyajs.org/archives/2008/07/01/shibuya-js-in-kyoto/:title&gt;
**スピーカ・トーク内容
タイトル等はまだ未定です。

-id:secondlife / JS/AS ブリッジ手法 
-id:amachang 
-mala 
-川崎有亮 / JS で Wii リモコン＆ canvas で 3D 
-Piro 
-gyuque 
-takesako / XSS Nite in Kyoto, Vol1 
-yukoba / 何かの処理系 on JS 
-yossy(beinteractive) / AIR で FlashPlayer 
-nitoyon / winQeury or ES4 
-nanto_vi / 取説 正規表現 
-kanasan 
&lt;&lt;

あこがれの Shibuya.js ですごい人たちと同じ舞台で発表することができてとても光栄なのですが、とても緊張します。ネタはこれから準備しなきゃ。

Shibuya なのに京都という意味不明なイベント名ですが、どうやら Shibuya.js は今まで一度も渋谷で開催したことがないらしく、間違ってはいないらしいです。

7月19日という３連休の初日、かつ、祇園祭のハイライトである山鉾巡行の２日後ということで、遠くから来る人は移動手段・宿泊施設はお早めに。既に京都市内の宿は壊滅的だと思いますが…。


一日一祇園祭リンク：&lt;a href=&quot;http://kyotolife.g.hatena.ne.jp/nitoyon/20080701/1214923887&quot;&gt;お千度の儀に行ってきました&lt;/a&gt;
</body>
</day>
<day date="2008-07-04" title="">
<body>
*google_ego_search*Google で nitoyon と検索すると
ちょっと幸せ。
[f:id:nitoyon:20080613122748j:image:w450]
</body>
</day>
<day date="2008-07-07" title="">
<body>
*gtt_kyoto*Google Tech Talk＠Kyoto に行ってきた
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080708/20080708171307.jpg?1215504819&quot; /&gt;&lt;/center&gt;&lt;
2008年7月6日＠ハイアットリージェンシー京都

技術的な話というよりも、Google のサービス紹介が多かった。内容については、&lt;a href=&quot;http://d.hatena.ne.jp/hakobe932/20080706/1215361731&quot;&gt;はこべにっき#&lt;/a&gt;さんとか、&lt;a href=&quot;http://d.hatena.ne.jp/con_mame/20080707&quot;&gt;まめ畑&lt;/a&gt;さんのところによくまとまっている。

今回の Tech Talk はリクルーティング目的ではなく、「次に日本で拠点を作るなら京都だよね」という雰囲気が Google 社内にあるようで、その偵察の第一歩のような感じらしい。関西での Google 主催イベントは初めてで、参加者の期待度も高かった。350人ぐらいの人が集まって、ドタキャン率もかなり少なかったとか。

この盛況ぶりを元にいよいよ Google が京都に…と簡単にはいかないんだろうけど、秋に京都で(関西で?)中途採用の面接会をやる計画もあるらしい。そこに関西の技術力のある人が沢山やってきて、家族がいるんで関西で働けたら嬉しいのに！という声が多くて…、と妄想は広がります…。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080706/20080706160000.jpg?1215504821&quot; width=&quot;450&quot; height=&quot;225&quot;&gt;&lt;/center&gt;&lt;

閉会の時間になって人がまばらになってきたへんで、適当に知り合いの人に声をかけて20人ぐらいの飲み会を計画していたんだけど、jkondo さんと naoya さんにも声かけよう、Google の人も声かけよう、という感じで話が広がって、気付いたら50人も集まっていた！

飲み会会場は5人に1人が Googler というすごい空間。やはり直接お話を聞くとさらに面白い。刺激的。刺激受けすぎた。いろいろと面白い話を聞いて、まとめたいんだけどオーバーフロー気味。

快く飲み会代を負担してくれた Google 様、ほんとうにありがとうございます。また、京都でイベントしてください！　あと、飲み会を自発的に仕切ってくれた id:cuzic さん、ありがとう。とても助かりました。

あと、和風な Google のロゴが素敵。６つの円には、それぞれ Google の文字が。大文字山が G 文字山になってたりも…！
</body>
<comments>
<comment>
<username>たく</username>
<body>adobeFLEXを調べるとよくこちらが、検索で引っかかるので拝見させていただいてます。私、初心者でflexをはじめているのですが、これを呼んで勉強したほうが言いと言う本はありますでしょうか？この日のこととは関係ない内容ですが、最新だったため、ご了承ください。</body>
<timestamp>1216107678</timestamp>
</comment>
</comments>
</day>
<day date="2008-07-20" title="">
<body>
*wsh_dom*WSHでDOM (Shibuya.js in Kyoto)
Shibuya.js in Kyoto にて「WSHでDOM」というタイトルで発表しました。

開発に一週間、プレゼン作りに一週間かけた渾身のネタです。
&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fshibuya-js-kyoto%2FSlide.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=360&amp;amp;title=DOM+for+WSH+(Shibuya.js+in+Kyoto)&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;/center&gt;&lt;

プレゼン作りにあたっては、２ページ目のイメージ写真を撮るために祇園祭に出かけたのが楽しかったです。

資料に使ったフォントは「&lt;a href=&quot;http://www.type-labo.jp/Hanpuanitowaku.html&quot;&gt;アニトＭ-教漢（無料版）&lt;/a&gt;」です。素敵なフォントが比較的自由なライセンスで公開されていて大変ありがたいですね。無料版なので、一部漢字が使えずに文章の変更を余儀なくされましたが、おかげで小学生にも読める分かりやすい資料になりました。

-ソースコード：http://coderepos.org/share/browser/lang/cplusplus/dom4winui/trunk/src
-プレゼン
--全画面で見る：http://tech.nitoyon.com/misc/shibuya-js-kyoto/Slide.swf
--ソース：http://tech.nitoyon.com/misc/shibuya-js-kyoto/Slide.as
--中身一式：http://tech.nitoyon.com/misc/shibuya-js-kyoto/Slide.zip
</body>
<comments>
<comment>
<username>こおど</username>
<body>おもしろいです．・&lt;br&gt;コードがみれましぇん</body>
<timestamp>1216647346</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>どのコードが見えないでしょうか。</body>
<timestamp>1216694435</timestamp>
</comment>
</comments>
</day>
<day date="2008-07-21" title="">
<body>
*fleverlight*[flex][silverlight][event]Fleverlight（Flex+Silverlight）勉強会が開催されるよ
今週末の話ですが、Flex と Silverlight の勉強会が開催されます。Flex User Group と Silverlight を囲む会の共催イベントです。
&gt;&gt;
**Fleverlight勉強会
(&lt;a href=&quot;http://www.silverlightsquare.com/page_1213418278477.html&quot;&gt;Silverlight を囲む会 #3&lt;/a&gt;＋&lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?cmd=read&amp;page=Flex3%CA%D9%B6%AF%B2%F1%C2%E846%B2%F3%A1%F7%C2%E7%BA%E5%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;FxUG勉強会#46&lt;/a&gt; 共同開催)

***日時
2008/7/26(土) 14:30～17:30 (3時間)
***会場
大阪産業創造館17F フリースペース (&lt;a href=&quot;http://www.sansokan.jp/map/&quot;&gt;地図&lt;/a&gt;)
***内容
-2:15～ 受付
-2:40～3:00 Flex &amp; Silverlightをはじめるには
-3:00～3:20 Silverlightセッション(タイトル未定)
-3:20～3:40 Flexセッション(タイトル未定)
-3:50～4:20 Flex/Silverlight ライトニングトーク
-4:20～5:00 FlexとSilverlightで作ってみよう！ライブコーディング (nitoyon &amp; k-maru)
-5:00～5:15 ちょっとした参加型イベント
-5:15～5:30 最後の挨拶、アンケート記入、後片付け
&lt;&lt;
Flex(AIR) とか Silverlight などの RIA が軽く注目を浴びてきてますが、３時間で両者を比較しながら概要が分かるという素敵なイベントです。飲み会に参加したら、それぞれのコミュニティの「実際のところどうなんよ」がわかってさらにお得かも！

私は最後の方で Flex を使ってライブコーディングします。Silverlight 担当は gihyo.jp で &lt;a href=&quot;http://gihyo.jp/dev/serial/01/silverlight&quot;&gt;連載：始めよう！Silverlight&lt;/a&gt; を連載中の丸山さん。当日は火花を散らしながら戦う(?)予定なのですが、なんとお題は当日まで知らされないらしい…。全然知らない範囲のことをやることになったら困ってしまいますね…。

東京から FxUG 主催者の横田さん(id:sato-shi)もいらっしゃる予定だとか。

申し込みはどちらかのユーザーグループからどうぞ。
-&lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?cmd=read&amp;page=Flex3%CA%D9%B6%AF%B2%F1%C2%E846%B2%F3%A1%F7%C2%E7%BA%E5%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;FxUG勉強会#46&lt;/a&gt;
-&lt;a href=&quot;http://www.silverlightsquare.com/page_1213418278477.html&quot;&gt;Silverlight を囲む会 #3&lt;/a&gt;
</body>
<comments>
<comment>
<username>sato-shi</username>
<body>遊びにいきまーす♪</body>
<timestamp>1216728619</timestamp>
</comment>
</comments>
</day>
<day date="2008-07-22" title="">
<body>
*photo20080719*2008/7/19 行動記録
**Shibuya.js in Kyoto
京都コンピュータ学院よりの眺望。新幹線と東寺五重塔。
[f:id:nitoyon:20080722014537j:image]
開始15分前の会場。ほんまに集まるんかいな、と思ったけど、10時15分にはだいぶ人が増えていて、LT が始まるぐらいの時間にはそこそこの人だった。技術者は朝が弱い。
[f:id:nitoyon:20080722014538j:image]
騙されて(?)一人だけ浴衣になったらしい人。
[f:id:nitoyon:20080722014529j:image]
メイントークが secondlife さん、nanto_vi さん、amachang さんと私。よく考えたらすごい人達に囲まれていて、大層なプレッシャーを感じることに当日になって気付いた。遅すぎ。

とはいえ、しっかりプレゼン作りこんできたので意外に平気だった。作りこんだプレゼンは、自分の思考回路とが完全に同期しているので、発表するときには吐き出すだけですむ。だからほとんど緊張しない。この方法の難点は、準備がとてつもなく大変なこと。

最後の nagayama さんの代理発表が斬新すぎておもしろかった。

**お昼ご飯
発表者とその周辺でお昼ご飯へ。amachang が何でも質問していたのがパワフルだと思った。知らないことを知られるのを恐れずに何でも質問する姿勢がかっこいい。見習いたい。

**はてなのバックエンドシステムと開発手法、過去と今
歴史を振り返りながらインフラ体制を説明。500人キャパの会場がかなり埋まっていた。(追記：&lt;a href=&quot;http://www.mozilla.gr.jp/~shimono/blog/?p=52&quot;&gt;300人埋まってた&lt;/a&gt;らしい！)

**ごはんとFlash準備＠1→10
烏丸五条の &lt;a href=&quot;http://www.1-10.com/&quot;&gt;ワン・トゥー・テン・デザイン&lt;/a&gt; さんにて &lt;a href=&quot;http://teraco.jp/gohafla/&quot;&gt;ごはんとFlash ～おいでやす京都～&lt;/a&gt; の直前準備。
[f:id:nitoyon:20080722014530j:image]
Web 製作会社ってどこもこんなにオシャレな感じなんでしょか。
[f:id:nitoyon:20080722014531j:image]

Shibuya.js の発表が無事に終わった満足感と、ここ１週間の寝不足と祇園祭の疲労で、テンションがかなり低めでした。すいません。体力回復して、ごはんとFlashの本番にそなえる。

**ごはんとFlash
&lt;a href=&quot;http://sarasak2.exblog.jp/&quot;&gt;さらさ花遊小路&lt;/a&gt;にて。とても素敵な会場。雰囲気よし。
[f:id:nitoyon:20080722014533j:image]
立食用に壁際に並べられたイス。
[f:id:nitoyon:20080722014532j:image]
開始直前。大量のご飯。
[f:id:nitoyon:20080719190527j:image]

スタッフは揃いのTシャツを（自腹で）作って着てました。こういうの着ると文化祭っぽくてよい。
[f:id:nitoyon:20080722014535j:image]
自分もスタッフだったんだけどほとんど何もできず、みんながデザインをがんがん出してくるのを横目で見て関心してた。ちゃんとデザインできる人ってすげーなー。

「ごはんとコーヒー」の看板を無理やりに「ごはんとFlash」に修正したところ。芸が細かい。
[f:id:nitoyon:20080722014534j:image]

Flash やってるいろんな人とお話できて楽しかったですよ。

**ごはんとFlash ２次会（朝まで）
naggggggg さん独演会。疲れていたので26時ぐらいに抜ける。

**20日
Kanasan.js に行きたかったが、結局昼過ぎまで寝る。Shibuya.js の資料のライブコーディング部分を手直ししてブログにアップして、また寝る。１日休憩。
</body>
</day>
<day date="2008-07-23" title="">
<body>
*as3_embed_font*[as]AS3 で埋め込みフォントを使うテクニック
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080723/20080723005315.png?1216742113&quot; width=&quot;436&quot; height=&quot;134&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
埋め込みフォントを使う場合のちょっとしたTipsを３つ紹介しておく。

**1. 何も考えずにフォントを埋め込む方法
フォントを埋め込むには、Embed メタタグを利用する。
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class EmbedFontTest extends Sprite {
        [Embed(source='アニトＭ-教漢.TTF', fontName='anito')]
        private var font:Class;

        public function EmbedFontTest(){
            stage.align = &quot;TL&quot;;
            stage.scaleMode = &quot;noScale&quot;;

            var textField:TextField = new TextField();
            textField.embedFonts = true;
            textField.width = 400;
            textField.height = 300;
            textField.x = 50;
            textField.wordWrap = true;
            textField.htmlText = &quot;&lt;font face='anito' size='30'&gt;embedFont で回転やアルファの設定が自由自在になりますね。&lt;/font&gt;&quot;;
            textField.rotation = 10;
            addChild(textField);
        }
    }
}
||&lt;
-Embed メタタグでは source 属性でフォントのパス、fontName 属性でFlash 中で利用するフォント名を設定する。
-TextField ではメタタグで決定したフォント名を指定してやる。ここでは TextFormat を使うのが面倒なので、htmlText 中の font タグで直接設定してる。
-TextField の embedFonts を true にするのを忘れずに。

**2. コンパイル時間を改善する
このままだと TTF ファイルを毎回変換するため、コンパイルに時間がかかる。

これを解決するために、フォントを埋め込んだ SWF ファイルを事前に作成しておいて、動的にロードすることでコンパイル時間を削減できる。

やり方は &lt;a href=&quot;http://d.hatena.ne.jp/lalalila/20080422/1208884394&quot;&gt;外部SWFから動的にフォント読み込み - d.lalalila.?&lt;/a&gt; が詳しい。CS3 な人には &lt;a href=&quot;http://level0.cuppy.co.jp/2008/06/cs3_2.php&quot;&gt;CS3版　フォントのダイナミックなローディング｜_level0.CUPPY&lt;/a&gt; が役立つはず。

**3. 使う文字だけを埋め込んでパブリッシュ
文章が固まってきたら、必要な文字だけを埋め込むようにするとよい。SWF のファイルサイズが小さくなるし、フォントによっては全ての文字を埋め込むのを禁止していたりする。

文章から埋め込み用の記法を作成する Perl のワンライナーを作った。文章が message.txt に UTF-8 で入っているとする。
&gt;|sh|
&gt;perl -e &quot;use utf8; binmode STDIN,':utf8'; $s = join '',&lt;STDIN&gt;; %h; for(@s=split //,$s){$h{$_}=1} print join ',', map {sprintf 'U+%04X', ord} sort keys %h;&quot; &lt; message.txt
||&lt;
横に長くて読みにくいので、整形するとこんな感じ。
&gt;|perl|
use utf8;
binmode STDIN,':utf8';

# 標準入力から読み込む
$s = join '', &lt;STDIN&gt;;

# 文字別にハッシュに詰め込む
for (split //, $s) {$h{$_} = 1}

# 小さい順に 'U+0000' 形式で出力する
print join ',', 
  map {sprintf 'U+%04X', ord} sort keys %h;
||&lt;

出力はこうなる。文章の中に登場する文字を、小さいものから順に列挙してくれる。
&gt;|
U+0020,U+0046,U+0062,U+0064,U+0065,U+006D,U+006E,
U+006F,U+0074,U+3002,U+304C,U+3059,U+3067,U+306A,
U+306B,U+306D,U+306E,U+307E,U+3084,U+308A,U+30A1,
U+30A2,U+30D5,U+30EB,U+56DE,U+5728,U+5B9A,U+7531,
U+81EA,U+8A2D,U+8EE2
|&lt;
これを Embed メタタグの unicodeRange に突っ込めば、message.txt に含まれている文字だけを SWF に埋め込んでくれる（実際は１行で書く）。
&gt;|
[Embed(source='アニトＭ-教漢.TTF', fontName='anito', 
  unicodeRange='U+0020,U+0046,U+0062,U+0064,U+0065,U+006D,
  U+006E,U+006F,U+0074,U+3002,U+304C,U+3059,U+3067,U+306A,U+306B,
  U+306D,U+306E,U+307E,U+3084,U+308A,U+30A1,U+30A2,U+30D5,U+30EB,
  U+56DE,U+5728,U+5B9A,U+7531,U+81EA,U+8A2D,U+8EE2')]
|&lt;
本当なら、連続する文字は - で省略した方がソースは短くなる。例えば、U+0064,U+0065,U+0066 のような文字が並ぶところは、U+0064-U+0066 としたほうがシンプル。けども、判定が面倒なのでそこまでは実装していない。

で、出来上がったのがこの Flash。表示している文字列分のフォントしか埋め込んでないので、ファイルサイズはわずか 8KB になった。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FEmbedFontTest.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=460&amp;amp;h=150&amp;amp;title=Embed+Font+Test&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;/center&gt;&lt;

めでたし。
</body>
</day>
<day date="2008-07-24" title="">
<body>
*embed_font_swfassist*[as]埋め込みフォントの情報を swfassist で取得する
先日の Shibuya.js のあとに、BeInteractive! の yossy さんが「swfassist を使ってくれる人が少なくて悲しい」みたいなことを言ってたので、埋め込みフォントのベクタ情報を swfassist を使って取得してみた。

&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FPop2.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=150&amp;amp;title=pop+ad&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;/center&gt;&lt;

SWF のバイト情報は loaderInfo.bytes に入っている。そこで、フォントを埋め込んだ SWF を swfassist に食わしてやると、フォントのベクタ情報が取れる。このベクタ情報を元に ShapeOutlineDrawer を使って描画してる。

(追記) ただし、loaderInfo.bytes は Flash Player 9.0.115 以降にしか含まれていないので、それ以前のバージョンだとエラーになる。

ShapeOutlineDrawer には graphics.lineStyle(1,0x000000); という行があるのだけど、呼び出し元で線の太さを指定したかったので、この部分をコメントアウトして使っている。１行だけ違う別のクラス作るのもなんだか微妙だったので…。

そのほかは、ほとんど公式のドキュメントそのまんま。やってることは &lt;a href=&quot;http:/subtech.g.hatena.ne.jp/secondlife/20071017/1192555005&quot;&gt;swfassist でフォントのベクタ情報取得 - 8時40分が超えられない - subtech&lt;/a&gt; に近い。見た目は &lt;a href=&quot;http:/d.hatena.ne.jp/nitoyon/20071005/potras_pop&quot;&gt;PotrAs でチラシ文字 - てっく煮ブログ&lt;/a&gt; の焼き直し。

ソースは以下に。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.filters.DropShadowFilter;

    import org.libspark.swfassist.io.*;
    import org.libspark.swfassist.swf.io.*;
    import org.libspark.swfassist.swf.structures.SWF;
    import org.libspark.swfassist.swf.structures.Shape;
    import org.libspark.swfassist.swf.structures.ShapeRecord;
    import org.libspark.swfassist.swf.structures.ShapeRecordTypeConstants;
    import org.libspark.swfassist.inprogress.swf.ShapeCollector;
    import org.libspark.swfassist.flash.display.ShapeDrawer;
    import org.libspark.swfassist.flash.display.ShapeOutlineDrawer;
    import org.libspark.swfassist.flash.display.FlashGraphics;

    public class Pop2 extends Sprite {
        [Embed(source='アニトＭ-教漢.TTF',fontName='anito',unicodeRange='U+58F2,U+5927,U+5B89')]
        private var font:lass;

        public function Pop2(){
            stage.align = &quot;TL&quot;;
            stage.scaleMode = &quot;noScale&quot;;

            var input:ataInput = new ByteArrayInputStream(loaderInfo.bytes);
            var context:eadingContext = new ReadingContext();
            var reader:WFReader = new SWFReader();
            var swf:WF = reader.readSWF(input,context);

            var shapeCollector:hapeCollector = new ShapeCollector();
            swf.visit(shapeCollector);

            var drawer:hapeOutlineDrawer = new ShapeOutlineDrawer();
            var s1:prite = draw(shapeCollector.shapes[2],drawer);
            var s2:prite = draw(shapeCollector.shapes[3],drawer);
            var s3:prite = draw(shapeCollector.shapes[1],drawer);

            addChild(s1); s1.x =  10; s1.y = 50;
            addChild(s2); s2.x =  60; s2.y = 50;
            addChild(s3); s3.x = 110; s3.y = 50;

            scaleX = scaleY = 2;
            filters = [new DropShadowFilter(4,45,0x000080,1,0,0)];
        }

        private function draw(shape:hape,drawer:hapeOutlineDrawer):prite{
            var ret:prite = new Sprite();

            drawer.graphics = new FlashGraphics(ret.graphics);
            ret.graphics.lineStyle(5,0xff0000);
            ret.graphics.beginFill(0xff0000);
            drawer.draw(shape);
            ret.graphics.endFill();

            ret.graphics.lineStyle(1,0xffffff);
            drawer.draw(shape);
            ret.graphics.endFill();

            return ret;
        }
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2008-07-25" title="">
<body>
*shape_of_a_dream*[as]フォント情報を元に歪めて描画：ユメのカタチ
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080724/embed_font_swfassist&quot;&gt;埋め込みフォントの情報を swfassist で取得する&lt;/a&gt;から先へ進んで、フォントのベクタ情報を加工して遊んでみよう。

(追記) &lt;s&gt;手元の Firefox だと「bytes が読み取れない」と例外が出る。ブラウザや Player のバージョンによっては動かない！？&lt;/s&gt; bytes は Flash Player 9.0.115.0 以降にしかないので、それ以前のバージョンでは動かない…ということだ。

swfassist には描画の仕方を定義する FlashGraphics クラスがある。これを拡張して、FuzzyFlashGraphics というクラスを作成してみた。与えられた座標から、ずらして描画するためのクラスだ。

さっそく例。ランダムにずらしつつ、ずらす幅を時間ごとに変化させてみた。

&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FFuzzyFontDemo.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=300&amp;amp;title=shape+of+a+dream&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;/center&gt;&lt;

FlashGraphics オブジェクトのコールバック関数 f で歪め方を定義する。そこそこ汎用的に遊べるんじゃないかと思う。

フォントの座標情報が手中にあるんだから、なんかしら面白いことができそうなんだけど、これぐらいしか思いつかないなぁ…。

ソースは以下に。
====
&gt;|javascript|
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.geom.Point;
    import org.libspark.swfassist.io.*;
    import org.libspark.swfassist.swf.io.*;
    import org.libspark.swfassist.swf.structures.SWF;
    import org.libspark.swfassist.swf.structures.Shape;
    import org.libspark.swfassist.swf.structures.ShapeRecord;
    import org.libspark.swfassist.swf.structures.ShapeRecordTypeConstants;
    import org.libspark.swfassist.inprogress.swf.ShapeCollector;
    import org.libspark.swfassist.flash.display.ShapeDrawer;
    import org.libspark.swfassist.flash.display.ShapeOutlineDrawer;

    [SWF(backgroundColor=&quot;#000000&quot;, frameRate=&quot;6&quot;)]
    public class FuzzyFontDemo extends Sprite {
        [Embed(source='アニトＭ-教漢.TTF', fontName='anito', unicodeRange='U+5922')]
        private var font:Class;

        public function FuzzyFontDemo(){
            stage.align = &quot;TL&quot;;
            stage.scaleMode = &quot;noScale&quot;;

            var input:DataInput = new ByteArrayInputStream(loaderInfo.bytes);
            var context:ReadingContext = new ReadingContext();
            var reader:SWFReader = new SWFReader();
            var swf:SWF = reader.readSWF(input, context);

            var shapeCollector:ShapeCollector = new ShapeCollector();
            swf.visit(shapeCollector);
            var shape:Shape = shapeCollector.shapes[1];

            var sprite:Sprite = new Sprite();
            addChild(sprite);

            var rad:Number = 0;
            addEventListener(&quot;enterFrame&quot;, function(event:Event):void{
                sprite.graphics.clear();

                var fuzzy:FuzzyFlashGraphics = new FuzzyFlashGraphics(sprite.graphics);
                var a:Number = Math.sin(rad / 180 * Math.PI) * 4;
                rad = (rad + 4) % 360;
                fuzzy.f = function(pt:Point):Point{
                    pt.x += (Math.random() - .5) * a;
                    pt.y += (Math.random() - .5) * a;
                    return pt;
                }

                var drawer:ShapeOutlineDrawer = new ShapeOutlineDrawer();
                drawer.graphics = fuzzy;

                sprite.graphics.lineStyle(0, 0xffffff);
                sprite.graphics.beginFill(0xffffff);
                drawer.draw(shape);
                sprite.graphics.endFill();
            });

            sprite.y = 50;
            scaleX = scaleY = 5;
        }
    }
}

import flash.display.Graphics;
import flash.geom.Point;
import org.libspark.swfassist.flash.display.FlashGraphics;

class FuzzyFlashGraphics extends FlashGraphics{
    public function FuzzyFlashGraphics(graphics:Graphics = null){
        super(graphics);
        _f = function(pt:Point):Point{return pt;}
    }

    private var _f:Function = null;
    public function get f():Function{return _f;}
    public function set f(value:Function):void{_f = value;}

    public override function curveTo(controlX:Number, controlY:Number, anchorX:Number, anchorY:Number):void{
        var p1:Point = _f(new Point(controlX, controlY));
        var p2:Point = _f(new Point(anchorX, anchorY));
        super.curveTo(p1.x, p1.y, p2.x, p2.y);
    }

    public override function lineTo(x:Number, y:Number):void{
        var p:Point = _f(new Point(x, y));
        super.lineTo(p.x, p.y);
    }

    public override function moveTo(x:Number, y:Number):void{
        var p:Point = _f(new Point(x, y));
        super.moveTo(p.x, p.y);
    }
}
||&lt;
</body>
</day>
<day date="2008-07-28" title="">
<body>
*fleverlight1*[flex][silverlight][event]Fleverlight 勉強会に参加してきた
&lt;a href=&quot;http://www.silverlightsquare.com/page_1213418278477.html&quot;&gt;Silverlight を囲む会 #3&lt;/a&gt; と &lt;a href=&quot;http://www.fxug.net/modules/bwiki/index.php?cmd=read&amp;page=Flex3%CA%D9%B6%AF%B2%F1%C2%E846%B2%F3%A1%F7%C2%E7%BA%E5%BB%B2%B2%C3%BC%F5%C9%D5&quot;&gt;FxUG勉強会#46&lt;/a&gt; で共同開催した、通称「Fleverlight勉強会」に行ってきた。

初の共催ということで、事前にも何回か打ち合わせするというすごい気合の入れよう。イベントを通して、お互いの技術のカラーやコミュニティのカラーが垣間見えて面白かった。

ただ、こういう共催のときは発表者は大変だ。片方にとっては当たり前のことでも、もう片方にとっては初耳のことばかりだったり。そういう点では、途中の、5分縛りの LT 4連発は、テンポもよくてメリハリがあって面白かった。こういう勉強会では小ネタ連発のほうが分かりやすいかもね。大ネタだと、一回置いてかれると残りの時間が辛いので。といっても、LT だけにする訳にもいかないので難しい。

そんなこんなで発表内容のメモを公開。

**発表メモ
Silverlight 側の発表で目新しかった内容。

***Deep Zoom
&lt;a href=&quot;http://blog.livedoor.jp/haruka_sao/&quot;&gt;遥佐保さん&lt;/a&gt;

- Google Maps みたいな拡大できるやつを Silverlight で作る
- Silverlight 2 用のコンポーネント
- Deep Zoom composer というツールで作る
-- 高精度の写真を貼り付けると、自動的に複数の解像度の画像ファイルを作る
-- マウスでぐりぐりできるものが完成するデモ
- Virtual Earth の Silverlight Deep Zoom 版もある


***Silverlight IDE
id:coma2n さん

- ブラウザ上で Silverlight 開発ができるツール
- 詳しくは [http://d.hatena.ne.jp/coma2n/20080707/1215414408:title] にて
- コード補完はないの？という鬼質問が…！

***WPF と Silverlight の XAML
&lt;a href=&quot;http://www.divakk.co.jp/blog/aoyagi/&quot;&gt;青柳臣一さん&lt;/a&gt;

-WPF, silverlight は XAML のスキーマは同じだけど、ランタイムの解釈が違う。
-WPF
-- Windows で動く。
--Windows 専用の最適化。
-Silverlight
--ブラウザで動く。
--クラスプラットフォームなので制約が多い (3D、トリガー、Window がないとか)。
--β2 からは Silverlight 先行で機能が追加され始めてる (Visual State Manager)。そのうち、WPF にもマージされる予定。

**ライブコーディングのソース
お題を言われてから30分で完成させないさい、という凶悪ライブコーディングだった。

どんなネタかと思ったら、「42 までの数字から１つをランダムに選んで表示するルーレットを作れ」というものだった。しかも、RIA っぽくリッチな UI にしろですって。ハードル高！

Flex User Group 側で参加したので、最初は MXML 使ってコーディングしてたけど、一段落したところで「AS3 だけのほうがいいや」と思って、AS3 だけで最初から作り直した。よく考えたら、Flex で layout=&quot;absolute&quot; すればよかったんだ…。

で、完成品がコレ。

&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FFleverlight1.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=400&amp;amp;title=Live+Coding&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;/noscript&gt;&lt;/center&gt;&lt;

クリックすると数字が現れる。AS3 + Tweener で作ってる。

コーディングはいつもどおり、秀丸＋rascut でやった。秀丸のコード補完機能に対する反響が多かったんだけど、&lt;a href=&quot;http://hide.maruo.co.jp/software/hidemaru7/new1.html&quot;&gt;秀丸v7.0 の目玉新機能&lt;/a&gt;。実際にはまったく使わなかったんだけど。

ソースは以下に。
====
最初作った MXML のソース。すごく投げやりな感じで setTimeout のところが汚い。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!-- Simple example to demonstrate the Image control. --&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;
    backgroundColor=&quot;#ffffff&quot;
    scaleX=&quot;4&quot; scaleY=&quot;4&quot;&gt;

    &lt;mx:Script&gt;
        &lt;![CDATA[
            import mx.controls.*;
            import flash.utils.*;
            
            private function clickHandler():void{
                var counter:int = 0;
                btn.enabled = false;

                var timerId:int = setTimeout(function():void{
                    counter++;
                    var i:int = Math.floor(Math.random() * 41) + 1;
                    show(i);

                    if(counter &gt; 10){
                        btn.enabled = true;
                    }else{
                        setTimeout(arguments.callee, counter * 100);
                    }
                }, 100);
            }

            private function show(i:int):void{
                img1.source = &quot;img/&quot; + Math.floor(i / 10) + &quot;.png&quot;;
                img2.source = &quot;img/&quot; + (i % 10) + &quot;.png&quot;;
            }
        ]]&gt;
    &lt;/mx:Script&gt;

    &lt;mx:HBox&gt;
        &lt;mx:Image id=&quot;img1&quot; source=&quot;img/0.png&quot;/&gt;
        &lt;mx:Image id=&quot;img2&quot; source=&quot;img/0.png&quot;/&gt;
    &lt;/mx:HBox&gt;

    &lt;mx:Button id=&quot;btn&quot; label=&quot;click!!&quot;
        click=&quot;clickHandler()&quot;/&gt;

&lt;/mx:Application&gt;
||&lt;

最初から作り直した AS3 のソース。
&gt;|javascript|
package{
import flash.display.*;
import caurina.transitions.Tweener;

[SWF(backgroundColor=&quot;#ffffff&quot;)]
public class Test2 extends Sprite{
    [Embed(source='img/0.png')]
    private var Img0:Class;
    [Embed(source='img/1.png')]
    private var Img1:Class;
    [Embed(source='img/2.png')]
    private var Img2:Class;
    [Embed(source='img/3.png')]
    private var Img3:Class;
    [Embed(source='img/4.png')]
    private var Img4:Class;
    [Embed(source='img/5.png')]
    private var Img5:Class;
    [Embed(source='img/6.png')]
    private var Img6:Class;
    [Embed(source='img/7.png')]
    private var Img7:Class;
    [Embed(source='img/8.png')]
    private var Img8:Class;
    [Embed(source='img/9.png')]
    private var Img9:Class;

    public function Test2():void{
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        scaleX = scaleY = 5;

        stage.addEventListener(&quot;click&quot;, function(event:*):void{
            while(numChildren){
                removeChildAt(0);
            }
            draw();
        });
    }

    private function draw():void{
        var i:int = Math.floor(Math.random() * 42) + 1;
        var n1:int = Math.floor(i / 10);
        var n2:int = (i % 10);

        var cls:Array = [
            Img0, Img1, Img2, Img3, Img4,
            Img5, Img6, Img7, Img8, Img9
        ];

        var img1:Bitmap = new cls[n1]();
        img1.rotation = 180;
        img1.x = 10;
        img1.y = -30;
        addChild(img1);

        var img2:Bitmap = new cls[n2]();
        img2.rotation = 180;
        img2.y = -30;
        img2.x = 40;
        addChild(img2);

        Tweener.addTween(img1, {
            rotation: 0,
            y: 50,
            time: 1,
            transition: &quot;easeOutElastic&quot;
        });
        Tweener.addTween(img2, {
            rotation: 0,
            y: 50,
            time: 1,
            delay: .8,
            transition: &quot;easeOutElastic&quot;
        });
    }
}
}
||&lt;
画像を埋め込むための Embed が無駄に多くて悲しいけど、クラス配列から new してるあたりがアクロバティックで気に入っている。
</body>
</day>
<day date="2008-07-31" title="">
<body>
*c_sharp_com*[C#]C# で COM コンポーネントを公開する
C# で COM コンポーネントを作って、JScript や VBScript から使う方法ですよ。

以下、簡単な目次。

+プロジェクトを作る
+COM 参照可能にする
+C# で実装する
+COM コンポーネントとして登録する
+完成！！

ここでは、Visual Studio 2005 を使ってるけど、それ以外のバージョンでも同じようにできるはず。

**1. プロジェクトを作る
Visual C# のクラス ライブラリ プロジェクトを作る。
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080731/20080731004114.jpg&quot; width=&quot;400&quot; height=&quot;220&quot;&gt;

**2. COM 参照可能にする
プロジェクトのプロパティから [アプリケーション] の [アセンブリ情報] ボタンを押す。[アセンブリ情報] ダイアログが表示されるので、[アセンブリを COM 参照可能にする] をチェックして [OK] ボタンを押しておく。

&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080731/20080731003537.jpg&quot; height=&quot;450&quot; height=&quot;395&quot;&gt;

これで、ComVisibleAttribute が true になって、クラスライブラリが COM として参照できるようになる。

**3. 実装する
インターフェースと実装を C# で定義していく。

以下は簡単な Hello world サンプル。
&gt;|javascript|
using System;
using System.Runtime.InteropServices;

namespace Test
{
    [Guid(&quot;E5C9BABC-CF32-46de-ADF7-B1FF56126966&quot;)]
    public interface IFoo
    {
        String foo();
    }

    [ClassInterface(ClassInterfaceType.None)]
    [ProgId(&quot;Test.Foo&quot;)]
    [Guid(&quot;B13E1F81-991F-4498-AB1F-FF83FB97914D&quot;)]
    public class Foo : IFoo
    {
        public String foo()
        {
            return &quot;Hello world!&quot;;
        }
    }
}
||&lt;

Guid は [Create GUID] ツールから適宜生成していく。

ProgId 属性でスクリプトから参照するときの ProgId を指定しておく。この値が重要。

**4. COM コンポーネントとして登録する
COM インターフェースとして公開するには、レジストリに登録しなきゃならん。.NET アセンブリを登録するには &lt;strong&gt;regasm&lt;/strong&gt; ツールを利用する。

regasm は .NET Framework にも含まれてる。.NET 2.0 の場合、
-C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\RegAsm.exe
にいる。

登録はこう。
&gt;|
regasm /codebase Test.dll
|&lt;
regasm にはデフォルトでパスが通ってないので、フルパスで入力するなり、Visual Studio や Windows SDK 付属のコマンドプロンプト（Visual Studio のツールにパスが通った状態で利用できる）を使うとよいだろう。

登録解除するには /u。
&gt;|
regasm /u Test.dll
|&lt;

**5. 完成！！
JScript から呼び出してみる。
&gt;|javascript|
var test = new ActiveXObject(&quot;Test.Foo&quot;);
WScript.echo(test.foo());
||&lt;
実行！
&gt;|
&gt;cscript /nologo test.js
Hello world!
|&lt;

VBScript から呼び出してみる。
&gt;|vb|
Dim test
Set test = CreateObject(&quot;Test.Foo&quot;)
WScript.echo(test.foo())
||&lt;
実行！
&gt;|
&gt;cscript /nologo test.vbs
Hello world!
|&lt;

ここまで確認できたら、C# のソースに手をいれて、どんどん拡充していくと楽しくなる。インターフェースが変化したときには、/u で登録解除して、再度登録してやる必要があるので注意。

**参考URL
-&lt;a href=&quot;http://japan.internet.com/developer/20060627/25.html&quot;&gt;COM相互運用機能の利用 - japan.internet.com デベロッパー&lt;/a&gt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080801/atlcom_dispatch&quot;&gt;C#＋RegAsm では JScript からコレクションとして参照できないので、ATL で作り直した話&lt;/a&gt;
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>sakony</username>
<body>うぉぉぉ！書いてある通りにしたら動きました！！&lt;br&gt;ありがとうございます！！</body>
<timestamp>1311160100</timestamp>
</comment>
</comments>
</day>
<day date="2008-08-01" title="">
<body>
*atlcom_dispatch*C#＋RegAsm では JScript からコレクションとして参照できないので、ATL で作り直した話
そんなわけで、前回紹介した &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080731/c_sharp_com&quot;&gt;C# で COM コンポーネントを公開する&lt;/a&gt; 方法で、コーディングして遊んでたのだけれど、どうもコレクションを実装してもうまく行かないので困り果てた話をしておこう。

**JScript だと DISPID_VALUE が呼ばれない
通常、COM オブジェクトをコレクションとして公開するには DISPID 0 (DISPID_VALUE) で Item メソッドを公開する。具体的にはこう。
&gt;|javascript|
    [Guid(&quot;E5C9BABC-CF32-46de-ADF7-B1FF56126966&quot;)]
    public interface IFoo
    {
        [DispId(0)]
        int Item(int i);
    }

    [ClassInterface(ClassInterfaceType.None)]
    [ProgId(&quot;Test.Foo&quot;)]
    [Guid(&quot;B13E1F81-991F-4498-AB1F-FF83FB97914D&quot;)]
    public class Foo : IFoo
    {
        public int Item(int i)
        {
            return i;
        }
    }
||&lt;
DispId 属性を使って、ディスパッチID を 0 に強制している。

VBScript からコレクション（配列）のようにアクセスできることが確認できる。

&gt;|vb|
Dim test
Set test = CreateObject(&quot;Test.Foo&quot;)

For i = 0 To 10
    WScript.echo(test(i))
Next
' 1 2 3 4 ...
||&lt;

でも、JScript からだと、なぜか表示されない。

&gt;|javascript|
var test = new ActiveXObject(&quot;Test.Foo&quot;);

for(var i = 0; i &lt; 10; i++){
  WScript.echo(test[i]);
}
// 何も表示されない…
||&lt;

どうやら、JScript で hoge[0] と書くと、hoge.0 というプロパティを探しに行くらしい。COM 的に表現すると、DISPID 0 の Item() メソッドを呼ぶのではなく、GetIDsOfNames() メソッドを呼んで、DISPID を探し始めるようだ…。

**ATL で書き直し
C# は GetIDsObNames() がラップされているため、細かく制御できない。つまり、C# で JScript からコレクションに見えるオブジェクトを作ることは不可能だ。

仕方がないので、ATL で書き直すことにした。ATL COM を使うのは初めてだったけど、&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4881356992/nitoyoncom-22/ref=nosim&quot;&gt;ATL COMプログラミング&lt;/a&gt; を読みながら習得していった。

asin:4881356992:detail

COM 関係の本はいくつかチャレンジしたが、これが一番分かりやすかった。ちょっと情報が古いけど、Visual Studio 2005 を触りながらでも理解できた。

**IDispatchImpl を拡張して添え字でアクセス可能に
通常、ATL でデュアルインターフェースを実装するには、IDispatchImpl を利用する。IDispatchImpl の実装を眺めてみると、GetIDsOfNames() などのメソッドはタイプライブラリ(tlb)から情報を読み取っている。つまり、IDispatchImpl では動的に増減する可変長のコレクションは扱えない。

仕方がないので、IDispatchImpl を継承したクラスで拡張していくことにした。まずは、ヘッダファイル。
====
&gt;|cpp|
// IDipatchArrayImpl
template &lt;class T&gt;
class ATL_NO_VTABLE IDispatchArrayImpl : public T
{
public:
    STDMETHOD(GetIDsOfNames)(REFIID riid, LPOLESTR* rgszNames, UINT cNames,
        LCID lcid, DISPID* rgdispid);
    STDMETHOD(Invoke)(DISPID dispidMember, REFIID riid,
        LCID lcid, WORD wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult,
        EXCEPINFO* pexcepinfo, UINT* puArgErr);

    virtual HRESULT ArrayGet(int index, VARIANT* pvarResult) = 0;

    virtual ~IDispatchArrayImpl(){};
};
||&lt;
IDispatch のインターフェースと ArrayGet というメソッドを宣言している。テンプレートを使ってるのは ATL の流儀に則るための必然。

コレクションに見せたいクラスでは、IDispatchImpl を継承する代わりに、次のように IDispatchArrayImpl を継承する。
&gt;|cpp|
class ATL_NO_VTABLE CDomUiNodeList :
    public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
    public CComCoClass&lt;CDomUiNodeList, &amp;CLSID_DomUiNodeList&gt;,
    public IDispatchArrayImpl&lt;IDispatchImpl&lt;IDomUiNodeList, &amp;IID_IDomUiNodeList, &amp;LIBID_dom4winuiLib, 1, 0&gt;&gt;
{
||&lt;
このクラスの実装はこんな具合。詳しくはコメントを参照あれ。
&gt;|cpp|
// IDipatchArrayImpl
#define DISPID_ARRAY 5

// プロパティ名が数字だったら、DISPID_ARRAY を足した
// DISPID を返す
template &lt;class T&gt;
STDMETHODIMP IDispatchArrayImpl&lt;T&gt;::GetIDsOfNames(REFIID riid, LPOLESTR* rgszNames, UINT cNames,
    LCID lcid, DISPID* rgdispid)
{
    // assumes that cNames == 1
    if(cNames == 1)
    {
        // digit check
        if(iswdigit(*rgszNames[0]))
        {
            int index = _wtoi(*rgszNames);
            if(index &gt;= 0)
            {
                *rgdispid = index + DISPID_ARRAY;
                return ERROR_SUCCESS;
            }
        }
    }
    return T::GetIDsOfNames(riid, rgszNames, cNames, lcid, rgdispid);
}

// DISPID が DISPID_ARRAY 以上なら ArrayGet を呼び出す
template &lt;class T&gt;
STDMETHODIMP IDispatchArrayImpl&lt;T&gt;::Invoke(DISPID dispidMember, REFIID riid,
    LCID lcid, WORD wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult,
    EXCEPINFO* pexcepinfo, UINT* puArgErr)
{
    // Array member
    if(dispidMember &gt;= DISPID_ARRAY)
    {
        int index = dispidMember - DISPID_ARRAY;
        if(wFlags &amp; DISPATCH_PROPERTYGET)
        {
            // index 番目の要素を返す
            return ArrayGet(index, pvarResult);
        }
        return S_OK; // return null
    }

    return T::Invoke(dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, puArgErr);
}

// 内部で持ってる nodes コレクションの値を
// pvarResult に設定してあげる
HRESULT CDomUiNodeList::ArrayGet(int index, VARIANT* pvarResult)
{
    if(0 &lt;= index &amp;&amp; (UINT)index &lt; nodes.GetCount())
    {
        nodes[index]-&gt;QueryInterface(IID_IDispatch, (void**)&amp;pvarResult-&gt;pdispVal);
        pvarResult-&gt;vt = VT_DISPATCH;
        return S_OK;
    }
    return S_OK; // return null;
}
||&lt;
これで、hoge.0 でアクセスされても 0 番目の要素を返せるようになった。JScript から CoClass を配列として参照できるようになったわけだ。めでたしめでたし。

ソース全体は以下を参照あれ。
-&lt;a href=&quot;http://coderepos.org/share/browser/lang/cplusplus/dom4winui/trunk/src/DomUiNodeList.cpp?rev=16007&quot;&gt;DomUiNodeList.cpp - CodeRepos::Share&lt;/a&gt;
-&lt;a href=&quot;http://coderepos.org/share/browser/lang/cplusplus/dom4winui/trunk/src/DomUiNodeList.h?rev=16007&quot;&gt;DomUiNodeList.h - CodeRepos::Share&lt;/a&gt;

**おまけ：任意のプロパティを書き換えられるようにするには
ここまでできたら、CoClass に JScript から任意のプロパティを設定可能にするコードも書ける。

ここでは詳しい手順は省略するが、IDispatchImplExtensible というクラスを実装したので、興味のある人はソースをみてほしい。

-&lt;a href=&quot;http://coderepos.org/share/browser/lang/cplusplus/dom4winui/trunk/src/IDispatchImplExtensible.h?rev=16007&quot;&gt;IDispatchImplExtensible.h - CodeRepos::Share&lt;/a&gt;

このクラスは IDispatchImpl と同じように使いたかったので、大部分のソースを IDispatchImpl からコピってきて、GetIDsOfNames と Invoke の実装に手を入れている。

ただ、現状のコードでは VT_DISPATCH 型を上書きするときに Release() してないので、たぶんメモリリークが発生する。流用する人はその辺のところを気をつけて自己責任でよろしく。

**まとめ
以上、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080720/wsh_dom&quot;&gt;dom4winui.js&lt;/a&gt; の裏側でした。

参考文献：
-&lt;a href=&quot;http://www.ddj.com/184410820&quot;&gt;Dr. Dobb's | Extending JScript&lt;/a&gt;
-&lt;a href=&quot;http://www.eggheadcafe.com/forumarchives/win32programmerole/Jul2005/post23442263.asp&quot;&gt;win32 programmer ole COM Collections/arrays accessed from JScript&lt;/a&gt;

</body>
</day>
<day date="2008-08-04" title="">
<body>
*pv3d_racing*[as]PV3D でレーシングゲーム
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080804/20080804014024.jpg&quot; width=&quot;448&quot; height=&quot;231&quot;&gt;

ActionScript 3 の 3D ライブラリ Papervision3D を使ってレーシングゲームを作っている人がいます。 デモレベルのゲームはいろんなところで見たことありますが、ここまで作りこんでるものは初めて見ました。
-&lt;a href=&quot;http://phenotype.jpn.org/blog/archives/226&quot;&gt;Papervision3Dでレースゲーム制作 09 - コンセプトバージョン完成 - 脳の中の風船&lt;/a&gt;

ブログの &lt;a href=&quot;http://phenotype.jpn.org/blog/archives/category/game-develop&quot;&gt;製作記&lt;/a&gt; で出来上がっていく途中経過が見れて楽しい！
</body>
</day>
<day date="2008-08-06" title="">
<body>
*powershell_tutorial*オブジェクト指向なコマンド環境「Powershell」を試してみた
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080806/20080806023525.jpg&quot; width=&quot;450&quot; height=&quot;169&quot;&gt;&lt;/center&gt;&lt;
Microsoft 製の最新のコマンドライン環境「Powershell」が面白かったので、楽しいところをまとめてみた。

PowerShell の本の中では &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774133329/nitoyoncom-22/ref=nosim&quot;&gt;プログラマブルPowerShell ～プログラマのための活用バイブル～&lt;/a&gt; が非常に分かりやすかった。おすすめ。

isbn:4774133329:detail

**UNIX な人にも使いやすい親切設計
コマンドプロンプトでファイル列挙と言えば dir だけど、Powershell では ls も使える。
&gt;|sh|
PS&gt; ls

    Directory: Microsoft.PowerShell.Core\FileSystem::C:\
    Documents and Settings\nitoyon

Mode             LastWriteTime   Length Name
----             -------------   ------ ----
d---s     2006/02/19     22:35          Cookies
d-r--     2006/02/17     23:39          Favorites
d-r--     2006/02/19     18:56          My Documents
d-r--     2004/08/19      9:56          スタート メニュー
d----     2006/02/19     23:06          デスクトップ
||&lt;

alias の仕組みがあって、dir と ls はいずれも Get-ChildItem というコマンドの alias になってる。

&gt;|sh|
PS&gt; get-alias | where {$_.Definition -eq &quot;Get-Childitem&quot;}

CommandType     Name                     Definition
-----------     ----                     ----------
Alias           gci                      Get-ChildItem
Alias           ls                       Get-ChildItem
Alias           dir                      Get-ChildItem
||&lt;

同じ感じで、pwd、cp、mv、ps、pushd、popd、rm などの alias がデフォルトで登録されているし、追加で登録することもできる。ちなみに、このワンライナーの意味はこの記事を読み終わった頃には理解できるはず。


**変数にオブジェクトを格納
Powershell は強力なスクリプト環境をそなえている。

まずは ls の結果を $files 変数に代入してみる。
&gt;|sh|
PS&gt; $files = ls
||&lt;

$files と入力して Enter を押すと、$files 変数の中身が評価される。
&gt;|sh|
PS&gt; $files

    Directory: Microsoft.PowerShell.Core\FileSystem::C:\
    Documents and Settings\nitoyon

Mode             LastWriteTime   Length Name
----             -------------   ------ ----
d---s     2006/02/19     22:35          Cookies
d-r--     2006/02/17     23:39          Favorites
d-r--     2006/02/19     18:56          My Documents
d-r--     2004/08/19      9:56          スタート メニュー
d----     2006/02/19     23:06          デスクトップ
||&lt;

で、ここで面白いのが、$files に入ってるのが実は文字列じゃないところ。なんと、$files には&lt;strong&gt;ファイルオブジェクトの配列&lt;/strong&gt;が格納されている。

ということで、length プロパティで数が分かる。
&gt;|sh|
PS&gt; $files.length
5
||&lt;
[0] で最初のオブジェクトにアクセスできる。
&gt;|sh|
PS&gt; $files[0]
Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d---s        2006/02/19     22:35            Cookies
||&lt;
====

[0 .. 2] で連番にしたり、[-1] で最後のオブジェクトを取得したりもできる。
&gt;|sh|
PS&gt; $files[0 .. 2]

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d---s        2006/02/19     22:35            Cookies
d-r--        2006/02/17     23:39            Favorites
d-r--        2006/02/19     18:56            My Documents


PS&gt; $files[-1]

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----        2006/02/19     23:06            デスクトップ
||&lt;

ファイルオブジェクトのプロパティを参照してもよい。
&gt;|sh|
&gt; $files[0].FullName
C:\Documents and Settings\nitoyon\Cookies
||&lt;

**メソッド・プロパティの列挙
オブジェクトのメソッドやプロパティを知りたくなったら、get-member コマンドを実行するとよい。
&gt;|sh|
PS&gt; ls | get-member

   TypeName: System.IO.DirectoryInfo

Name                   MemberType    Definition
----                   ----------    ----------
Create                 Method        System.Void Create(), System.Void C...
CreateObjRef           Method        System.Runtime.Remoting.ObjRef Crea...
CreateSubdirectory     Method        System.IO.DirectoryInfo CreateSubdi...
Delete                 Method        System.Void Delete(), System.Void D...
Equals                 Method        System.Boolean Equals(Object obj)
  :                      :                   :
FullName               Property      System.String FullName {get;}
LastAccessTime         Property      System.DateTime LastAccessTime {get...
LastAccessTimeUtc      Property      System.DateTime LastAccessTimeUtc {...
  :                      :                   :
||&lt;
何気にパイプを使ってるけど、実は、Powershell では&lt;strong&gt;パイプで渡されるのもオブジェクト&lt;/strong&gt;。すごいですね。

おまけに、System.String などと書いてあるところからピンとくる人もいるかもしれないけど、オブジェクトは .NET Framework 的なオブジェクトになってる。.NET に親しい人ならすごく使いやすいはず。

**ループも条件分岐も
それじゃあ、ループを使ってみよう。

次のプログラムは、C:\windows 以下の 1MB 以上のファイルを列挙したところ。
&gt;|sh|
PS C:\WINDOWS&gt; foreach($file in ls){
&gt;&gt;   if($file.length -gt 1MB){
&gt;&gt;     write $file.name
&gt;&gt;   }
&gt;&gt; }
&gt;&gt;
CTDVAUDY.CDF
GEXPlugin.ax
iis6.log
setupapi.del
WindowsUpdate.log
||&lt;
1MB より大きいものだけを if で調べて出力してる。コマンドラインなので、&gt; の変わりに、-gt という演算子が用意されている。

ちなみに、1MB というのはあらかじめ定義されている定数。
&gt;|sh|
PS C:\WINDOWS&gt; 1MB
1048576
||&lt;

**よりオブジェクト指向らしく
パイプを使って、よりオブジェクト指向らしいプログラミングを実践してみよう。

***where でフィルタリング
さっきの foreach のサンプルは手続き型っぽかったけど、これをかっこよく書き直してみた。
&gt;|sh|
PS C:\WINDOWS&gt; ls | where {$_.length -gt 1mb}

    Directory: Microsoft.PowerShell.Core\FileSystem::C:\
    WINDOWS

Mode             LastWriteTime    Length Name
----             -------------    ------ ----
-a---     2003/02/27     15:29   4481358 CTDVAUDY.CDF
-a---     2006/09/07      1:23   1406464 GEXPlugin.ax
-a---     2008/07/10      3:01   1124405 iis6.log
-a---     2004/08/19     10:40   1080959 setupapi.del
-a---     2008/08/04      1:26   1907044 WindowsUpdate.log
||&lt;

where コマンドは、配列の中から条件にマッチするものだけを返す。絞り込みができるわけ。Perl の grep、Ruby の find_all(や select)、JavaScript 1.6 の filter みたいな感じ。

***foreach で全ての要素に対して実行
今度は、パイプの受け口として foreach を使ってみる。

いままで、ファイルのサンプルばかりだったので、次はプロセス情報を使ってみよう。起動中のメモ帳をばっさり閉じる例。
&gt;|sh|
PS C:\WINDOWS&gt; ps -name notepad | foreach {$_.kill()}
||&lt;
notepad.exe のプロセスを列挙して、それぞれについてプロセスオブジェクトの kill() メソッドを実行して殺している。

とはいえ、kill コマンドもあって、プロセスの配列を処理できる。

同じ処理は次のように書ける。
&gt;|sh|
PS C:\WINDOWS&gt; ps -name notepad | kill
||&lt;
さらに、kill コマンドには -name フラグもあるので本当は１発で書けたりもする。
&gt;|sh|
PS C:\WINDOWS&gt; kill -name notepad
||&lt;
でも、複雑な処理をするときには、foreach が便利ですよね、ということで。

***プロパティ名で sort
ソートも簡単。

メモリ使用量が多いプロセス top 5 を調べてみる。
&gt;|sh|
PS C:\WINDOWS&gt; ps | sort WS -Descending | select -first 5

Handles   NPM(K)   PM(K)   WS(K) VM(M)   CPU(s)     Id ProcessName
-------   ------   -----   ----- -----   ------     -- -----------
    804       21   30664   45712   189   109.97   1384 explorer
    271       11   32776   42440   161     5.33   2392 firefox
    404        9   42468   40712   175    26.67   3744 powershell
    827       31   27956   32696   226    33.14   2224 msnmsgr
   1761       66   21764   32348   169   107.77   1748 svchost
||&lt;

sort の後にプロパティ名を指定してるだけ。UNIX 系だとソートも文字ベースなんだけど、プロパティ名で色々実現できるのが愉快！

ちなみに、select コマンドは配列を置き換える map のような機能があったり、UNIX コマンドの uniq、head、tail に相当する機能があったり、色んな用途に使える。詳しくは、man select -detailed でヘルプが見れる。

**関数を定義する
関数も作れるよ。

メモリ使用量が多いプロセス top N を求める関数を作ってみた。
&gt;|sh|
PS C:&gt; function psmemory([int]$n = 5){ps | sort WS -Descending | select -first $n}
||&lt;
呼び出したところ。
&gt;|sh|
PS C:&gt; psmemory 1

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   1121      22    31092      48496   181   227.88   1384 explorer
||&lt;
引数に 1 を渡しているので、１つだけ表示される。psmemory(1) のように、括弧つきで呼び出すこともできる。パラメータを省略すると5個列挙されるように作ってる。

ところで、勘のいい人なら既に気付いてるかもしれないけど、上で示したサンプル
&gt;|sh|
PS C:\WINDOWS&gt; ls | where {$_.length -gt 1mb}
||&lt;
の &lt;strong&gt;{$_.length -gt 1mb} の部分は関数&lt;/strong&gt;なんです。Powershell では「スクリプトブロック」という名前がついてるんだけど、無名関数と言ったほうが分かりやすいかもしれない。Ruby に詳しい人は、ブロックと言い換えるとすっきりするはず。

というわけで、このサンプルは、ls した結果を where で回して、無名関数でフィルタリングしてる。うわー、オブジェクト指向っぽい！

**ドライブ名
Powershell ではドライブ名が名前空間のように振舞ってる。

デフォルトで定義されているドライブ名一覧を見てみよう。
&gt;|sh|
PS&gt; Get-PSDrive

Name       Provider      Root
----       --------      ----
A          FileSystem    A:\
Alias      Alias
C          FileSystem    C:\ 
cert       Certificate   \
D          FileSystem    D:\
Env        Environment
Function   Function
HKCU       Registry      HKEY_CURRENT_USER
HKLM       Registry      HKEY_LOCAL_MACHINE
Variable   Variable
||&lt;
A: や C: はお馴染みなんだけど、それ以外にも色々定義されている。

例えば、Function: や Variable: には関数、変数の一覧が格納されてる。
&gt;|sh|
PS&gt; ls Variable:

Name          Value
----          -----
 :             :
PID           5324
files         {.ssh, Contacts, Cookies, Favorites...}
 :             :
||&lt;
あらかじめ定義されている PID などに加えて、自分で定義した $files も列挙されているのが分かる。

他にも、cert: は証明書ストア、HKCU: や HKLM: はレジストリ情報を表す。これらの情報をファイルシステムのように抽象化されていて、ls や cd で参照したり、検索したりできるようになってる。

この仕組みの肝が Privider。列挙したり参照したりする機能を提供している。Provider は C# で自前実装することもできて、例えば、id:coma2n さんによる &lt;a href=&quot;http://d.hatena.ne.jp/coma2n/20080222/1203633878&quot;&gt;PowerShellで2chビューワ&lt;/a&gt; なんかが面白い。2ch ドライブで 2ch の掲示板情報を参照できるようだ。

Provider から新たなドライブを作成することも可能。例えば、FileSystem プロバイダを使って、ホームディレクトリを home: ドライブとして割り当るには次のようにする。
&gt;|sh|
PS&gt; New-PSDrive -Name home -PSProvider FileSystem -Root $home

Name       Provider      Root
----       --------      ----
home       FileSystem    C:\Documents and Settings\nitoyon

PS&gt; ls home:
# ホームディレクトリのファイル一覧
||&lt;

まぁ、あくまで Powershell 内での擬似的なドライブなんだけど楽しい。

**インストール方法
最後にインストール方法を紹介しておく。当初は Vista に搭載される予定だったけど間に合わなかったので、いまのところ必ずインストールする必要がある。

.NET Framework 2.0 再頒布可能パッケージが必要なので、導入してない人は事前にインストールしておくべし。

本体は以下の場所からダウンロードできる。
-&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=30125A46-B97C-4704-AA10-605E809D5933&amp;displaylang=ja&quot;&gt;Windows XP 用 Windows PowerShell 1.0 インストール パッケージ (KB926140)&lt;/a&gt;
-&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=C6EF4735-C7DE-46A2-997A-EA58FDFCBA63&amp;displaylang=ja&quot;&gt;Windows Vista 用 Windows PowerShell 1.0 インストール パッケージ (KB928439)&lt;/a&gt;

日本語のマニュアルがけっこう詳しく書いてあるので目を通すだけで雰囲気が分かるはず。スタートメニューから見れるよ。

コマンドの詳細について知りたい場合は、man [コマンド名] -detailed を実行するとよい。ps コマンドだと、man ps -detailed。

**まとめ
Powershell のオブジェクト指向な雰囲気が楽しい。MS-DOS や UNIX 系のシェルとは系統が違うので、どちらかというと .NET Framework のインタラクティブシェルだと解釈したほうが適切かもしれない。

isbn:4797340274:detail
isbn:4798017272:detail
isbn:4797337362:detail

</body>
<comments>
<comment>
<username>S.K.</username>
<body>インストール時にngenを実行していないので、起動がもたつく場合が多いです。&lt;br&gt;こちらでそれを解決するスクリプトが紹介されてます、おそらく体感できるくらい差が出るかと。&lt;br&gt;http://powershell.hiros-dot.net/post/2008/07/30/PowerShelle381aee8b5b7e58b95e38292e9809fe3818fe38199e3828b.aspx</body>
<timestamp>1218021228</timestamp>
</comment>
<comment>
<username>H.T</username>
<body>http://powershell.hiros-dot.net/ がPowerShell総本山になるかも</body>
<timestamp>1219670989</timestamp>
</comment>
<comment>
<username>うっでぃー</username>
<body>一箇所Provider がPrividerになっていますよ。</body>
<timestamp>1243914394</timestamp>
</comment>
</comments>
</day>
<day date="2008-08-08" title="">
<body>
*p1*［宣伝］会社のブログもよろしく
会社のブログが１年ぐらい閑散としてましたが、ここ最近、ちょぼちょぼ更新され始めました。
-&lt;a href=&quot;http://lab.co-conv.jp/blog/&quot;&gt;しおラボ Blog&lt;/a&gt;
私も頃合をみて技術ネタを投下してみる…かもしれません。

&lt;a href=&quot;http://lab.co-conv.jp/blog/2007/04/nobori_recruit.html&quot;&gt;のぼりで求人&lt;/a&gt;したり、&lt;a href=&quot;http://lab.co-conv.jp/blog/2008/08/post_3.html&quot;&gt;窓をつかって求人&lt;/a&gt;したり、よく分からん会社ですが、よろしくお願いします。
</body>
</day>
<day date="2008-08-09" title="">
<body>
*learning_as3*[as][書籍]オライリーから ActionScript 3.0 の入門書が発売
出るようです。

[asin:4873113717:detail]

原著は [asin:059652787X:title] だそう。

オライリーのサイトによると
&gt;http://www.oreilly.co.jp/books/9784873113715/:title&gt;
ActionScript 3.0について学び直したいと思う初心者プログラマーや、WebデザイナーやGUIベースのFlash開発者など、&lt;strong&gt;プログラマではない背景を持つFlashユーザーに、ActionScript 3.0の基礎知識を詳しく解説します&lt;/strong&gt;。

(中略)

初級者にも扱いやすいタイムラインで実行できるコード例を示しながら、プログラミングに必要な基礎を解説していくので、確かめながら理解を深めていくことができます。ActionScript 3.0プログラミングにとって重要な概念であるオブジェクト指向プログラミング（OOP）についても、各章の進行に合わせて少しずつ学んでいくよう構成されているので、プログラミング初級者でも無理なく習得することができます。
&lt;&lt;
とあるので、プログラミング初心者向けに ActionScript 3.0 を解説した本のようですね。

&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873113715/toc.html&quot;&gt;目次&lt;/a&gt;をみても、すごく丁寧に解説されている雰囲気が伝わってきます。一から勉強したい人や、初心者指導用によさそうな本ですね。
</body>
</day>
<day date="2008-08-11" title="">
<body>
*copper_medal*銅は英語で Copper だけど、銅メダルは「Copper medal」じゃない
オリンピック真っ只中なので、オリンピックネタを。

銅を英語で言うと「Copper」なんだけど、銅メダルを英語でいうと「Bronze medal」です。けっこう間違いやすいので要注意。

その間違いの例として面白かったのが、４年前のアテネオリンピックのときの「Yahoo! オリンピック特集」。なんと、銅メダルの画像が「c.gif」というファイル名だったのだ。
&gt;http://www.nitoyon.com/kinkyo/index.cgi?20040823:title=Gold Silver ○○？ - 一ヶ月前の日記 n i t o y o n . c o m&gt;
&lt;img src=&quot;http://www.nitoyon.com/kinkyo/image/04/08/medal.gif&quot; align=&quot;right&quot; width=&quot;200&quot; height=&quot;122&quot; border=&quot;1&quot;&gt;
試しに、Yahoo! オリンピック特集 を見てみると、金メダルのアイコンのファイル名が「g.gif」、銀が「s.gif」、銅が「&lt;strong&gt;c.gif&lt;/strong&gt;」だった。

(中略)

Yahooは何故、こんな間違いをしているのだ。もしや、と思って 本国アメリカYahoo を見てみると、「g.gif」「s.gif」「&lt;strong&gt;b.gif&lt;/strong&gt;」だった。なんだ、本国の人はちゃんと bronze の b にしてるじゃないか。
&lt;&lt;
4年前は間違っていた Yahoo! Japan。

そこで、2008年はどうなってるかと、&lt;a href=&quot;http://beijing.yahoo.co.jp/&quot;&gt;Yahoo!スポーツ - 北京オリンピック特集&lt;/a&gt; を覗いてみると…！
&gt;&gt;
http://o.yimg.jp/images/sports/olympic/beijing/pc/ico_&lt;strong&gt;bronze&lt;/strong&gt;.gif
&lt;&lt;
2008年は2004年よりも進化している模様。

最後に、オリンピック開催地の中国版 Yahoo! をチェックしてみた。

http://2008.cn.yahoo.com/ の右側に表示されるインラインフレームにメダルの絵が。早速、HTML のソースを確認してみると、なにやら怪しげな文字が…！！！
&gt;http://2008.cn.yahoo.com/livescore/iframe/CountryMedals.html&gt;
 &amp;lt;td&amp;gt;&amp;lt;b class=&quot;gold&quot;&amp;gt;金牌&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;&amp;lt;b class=&quot;silver&quot;&amp;gt;&amp;#38134;牌&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
 &amp;lt;td&amp;gt;&amp;lt;b class=&quot;&lt;strong&gt;copper&lt;/strong&gt;&quot;&amp;gt;&amp;#38108;牌&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;
&lt;&lt;
やるな中国…！
</body>
<comments>
<comment>
<username>なまえ</username>
<body>銅 :copper&lt;br&gt;青銅: bronze&lt;br&gt;黄銅(真鍮): brass&lt;br&gt;そもそも銅メダルは間違いで、青銅メダルが正しい、って事でしょうかね・・・</body>
<timestamp>1218408974</timestamp>
</comment>
<comment>
<username>izuno4t</username>
<body>陸上のオッティーがブロンズコレクターと言われてたのでcopperの方が初出で驚き。</body>
<timestamp>1218499781</timestamp>
</comment>
<comment>
<username>aaaaa</username>
<body>kudarann</body>
<timestamp>1317459134</timestamp>
</comment>
</comments>
</day>
<day date="2008-08-19" title="">
<body>
*freeze_es_harmony*Object.freeze() と ECMAScript Harmony
ES4 のドラフトが一旦白紙になって、ES3.1 の策定を先に進めることになった。このあたりの情報が少なくて、どうなっていくのかがいまいちピンと来ないので調べてみた。

現状で頼りになるのが、 &lt;a href=&quot;http://www.hyuki.com/yukiwiki/wiki.cgi?ECMAScriptHarmony&quot;&gt;&quot;ECMAScript Harmony&quot; の日本語訳&lt;/a&gt;。この中の次の部分が気になった。
&gt;&gt;
名前空間とアーリーバインディングが仕様から外れてしまえば, クラスは lambda-coding + Object.freeze と ES3.1 のその関係機能というすっきりした(desugar)姿になります
&lt;&lt;

Object.freeze というキーワードがよく分からなかったので、&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=es3.1:es3.1_proposal_working_draft&quot;&gt;ES3.1 のドラフト (2008/8/11)&lt;/a&gt; を見ながら理解を進めてみた。
====
**ES4 から外れることになった機能
と、その前に、外れた機能について簡単におさらいしておく。

:パッケージ:クラスや関数の名前空間と言ってもいいのがパッケージ。ライブラリごとに分かれてると幸せなんだけど…。
:名前空間:ES4 の仕様ではでは private や public も名前空間として定義していた。
:アーリーバインディング:事前バインディングとも言う。実行前に型が決定していること。C++ や Java のような静的型付けな言語が該当する。&lt;br&gt;対して、「レイトバインディング（実行時バインディング）」が逆の意味。ES3 の prototype を使った疑似クラス定義は実行時バインディングと言っていいだろう。一般に、事前バインディングはコンパイル時に型が決定するので、処理速度が高速になる。

**Object.freeze()
話を元に戻して、Object.freeze() の正体を見ていく。Object.freeze() は、ES3.1 から新たに導入されたメソッド。

どういう機能なのかを見るために、ES3 のプロパティ定義を思い出してみよう。
&gt;|javascript|
var myObj = {
  val : 3,
  func : function(){alert('foo');}
}
||&lt;
上の例だと、val や func の両方がプロパティである。((言語によっては getter, setter を使ったものをプロパティということもあるけど、ES3 的には違うので注意))

せっかく MyObj を定義したんだけど、ES3 ではプロパティを勝手にいじられる危険性があった。
&gt;|javascript|
delete myObj.func;
myObj.func();      // エラー: MyObj.func is not a function
||&lt;

そこで、ES3.1 ではオブジェクトを書き換えられないように、プロパティを凍結する機能が追加された。これが Object.freeze() だ。

&gt;|javascript|
Object.freeze(myObj);
delete myObj.func;      // func が削除できない
myObj.val = 10;         // 代入に失敗する

myObj.func();           // alert('foo') が実行される
myObj.val;              // 3
||&lt;

**ES3 と属性
Object.freeze() が何をしているかというと、全てのプロパティの Writable 属性と Flexible 属性を false にして、オブジェクトの Extensible 属性も false にしている。

属性の概念は ES3 時代にもあった。例えば、Object.prototype は DontDelete 属性、DontEnum 属性、ReadOnly 属性がついていた。

つまり、
&gt;|javascript|
delete Object.prototype;
Object.prototype = {foo: function(){}};
||&lt;
が成功しないのは、これらの属性が書き換えを禁止してたから。ただし、ES3 では属性というのはあくまで内部的なもので、外部から属性を変更することも、知るこもできなかった。

ES3.1 になって、属性を取得・設定するためのメソッドがいくつも追加されている予定になっている。Object.freeze() もそうだし、Object.defineProperty() を使って属性つきでプロパティを定義したり、Object.getOwnPropertyDescriptor() を使ってプロパティの情報を取得したりできる。

Writable 属性、Flexible 属性、Extensible 属性について一応補足しておく。詳しくは ES3.1 のドラフトを参照あれ。
:プロパティの Writable 属性:プロパティの値を書き換えられるかどうか。ES3 の ReadOnly の逆。
:プロパティの Flexible 属性:プロパティの delete および属性変更ができるかどうか。前者は、ES3 の DontDelete の逆。
:オブジェクトの Extensible 属性:オブジェクトにプロパティを追加できるかどうか。
つまり、Object.freeze() すると、プロパティの追加・変更・削除ができなくなる。属性の変更も許可されないので、一度 freeze すると元に戻せなくなるようだ。

**ES Harmony のクラス定義
では、ES Harmony のクラス定義がどうなるか想像してみよう。ES Harmony というのは、ES3.1 をベースに書き直す新しい ES4 の仕様と解釈して間違いないだろう。

先の&lt;a href=&quot;http://www.hyuki.com/yukiwiki/wiki.cgi?ECMAScriptHarmony&quot;&gt;日本語訳&lt;/a&gt;の&lt;a href=&quot;https://mail.mozilla.org/pipermail/es4-discuss/2008-August/003400.html&quot;&gt;原文&lt;/a&gt;を見ると、
&gt;&gt;
クラスは lambda-coding と ES3.1 の Object.freeze() 関連の機能を使って、desugar できる
&gt;https://mail.mozilla.org/pipermail/es-discuss/2008-August/003400.html:title=ECMAScript Harmony&gt;
classes can desugar to lambda-coding + Object.freeze and friends from ES3.1.
&lt;&lt;
&lt;&lt;
と書いてある。lambda-coding はたぶん無名関数のことだとしておいて、desugar という単語が耳慣れない。おそらく syntax-sugar の sugar のことだろう。de がついているので「syntax-sugar で導くことができる」といった意味合いだろうか。

ということで、もっと言い直すと
&gt;&gt;
クラス定義は無名関数と Object.freeze() 系のメソッドへの Syntax-sugar として実装すればよい
&lt;&lt;
と言い切ってるように思える。

具体的なコードで考えると、
&gt;|javascript|
class Foo{
    var val = 3;

    function func(){
        // ...
    }
}

var foo = new Foo();
||&lt;
というクラスは、内部的に
&gt;|javascript|
var foo = {
    val: 3,
    func: function(){
        // ...
    }
};
Object.freeze(foo);
||&lt;
のように置き換えられる、ということだろう。

一度 freeze してしまえば、属性を変更できないし、メソッドの書き換えもできない。これはまさしくクラスから生成したインスタンスだ。実行時にメソッドが定義されるので、事前バインディングでもなくなったが、その代わりに、ES3.1 の機能を使って、クラスを書き下したことになる。

ES4 の仕様はだいぶシンプルになりそうな香りがする。

**継承は？　private は？
ただ、この方向性を見て、まず、継承がどうなるのか不安になった。

ES Harmony のドキュメントは &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:harmony&quot;&gt;harmony:harmony [ES4 Wiki]&lt;/a&gt; にあるのだけど、現状、&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:types&quot;&gt;harmony:types&lt;/a&gt; しかない。ここからだけじゃ、情報も少なくて判断しきれないのだけど、型情報を管理するための領域が用意されて、継承関係も紐付けできるようなことが書いてある。

ただ、名前空間亡き後、private はどのように実現されるかが気になるなぁ。クロージャ使って閉じ込めたりするんだろか。

**雑感
ES3.1 Draft は、ES3 をベースにしているだけに、穏やかな変更になっている。文句をいう人も少なそうだ。ドラフトには ES3 からの変更点が赤字で書いてあって、新しいところを探すのが楽しい。

それに比べて、ES4 Draft は、かなり静的型付けな言語のほうに寄っていたし、仕様も複雑だった。今回の ES Harmony は、一旦白紙に戻したことで、ES3 のよさを損なわない方向でオブジェクト指向が導入されるように感じられた。

AS3 をベースに ES4 の標準化を進めていきたかった Adobe にとっては災難なんだろう。特に、事前バインディングが仕様から漏れたことで、Mozilla が Tamarin を使う意義がなくなるかもしれない。よく分かってないんだけど、仕様から事前バインディングが漏れるといっても、事前バインディングによって高速化する余地は残ってるのかもしれない。

Tamarin が Firefox に搭載されれば、独自拡張として名前空間やパッケージが Firefox に盛り込まれる可能性はある。Firefox に盛り込まれれば、さらに他のブラウザに取り込まれてデファクトになる可能性は十分にあるだろう。

</body>
<comments>
<comment>
<username>amachang</username>
<body>とても勉強になりました！ありがとうございます！&lt;br&gt;&lt;br&gt;ところで、オブジェクトの Flexible 属性というのはオブジェクトの内部プロパティ（Internal Property）の [[Extensible]] ではないでしょうか。&lt;br&gt;僕もちょうどその辺を読んでいたところだったので、ちょっと気になってしまいました＞＜</body>
<timestamp>1219131504</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おお、ありがとうございます。その通りです。こっそり修正しておきました。&lt;br&gt;ES3.1 の仕様はわくわくしますね！！</body>
<timestamp>1219166775</timestamp>
</comment>
</comments>
</day>
<day date="2008-08-20" title="">
<body>
*hentai_blog*[ネタ][twitter]ブログ　変態
Twitter に

&gt;&lt;center&gt;&lt;a href=&quot;http://twitter.com/nitoyon/statuses/891971728&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080820/20080820024403.jpg?1219167866&quot; width=&quot;450&quot; height=&quot;282&quot; alt=&quot;「ブログ　変態」で検索して、うちのブログにリファラを残したやつはどこの誰だ…&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

と書いたところ

こうなった。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080820/20080820024402.jpg?1219167865&quot;&gt;&lt;/center&gt;&lt;

この発言の時点では、少ししかリファラが残ってなかったのに、いつの間にか103 も。誰かが嫌がらせのためにリファラを残しまくったに違いない。

愉快な人もいるもんですね。

ちなみに、現時点で「ブログ　変態」で Google で９位。目指せ１位。
</body>
</day>
<day date="2008-08-24" title="">
<body>
*air_book*[air][書籍]「標準Adobe AIR完全解説」出版のお知らせ
共著者として参加しました、「標準Adobe AIR完全解説」が8月28日に発売されます。

asin:4048673351:detail

１年ぐらい前に AIR β版に向けて書いた isbn:4756150322:title の内容をベースに、AIR 1.1 に合わせて加筆・修正しております。

# 共著者名は本名で、最田健一です。

# サブタイトルはスルーしてください...。
</body>
</day>
<day date="2008-08-25" title="">
<body>
*design_pattern_js*[JavaScript]具体例で説明するデザインパターン
&gt;&lt;div style=&quot;background-color: yellow; padding: 1em; color: red&quot;&gt;この記事には間違いが多く含まれていることが指摘されています。詳しくは &lt;a href=&quot;http://d.hatena.ne.jp/rryu/20080830/1220098080&quot;&gt;「具体例で説明するデザインパターン」はかなり間違ってる - disり用。&lt;/a&gt; をご覧ください&lt;/div&gt;&lt;

デザインパターンってなんだかたいそうなものに考えられがちだけど、実は、そこかしこのライブラリや仕様に取り込まれていることが多い。

「デザインパターン分からん」とか「で、どうやって使うのよ」と悶々としている人には、&lt;strong&gt;「どういうところで使わているのか」&lt;/strong&gt;を知っておけばイメージも沸きやすいし、意外にたいしたことないんだな、ということが分かるんじゃないだろうか。

そこで、JavaScript やその周辺の技術で、デザインパターンがどのように使われているかを紹介してみることにする。

ここでは、&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/nitoyoncom-22/ref=nosim&quot;&gt;GoF本&lt;/a&gt;の順番に沿って、以下の11個のパターンを取り上げる。
-生成に関するパターン
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#factory_method&quot;&gt;Factory Method&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#abstract_factory&quot;&gt;Abstract Factory&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#builder&quot;&gt;Builder&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#prototype&quot;&gt;Prototype&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#singleton&quot;&gt;Singleton&lt;/a&gt;
-構造に関するパターン
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#adapter&quot;&gt;Adapter&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#composite&quot;&gt;Composite&lt;/a&gt;
-振る舞いに関するパターン
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#chain_of_responsibility&quot;&gt;Chain Of Responsibility&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#iterator&quot;&gt;Iterator&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#observer&quot;&gt;Observer&lt;/a&gt;
--&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js#visitor&quot;&gt;Visitor&lt;/a&gt;

それでは、レッツゴー！
====
**&lt;a name=&quot;factory_method&quot;&gt;&lt;/a&gt;Factory Method
&lt;strong&gt;(追記) 訂正： この説明は factory method については述べていますが、Factory Method パターンには該当しませんでした。申し訳ございません。&lt;a href=&quot;http://b.hatena.ne.jp/HiromitsuTakagi/20080825#bookmark-9759096&quot;&gt;ブックマークコメント&lt;/a&gt;で指摘いただいた id:HiromitsuTakagi 様、ありがとうございます。&lt;/strong&gt;

***ざっくり説明
new を使わずにインスタンス生成をメソッドで行う。パラメータによって生成するものを変えることも多い。

***具体例
HTML DOM の createElement() が該当する。
&gt;|javascript|
// table タグを作成
var table = document.createElement(&quot;table&quot;);
table.rows;                     // 空の配列

// div タグを作成
var div = document.createElement('div');
div.rows;                       // undefined
||&lt;
第一引数に与えたタグ名によって、異なる HTML ノードが作成されているのが分かる。

DOM 仕様で言えば、createElement(&quot;table&quot;) では HTMLTableElement オブジェクトが、createElement(&quot;div&quot;) では HTMLDivElement オブジェクトが返されている。

***まとめ
-インスタンス化するためのメソッドを定義する
-DOM の document.createElement() は factory メソッドである

**&lt;a name=&quot;abstract_factory&quot;&gt;&lt;/a&gt;Abstract Factory
***ざっくり説明
オブジェクトを作成するためのインターフェースを集約する。どの Factory を渡すかによって、異なるインスタンス群を生成できるようになる。

***具体例
HTML DOM と XML DOM の document には共通の Factory メソッド createElement() や createTextNode を備えている。

これを利用して次のような create() 関数を作ってみた。
&gt;|javascript|
function create(factory,nodeName){
  return factory.createElement(nodeName);
}

var html_div = create(document,&quot;div&quot;);
console.log(html_div instanceof HTMLDivElement); // true

var xmldoc = document.implementation.createDocument(&quot;&quot;,
  &quot;&quot;,null);
var xml_div = create(xmldoc,&quot;div&quot;);
console.log(xml_div instanceof HTMLDivElement); // false
||&lt;
create() 関数は、渡される Factory がどのようなものかは知らないが、createElement() メソッドを実行すればインスタンス生成できることを知っている。

そのため、HTML DOM の document を渡されたときは、HTML 用のタグを作成するし、XML DOM の document を渡されたときは、XML 用のノードを作成する。

***まとめ
-Factory を取り替えることで、作成するオブジェクト群を変えられるようにしたのが Abstract Factory

**&lt;a name=&quot;builder&quot;&gt;&lt;/a&gt;Builder
***ざっくり説明
オブジェクトを作成して組み立てていくためのライブラリを提供する。既存の組み立て方では複雑になる場合や、将来変わる可能性があるときに威力を発揮する。

***具体例
DOM ツリーを作成する手順は煩雑だしソースも読みにくい。
&gt;|javascript|
var div = document.createElement(&quot;div&quot;);
var p = document.createElement(&quot;p&quot;);
p.className = &quot;myParagraph&quot;;
var txt = document.createTextNode(&quot;foo&quot;);
p.appendChild(txt);
div.appendChild(div);
document.body.appendChild(div);
||&lt;
だけども、innerHTML を使えば一発。
&gt;|javascript|
var div = document.createElement(&quot;div&quot;);
div.innerHTML = &quot;&lt;p class='myParagraph'&gt;foo&lt;/p&gt;&quot;;
document.body.appendChild(div);
||&lt;
innerHTML はある意味 DOM ノードの Builder であると言ってよいだろう。

jQuery のノード生成の機能、Builder みたいなもんだ。簡単に DOM ツリーを作れる。
&gt;|javascript|
$(&quot;&lt;div&gt;&quot;)
  .append($(&quot;&lt;p&gt;&quot;)
    .attr(&quot;class&quot;,&quot;myParagraph&quot;)
    .text(&quot;foo&quot;)
   )
  .appendTo(&quot;body&quot;);
||&lt;

***まとめ
-複雑なものを簡単に作れるようにしておく
-作るための手順が変わったときにも、Builder さえ変更すればよいので依存性が小さくなる
-DOM ノードの Builder として innerHTML や jQuery が挙げられる

**&lt;a name=&quot;prototype&quot;&gt;&lt;/a&gt;Prototype
***ざっくり説明
原型からコピーしてオブジェクトを作成する。

***具体例
JavaScript の prototype オブジェクトが近い。ただ、デザパタの Prototype パターンとは少し違うので注意すべし。

デザパタの Prototype パターンは、原型(prototype)からコピーすることでインスタンス生成する。clone() といったほうがイメージが近いかもしれない。
&gt;|javascript|
function prototypeGoF(proto){
  var obj = {};
  for(var name in proto){
    obj[name] = proto[name];
  }
  return obj;
}

var base = {&quot;prop&quot; :&quot;foo&quot;};
var a = prototypeGoF(base);

// 複製されている
a.prop;        // &quot;foo&quot;

// 原型 base を変更しても、a の値は変わらない
base.prop = &quot;bar&quot;;
a.prop         // &quot;foo&quot;
||&lt;

それに対して、JavaScript の prototype では、prototype オブジェクトが参照として渡される。あとから prototype を変更しても反映される。
&gt;|javascript|
function A(){}
A.prototype.prop = &quot;foo&quot;;

var a = new A();
a.prop;  // &quot;foo&quot;

A.prototype.prop = &quot;bar&quot;;
a.prop;  // &quot;bar&quot;
||&lt;

***まとめ
-原型からオブジェクトを作る
-JavaScript の言語仕様に取り込まれているけど、Prototype パターンがコピーなのに対して、JavaScript の prototype は参照渡しなので注意してね

**&lt;a name=&quot;singleton&quot;&gt;&lt;/a&gt;Singleton
***ざっくり説明
オブジェクト指向でグローバル変数っぽいものを実現したいときに使う。

***具体例
JavaScript ではグローバル空間汚染できまくりなので、いまさら例える必要はないんじゃないかな。

とはいえ、Singleton にはインスタンスが１つしかないことを保証する、という意味合いもある。これを JavaScript で実現するには次のようにするのが定石になっている。
&gt;|javascript|
(function(){
  window.$ = function(){
    // ...
  };
}());
||&lt;
無名関数で隠して、グローバル領域に書き込んでる。JavaScript のいくつかのライブラリで実際に使われている手法。

***まとめ
-グローバル変数を使いにくい or 使えない言語でグローバル変数を実現するためのもの。

**&lt;a name=&quot;adapter&quot;&gt;&lt;/a&gt;Adapter
***ざっくり説明
クラスのインターフェースを変える。別名 Wrapper。

***具体例
IE では addEventListener がなくて困るので定義してあげる。
&gt;|javascript|
if (!window.addEventListener){
  window.addEventListener = function(type,fn){
    attachEvent(&quot;on&quot; + type,function(){fn.call(this,window.event);});
  };
  Element.prototype.addEventListener = window.addEventListener;
}
||&lt;
これで IE でも addEventListener が使えるようになった。

ただ、デザインパターンの流儀では、サブクラスを定義して元のクラスを隠蔽するのが基本。ここでは、JavaScript 流のやり方で、直接インターフェースを変えてるので、Adapter パターンと言い切るのは少し苦しいかもしれない。

***まとめ
-クラスのインターフェースを変えるときに使う
-既存のオブジェクトを変更できないときに使う
-JavaScript はビルトインのオブジェクトも変更できちゃうので、直接的に書いちゃうよね。

**&lt;a name=&quot;composite&quot;&gt;&lt;/a&gt;Composite
***ざっくり説明
階層構造を表現するためのオブジェクト構造。

***具体例
DOM ノード。

addChild()、removeChild() などのメソッドで追加・削除できる。childNodes プロパティで子ノードを参照する。parentNode プロパティもあるね。

***まとめ
-階層構造を表現する
-DOM ノードは Composite パターン使ってるね。階層構造だもんね。

**&lt;a name=&quot;chain_of_responsibility&quot;&gt;&lt;/a&gt;Chain Of Responsibility
***ざっくり説明
要求を表すオブジェクトが順番に伝わっていく仕組み。オブジェクトがチェーン状に伝わっていき、それぞれの責任範囲で実装を行える。

***具体例
DOM イベントでは、イベントオブジェクトが対象のオブジェクトから親ノードへ順番に伝わっていく。

例えば、この例では、div タグでクリックされると、イベントが div タグに到達して「div clicked!!」と表示される。そのあと、body タグにイベントが到達し、「body clicked!!」と表示される。div と body でそれぞれ独立に同じイベントを処理できるようになっている。

&gt;|javascript|
&lt;body&gt;
&lt;div id=&quot;example&quot;&gt;example&lt;/div&gt;

&lt;script&gt;
var div = document.getElementById(&quot;example&quot;);
div.addEventListener(&quot;click&quot;,function(event){
  alert(&quot;div clicked!!&quot;);
},false);

document.body.addEventListener(&quot;click&quot;,function(){
  alert(&quot;body clicked!!&quot;);
},false);
&lt;/script&gt;
&lt;/body&gt;
||&lt;

もう一例挙げておこう。プロトタイプチェーンという言葉にもあるとおり、prototype は Chain Of Responsibility パターンだ。例えば、arr という配列に対して、arr.myProperty を参照すると、
+a.myProperty
+Array.prototype.myProperty
+Object.prototype.myProperty
の順番に myProperty プロパティを探す。

***まとめ
-順番に情報が伝わっていく
-DOM イベントのバブリングフェーズでは、イベントオブジェクトが順番に伝わっていく
-プロトタイプチェーンもそう。

**&lt;a name=&quot;iterator&quot;&gt;&lt;/a&gt;Iterator
***ざっくり説明
オブジェクトを順番にアクセスするための方法を提供する。

***具体例
JavaScript ではあんまりイテレータは使わないんだけど、DOM ノードをイテレータ的に使ってみよう。
&gt;|javascript|
var p = document.body.firstChild;
while(p){
  myFunc(p);
  p = p.nextSibling;
}
||&lt;
nextSibling は同じ階層の次の要素を取得するプロパティ。nextSibling を使えば、ノード自身をイテレータのように扱える。

実際、jQuery のソースコード中には
&gt;|javascript|
for ( ; n; n = n.nextSibling )
  if ( n.nodeType == 1 ) {
    // 省略
  }
||&lt;
というようなコードがある。カウンタ変数 i を使ったほうが読みやすい気もするが、この辺は好みだね。

***まとめ
-順番にアクセスする
-nextSibling プロパティを使えば、DOM ノードをイテレータ的に使える

**&lt;a name=&quot;observer&quot;&gt;&lt;/a&gt;Observer
***ざっくり説明
オブジェクトの状態が変わったときに、依存するオブジェクトに自動的に知らせるための仕組み。

***具体例
DOM イベントは Observer パターンそのもの。

addEventListener を使えば、イベント発生したときに呼ばれる関数を登録できる。

&gt;|javascript|
elm.addEventListener(&quot;click&quot;,function(){
  // その１
},false);

elm.addEventListener(&quot;click&quot;,function(){
  // その２
},false);
||&lt;
このように、１つの対象(Subject)に対して複数のイベントリスナ(Observer)を登録できるところがポイント。イベントが発生すると、全部のイベントリスナが呼ばれる。

あんまり使わないけど、removeEventListener で登録解除できる。また、イベント発生させるときには、dispatchEvent() メソッドを利用できる。

***まとめ
-通知を複数の対象に知らせるための仕組み
-DOM イベントの仕組みが Observer パターンそのまんまなんだよ。

**&lt;a name=&quot;visitor&quot;&gt;&lt;/a&gt;Visitor
***ざっくり説明
既存のオブジェクト構造を、外部から操作するための仕組みを追加する。

***具体例
SAX（Simple API for XML）。

Java のソースだけど、&lt;a href=&quot;http://ja.wikipedia.org/wiki/Simple_API_for_XML&quot;&gt;Simple API for XML - Wikipedia&lt;/a&gt; より引用。
&gt;|java|
import java.io.IOException;
import javax.xml.parsers.*;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
 
public class Test {
  public static void main(String[] args) throws ParserConfigurationException,SAXException,IOException {
    SAXParserFactory factory = SAXParserFactory.newInstance();
    SAXParser parser = factory.newSAXParser();
 
    parser.parse(&quot;http://example.com/rss&quot;,new DefaultHandler() {
      private String text = &quot;&quot;;
      private boolean isItemStarted = false;
 
      public void startElement(String uri,String localName,String qName,Attributes attributes) {
        if(qName.equals(&quot;item&quot;)) {
          isItemStarted = true;
        }
      }
 
      public void endElement(String uri,String localName,String qName) {
        if (isItemStarted &amp;&amp; qName.equals(&quot;title&quot;)) {
          System.out.println(text);
        }
      }
 
      public void characters(char[] ch,int start,int length) {
        text = new String(ch,start,length);
      }
    });
  }
}
||&lt;
SAX でパース処理を開始すると、XML のノードを上から順番に見ていき、ノードの内容に応じて、Visitor（ここでは、DefaultHandler） の startElement(),endElement(),characters() などのメソッドを呼び出していく。

***まとめ
-SAX はライブラリの構造として Visitor パターンを取り入れている

**あとがき
以上、長くなっちゃったけど、なんとなくイメージが伝われば幸いです。

デザパタについて詳しく知りたい場合は &lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3_(%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2)&quot;&gt;デザインパターン (ソフトウェア) - Wikipedia&lt;/a&gt; や、定番の書籍を参照あれ。

[asin:4797311126:detail]

[asin:4797327030:detail]

[asin:4822282384:detail]

この特集で取り上げられなかったパターンは以下の１２個。

-Bridge、Decorator、Facade、Flyweight、Proxy、Command、Interpreter、Mediator、Memento、State、Strategy、Template Method。

JavaScript 界隈で使われているところが思いあたらなかった。JavaScript 以外だったらよく使うものもあるんだけど…。この辺で使ってるのに！というのがあったら教えてほしいです。

</body>
<comments>
<comment>
<username>hisasann</username>
<body>&gt;&gt;DOM 仕様で言えば、createElement(”table”) では HTMLDivElement オブジェクトが、createElement(”div”) では HTMLDivElement オブジェクトが返されている。&lt;br&gt;&lt;br&gt;ここの1つめはHTMLTableElementですかね。&lt;br&gt;間違っていたらすいませんっ。</body>
<timestamp>1219662437</timestamp>
</comment>
</comments>
</day>
<day date="2008-09-16" title="">
<body>
*p1*でかいテレビも悪くない
引越しして家が広くなったので、テレビを買い換えた。14型テレビデオから、巨大なプラズマテレビにステップアップした。

昨日までアリアハンだったのに、いきなりゾーマ城にいる気分。

ネット界隈では、「地デジなんてクソ！」「大きなテレビなんて誰も望んでない」といった意見が多いんだけど、いざ目の前にでかいテレビが来ると感動する。

でかい。きれい。すごい。

新居がしばらくネットに繋がってなかったというのもあって、しばらくはテレビ三昧の日々をすごしていた。

そうやってネットから少し距離を置いてみると、ネット上でよく見る「テレビ番組はくだらない」「もう何年も見てないよ」というような意見と同じぐらいに、「家にパソコン買ってまでネットする人ってどんだけ物好きなんだよ」と冷静なツッコミだと思った。ネットないと、すごい時間あまるね。だらだらネット見てる時間が全部自由時間になるからね。

どっちの趣味も初期投資には十万円以上かかるし、長期的にはどっちも先細りかもしれない。「これからはケータイだ」という視点も正しそうにも思えてくる。

どの考えもそこいらで言われてることの焼き直しなんだけど、身をもって実感するとまた違う。

まとまってないけど、どっぷり浸かったところから離れてみると、違ったものが見えて面白いですね。
</body>
</day>
<day date="2008-09-17" title="">
<body>
*js_global_replace*[JavaScript]JavaScriptで正規表現を使わずにグローバルな文字列置換
文字列置換のお話。

通常、replace は１回しか置換してくれない。
&gt;|javascript|
&gt;&gt;&gt; &quot;aaaa&quot;.replace(&quot;a&quot;, &quot;A&quot;)
&quot;Aaaa&quot;
||&lt;

何度も置換させるには、正規表現を使うのが手っ取り早い。
&gt;|javascript|
&gt;&gt;&gt; &quot;aaaa&quot;.replace(/a/g, &quot;A&quot;)
&quot;AAAA&quot;
||&lt;

置換前の文字列を文字列で受け取ったときには、正規表現オブジェクトを作ればよい。RegExp コンストラクタの第二引数がフラグ。
&gt;|javascript|
function myReplaceGlobal(str, before, after){
  var reg = new RegExp(before, &quot;g&quot;);
  return str.replace(reg, after);
}
myReplaceGlobal(&quot;aaaa&quot;, &quot;a&quot;, &quot;A&quot;);  // AAAA
||&lt;
ただ、ドット(&lt;code&gt;.&lt;/code&gt;)が任意の文字にマッチしてしまったりと、弊害もある。
&gt;|javascript|
myReplaceGlobal(&quot;foo.bar.&quot;, &quot;.&quot;, &quot;A&quot;);  // AAAAAAAA
||&lt;
ドット(&lt;code&gt;.&lt;/code&gt;)は正規表現で任意の文字を表しちゃう。

さぁ、どうしよう、というのが今回のお題。３つの対策を考えてみた。

**escape!!
正規表現をエスケープする。とりあえず、ドット(&lt;code&gt;.&lt;/code&gt;)のみ。
&gt;|javascript|
function myReplaceGlobal(str, before, after){
  var reg = new RegExp(before.replace(/./g, &quot;\\.&quot;), &quot;g&quot;);
  return str.replace(reg, after);
}
myReplaceGlobal(&quot;foo.bar.&quot;, &quot;.&quot;, &quot;A&quot;);  // fooAbarA
||&lt;

ドット(&lt;code&gt;.&lt;/code&gt;)以外にも対応しなきゃいけないし、将来的に JavaScript の正規表現が拡張されたときの対応が大変。

可能な限り避けたい方法。

(追記) コメント欄で教えてもらいました。replace(/([^0-9A-Za-z_])/g, '\\$1'); でエスケープできるとのこと。

**while!!
泥臭い方法。

正規表現を使わず、文字列の replace を使う。１回しか置換してくれないので、while で値が変わらなくなるまで回す。
&gt;|javascript|
function myReplaceGlobal(str, before, after){
  while(str != str.replace(before, after)){
    str = str.replace(before, after);
  }
  return str;
}
myReplaceGlobal(&quot;foo.bar.&quot;, &quot;.&quot;, &quot;A&quot;);  // fooAbarA
||&lt;

**split &amp; join
１行で書けて、ちょっとかっこいい。
&gt;|javascript|
function myReplaceGlobal(str, before, after){
  return str.split(before).join(after);
}
myReplaceGlobal(&quot;foo.bar.&quot;, &quot;.&quot;, &quot;A&quot;);  // fooAbarA
||&lt;
&quot;foo.bar.&quot; を . で split したら [&quot;foo&quot;, &quot;bar&quot;, &quot;&quot;] になって、それを A で join するので意図した結果が得られる。

**まとめ
３つ示した。どれが好き？

</body>
<comments>
<comment>
<username>mayokara384</username>
<body>http://blog.livedoor.jp/dankogai/archives/51058313.html&lt;br&gt;escapeのは.replace(/￥W/g,”￥￥$&amp;”)で（少し効率は悪いですが）全エスケープできます。</body>
<timestamp>1221645595</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おお、わざわざありがとうございます！！&lt;br&gt;なるほど。勉強になりました。</body>
<timestamp>1221672333</timestamp>
</comment>
</comments>
</day>
<day date="2008-09-18" title="">
<body>
*uniform_add*一様分布の和は一様に分布しない話 (1)
一様分布から２つの値を取り出して足し合わせたものは一様には分布しないそうだ。

なんか違和感があったので、じっくりと悩んでみた。

**Firebug で実証実験
まずは手軽に実験するために Firebug を使って実験。

Math.random() は 0～1 までの一様乱数なので、一様分布といってよいはず。

まずはそれを確かめる。
&gt;|javascript|
var N = 10000;
var result = [];
for(var i = 0; i &lt; N; i++){
  var n = Math.random();
  var index = Math.floor(n * 10);
  result[index] = isNaN(result[index]) ? 1 : result[index] + 1;
}

var i = 0;
while(result.length){
  console.log(&quot;%f～ : %f%&quot;, i++ / 10, result.shift() * 100 / N);
}
||&lt;
出力はこうなる。0～1 までの間に、10% ずつ分布してるのが分かる。
&gt;|
0～ : 9.84%
0.1～ : 10.49%
0.2～ : 10.76%
0.3～ : 9.96%
0.4～ : 10.08%
0.5～ : 9.44%
0.6～ : 10.16%
0.7～ : 9.62%
0.8～ : 10%
0.9～ : 9.65%
|&lt;
すばらしい。Math.random() は一様分布だ。

じゃあ、一様分布の和を確認しよう。ソースコードを一箇所修正する。
&gt;|
  var n = Math.random() &lt;strong&gt;+ Math.random()&lt;/strong&gt;;
|&lt;

0～1 までの値を２つ足したんだから、0～2 までの一様分布になるんじゃないの…と思いきや、実際にはこうなった。
&gt;|
0～ : 0.48%
0.1～ : 1.48%
0.2～ : 2.76%
0.3～ : 3.44%
0.4～ : 4.76%
0.5～ : 4.85%
0.6～ : 6.48%
0.7～ : 7.58%
0.8～ : 8.4%
0.9～ : 9.91%
1～ : 9.89%
1.1～ : 8.16%
1.2～ : 7.8%
1.3～ : 6.61%
1.4～ : 5.06%
1.5～ : 4.3%
1.6～ : 3.54%
1.7～ : 2.51%
1.8～ : 1.62%
1.9～ : 0.37%
|&lt;
OH!!

端っこは 0.5% 程度なのに、1.0～1.1 は 10% 近い。なんという顕著な差！

**離散で考える
連続値で考えるから分かりにくいので、離散的な確率を考えてみよう。そうすれば、中学生レベルの数学の問題になる。

離散値で一様分布といえばサイコロ。サイコロは 1～6 までの整数を一様に返す。

だから、「一様分布の和」を離散の世界で言い換えると、「サイコロを２回ふったときの目の和の分布はどうなるの？」という問題になる。

サイコロを２回振ったときの組み合わせは36通り。表を作って目の和がどうなるか埋めてみた。
|* |*1|*2|*3|*4|*5|*6|
|*1| 2| 3| 4| 5| 6| 7|
|*2| 3| 4| 5| 6| 7| 8|
|*3| 4| 5| 6| 7| 8| 9|
|*4| 5| 6| 7| 8| 9|10|
|*5| 6| 7| 8| 9| 10|11|
|*6| 7| 8| 9|10|11|12|

ということで、一番多いのは 7。36回中6回登場するので、確率は 6/36 = 16.67%。

逆に、一番少ないのが 2 と 12 で 1/36 = 2.77%。

先ほどの例と同様に、真ん中の値ほど、登場する確率が高い。

サイコロで考えると確かに納得！　イメージも沸きやすい。

**今日のまとめ
確率は「連続」が分かりにくいときは、「離散」で考え直すとイメージが沸きやすいかも。

続く？（中心極限定理の話とか）。
</body>
<comments>
<comment>
<username>smoking186</username>
<body>var n = Math.random() * Math.random();&lt;br&gt;の * ってのは + の間違いでしょうか?</body>
<timestamp>1221737252</timestamp>
</comment>
<comment>
<username>rarul</username>
<body>random*ramdom だと、2次の逆数のような確率密度関数になるのかな。。&lt;br&gt;n回かけると、n次の逆数のような関数か。&lt;br&gt;n→∞で、、デルタ関数？・・・・すいません、わかりません・・・</body>
<timestamp>1221844086</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>あ、指摘ありがとうございます。+ の間違いでした。&lt;br&gt;書き写しミスなので計算結果は正しいはずです。</body>
<timestamp>1222012582</timestamp>
</comment>
</comments>
</day>
<day date="2008-09-22" title="">
<body>
*uniform_add2*一様分布の和は一様に分布しない話 (2)
一様分布の和の分布の計算方法は &lt;a href=&quot;http://www7.plala.or.jp/juraian/unifold/unifold.htm&quot;&gt;独立なふたつの一様分布からできる分布&lt;/a&gt; に載っているので改めてここで紹介するまでもなさそうなんだけど、このページは面積で考えていて、ちょっと騙された気分になる。

なので、理解を深めるために別の方向から考えてみることにした。

**分布関数と確率密度関数
[0, 1] の一応分布の分布関数は次のように書ける。
&lt;center&gt;[tex:\Large F(x) = \left\{ \begin{array}{ll} 0 &amp; (x &lt; 0) \\ x &amp; (0 \le x \le 1)\\ 1 &amp; (x &gt; 1) \end{array}\right\.]&lt;/center&gt;

確率密度関数はこれを微分して、
&lt;center&gt;[tex:\Large f(x) = \left\{ \begin{array}{ll} 1 &amp; (0 \le x \le 1) \\ 0 &amp; (x &lt; 0 \quad \text{or} \quad x &gt; 1)\end{array}\right\.]&lt;/center&gt;
となる。

確率密度と確率の関係について一応補足しておく。0～1 の範囲で確率密度が 1 となっていて違和感を感じるかもしれないけど、実際の確率は範囲が定まって初めて求まる。

例えば、x が 0.5～0.6 の範囲になる確率は
&lt;center&gt;[tex:P(0.5 \le x \le 0.6) = \int^{0.6}_{0.5}f(t)\,dt = \int^{0.6}_{0.5}\,dt = 0.1]&lt;/center&gt;
となる。f(x) を 0～1 の範囲まで足しあわせれば 1 となるので直感とも一致するよね。

**和の分布
２つの確率変数の和の確率分布は次のように定義される。
&lt;center&gt;[tex:f_{X+Y}(t) = \int_{-\infty}^{+\infty} f_X(t-y)f_Y(y)\, dy]&lt;/center&gt;
２つの分布の畳み込みになってる。

ということで、一様分布の和の分布を計算すると、f&lt;sub&gt;X&lt;/sub&gt; と f&lt;sub&gt;Y&lt;/sub&gt; の両方が上の f(x) なので、0 &lt; t &lt; 1 のときは
&lt;center&gt;[tex: \begin{eqnarray} f_{+}(t) &amp;=&amp; \int_{-\infty}^{+\infty} f(t-y)f(y)\, dy \\ &amp;=&amp; \int_0^t 1 \cdot 1 \, dy \\ &amp;=&amp; t \end{eqnarray}]&lt;/center&gt;
となる。

よって、分布関数は
&lt;center&gt;[tex:F_{+}(t) = \frac{1}{2}t^2 ]&lt;/center&gt;となる。

t &gt; 1 のときも対象性から求まって、次のようになる。
&lt;center&gt;[tex:\Large F_{+}(t) = \left\{ \begin{array}{ll} 0 &amp; (t &lt; 0) \\ \frac{1}{2}t^2 &amp; (0 &lt; t \le 1) \\ 1 - \frac{1}{2}(2 - t)^2 &amp; (1 &lt; t \le 2) \\ 1 &amp; (t &gt; 2) \end{array}]&lt;/center&gt;

結局は、&lt;a href=&quot;http://www7.plala.or.jp/juraian/unifold/unifold.htm&quot;&gt;独立なふたつの一様分布からできる分布&lt;/a&gt; の結論と同じなんだけど確率密度関数から求める別解を示した、ということでご容赦願いたい。

**参考文献
-&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E7%A2%BA%E7%8E%87%E5%88%86%E5%B8%83&quot;&gt;確率分布 - Wikipedia&lt;/a&gt;
-&lt;a href=&quot;http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29&quot;&gt;Uniform distribution (continuous) - Wikipedia, the free encyclopedia&lt;/a&gt;
</body>
</day>
<day date="2008-09-24" title="">
<body>
*flash_cs4*Flash CS4 の新機能
ClockMaker Blog さんがまとめてくれています。
-&lt;a href=&quot;http://clockmaker.jp/blog/2008/09/creative-suite-4_flash-cs4/&quot;&gt;Flash CS4の新機能 日本語でまとめました | ClockMaker Blog&lt;/a&gt;

CS3 では Photoshop/Illustrator などとの連携や AS3 対応など、地味な機能が多かったですが、CS4 ではデザイナさん向けの華やかな新機能が盛りだくさんな印象ですね。

あくまで英語版の発表で、日本での発売予定日はまだ決まってないようです。CS3 のときは、英語版が2007年4月頭発表、4月中旬発売でした。日本語版はその2ヶ月後の6月中旬発売だったので、同じぐらいだとしたら12月ぐらいに手に入る感じですかね。


</body>
</day>
<day date="2008-09-27" title="">
<body>
*p1*Flash Player 10 ではフォント埋め込みしなくても回転できるらしい
やっとですか、という感じですが。
&gt;http://blog.smartlogicsolutions.com/2008/09/25/rotate-effect-and-non-embedded-fonts-in-flex-4/:title&gt;
One big improvement in Flash Player 10 is that fonts no longer need to be embedded in order to rotate text or alter it’s alpha. 
&gt;&gt;
Flash Player 10 での大きな機能拡張の１つに、テキストを回転させたりアルファを変更するためにフォントを埋め込む必要がなくなった点が挙げられます。
&lt;&lt;
&lt;&lt;

Flash Player 10 での新機能は &lt;a href=&quot;http://weblogs.macromedia.com/akamijo/archives/2008/05/flash_player_10.html&quot;&gt;akihiro kamijo: Flash Player 10 beta 公開&lt;/a&gt; に列挙されていますが、この中の「Advanced Text Layout」に含まれていたんですね。Flash Player 10 はまだ触ってないから気付いていなかった…。

via http://d.hatena.ne.jp/sato-shi/20080926/p2
</body>
</day>
<day date="2008-09-29" title="">
<body>
*warioland_shake*[as][box2d]ワリオランドシェイクみたいに HTML が崩壊するブックマークレット（とそのソースコード）
&lt;a href=&quot;http://jp.youtube.com/experiencewii&quot;&gt;ワリオランドシェイクと YouTube のコラボプロモーション&lt;/a&gt; が面白かったので、似たようなものを作ってみました。

次の文字列をコピーしてアドレスバーに突っ込むと、HTML が崩壊します。
&gt;|javascript|
javascript:(function(){var d=document; var s=d.createElement(&quot;script&quot;); s.charset=&quot;UTF-8&quot;; s.src=&quot;http://tech.nitoyon.com/meltdown/meltdown.js?&quot;+(new Date()).getTime(); d.body.appendChild(s)})();
||&lt;
崩壊するのは画像だけなので、画像があるページで試してみてください。このブログだとこんな具合。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080929/20080929021414.jpg?1222622074&quot; width=&quot;450&quot; height=&quot;179&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

画像はドラッグすることも可能です。あまり画像が多いと重くなりすぎるのでご注意を。

**仕組み
Flash と JavaScript の連携で作り込んでます。

+HTML を覆い隠すように Flash を 配置する。
+JavaScript で HTML にある画像を列挙して、Flash に渡す。
+Flash では、物理エンジン（Box2dFlashAS3）上に画像の位置に対応した箱を作成する。
+HTML 内の全ての画像を消して、Box2dFlashAS3 による物理シミュレーションを開始する。

ちなみに、ワリオランドシェイクでも、同じように Flash と Box2dFlashAS3 を利用している模様です。

**ソースコード
-JavaScript: &lt;a href=&quot;http://tech.nitoyon.com/meltdown/meltdown.js&quot;&gt;meltdown.js&lt;/a&gt;
-ActionScript: &lt;a href=&quot;http://tech.nitoyon.com/meltdown/Meltdown.as&quot;&gt;Meltdown.as&lt;/a&gt;

**関連
-&lt;a href=&quot;http://jp.youtube.com/experiencewii&quot;&gt;YouTube - experiencewii さんのチャンネル&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/KAZUMiX/20071105/meltdown&quot;&gt;HTML崩壊 meltdown.js - KAZUMiX memo&lt;/a&gt;

（追記）nitoyon.com サーバが不安定なので、スクリプト類を Google Pages に移設しました。

</body>
<comments>
<comment>
<username>technohippy</username>
<body>おもしろいですね。&lt;br&gt;Box2DJS使って同じようなことをやった人もいるみたいです。&lt;br&gt;http://www.eseidel.com/gravity/</body>
<timestamp>1222656944</timestamp>
</comment>
<comment>
<username>metalican</username>
<body>サイドのバーを激しく上下に動かすと画像がワラワラとなって面白いですね&lt;br&gt;スゴイなー！</body>
<timestamp>1222789063</timestamp>
</comment>
<comment>
<username>picosuke</username>
<body>おもしろい～！コーダーさんを泣かしてやりました。</body>
<timestamp>1222845532</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>http://www.nicovideo.jp/watch/nm4801333&lt;br&gt;ニコニコ動画で使用されてるようです。&lt;br&gt;ご本人がうｐされたのでしょうか？&lt;br&gt;無断転用でなければいいのですが、、、、。&lt;br&gt;念のためのお知らせでした。。。</body>
<timestamp>1222894341</timestamp>
</comment>
<comment>
<username>yu</username>
<body>投稿したのは私です。&lt;br&gt;通りすがりさんのご指摘通り、こちらのスクリプトを使用させて頂きました。&lt;br&gt;単純にflash内テキストの&lt;A&gt;でこちらのブックマークレットへリンクさせています。&lt;br&gt;特別な問題等がありましたらご連絡下さい。</body>
<timestamp>1222906633</timestamp>
</comment>
<comment>
<username>xKIx</username>
<body>はじめまして！びっくりです！&lt;br&gt;原理などは全然わかってないから余計に驚きました。&lt;br&gt;ブログのほうで紹介させていただきたいと思います！</body>
<timestamp>1222913356</timestamp>
</comment>
<comment>
<username>jk</username>
<body>ニコ動なんかに貼ったらサーバーが落ちるだろ、JK</body>
<timestamp>1222948087</timestamp>
</comment>
<comment>
<username>taka</username>
<body>すごく面白い！&lt;br&gt;画像の物理運動を見てたら、&lt;br&gt;Phun思い出してきたｗ</body>
<timestamp>1223021041</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>javascript:(function(){var d=document; var s=d.createElement(’script’); s.charset=’UTF-8’; s.src=’http://tech.nitoyon.com/meltdown/meltdown.js?’+(new Date()).getTime(); d.body.appendChild(s)})();</body>
<timestamp>1223025659</timestamp>
</comment>
<comment>
<username>あ</username>
<body>このスクリプトでwindows崩壊のやつも作ってるのかな?&lt;br&gt;仕組みが同じなら結構簡単につくれそう・・・</body>
<timestamp>1223200812</timestamp>
</comment>
<comment>
<username>why?</username>
<body>what happen? this doesnt work any more...&lt;br&gt;&lt;br&gt;javascript:(function(){var d=document; var s=d.createElement(”script”); s.charset=”UTF-8”; s.src=”http://nitoyon.googlepages.com/meltdown.js?”+(new Date()).getTime(); d.body.appendChild(s)})();</body>
<timestamp>1223368219</timestamp>
</comment>
<comment>
<username>？</username>
<body>質問。確かに動作確認しましたが、自分のホムペのみ動かない。なぜですかね？いろいろ試しましたけど&lt;br&gt;まさか自分のホムペには動かないなんてことはないでしょうけど。&lt;img src=”ファイル名”&gt;と書くだけじゃ崩壊しないんですかね・・・</body>
<timestamp>1223455415</timestamp>
</comment>
<comment>
<username>sara</username>
<body>はじめまして！&lt;br&gt;とっても面白かったので、ブログで紹介させてもらいました！</body>
<timestamp>1223612813</timestamp>
</comment>
<comment>
<username>やっさん</username>
<body>面白いです&lt;br&gt;落ちた画像で遊べるのがまたいい！&lt;br&gt;ブログネタにさせていただきます</body>
<timestamp>1223823043</timestamp>
</comment>
<comment>
<username>アナムエル</username>
<body>とても面白かったです&lt;br&gt;ブログで紹介したいと思います！</body>
<timestamp>1224129817</timestamp>
</comment>
<comment>
<username>kisaragi</username>
<body>とっても面白いですが一部のブラウザでは起動しないみたいですね。&lt;br&gt;IEでの起動を推奨します。</body>
<timestamp>1224414832</timestamp>
</comment>
<comment>
<username>zii</username>
<body>ブログで紹介させてもらいます＾＾</body>
<timestamp>1224429650</timestamp>
</comment>
<comment>
<username>yuyu</username>
<body>ブログで紹介させていただきますｍ（＿）ｍ</body>
<timestamp>1224606459</timestamp>
</comment>
<comment>
<username>ひろっぴ</username>
<body>面白かったんでブログで紹介させていただきますm(_ _&quot;m)ペコリ</body>
<timestamp>1224724927</timestamp>
</comment>
<comment>
<username>kab</username>
<body>面白かったです。ブログで紹介させてもらいます＾＾</body>
<timestamp>1224947806</timestamp>
</comment>
<comment>
<username>nobu</username>
<body>こんなのもありましたよ。&lt;br&gt;http://jp.youtube.com/watch?v=kLZx4_ZMP4w</body>
<timestamp>1224992504</timestamp>
</comment>
<comment>
<username>haid</username>
<body>はじめまして　すごい！！！　本当に仕組みはまったくわかりませんが　ビックリです　ブログで紹介させていただきます</body>
<timestamp>1225071806</timestamp>
</comment>
<comment>
<username>うま</username>
<body>これはうけたｗｗうちの友達にやってるの見せたら、まじでうけてましたよ＾＾こんな面白い技、教えていただきありがとうございましたぁ～（＞ω＜）</body>
<timestamp>1225103920</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>IE7だと、&lt;br&gt;&lt;br&gt;「Internet Explorer では、 をダウンロードできません。&lt;br&gt;エラーを特定できません」&lt;br&gt;&lt;br&gt;というメッセージが出て、動かないようですね。</body>
<timestamp>1225119866</timestamp>
</comment>
<comment>
<username>kazu</username>
<body>これは面白いですね！！ブログで紹介させてもらいます</body>
<timestamp>1225578353</timestamp>
</comment>
<comment>
<username>TRS</username>
<body>すばらしいですね！！&lt;br&gt;ブログで紹介させていただきます！！！</body>
<timestamp>1225627250</timestamp>
</comment>
<comment>
<username>pon</username>
<body>楽しいですね！ブログで紹介させていただきます。</body>
<timestamp>1226233982</timestamp>
</comment>
<comment>
<username>snda</username>
<body>とっても面白いです！！ブログで紹介させてもらいます！</body>
<timestamp>1227368614</timestamp>
</comment>
<comment>
<username>あう</username>
<body>すごーー！！&lt;br&gt;ブログで紹介させていただきます！</body>
<timestamp>1228828904</timestamp>
</comment>
<comment>
<username>にーとん</username>
<body>面白い！&lt;br&gt;ブログで紹介させてもらいます！</body>
<timestamp>1230545141</timestamp>
</comment>
<comment>
<username>ねこぉ</username>
<body>すごぃ！&lt;br&gt;ブログで紹介させていただきます！。</body>
<timestamp>1237286745</timestamp>
</comment>
<comment>
<username>つべる</username>
<body>スクリプトお借りします。とても楽しいですね。</body>
<timestamp>1238641890</timestamp>
</comment>
<comment>
<username>ママン</username>
<body>ブログで出来るタグ遊びなどを紹介させてもらってます。&lt;br&gt;これ凄い面白いですね。&lt;br&gt;今度ブログでリンク貼って紹介させてもらいます～♪</body>
<timestamp>1242431886</timestamp>
</comment>
<comment>
<username>AQUA</username>
<body>ママンさんブログからコチラにきました。&lt;br&gt;リンクさせていただきました。&lt;br&gt;楽しい♪♪　　　ありがとうございます。(^・^)</body>
<timestamp>1242621162</timestamp>
</comment>
<comment>
<username>VIP最高</username>
<body>労働厨社害人</body>
<timestamp>1245979540</timestamp>
</comment>
<comment>
<username>こに</username>
<body>これ、物凄いです。最高です。ブックマークレットにリンクを貼って、寄稿しているブログで紹介させていただきました(^^)。ありがとうございます。</body>
<timestamp>1247156304</timestamp>
</comment>
<comment>
<username>bon</username>
<body>すごく面白いですね。&lt;br&gt;ブログで紹介させていただきます。</body>
<timestamp>1248242169</timestamp>
</comment>
<comment>
<username>まる</username>
<body>原理とかわかんないけどすごく面白いですねこれ!&lt;br&gt;私も紹介させていただきます!</body>
<timestamp>1249758774</timestamp>
</comment>
<comment>
<username>ひろ</username>
<body>すごく面白いですね。&lt;br&gt;ブログで紹介させて頂きますね。。</body>
<timestamp>1250142890</timestamp>
</comment>
<comment>
<username>Water flea</username>
<body>すばらしいです。&lt;br&gt;ブログで紹介させていただきます。。。</body>
<timestamp>1258544801</timestamp>
</comment>
<comment>
<username>しん</username>
<body>これを改良して、画面内に「バルス」が含まれている場合だけ崩壊というものはできないでしょうか？</body>
<timestamp>1260349029</timestamp>
</comment>
<comment>
<username>名無し</username>
<body>すごいしょうかいさせていただきます</body>
<timestamp>1265359629</timestamp>
</comment>
<comment>
<username>KETUKE</username>
<body>すごいですね。&lt;br&gt;紹介させていただきます。</body>
<timestamp>1269146234</timestamp>
</comment>
<comment>
<username>Aunon</username>
<body>見つけたときはすごくびっくりしました&lt;br&gt;紹介させていただきます。</body>
<timestamp>1274624704</timestamp>
</comment>
<comment>
<username>kerupani</username>
<body>ブログに載せてしまいましたが…まずかったでしょうか?</body>
<timestamp>1278322835</timestamp>
</comment>
<comment>
<username>kerupani</username>
<body>すいません。↑のコメントのリンク、ミスりました。</body>
<timestamp>1278322931</timestamp>
</comment>
<comment>
<username>morizuki0928</username>
<body>すごいですね。&lt;br&gt;ブログでスクリプト紹介させていただきます。</body>
<timestamp>1285945286</timestamp>
</comment>
<comment>
<username>udon</username>
<body>凄いですね！&lt;br&gt;サイトごと紹介させて頂きます！</body>
<timestamp>1306590534</timestamp>
</comment>
<comment>
<username>udon</username>
<body>凄いですね！&lt;br&gt;サイトごと紹介させて頂きます！</body>
<timestamp>1306590534</timestamp>
</comment>
<comment>
<username>ToT</username>
<body>これをブログパーツにすることはできませんかね?</body>
<timestamp>1312589896</timestamp>
</comment>
<comment>
<username>TCK</username>
<body>面白いです。&lt;br&gt;&lt;br&gt;ブログで紹介させていただきます。</body>
<timestamp>1319346117</timestamp>
</comment>
</comments>
</day>
<day date="2008-09-30" title="">
<body>
*swfobject_copy*[as]代替テキスト(SEO対策) または 代替画像
とあるキャンペーンサイトを見たら、「代替テキスト(SEO対策) または 代替画像」という文字だけが表示されていた。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080928/20080928123341.jpg?1222572827&quot; width=&quot;400&quot; height=&quot;138&quot;&gt;&lt;/center&gt;&lt;

何かと思ってぐぐってみたら、&lt;a href=&quot;http://www.project-nya.jp/modules/weblog/details.php?blog_id=653&quot;&gt;にゃあプロジェクト - ウェブログ - SWFObjectを使うのだ！ (1)&lt;/a&gt; のサンプルにこのテキストが書いてあるようだ。
&gt;|html|
&lt;div id=&quot;flashcontent1&quot;&gt;
代替テキスト(SEO対策) または 代替画像
&lt;/div&gt;
||&lt;
なるほど、そのままコピペして、代替テキストを書き換え忘れたのか…。

私は普段、JavaScript オフで生活しているので、こういう面白い事例に出会いやすい。JavaScript オフのとき用のページもしっかり作りこんであると好印象ですね。

</body>
<comments>
<comment>
<username>賢威＠SEO対策</username>
<body>altの代替テキストはSEO効果あると思いますよ</body>
<timestamp>1242398951</timestamp>
</comment>
</comments>
</day>
<day date="2008-10-03" title="">
<body>
*meltdown_niconico*HTML 崩壊 on ニコニコ動画
先日発表した「&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080929/warioland_shake&quot;&gt;HTML が崩壊するブックマークレット&lt;/a&gt;」が好評でありがたいことです。

そんな中、このスクリプトをニコニコ動画に埋め込む猛者が登場しました。ニコニコ動画が崩壊します。

&lt;center&gt;&lt;strong&gt;↓↓スイッチを押すためにはニコニコ動画を開く必要があるようです↓↓&lt;/strong&gt;&lt;br&gt;[niconico:nm4801333:small]&lt;/center&gt;

外部JS起動はまずかろう、と思ったら、やっぱり対策された模様。
-&lt;a href=&quot;http://blog.nicovideo.jp/2008/10/post_237.php&quot;&gt;ニコニコ動画を崩壊させるスイッチについて - ニコニコ動画 開発者ブログ（新着情報）&lt;/a&gt;
同様のネタの新規投稿は禁止されたけど、記念にこの動画は消さずに残してくれるらしい。運営の姿勢が素敵だ。

**ニコニコ動画での反応
しかし、ニコニコ上での反響がすごい。

&lt;a href=&quot;http://www.nicovideo.jp/ranking/mylist/hourly/all&quot;&gt;毎時ランキング&lt;/a&gt; で１位。そのお陰もあって、動画投稿から１日で10万再生5千コメント！　数多くの人に体験してもらえて、しかも反応がすぐ分かる。とても嬉しい。これが噂に聞いていたニコニコの力か…。

あまりのアクセス量に一時、nitoyon.com がサーバエラーになってたけど今のところ復旧している。よかったよかった。

**ニコニコ動画への SWF 埋め込み
ちなみに、10月1日から &lt;a href=&quot;http://www5.ssw.co.jp/nmm/&quot;&gt;ニコニコムービーメーカー&lt;/a&gt; を使って、SWF をニコニコ動画に投稿できるようになったらしい。さっそく、kagi さんが例の有名なやつを投稿してます。

&lt;center&gt;[niconico:nm4809023:small]&lt;/center&gt;

投稿できる SWF ファイルには色々条件があって、kagi さんによると512×384、25fps推奨、AS一切使用不可とのことらしい（&lt;a href=&quot;http://twitter.com/kagi55x/statuses/943434790&quot;&gt;参照&lt;/a&gt;）。

ニコニコはすぐに視聴者からの反応が得られて大変刺激的なので、これを機会に Flash ムービーブームが来たら嬉しいですね。Flash の方が動画編集するより絶対に楽だしね。
</body>
</day>
<day date="2008-10-06" title="">
<body>
*million3*[event]第３回 百万遍チャーの会
百万遍界隈のベンチャーが集まったイベントの&lt;a href=&quot;http://www.milliontimes.net/&quot;&gt;第３回が開催されます&lt;/a&gt;。

今回の目玉は はてな社長の id:jkondo さんの講演ですよ。そのあとの、パネル討論には私も出ます。

:日時:2008年10月17日(金) 14:40～17:10
:場所:京都大学 学術情報メディアセンター 南館201講義室

「幸せに働くこと」「大企業と中小ベンチャーの働き方」をテーマにしてるので、就職活動を控えてる学生さんに特に来てもらいたいです。もちろん「近藤さん見たい！」とか「なんとなく面白そうだから」とかで参加していただいても全く問題ありません。ぜひぜひ来てください！　社会人の人にはちょっと厳しい時間帯ですが…。

詳しくは &lt;a href=&quot;http://www.milliontimes.net/&quot;&gt;百万遍チャーの会&lt;/a&gt; をご覧ください。

**関連
-第１回レポート: &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070427/p1&quot;&gt;刺激的な一日 - てっく煮ブログ&lt;/a&gt;
-第２回告知: &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071114/event_11_17&quot;&gt;11月17日のイベントご案内 - てっく煮ブログ&lt;/a&gt;
</body>
</day>
<day date="2008-10-14" title="">
<body>
*smalltalk_heap_sort*Smalltalk でヒープソートを書いてみた
最近、&lt;a href=&quot;http://d.hatena.ne.jp/motemen/20080813/1218634304&quot;&gt;アルゴリズムイントロダクション輪読会@京都&lt;/a&gt; に参加している。前回のヒープソートの回では、id:secondlife さんが Ruby で &lt;a href=&quot;http://introductiontoalgorithms.g.hatena.ne.jp/keyword/0801006%e3%83%92%e3%83%bc%e3%83%97%e3%82%bd%e3%83%bc%e3%83%88%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%b3%e3%83%bc%e3%83%89&quot;&gt;ヒープソートサンプルコード&lt;/a&gt; を作っていたので、負けずに Smalltalk で作ってみた。

Smalltalk は初めてなのであまり自信はないけど、やってみないことには始まらない。処理系は VisualWorks を使ってみた。

**クラス定義
さっそく関数定義…したいんだけど、Smalltalk には関数はなくて全てメソッド。

なので、まずはヒープを表現するクラスを定義する。OrderedCollection を継承して Heap クラスを作った。
&gt;|ruby|
OrderedCollection subclass: #Heap
    instanceVariableNames: 'heapSize'
    classVariableNames: ''
    poolDictionaries: ''
    category: nil.
||&lt;

次にインスタンス作成時の処理を行う initialize メソッドを定義する。Smalltalk でのメソッド定義は基本的に GUI ベースで行うので、ちょっと無理やりなメソッド定義となっている。Ruby で class_eval してるような感じ。
&gt;|ruby|
Heap compile: 'initialize: anArray
    super addAll: anArray asOrderedCollection.
    heapSize := self size.'.
||&lt;

Smalltalk のコレクションはインデックスが 1 から始まるので、特に工夫する必要はない。

**メソッド定義していく
&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4764903342/nitoyoncom-22/ref=nosim&quot;&gt;アルゴリズムイントロダクション 第1巻&lt;/a&gt; に載ってる parent や left を定義した。
&gt;|ruby|
Heap compile: 'parent: anInteger
    ^ (anInteger / 2) truncated'.

Heap compile: 'left: anInteger
    ^ 2 * anInteger'.

Heap compile: 'right: anInteger
    ^ 2 * anInteger + 1'.

Heap compile: 'swap: i and: j
    | tmp |
    tmp := self at: i.
    self at: i put: (self at: j).
    self at: j put: tmp.'.
||&lt;

ついでに配列の要素を入れ替える swap も定義しておいた。

**if に苦しむ
同じように、教科書の MAX-HEAPIFY を定義。
&gt;|ruby|
Heap compile: 'maxHeapify: i
    | l r largest |
    l := self left: i.
    r := self right: i.
    (l &lt;= heapSize and: [(self at: l) &gt; (self at: i)])
        ifTrue:    [largest := l]
        ifFalse:  [largest := i].
    (r &lt;= heapSize and: [(self at: r) &gt; (self at: largest)])
        ifTrue:    [largest := r].
    (largest = i) not 
        ifTrue: [ self swap: largest and: i.
            self maxHeapify: largest.
        ].'.
||&lt;
Smalltalk には if 文がないので、true や false の ifTrue～ifFalse メソッドを利用している。

教科書のサンプルでは、A &amp;&amp; B がショートサーキットなところ（A が false なら、B は評価されないところ）を利用していたんだけど、Smalltalk の A &amp; B は A も B も評価されてしまう。というのも、&amp; は true や false のメソッドとして実装されている。遅延評価もない以上、必ず B が評価されてしまうようだ。

仕方がないので、２つ目の条件をブロックで受け取る A and: Bblock を使ってみた。こうすれば、前が true のときのみ、B を評価してくれる。

**慣れてきた
あとは同じようにえいや。
&gt;|ruby|
Heap compile: 'buildMaxHeap
    (heapSize / 2) truncated to: 1 by: -1 
        do: [:i | self maxHeapify: i.]'.

Heap compile: 'heapSort
    self buildMaxHeap.
    (self size) to: 2 by: -1 do: [:i |
        self swap: 1 and: i.
        heapSize := heapSize - 1.
        self maxHeapify: 1.
    ]'.
||&lt;
数字 to: 数字 で範囲になって、ブロックで処理をするあたりが Ruby とそっくり。downto がなくて Ruby に負けた感じだけど、Ruby に負けず劣らず、教科書の疑似コードに近くなった気はしている。

最後に実行。
&gt;|ruby|
| aHeap |

aHeap := Heap new initialize: #(16 4 10 14 7 9 3 2 8 1).
aHeap heapSort.
Transcript show: aHeap printString.
||&lt;
Ruby だと new した瞬間に initialize が呼ばれるんだけど、Smalltalk では new のあとに initialize をつけて明示的に呼ぶのがお約束になっているようだ。

**感想
Ruby は Smalltalk の影響を強く受けてるみたいで、いろんなところで共通点が多い。

なので、Ruby のコードを移植するのは簡単かなーと思って試してみたんだけど、Smalltalk の独特の癖に翻弄されてすごく時間がかかってしまった。けど、慣れてくると面白い。もう少し、Smalltalk と戯れてみよう。

Ruby 好きな人は、Smalltalk を勉強してみると起源が辿れて面白いかもしれない。私はこの本を読んで Smalltalk を勉強した。著者の語り口が授業を受けてるみたいで面白かった。

[asin:4822283623:detail]

ただ、後半のほとんどが自作フレームワークの使い方の解説になってるのが残念…。もうちょっとオブジェクト指向のなんたるか、や、MVC の具体例を見たかったものだ。

コードでクラスを定義する方法は、以下の２つのページを参考にした。
-&lt;a href=&quot;http://d.hatena.ne.jp/sumim/20080304/p1&quot; title=&quot;最低限の Squeak Smalltalk 入門 - sumim’s Smalltalking-tosへ&quot;&gt;最低限の Squeak Smalltalk 入門 - sumim’s Smalltalking-tos&lt;/a&gt;
-&lt;a href=&quot;http://www.sra.co.jp/people/h-asaoka/study/TextbookAboutJun/19/index.html&quot; title=&quot;Textbook about Jun for Smalltalk 19へ&quot;&gt;Textbook about Jun for Smalltalk 19&lt;/a&gt;

</body>
<comments>
<comment>
<username>sumim</username>
<body>本当に Smalltalk は初めてですか？　すばらしいですね。　#swap:and: には、Heap の上流の SequenceableCollection に用意されている #swap:with: が同じ用途でそのまま使えそうです。</body>
<timestamp>1223949868</timestamp>
</comment>
<comment>
<username>ambi</username>
<body>ありゃ、コメント内容を書き終えて更新しなおすと、sumimさんがいらっしゃってた。&lt;br&gt;&lt;br&gt;まず、お約束ですが、Small&quot;T&quot;alkではなくSmall&quot;t&quot;alkなのですよ！&lt;br&gt;&lt;br&gt;&gt; Ruby だと new した瞬間に initialize が呼ばれるんだけど、SmallTalk では new のあとに initialize をつけて明示的に呼ぶのがお約束になっているようだ。&lt;br&gt;&lt;br&gt;あ、ちょっと違います。VisualWorksには長いこと触っていないので適当なことを言っていたら申し訳ないですが、そういうときはHeapクラスで、&quot;クラス&quot;メソッドとして&lt;br&gt;&lt;br&gt;new&lt;br&gt;　　^super new initialize&lt;br&gt;&lt;br&gt;と書くのがイディオムになっています。これにまつわる議論として、sumimさんの以下の２番目のエントリ及びコメント欄も参考してください（こちらはSqueakの話）：&lt;br&gt;http://d.hatena.ne.jp/sumim/20041104&lt;br&gt;&lt;br&gt;クラスブラウザで既存のクラスと見比べながら、Heapクラスなどをクラスブラウザ上で作っていくと、だんだんSmalltalkに慣れてくると思いますよ。</body>
<timestamp>1223951686</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; sumim さん&lt;br&gt;ありがとうございます。&lt;br&gt;上流も調べたつもりだったんですが、見逃してました。private の中にあったとは…。でも、ソースが自分が書いたのとほとんど同じでうれしかったです。&lt;br&gt;&lt;br&gt;&gt; ambi さん&lt;br&gt;うわ、Smalltalk なんですね…。ありがとうございます。気をつけます…。&lt;br&gt;initialize についても了解です。クラスオブジェクトの new を書き換える、というところがなんとも愉快ですね。</body>
<timestamp>1223993094</timestamp>
</comment>
</comments>
</day>
<day date="2008-10-15" title="">
<body>
*xray_as3*[as]&quot;XRay&quot; - ActionScript3 版の Firebug みたいなデバッグツール
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015005521.png&quot; width=&quot;450&quot; height=&quot;184&quot;&gt;&lt;/center&gt;&lt;

ActionScript 2 用のデバッグツールとして有名だった XRay が &lt;a href=&quot;http://rockonflash.wordpress.com/2008/10/11/xray-yes-it-does-as3/&quot;&gt;ActionScript 3 に対応した&lt;/a&gt;ようです。

DisplayObject の階層を表示してくれたり、オブジェクトのプロパティを修正したり、ログ用のコンソールになったりと機能豊富です。しかも、Flash CS3 だけでなく、Flex や AIR でも使えるようです。

ということで、早速、試してみました。

**ダウンロードしてソースコードに２行追加するだけ
XRay のソースコードを拾ってきます。Google Code にあるので、SVN で拾ってきましょう。
-http://osflash-xray.googlecode.com/svn/trunk/as3/trunk/

では、自分の Flash に仕込んでみましょう。

ActionScript のソースコードに import 文を追加します。
&gt;|javascript|
import com.blitzagency.xray.inspector.Xray;
||&lt;
スクリプトの最初のほうで、インスタンスを作って addChild してあげます。
&gt;|javascript|
addChild(new Xray());
||&lt;
この２行だけで準備は完了です。

あ、Flex の場合は、専用の Flex2Xray というクラスを new するだけで OK です。こんな感じです。
&gt;|xml|
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;
    applicationComplete=&quot;init()&quot;&gt;
    &lt;mx:Script&gt;
        &lt;![CDATA[
            import com.blitzagency.xray.inspector.flex2.Flex2Xray;

            private function init():void{
               var xray:Flex2Xray = new Flex2Xray();
            }
        ]]&gt;
    &lt;/mx:Script&gt;
&lt;/mx:Application&gt;
||&lt;

**ビューワを起動する
ログを表示するビューワは別途 SWF の形で提供されています。以下の URL からダウンロードして、ブラウザで表示するなり、スタンドアロン版 Flash Player で起動するなりしてください。
-http://www.rockonflash.com/xray/flex/Xray.zip

Application View の「Go」ボタンを押すと、階層表示できます。左側のツリーを適度に開いていくと、Flash の構造が丸見えですね。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015004411.png&quot; width=&quot;450&quot; height=&quot;305&quot;&gt;&lt;/center&gt;&lt;

選択した DisplayObject は右側でプロパティが表示されてます。値を修正して反映することもできるので、ちょっとした動作チェックも可能です。このあたりは、まさに Firebug みたいな感じですね。

**デバッグログを出力する
スクリプト側で次のようにすると、XRay にログを出力できます。
&gt;|javascript|
// 最初のほう
import com.blitzagency.xray.logger.XrayLog;

// スクリプトのどこか
var log:XrayLog = new XrayLog();

log.debug(&quot;StringMessage&quot;, object [, object, object...]);
log.info(&quot;StringMessage&quot;, object [, object, object...]);
log.warn(&quot;StringMessage&quot;, object [, object, object...]);
log.error(&quot;StringMessage&quot;, object [, object, object...]);
log.fatal(&quot;StringMessage&quot;, object [, object, object...]);
||&lt;
出力したログを XRay のビューワで確認できます。レベルごとに絞り込み表示したり、検索したりも可能です。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015004410.png&quot; width=&quot;450&quot; height=&quot;276&quot;&gt;&lt;/center&gt;&lt;

ただ、ログの表示はお世辞にも見やすいとは言えない感じで、あまり魅力的ではありません。別のツールを併用したほうがよいかもしれません。

**まとめ
AS2 時代に XRay を愛用した人にとっては嬉しいですね。

AS3 になって、色んなデバッグツールが百花繚乱してるので、今更 XRay を選ぶ理由もないような気がします。ビューワの独特な見た目に抵抗ある人も少なからずいるのではないでしょうか。せっかくなので、次回は、AS3 界隈に登場しているデバッグツールをまとめてみたいと思います。

</body>
</day>
<day date="2008-10-16" title="">
<body>
*as3_debug_library*[as]ActionScript 3.0 用デバッグ支援ライブラリいろいろ
**XRay
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015004411.png&quot; width=&quot;200&quot; height=&quot;136&quot; align=&quot;right&quot;&gt;
AS2 では定評のあったツール。AS3 にも対応している。

:サイト:http://code.google.com/p/osflash-xray/
:対応バージョン:ActionScript 2.0, ActionScript 3.0 (Flash CS3, Flex 2)
:機能:インスペクタ、コンソール出力 (専用ビューワ)
:参考:&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081015/xray_as3&quot;&gt;&quot;XRay&quot; - ActionScript3 版の Firebug みたいなデバッグツール - てっく煮ブログ&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;

**Alcon
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015011237.jpg&quot; width=&quot;200&quot; height=&quot;200&quot; align=&quot;right&quot;&gt;
インスペクタとコンソールのセット。パフォーマンス情報が見れたり、オブジェクトの詳細な情報をダンプできるようだ。ビューワは AIR 製。

:サイト:http://blog.hexagonstar.com/alcon/
:対応バージョン:ActionScript 2.0, ActionScript 3.0 (Flash CS3, Flex 2)
:機能:インスペクタ、コンソール出力 (AIR 製専用ビューワ)
:参考:&lt;a href=&quot;http://level0.kayac.com/2008/11/alcon.php&quot;&gt;【デバッグ強化週間】デバッグツール「Alcon」を使ってみた｜_level0.KAYAC&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;

**fxspy
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015011239.png&quot; width=&quot;200&quot; height=&quot;152&quot; align=&quot;right&quot;&gt;
Flex に特化したインスペクタ。かなり見やすい。

:サイト:http://code.google.com/p/fxspy/
:対応バージョン:Flex2, Flex3
:機能:インスペクタ (SWF 内表示)
:デモ:&lt;a href=&quot;http://www.mieuxcoder.com/data/2007/12/FlexSpy-1.2/dashboard.html&quot;&gt;Flex&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;

**Flex2 Debug Component
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015011238.jpg&quot; width=&quot;200&quot; height=&quot;145&quot; align=&quot;right&quot;&gt;
こちらも Flex に特化したインスペクタだが、Flex 2 時代で開発が止まっている模様。

:サイト:http://www.mikenimer.com/index.cfm/2006/7/5/FlexDebugPanel
:対応バージョン:Flex2 (SWF 内表示)
:機能:インスペクタ
&lt;br clear=&quot;all&quot;&gt;

**ThunderBolt
&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081015/20081015011240.jpg&quot; width=&quot;200&quot; height=&quot;150&quot; align=&quot;right&quot;&gt;
コンソール出力機能をもったライブラリ。このジャンルでは一番メジャー。ログを Firebug に表示したり、AIR 製の専用ビューワに表示したりできる。見やすい。

:サイト:http://code.google.com/p/flash-thunderbolt/
:対応バージョン:ActionScript 2.0, ActionScript 3.0 (Flash CS3, Flex 2)
:機能:コンソール (Firebug に表示 or AIR 製専用ビューワ)
:デモ:&lt;a href=&quot;http://flash-thunderbolt.googlecode.com/svn/trunk/as2/example/deploy/thunderbolt.html&quot;&gt;AS2&lt;/a&gt;, &lt;a href=&quot;http://www.websector.de/blog/2007/10/14/thunderbolt-as3-10-released-a-lightweight-logging-tool-for-flex-2-and-flash-cs3-applications/&quot;&gt;AS3&lt;/a&gt;
:参考:&lt;a href=&quot;http://level0.kayac.com/2008/06/flashthunderbolt.php&quot; title=&quot;Flashのログ閲覧アプリThunderBoltをいれてみた｜_level0.KAYACへ&quot;&gt;Flashのログ閲覧アプリThunderBoltをいれてみた｜_level0.KAYAC&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;

**log.as
Firebug にコンソール出力するためのツール。シンプルなので個人的にはこれを愛用。最新のソースは、http://github.com/hotchpotch/as3rails2u/tree/master/src にある。

:サイト:http://subtech.g.hatena.ne.jp/secondlife/20070219/1171872801
:対応バージョン:ActionScript 3.0 (Flash CS3, Flex2, Flex3)
:機能:コンソール出力 (Firebug に表示)

**Arthropod
コンソール出力のツールのようだが詳細は不明。

:サイト:http://arthropod.stopp.se/
:対応バージョン:ActionScript 3.0
:機能:コンソール

**まとめ
初心者のうちは、インスペクタがあれば、その場で触って試せるので理解が進んでよいでしょうね。Flex 開発なら、Flex 用インスペクタを使ったほうがお薦めです。私は困ったときに一度だけ fxspy を使いましたが、なかなか便利でした。
</body>
</day>
<day date="2008-10-17" title="">
<body>
*haskell_heapsort*Haskell でヒープソートを書いてみた
関数型言語に苦手意識があったので、ここのところ Haskell を勉強していた。せっかくなので、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081014/smalltalk_heap_sort&quot;&gt;Smalltalk でヒープソート&lt;/a&gt; に続き、今度は Haskell でヒープソートを書いてみる。

&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4764903342/nitoyoncom-22/ref=nosim&quot;&gt;アルゴリズムイントロダクション 第1巻&lt;/a&gt;の疑似コードが手続き型なので、それをどのように関数型に変換していくかが難しかった。アルゴリズムイントロダクションが手元にない人は、&lt;a href=&quot;http://introductiontoalgorithms.g.hatena.ne.jp/keyword/0801006%e3%83%92%e3%83%bc%e3%83%97%e3%82%bd%e3%83%bc%e3%83%88%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%b3%e3%83%bc%e3%83%89&quot;&gt;Ruby 版&lt;/a&gt; を見ると分かりやすいだろう。

**下準備
まずは、配列のインデックスを 1 ベースにする。ライブラリの Array 型は好きな値からインデックスを始められるようだが、Haskell の基本的な使い方を覚えたいのでパス。あえてリストで書いてみる。リストの要素にアクセスする関数は !! なので、これをラップした !!! を作ってみる。
&gt;|haskell|
(!!!) :: [a] -&gt; Int -&gt; a
(!!!) xs i = xs !! (i - 1)
||&lt;
次は、教科書の PARENT, LEFT, RIGHT。
&gt;|haskell|
parent :: Int -&gt; Int
parent = (`div` 2)

left :: Int -&gt; Int
left = (* 2)

right :: Int -&gt; Int
right = (+ 1) . (* 2)
||&lt;
単純な関数なので、部分適用や関数合成を使って書いてみた。

次、swap。これも頑張って書き下してみる。もっとシンプルな書き方がありそうなんだが、ひとまずは泥臭く。
&gt;|haskell|
swap :: Int -&gt; Int -&gt; [a] -&gt; [a]
swap m n list = take (i1 - 1) list
             ++ [list !!! i2]
             ++ (drop i1 $ take (i2 - 1) list)
             ++ [list !!! i1]
             ++ drop i2 list
    where i1 = min m n
          i2 = max m n
||&lt;

**手続き型脳から脱却できぬ
いよいよ大物へ。MAX-HEAPIFY。if 文が並んでいた THE 手続き型な関数だったので、とても苦労した。
&gt;|haskell|
maxHeapify :: Int -&gt; [Int] -&gt; [Int]
maxHeapify i arr = if largest i /= i
    then maxHeapify (largest i) $ swap (largest i) i arr
    else arr
    where
        largeLeft i j = 
            if left i &lt;= length arr &amp;&amp; (arr !!! left i) &gt; (arr !!! j)
                then left i
                else j
        largeRight i j = 
            if right i &lt;= length arr &amp;&amp; (arr !!! right i) &gt; (arr !!! j)
                then right i
                else j
        largest i = largeRight i $ largeLeft i i
||&lt;
ひとまずは教科書をそのまま書き下してみた。もっとシンプルに関数型っぽく書き直してみたいんだけど、方針が思いつかない。

**ループの書き直し
BUILD-MAX-HEAP には for 文が登場。Haskell に for 文はないので、再帰か畳み込みで書き直す必要がある。ここでは畳み込み(foldr)を使ってみた。
&gt;|haskell|
buildMaxHeap :: [Int] -&gt; [Int]
buildMaxHeap arr = foldr maxHeapify arr $ [1 .. (length arr) `div` 2]
||&lt;
畳み込みにも苦手意識があったけど、&lt;a href=&quot;http://d.hatena.ne.jp/blanketsky/20071129/1196329379&quot; title=&quot;畳み込み関数の比較 (fold / accumulate / inject / reduce) - blanket-logへ&quot;&gt;畳み込み関数の比較 (fold / accumulate / inject / reduce) - blanket-log&lt;/a&gt; がすごく分かりやすかった。ありがたい。

最後は HEAP-SORT。ここでも for 文が登場するので、今度は再帰を使ってみた。
&gt;|haskell|
heapSort :: [Int] -&gt; [Int]
heapSort [] = []
heapSort arr = heapSort (take (length arr - 1) $ swapped arr)
            ++ [head $ buildMaxHeap arr]
    where swapped arr = swap 1 (length arr) $ buildMaxHeap arr
||&lt;

**動け！
最後に main。
&gt;|haskell|
main = print $ heapSort [4,1,3,2,16,9,10,14,8,7]
-- [1,2,3,4,7,8,9,10,14,16]
||&lt;
動いた！

**感想
なんとか動いたが、Haskell っぽいソースに見えない。誰かに添削してほしい。ujihisa とか。

Haskell は次の２つの本を読んで勉強した。

[asin:4797336021:detail]

「ふつうのHaskell」はとても丁寧で分かりやすかった。全体の構成が練りに練られていて、初心者でもすいすい理解できる！

[asin:4839919623:detail]

「入門 Haskell」は文章が多少こなれていない感じなんだけど、「ふつうのHaskell」のあとに読むと復習になってよかった。「ふつうのHaskell」では扱っていない内容にも踏み込んでいて理解が深まった。

</body>
<comments>
<comment>
<username>s</username>
<body>基本的にヒープソートは配列向きで、&lt;br&gt;リストだとあまりキレイに書けないのは仕方ない気がします。&lt;br&gt;めちゃくちゃ遅くなりますし。&lt;br&gt;&lt;br&gt;直したほうがいいのは&lt;br&gt;maxHeapify i arr&lt;br&gt; | largest == i = arr&lt;br&gt; | otherwise = maxHeapify largest $ swap largest i arr&lt;br&gt; where&lt;br&gt; largest = snd $ maximum [(arr !!! j, j) | j &lt;- [i, right i, left i], j &lt;= length arr]&lt;br&gt;ぐらいなんじゃないでしょうか。</body>
<timestamp>1224239748</timestamp>
</comment>
<comment>
<username>s</username>
<body>すいません富豪脳過ぎました。&lt;br&gt; where&lt;br&gt; large i j = if i &lt;= length arr &amp;&amp; (arr !!! i) &gt; (arr !!! j) then i else j&lt;br&gt; largest = large (left i) (large (right i) i)</body>
<timestamp>1224242202</timestamp>
</comment>
<comment>
<username>const ()</username>
<body>maxHeapify i arr = maxHeapify&#39; (i, arr !!! i) arr&lt;br&gt;maxHeapify&#39; ix@(i,x) arr = if li /= i&lt;br&gt;　then maxHeapify&#39; lix $ swap li i arr&lt;br&gt;　else arr&lt;br&gt;　where&lt;br&gt;　　lix@(li,_) = large (right i) $ large (left i) ix&lt;br&gt;　　large j ix@(i,x) = if j &lt;= length arr &amp;&amp; y &gt; x then (j,y) else ix&lt;br&gt;　　　where y = arr !!! j&lt;br&gt;&lt;br&gt;高階関数使うなら iterate かなあ。</body>
<timestamp>1224244502</timestamp>
</comment>
<comment>
<username>blanketsky</username>
<body>ヒープといっても実装方法はいろいろありまして，インデックス2倍で親子関係を表すようなヒープ実装はリストだとつらいですので，関数型言語で作る場合は木構造を素直にデータ型として実装できるような方法を採るのが普通です． leftist heap とか binomial heap とか調べてみると良いんでないかと思います．</body>
<timestamp>1224344508</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>s さん、const() さん、blanketsky さん、ありがとうございます。&lt;br&gt;参考にさせていただきます！！&lt;br&gt;次回はクイックソートなので、Haskell の底力爆発するのを楽しみにしてます。</body>
<timestamp>1224433126</timestamp>
</comment>
</comments>
</day>
<day date="2008-10-20" title="">
<body>
*topcoder*TopCoder 参加中
１ヶ月ぐらい前から TopCoder の SRM(Single Round Match)に参加してる。

TopCoder は世界中から参加者が集まるネット対戦型のプログラミングコンテスト。詳しくは以下のページを参照。
-&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/0703/01/news013.html&quot;&gt;TopCoderで世界と渡り合う日本IBMの異才――夷藤勇人 - ITmedia エンタープライズ&lt;/a&gt;
-&lt;a href=&quot;http://kishibe.dyndns.tv/index.php?%E9%9B%91%E8%A8%98%2FTopCoder%E3%81%AB%E6%8C%91%E6%88%A6&quot;&gt;雑記/TopCoderに挑戦 - nodchip's web site&lt;/a&gt;
-&lt;a href=&quot;http://generation1986.g.hatena.ne.jp/keyword/TopCoder%e9%83%a8&quot;&gt;TopCoder部 - ハチロク世代&lt;/a&gt;

始めてから１ヶ月だけど、プログラミング能力が向上している実感がある。アルゴリズムの所要時間を予測したり、普通に解いたら爆発的な時間がかかる問題を工夫して数秒で終わるようにしたり、C++(STL)の知らなかった関数を知ったり…。激しく勉強になる。

慣れるにつれて、順調にレーティングも上がっていってるところ。6回目にして yellow coder になれた。上位10%も目前。当面は yellow 維持を目標にがんばる！

&gt;&lt;center&gt;&lt;a href=&quot;http://www.topcoder.com/tc?module=MemberProfile&amp;cr=22748430&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081020/20081020020359.jpg&quot; width=&quot;350&quot; height=&quot;220&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

TopCoder 関係の活動記録は、&lt;a href=&quot;http://topcoder.g.hatena.ne.jp/nitoyon/&quot;&gt;TopCoder煮ブログ - TopCoder部&lt;/a&gt; に書いていってる。TopCoder やってる人以外には全く役に立たなさそうなブログだけど…。
</body>
</day>
<day date="2008-11-04" title="">
<body>
*windows7_screenshot*[ms]Windows 7 のスクリーンショットが発売までにどう変わるかを想像する
最近、Windows 7 の話題が少しずつ出てきていますね。
&gt;&lt;center&gt;[f:id:nitoyon:20081030100928p:image]&lt;/center&gt;&lt;
-&lt;a href=&quot;http://pc.watch.impress.co.jp/docs/2008/1029/mobile429.htm&quot;&gt;本田雅一の「週刊モバイル通信」 - 第429回 Windows 7の概要&lt;/a&gt;
-&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081029_windows7/&quot;&gt;Vistaの次のウインドウズ「Windows 7」の新機能をスクリーンショット付きで大解説、地味に改善されていることが明らかに - GIGAZINE&lt;/a&gt;
-&lt;a href=&quot;http://fnya.cocolog-nifty.com/blog/2008/11/windows-7-5795.html&quot;&gt;あるＳＥのつぶやき: Windows 7 の詳細が大分明らかになってきた模様&lt;/a&gt;
ざっと眺めたところ、Windows Vista をベースに細かな機能の改善がなされているように見えます。

ところで Windows 7 のリリースは2010年ごろといわれています。こういうスクリーンショットが出てくると、どうしても見た目に話題が集中しがちなのですが、２年後の発売までにデザインはまだまだ改善されると想像されます。

**Windows Vista のときのはどうだったんだろう
じゃあ、Vista のときはどうだったんでしょう。Vista のときの開発中の画面を見れば、発売までにどれぐらい変わるかが想像できるかもしれません。

いろいろ検索していると、ネット上に &lt;strong&gt;Windows Vista の発売２年前のスクリーンショット&lt;/strong&gt;を発見しました。

まずはログオン画面。
&gt;&lt;center&gt;&lt;a href=&quot;http://www.winsupersite.com/images/showcase/longhorn_4051_000.jpg&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20031026/20031026210643.jpg&quot; width=&quot;400&quot; height=&quot;250&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
あちゃー、真っ黒ですね。２年前の段階ではほとんど決まっていなかったのかもしれません。

次にデスクトップとスタートメニュー。
&gt;&lt;center&gt;&lt;a href=&quot;http://www.winsupersite.com/images/showcase/longhorn_4051_004.jpg&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20031026/20031026210644.jpg&quot; width=&quot;400&quot; height=&quot;250&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
サイドバーはありますが半透明ではないこともあって全体的にのっぺりした印象です。

エクスプローラはこんな具合。
&gt;&lt;center&gt;&lt;a href=&quot;http://www.winsupersite.com/images/showcase/longhorn_4051_009.jpg&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20031026/20031026210645.jpg&quot; width=&quot;400&quot; height=&quot;250&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
コンセプトは出来上がっているけど、あまり洗練されていない印象ですね。

いかがでしょう。細かなデザインは製品版とけっこう違いますね。ということで、Windows 7 も今後２年かけてまだまだ向上していくことでしょう。どちらかというと、個々のスクリーンショットをみてあれこれ言うよりも、新機能として挙げられているものを見てイメージしておくほうがよさそうです。

上で紹介した以外にも、Vista 発売２年前のスクリーンショットは &lt;a href=&quot;http://www.winsupersite.com/showcase/longhorn_4051_01.asp&quot;&gt;Paul Thurrott's SuperSite for Windows: Windows Longhorn Build 4051 Gallery 1&lt;/a&gt; にいくつも掲載されています。
</body>
</day>
<day date="2008-11-05" title="">
<body>
*hatebu_200810_monthly*はてなブックマーク 2008年10月ブックマーク数ランキング
はてなブックマークには&lt;a href=&quot;http://b.hatena.ne.jp/hotentry?mode=daily&quot;&gt;日別のランキング&lt;/a&gt;と&lt;a href=&quot;http://b.hatena.ne.jp/entrylist?url=http%3A%2F%2F&amp;sort=count&quot;&gt;総合ランキング&lt;/a&gt;があるのですが、その間のランキングがありません。

日別だと情報量が多すぎるし、総合だと巨人コンテンツしか生き残りません。そこで、間を埋めるためにも、2008年10月に一番ブックマークされた記事を調べてみました。

**上位記事ランキング
１位はインテリアの記事でした。50位でも450 usersってすごいですね。ちなみに、200 users 以上のものも240エントリもありました。

+&lt;a href=&quot;http://tokuna.blog40.fc2.com/blog-entry-1409.html&quot;&gt;見てるだけで楽しい！雑貨・インテリアを扱っている24サイトまとめ*二十歳街道まっしぐら&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://tokuna.blog40.fc2.com/blog-entry-1409.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01081.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081014_fruits_and_veggies/&quot;&gt;「冷蔵庫に入れておいた方が長持ちする」＆「冷蔵庫に入れない方が長持ちする」野菜と果物リスト - GIGAZINE&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://gigazine.net/index.php?/news/comments/20081014_fruits_and_veggies/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01023.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/kaz_ataka/20081018/1224287687&quot;&gt;圧倒的に生産性の高い人（サイエンティスト）の研究スタイル - ニューロサイエンスとマーケティングの間 - Being between Neuroscience and Marketing&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/kaz_ataka/20081018/1224287687&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00946.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/ramyana/20081022/1224695284&quot;&gt;はてなブックマークの歴代ホッテントリ TOP100 - 19790401173.4&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/ramyana/20081022/1224695284&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00874.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://q.hatena.ne.jp/1138362836&quot;&gt;あなたの中で 「うわっ！こんなサービスウェブで無料公開してるの？」 「今まで、お金払ってたけど、実は無料で提供しているサイトあったんだ・・」 というように下記のよ.. - 人力検索&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://q.hatena.ne.jp/1138362836&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00776.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.virtual-pop.com/music/2008/10/jpop.html&quot;&gt;JPOPサウンドの核心部分が、実は１つのコード進行で出来ていた、という話 - 音極道 Music Hacks&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.virtual-pop.com/music/2008/10/jpop.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00749.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://yucl.net/manga&quot;&gt;マンガで分かる心療内科・精神科 | =　ゆうメンタルクリニック　上野駅０分　東京・心療内科・カウンセリング・精神科&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://yucl.net/manga&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00711.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/takerunba/20081028/p1&quot;&gt;フィンランドの5年生がまとめた議論のルールが凄い - タケルンバ卿日記&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/takerunba/20081028/p1&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00699.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/COLUMN/20080929/315572/&quot;&gt;Windowsはどうやって起動しているのか? : ITpro&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://itpro.nikkeibp.co.jp/article/COLUMN/20080929/315572/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00689.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://tokuna.blog40.fc2.com/blog-entry-1425.html&quot;&gt;これだけは入れておきたい！Firefoxをさらに便利にする25アドオンまとめ*二十歳街道まっしぐら&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://tokuna.blog40.fc2.com/blog-entry-1425.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00688.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081018_pdfcreator/&quot;&gt;PDFだけでなくPNG・JPG・TIFF・BMP・PCX・PS・EPS形式でも出力可能なフリーの仮想プリンタ「PDFCreator」 - GIGAZINE&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://gigazine.net/index.php?/news/comments/20081018_pdfcreator/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00685.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://anond.hatelabo.jp/20081019115056&quot;&gt;４０歳平凡サラリーマンが半年でTOEIC400点から700点を獲得した方法&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://anond.hatelabo.jp/20081019115056&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00684.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.oshiete-kun.net/archives/2008/10/post_192.html&quot;&gt;市販ソフトを超えた！タダで使える世界最強ウイルス対策ソフト :教えて君.net&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.oshiete-kun.net/archives/2008/10/post_192.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00684.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://lifehacking.jp/2008/10/writing-rules/&quot;&gt;ブロガー必見！ 文章上達のための 12 と1/2のルール | Lifehacking.jp&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://lifehacking.jp/2008/10/writing-rules/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00663.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://ascii.jp/elem/000/000/183/183437/&quot;&gt;Web制作会社が作った！超使えるJavaScriptライブラリ&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://ascii.jp/elem/000/000/183/183437/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00630.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.thinkit.co.jp/article/143/1/&quot;&gt;[Think IT] 第1回：携帯サイトとPCサイトはここまで違う！ (1/3)&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.thinkit.co.jp/article/143/1/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00624.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://blog.4galaxy.net/56.html&quot;&gt;漢字が使える日本語フォント 無料ダウンロード 46種類 : 4GALAXYのメモ&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.4galaxy.net/56.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00601.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.msng.info/archives/2008/10/post_782.php&quot;&gt;苦情メールに返信するとき意識すること - 頭ん中&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.msng.info/archives/2008/10/post_782.php&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00600.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/LM-7/20081019/1224423017&quot;&gt;2001年9月11日、ワールドトレードセンタービルの102分間 - A Successful Failure&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/LM-7/20081019/1224423017&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00598.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://codezine.jp/article/detail/3014&quot;&gt;UNIXテクニック集　まずはおさらい、シェル制御構造と正規表現の基礎：CodeZine&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://codezine.jp/article/detail/3014&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00578.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081022_useful_resources_tutorials/&quot;&gt;魅力的なウェブサイトを作成するために知っておくと便利な9つのスクリプト - GIGAZINE&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://gigazine.net/index.php?/news/comments/20081022_useful_resources_tutorials/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00570.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://k-tai.impress.co.jp/cda/article/interview/42297.html&quot;&gt;ケータイユーザーの“本音”　大学生に聞いた20歳前後のケータイ事情&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://k-tai.impress.co.jp/cda/article/interview/42297.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00565.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://anond.hatelabo.jp/20081018010245&quot;&gt;ここでクリーニング屋でバイトしてた私が来ましたよっと。&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://anond.hatelabo.jp/20081018010245&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00554.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.google.com/search2001.html&quot;&gt;Google2001&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.google.com/search2001.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00544.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://coliss.com/articles/software/1588.html&quot;&gt;見栄えがよく、分かりやすいエクセルのグラフを作成する5つの簡単なテクニック | コリス&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://coliss.com/articles/software/1588.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00541.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.benricho.org/&quot;&gt;みんなの知識【ちょっと便利帳】&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.benricho.org/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00536.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/kajuntk/20081006/1223253403&quot;&gt;不動産屋が教えない、周辺治安を知るための重要なポイント - Automatons Hacking Guide&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/kajuntk/20081006/1223253403&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00533.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://note.openvista.jp/2008/php-security-memo/&quot;&gt;PHPでのセキュリティ対策についてのメモ - Liner Note&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://note.openvista.jp/2008/php-security-memo/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00529.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://sozai-free.com/index.html&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://sozai-free.com/index.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00516.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://koramu2.blog59.fc2.com/blog-entry-235.html&quot;&gt;日本が好きなだけなんだよ 韓国が引き金を引いたリーマンショック　&amp;#12316;そして韓国終了へ&amp;#12316;&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://koramu2.blog59.fc2.com/blog-entry-235.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00515.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://blog.kndb.jp/president/2008/10/10.php&quot;&gt;新・10分でわかる。株式会社の作り方 - president blog&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.kndb.jp/president/2008/10/10.php&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00515.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://blog.kndb.jp/president/2008/10/vol1.php&quot;&gt;ベンチャー経営者のための資金調達マニュアル Vol.1 - president blog&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.kndb.jp/president/2008/10/vol1.php&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00514.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://blog.creamu.com/mt/2008/10/45.html&quot;&gt;素晴らしいロゴをデザインするための45の法則 | CREAMU&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.creamu.com/mt/2008/10/45.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00512.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081017_fonts_professional_designers/&quot;&gt;プロフェッショナルのデザイナーがよく使う21種類のフォント - GIGAZINE&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://gigazine.net/index.php?/news/comments/20081017_fonts_professional_designers/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00501.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://pixy.in/hotspotmaps/&quot;&gt;公衆無線LANマップ｜ホットスポットを一発検索！&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://pixy.in/hotspotmaps/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00501.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://blog.livedoor.jp/hyuudoro/archives/51245879.html&quot;&gt;表裏比興ギリギリ全開パワー:韓国がやばい（詳細版） - livedoor Blog（ブログ）&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.livedoor.jp/hyuudoro/archives/51245879.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00500.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.forest.impress.co.jp/article/2008/10/01/paragondrivebackup.html&quot;&gt;窓の杜 - 【REVIEW】HDD全体をイメージ化してバックアップ・復元できる「Paragon Drive Backup」&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.forest.impress.co.jp/article/2008/10/01/paragondrivebackup.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00481.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.itmedia.co.jp/bizid/articles/0810/08/news007.html&quot;&gt;「早起きは三文の得」実行委員が行く：「字がキレイ」と言われたい　悪筆がすぐ直る11の技 (1/3) - ITmedia Biz.ID&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.itmedia.co.jp/bizid/articles/0810/08/news007.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00479.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://e0166.blog89.fc2.com/blog-entry-531.html&quot;&gt;20の優れたAjax効果*ホームページを作る人のネタ帳&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://e0166.blog89.fc2.com/blog-entry-531.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00479.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.president.co.jp/pre/special/aiai/aiai/article/-ec89a08e8f&quot;&gt;村上春樹に会いに行く - プレジデント&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.president.co.jp/pre/special/aiai/aiai/article/-ec89a08e8f&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00474.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://tokuna.blog40.fc2.com/blog-entry-1439.html&quot;&gt;こんなこともできる！GIMPのチュートリアル13個まとめ*二十歳街道まっしぐら&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://tokuna.blog40.fc2.com/blog-entry-1439.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00472.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.jamstec.go.jp/frcgc/research/p2/masuda/ondanka/sekai/ondanka_rikai.html&quot;&gt;地球温暖化を過不足なく理解する&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://www.jamstec.go.jp/frcgc/research/p2/masuda/ondanka/sekai/ondanka_rikai.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00471.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081013_wep_morii/&quot;&gt;一瞬にして無線LANのWEPを解読する方法がついに登場、まもなく解読プログラムを公開予定 - GIGAZINE&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://gigazine.net/index.php?/news/comments/20081013_wep_morii/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00471.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20081001_chissoku/&quot;&gt;「こんにゃく入りゼリー」よりものどに詰まって死亡した件数が多い危険な食べ物ベスト10 - GIGAZINE&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://gigazine.net/index.php?/news/comments/20081001_chissoku/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00466.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://blog.livedoor.jp/habuakihiro/archives/65115500.html&quot;&gt;株式会社スターロジックの羽生章洋が書いてるブログ:元請けにこだわる理由 - livedoor Blog（ブログ）&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://blog.livedoor.jp/habuakihiro/archives/65115500.html&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00463.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://builder.japan.zdnet.com/news/story/0,3800079086,20381259,00.htm&quot;&gt;ユーザーにとってはUIがすべて：UIデザイン原則をソシオメディアが語る - builder by ZDNet Japan&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://builder.japan.zdnet.com/news/story/0,3800079086,20381259,00.htm&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00463.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://aruhenshu.exblog.jp/9943413/&quot;&gt;ある編集者の気になるノート : 立川談志が弟子に教えた、醜い嫉妬の解消法。&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://aruhenshu.exblog.jp/9943413/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00459.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://ascii.jp/elem/000/000/182/182225/&quot;&gt;Web制作に超便利！無料のプロトタイプ作成ツール&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://ascii.jp/elem/000/000/182/182225/&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00459.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/rx7/20081011/p2&quot;&gt;&quot;make install&quot;したソフトウェアを管理できる超便利ツール「Paco」 - RX-7乗りの適当な日々&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/rx7/20081011/p2&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00459.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/morchin/20080922#p1&quot;&gt;プログラミングテクニックのまとめ - プログラミング日記&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://d.hatena.ne.jp/morchin/20080922%23p1&quot;&gt;&lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00455.png&quot; border=&quot;0&quot;&gt;&lt;/a&gt;

**上位タグ ランキング
ホットエントリ入りしたものにつけられたタグも数えてみました。
+2ch &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/06389.png&quot;&gt;
+社会 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/05922.png&quot;&gt;
+ネタ &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/05673.png&quot;&gt;
+あとで読む &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/03761.png&quot;&gt;
+まとめ &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/03655.png&quot;&gt;
+web &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/03150.png&quot;&gt;
+政治 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/03082.png&quot;&gt;
+これはひどい &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02973.png&quot;&gt;
+javascript &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02819.png&quot;&gt;
+経済 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02675.png&quot;&gt;
+*あとで読む &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02580.png&quot;&gt;
+webサービス &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02395.png&quot;&gt;
+増田 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02209.png&quot;&gt;
+tips &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02096.png&quot;&gt;
+google &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/02065.png&quot;&gt;
+これはすごい &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01963.png&quot;&gt;
+読み物 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01962.png&quot;&gt;
+business &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01915.png&quot;&gt;
+教育 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01822.png&quot;&gt;
+生活 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01799.png&quot;&gt;
+仕事 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01724.png&quot;&gt;
+iphone &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01674.png&quot;&gt;
+画像 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01640.png&quot;&gt;
+windows &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01534.png&quot;&gt;
+firefox &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01531.png&quot;&gt;
+music &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01463.png&quot;&gt;
+mobile &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01462.png&quot;&gt;
+著作権 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01455.png&quot;&gt;
+webデザイン &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01448.png&quot;&gt;
+design &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01390.png&quot;&gt;
+life &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01354.png&quot;&gt;
+web制作 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01330.png&quot;&gt;
+lifehack &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01312.png&quot;&gt;
+security &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01309.png&quot;&gt;
+science &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01284.png&quot;&gt;
+ビジネス &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01279.png&quot;&gt;
+コミュニケーション &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01269.png&quot;&gt;
+食 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01257.png&quot;&gt;
+科学 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01250.png&quot;&gt;
+news &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01239.png&quot;&gt;
+mac &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01216.png&quot;&gt;
+セキュリティ &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01163.png&quot;&gt;
+software &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01158.png&quot;&gt;
+tool &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01139.png&quot;&gt;
+pc &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01134.png&quot;&gt;
+音楽 &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01122.png&quot;&gt;
+お役立ち &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01121.png&quot;&gt;
+デザイン &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01100.png&quot;&gt;
+programming &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01080.png&quot;&gt;
+はてな &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01059.png&quot;&gt;
2ch がダントツですね。2ch タグは、2ch 系のまとめ記事や 2ch 発の出来事、2ch についての記事などにつけられている模様です。

**ドメイン別
ついでにドメイン別のホットエントリ入り数も調べてみました。こちらは Top 20 まで。
+はてなダイアリー (218)
+はてな匿名ダイアリ (82)
+livedoor Blog (81)
+asahi.com (48)
+GIGAZINE (40)
+ITmedia (39)
+MSN産経ニュース (27)
+コリス (21)
+IDEA*IDEA (19)
+アルファルファモザイク (19)
+ライフハッカー［日本版］ (17)
+goo ブログ (13)
+Yahoo!ニュース (12)
+phpspot開発日誌 (12)
+VIPPERな俺 (12)
+ニコニコ動画(秋) (11)
+NBonline(日経ビジネス オンライン) (11)
+CNET Japan (11)
+ハムスター速報　２ろぐ (10)
+【2ch】ニュー速クオリティ (10)
はてなダイアリーがだんとつの218件です。livedoor Blog が意外に多くて驚いたのですが、81件中の56件が「痛いニュース(ﾉ∀`)」だったのでなんとなく納得しました。

**集計方法
&lt;a href=&quot;http://b.hatena.ne.jp/hotentry?mode=daily&quot;&gt;過去の人気エントリー&lt;/a&gt;の2008年10月分に１度でも登場したエントリ1193件を調査しました。各エントリの個別ページ（b.hatena.ne.jp/entry/...）からRSS を取得し、10月中にブックマークされたものを集計しています。そのため、プライベートで利用しているユーザの数は反映されていません。

※ページが沢山あるのでサーバに負荷をかけないよう２時間ぐらいかけてゆっくりと取得してます
</body>
</day>
<day date="2008-11-09" title="">
<body>
*utf8_normalize*[ruby]Ruby で UTF-8 の文字化け部分を取り除く
RSS を拾ってきてパースしようとしたら、不正な文字列が入っていて REXML が ParseException を投げてしまった。

文字コードが UTF-8 前提だったので、UTF-8 として valid な文字のみが含まれるように置換して対処した。
&gt;|ruby|
str = str.scan(/([\x00-\x7f]|[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3})/).join
||&lt;
Ruby じゃなくても同じようなコードで対処できそう。

関連：
-UTF-8 の正規表現は &lt;a href=&quot;http://blog.livedoor.jp/dankogai/archives/50410033.html&quot;&gt;404 Blog Not Found:UTF-8 vs. ISO-10646&lt;/a&gt; から拝借した
-PHP なら $xmlStr = mb_convert_encoding($xmlStr, &quot;UTF-8&quot;, &quot;UTF-8&quot;); でいけるらしい（参考：&lt;a href=&quot;http://b.hatena.ne.jp/entry/http://fladdict.net/blog/2006/06/rssutf8.html&quot;&gt;はてなブックマーク - rssに非UTF8の不正な文字列がある場合の対処法&lt;/a&gt;）

</body>
</day>
<day date="2008-11-21" title="">
<body>
*jquery_array*[jQuery][JavaScript]jQuery の配列系のメソッドをメモしとこ
jQuery は機能が豊富なので、しばらく使わないと忘れてしまう。

ここでは、jQuery と配列の関係に絞って目的別に逆引きできるようにしておく。

**配列から jQuery オブジェクトを作成
$ 関数に渡せばOK
&gt;|javascript|
$([1,2,3])
||&lt;

NodeList のような配列っぽいものを渡しても解釈してくれる。
&gt;|javascript|
$(document.getElementsByTagName(&quot;div&quot;))
// $(&quot;div&quot;) と同じ
||&lt;

※内部的には setArray メソッドが呼ばれてるが、外から使うことは稀。

**jQuery オブジェクトを配列のように扱う
***要素数を取得する
length プロパティを使えばOK。
&gt;|javascript|
$(&quot;div&quot;).length
// document.getElementsByTagName(&quot;div&quot;).length と同じ
||&lt;
jQuery のメソッドを使って操作する限りは、適切に length が更新されていく。

***特定のインデックスの要素を取得
[] か get(index) を使えば、特定のインデックスの DOM 要素を取得できる。
&gt;|javascript|
$(&quot;div&quot;)[0]
$(&quot;div&quot;).get(0)
// document.getElementsByTagName(&quot;div&quot;)[0] と同じ
||&lt;
eq を使うと、特定のインデックスの要素のみを含む jQuery オブジェクトが返ってくる。
&gt;|javascript|
$(&quot;div&quot;).eq(0)
// $(document.getElementsByTagName(&quot;div&quot;)[0]) または
// $(&quot;div:first&quot;) と同じ
||&lt;

***jQuery オブジェクトから配列を作成
jQuery オブジェクトは配列のように扱えるんだけど、Array の全てのメソッドが使えるわけではない。

生の配列を取得するには get() を使う。
&gt;|javascript|
$(&quot;div&quot;).get().reverse()
// div 配列の一覧を逆順にした配列
||&lt;
reverse したあとにさらに jQuery オブジェクトにするには、冒頭に紹介したように、$() に入れる。
&gt;|javascript|
$($(&quot;div&quot;).get().reverse())
||&lt;

get() の内部では $.makeArray(this) が実行されている。

$.makeArray() は配列のようなもの(NodeList や arguments, jQuery オブジェクトなど)を配列に変換するとき便利だ。Array.prototype.slice.call( array_like ) という技もあるんだけど、IE7 でエラーになることがある。

***each！ map！　filter！
中身について処理を行うには &lt;strong&gt;each&lt;/strong&gt; を使う。第一引数がインデックス、第二引数が要素。
&gt;|javascript|
$(&quot;div&quot;).each(function(i, elem){elem.className=&quot;foo&quot;+i;})
// 以下のコードと同じ
// var elems = document.getElementsByTagName(&quot;div&quot;);
// for(var i = 0; i &lt; elems.length; i++)
//     elems[i].className = &quot;foo&quot; + i;
||&lt;

this が第二引数にバインドされているので引数なしで this を使って要素にアクセスするとスマート。
&gt;|javascript|
$(&quot;div&quot;).each(function(){this.className = &quot;foo&quot;;})
// $(&quot;div&quot;).attr(&quot;className&quot;, &quot;foo&quot;) と同じ
||&lt;

配列の要素を置き換えるには &lt;strong&gt;map&lt;/strong&gt; が使える。
&gt;|javascript|
$(&quot;div&quot;).map(function(){return this.className;})
// [&quot;&quot;, &quot;class1&quot;, &quot;class2&quot;, ...]
// (クラス名一覧を含む jQuery オブジェクト)
||&lt;

要素を絞り込むには &lt;strong&gt;filter&lt;/strong&gt; が使える。関数を呼び出した結果が true のものだけに絞り込む。select みたいなもん。
&gt;|javascript|
$(&quot;div&quot;).filter(function(){
    return this.className == &quot;foo&quot;;
})
// $(&quot;div.foo&quot;) と同じ
||&lt;
第一引数にはインデックス番号が渡る。
&gt;|javascript|
$(&quot;div&quot;).filter(function(i){
    return i % 2 == 0;
})
// $(&quot;div:even&quot;) と同じ
||&lt;
filter には CSS セレクタも使える。
&gt;|javascript|
$(&quot;div&quot;).filter(&quot;.foo&quot;)
||&lt;

map と filter をした後に end() を呼ぶと、元の jQuery オブジェクトに戻る。
&gt;|javascript|
$(&quot;div&quot;)
    .filter(&quot;.foo&quot;)
        .style(&quot;display&quot;, &quot;none&quot;)
    .end()
    .filter(&quot;.bar&quot;)
        .style(&quot;display&quot;, &quot;block&quot;)
    .end()
// 以下の処理と同じ
// $(&quot;div.foo&quot;).style(&quot;display&quot;, &quot;none&quot;);
// $(&quot;div.bar&quot;).style(&quot;display&quot;, &quot;none&quot;);
||&lt;
end() は find(), add(), children() などを呼んだあとにも使える。ややこしくなるので使わないんだけど…。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20081211/jquery_fast_css:title]
-[http://d.hatena.ne.jp/nitoyon/20080115/jquery_event:title]
-[http://d.hatena.ne.jp/nitoyon/20071227/cmpop:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2008-12-02" title="">
<body>
*ubygems*[ruby]ubygems
rubygems を使ってライブラリをインストールすると、そのまま require 'sqlite3' のようにすれば使えるようになる。

ところが、ライブラリパスである $LOAD_PATH を見てみると、その中に lib/ruby/gems/1.8/gems 以下のフォルダは含まれていなかった。
&gt;|ruby|
irb(main):001:0&gt; $LOAD_PATH
=&gt; [&quot;c:/ruby/lib/ruby/site_ruby/1.8&quot;, 
    &quot;c:/ruby/lib/ruby/site_ruby/1.8/i386-msvcrt&quot;, 
    &quot;c:/ruby/lib/ruby/site_ruby&quot;, 
    &quot;c:/ruby/lib/ruby/1.8&quot;, 
    &quot;c:/ruby/lib/ruby/1.8/i386-mswin32&quot;, 
    &quot;.&quot;]
||&lt;

不思議だったのでいろいろと情報をあたってみた。

**犯人は RUBYOPT
環境変数を見てみると RUBYOPT に -rubygems が設定されていた。ruby を起動するごとに RUBYOPT が自動的にコマンドライン引数に付加されるらしい。どうやら、One-Click Ruby のセットアップ時に、環境変数 RUBYOPT に -rubygems が設定されていたようだ。

試しに RUBYOPT を空にして require 'sqlite3' するとエラーになった。

次に、-rubygems オプションの仕組みが気になった。ruby 本体に rubygems 用の特殊な処理が組み込まれているとは考えづらい。

**-r オプション
ruby --help を実行すると、-r はライブラリを読み込むためのオプションだと分かった。

例えば、MD5 モジュールを使うとき、-r を使わなければ次のようになる。
&gt;|ruby|
ruby -e &quot;require 'md5'; p MD5::md5('a')&quot;
||&lt;
これを、-r を使って書き換えると
&gt;|ruby|
ruby -r md5 -e &quot;p MD5::md5('a')&quot;
||&lt;
とできる。

 -r のあとのスペースは省略できるので
&gt;|ruby|
ruby -rmd5 -e &quot;p MD5::md5('a')&quot;
||&lt;
としてもよい。

**-rubygems の答え
そこで、-rubygems。

なんと、lib/ruby/site_ruby/1.8 に &lt;strong&gt;ubygems.rb&lt;/strong&gt; というファイルが用意されていた。ubygems.rb は require 'rubygems' してるだけ。

この ubygems.rb があるおかげで
&gt;|ruby|
ruby -r rubygems foo.rb
||&lt;
の変わりに

&gt;|ruby|
ruby -rubygems foo.rb
||&lt;
と書けるわけだ。-rubygems は -r ubygems と解釈される！

ubygems.rb が rubygems.rb を require する。

なるほどねー。

**rubygems は何をやってるか
最後に、rubygems が中で何をやってるかを軽く見てみた。

rubygems.rb から呼ばれる rubygems/custom_require.rb では Kernel#require の処理を置き換えている。
&gt;|ruby|
module Kernel
  alias gem_original_require require # :nodoc:

  # コメントいっぱい
  def require(path) # :nodoc:
    gem_original_require path
  rescue LoadError =&gt; load_error
    # 例外処理いっぱい
  end
end  # module Kernel
||&lt;
ということで、require 'rubygems' するか -rubygems オプションを指定すると、require がラップされるようだ。
lib/ruby/gems/1.8/gems の下の適切なバージョンのライブラリを読み込んでくれるわけですな。

</body>
</day>
<day date="2008-12-03" title="">
<body>
*p1*TopCoder下がりすぎた
[f:id:nitoyon:20081203005133j:image]
しばらく練習サボってたら過去最低のレーティングになった。２軍おち。やばい。

→ 詳しくはこちら http://topcoder.g.hatena.ne.jp/nitoyon/
</body>
</day>
<day date="2008-12-08" title="">
<body>
*p1*[pipes]サイトの最新被ブックマークを livedoor Reader で読むための Pipes (2)
ずっと前に &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070424/bookmarked_summary&quot;&gt;サイトの最新被ブックマークを livedoor Reader で読むための Pipes&lt;/a&gt; というのを作ったんだけど、はてなブックマークの&lt;a href=&quot;http://hatena.g.hatena.ne.jp/hatenabookmark/20081203/1228288415&quot;&gt;フィードリーダーでの表示改善&lt;/a&gt;が行われたので機能しなくなってた。

せっかくの機会なので Yahoo! Pipes のほうを改善しておいた。

こんな感じになりますよ。
[f:id:nitoyon:20081205224203p:image]

オリジナルのフィードとの違いは以下の点。
-サイトの要約は冗長なので削除
-ID とタグが見分けつきにくいので、ID を太字に
-コメントの右側にブックマーク件数を移動

livedoor Reader で気持ちよく読めるように作ってます。

ご利用はこちらから：
-http://pipes.yahoo.com/nitoyon/hihatebu
</body>
</day>
<day date="2008-12-09" title="">
<body>
*ie_location_hash*[as]IE＋Flash Player で Location Hash 使ったときにタイトルが変わる問題
Internet Explorer で Location Hash を利用したページに Flash を表示すると、IE のタイトルが #hoge のようになってしまうことがある。発生する条件は、Flash にフォーカスがあたったり、location.hash 値が変わったりしたとき。

この問題、世間の人はどうやって解決してるんだろうと思って、swfaddress のソースをみてみた。swfaddress は Flash で location.hash 扱うための有名ライブラリ。

swfaddress の JavaScript 側に次のようなソースを発見した。setInterval でこの処理が定期的に呼ばれているようだ。
&gt;|javascript|
// _d は document
var _titleCheck = function() {
  if (_browser.isIE() &amp;&amp; _d.title != _title)
    SWFAddress.setTitle(_title);
}
||&lt;
要約すると、「IE でページのタイトルが勝手に変わってたら元に戻す」という処理になってる。んー、結局こうするしかないのか…。swfaddress はちょっと大げさだったので、自力で document.title を定期的に書き戻す処理を実装することにした。

IE7 でもこの問題は直ってない模様。MS と Adobe のどっちが悪いんだろなぁ…。ちなみに、IE8 には &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc288209(VS.85).aspx&quot;&gt;onhashchange イベント&lt;/a&gt; が追加されるらしいので、このバグ(?)が残っていたとしても、比較的すっきりと対処できそうだ。

</body>
</day>
<day date="2008-12-10" title="">
<body>
*hatebu_nenkan_release*[はてブ年鑑]はてブ年鑑をリリースしました
はてなブックマークの年間ランキング・月間ランキングを集計したサイト、「&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt;」というサイトを作成しました。

&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081210/20081210063935.png&quot; width=&quot;400&quot; height=&quot;352&quot;&gt;&lt;br&gt;はてブ年鑑&lt;/a&gt;&lt;/center&gt;

**はてなブックマークの歴史がここに
2005年からの年間・月間の人気エントリが掲載されています。

一昔前の人気だったエントリを探すもよし、感傷にひたるもよし、自由にご利用ください。

**順位変動機能
サイトやタグをクリックすると、過去の順位変動を確認することができます。

(例) Web2.0 タグ
-[f:id:nitoyon:20081210064950p:image]
-ここ２年はほとんど使われなくなったようです
(例) あとで読むタグ
-[f:id:nitoyon:20081210064951p:image]
-使う人が増えてきていますね。
(例) GIGAZINE
-[f:id:nitoyon:20081210063934p:image]
-彗星のごとく登場して、その後も安定した人気があるのが分かります。

**どうぞご利用ください。
-http://tech.nitoyon.com/hatebu_nenkan/

</body>
</day>
<day date="2008-12-11" title="">
<body>
*jquery_fast_css*[jQuery][JavaScript][css]jQuery を高速に使う CSS セレクタの書き方
jQuery は CSS セレクタで要素を選んで処理できるのが魅力的ですね。そんな jQuery ですが、CSS セレクタの書き方次第で速度が大幅に変わってきます。

ここでは jQuery の内部処理を疑似コードで示しつつ、jQuery を高速に使うためのポイントを５つに絞って紹介します。

+何度も同じセレクタを実行しない
+クラスだけを指定するのは禁止
+#id を積極的に使う
+途中までの結果を再利用する
+子供セレクタ(&gt;)を使うと速くなることがある

※ この記事は jQuery 1.2.6 のソースコードを元に記述しています

**1. 何度も同じセレクタを実行しない
***改善前
&gt;|javascript|
// 例題 1
$(&quot;div.foo&quot;).addClass(&quot;bar&quot;);
$(&quot;div.foo&quot;).css(&quot;background&quot;, &quot;#ffffff&quot;);
$(&quot;div.foo&quot;).click(function(){alert('foo');});
||&lt;

***何が問題か
jQuery は CSS セレクタを書くたびに、DOM をたどってセレクタにマッチする要素を検索します。

&lt;code&gt;$(&quot;div.foo&quot;)&lt;/code&gt; を実行すると、その背後で jQuery は次のような処理を実行しています。
&gt;|
// セレクタで選択した結果を格納する配列
var ret = [];

// div タグ一覧を列挙する
var elems = document.getElementsByTagName(&quot;div&quot;);

// それぞれについて、クラス名が foo のものを ret に入れる
for(var i = 0; i &lt; elems.length; i++){
    var classes = elems[i].className.split(&quot; &quot;);
    if(classes.indexOf(&quot;foo&quot;) != -1){
        ret.push(elems[i]);
    }
}
|&lt;
HTML 中に含まれる div タグを列挙して、そのそれぞれについてクラス名を調べていくわけです。(&lt;code&gt;Array.indexOf&lt;/code&gt; は非標準ですが、簡単に書くために使っています)

つまり、冒頭のコードのように &lt;code&gt;$(&quot;div.foo&quot;)&lt;/code&gt; を３回書いてしまうと、上記の処理が３回実行されてしまいます。非効率的ですね。

***改善方法1: キャッシュ
セレクタの実行結果を変数にキャッシュしておきます。２回分の &lt;code&gt;$(&quot;div.foo&quot;)&lt;/code&gt; 実行時間が節約できます。
&gt;|javascript|
// コード 1-1
var foos = $(&quot;div.foo&quot;);
foos.addClass(&quot;bar&quot;);
foos.css(&quot;background&quot;, &quot;#ffffff&quot;);
foos.click(function(){alert('foo');});
||&lt;

***改善方法2: メソッドチェーン
メソッドチェーンを使うと、jQuery っぽくなりますし、処理効率も上がります。
&gt;|javascript|
// コード 1-2
$(&quot;div.foo&quot;)
    .addClass(&quot;bar&quot;)
    .css(&quot;background&quot;, &quot;#ffffff&quot;)
    .click(function(){alert('foo');});
||&lt;
&lt;code&gt;$(&quot;div.foo&quot;)&lt;/code&gt;セレクタの実行結果が次のメソッドに順番に引き継がれます。一時変数を必要としないのも嬉しいところです。

**2. クラスだけを指定するのは禁止
***改善前
&gt;|javascript|
// 例題 2
$(&quot;.foo&quot;).css(&quot;display&quot;, &quot;none&quot;);
||&lt;

***何が問題か
クラス名だけを指定すると、jQuery は全ての HTML ノードを列挙して、そのそれぞれについてクラス名を調べます。

&lt;code&gt;$(&quot;.foo&quot;)&lt;/code&gt; の背後は次のような処理が実行されます。
&gt;|javascript|
// セレクタで選択した結果を格納する配列
var ret = [];

// 全てのタグを列挙する
var elems = document.getElementsByTagName(&quot;*&quot;);

// それぞれについて、クラス名が foo のものを ret に入れる
for(var i = 0; i &lt; elems.length; i++){
    var classes = elems[i].className.split(&quot; &quot;);
    if(classes.indexOf(&quot;foo&quot;) != -1){
        ret.push(elems[i]);
    }
}
||&lt;
全てのタグを列挙してループを回すわけですから非効率的ですね。

少し、話がそれますが、Firefox3 や Opera9.5、Safari3 には getElementsByClassName() メソッドがネイティブ実装されています。そのため、これらのブラウザは高速に &lt;code&gt;$(&quot;.foo&quot;)&lt;/code&gt; を実行できる能力を持っています。しかし、jQuery 1.2.6 の時点では、ネイティブの getElementsByClassName() を使っていません。

jQuery の次期 CSS セレクタである &lt;a href=&quot;http://webos-goodies.jp/archives/51408207.html&quot;&gt;Sizzle&lt;/a&gt; では、getElementsByClassName() が定義されていれば利用するよう実装されているようです。

***改善方法: タグを併記する
タグを明示します。
&gt;|javascript|
$(&quot;div.foo&quot;).css(&quot;display&quot;, &quot;none&quot;);
||&lt;
全てのノードからではなく指定したタグの中からクラス名で絞り込むようになるため、ループの回数が大幅に削減されます。

**3. #id を積極的に使う
***改善前
&gt;|html|
&lt;!--例題 3--&gt;
&lt;body&gt;
&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(function(){
    $(&quot;.main&quot;).css(&quot;color&quot;, &quot;red&quot;); // ← ココ
});
&lt;/script&gt;
&lt;div class=&quot;main&quot;&gt;
  &lt; ... &gt;
&lt;/div&gt;
&lt;/body&gt;
||&lt;

***何が問題か
先ほども述べましたが、jQuery ではクラス名での探索は非効率的です。

HTML の設計の話になってしまいますが、HTML 中で１度しか登場しないクラス名は id にしてしまってもよいでしょう。そのほうが JavaScript で扱うにも好都合です。

***改善方法
main をクラスではなく id に変更します。
&gt;|html|
&lt;!--例題 3--&gt;
&lt;body&gt;
&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(function(){
    $(&quot;#main&quot;).css(&quot;color&quot;, &quot;red&quot;); // ← ココ
});
&lt;/script&gt;
&lt;div id=&quot;main&quot;&gt;
  &lt; ... &gt;
&lt;/div&gt;
&lt;/body&gt;
||&lt;

jQuery は、セレクタに id が指定されていた場合には、再帰的に探索せずに &lt;code&gt;getElementById()&lt;/code&gt; を利用します。そのため、全ノードを列挙するのに比べ、格段に高速に処理できます。

**4. 途中までの結果を再利用する
***改善前
&gt;|javascript|
&lt;body&gt;
&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(function(){
    $(&quot;#main div.entry&quot;).css( ... );
    $(&quot;#main div.entry div.body&quot;)  // ← ココ
        .css( ... );
});
&lt;/script&gt;
&lt;div id=&quot;main&quot;&gt;
  &lt;div class=&quot;entry&quot;&gt;
    &lt;div class=&quot;header&quot;&gt; ... &lt;/div&gt;
    &lt;div class=&quot;body&quot;&gt; ... &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;entry&quot;&gt;
    &lt;div class=&quot;header&quot;&gt; ... &lt;/div&gt;
    &lt;div class=&quot;body&quot;&gt; ... &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
||&lt;

***どこが問題か
ここまで読んでこれば既にお分かりかもしれません。
&gt;|javascript|
    $(&quot;#main div.entry&quot;)              // (A)
    $(&quot;#main div.entry div.body&quot;)     // (B)
||&lt;
(B) のセレクタでは、
+#main を探す
+その子孫から div.entry を列挙する
+その子孫から div.body を列挙する
という処理を行います。このうちの、1. と 2. は (A) と全く同じ処理です。(A) で求めた結果を再利用すれば処理速度は向上するはずです。

***改善方法
キャッシュ作戦です。
&gt;|javascript|
// (A) で列挙されたタグを変数に格納
var entries = $(&quot;#main div.entry&quot;).css( ... );

// $() の第2引数に (A) の結果を渡す
$(&quot;div.body&quot;, entries).css( ... );
||&lt;
$() 関数の第２引数には探す基点を指定することができます。(A) の結果に含まれる要素の子孫から div.body を探してくれます。

&lt;code&gt;find()&lt;/code&gt; メソッドを使ってもよいでしょう。
&gt;|javascript|
var entries = $(&quot;#main div.entry&quot;).css( ... );
entries.find(&quot;div.body&quot;).css( ... );
||&lt;
おっと、ここまでくればメソッドチェーンができそうですね。
&gt;|javascript|
$(&quot;#main div.entry&quot;).css( ... )
    .find(&quot;div.body&quot;).css( ... );
||&lt;

***応用例
div.head も探したい場合にはどうすればよいでしょう。

はい、こうすればよいですね。
&gt;|javascript|
var entries = $(&quot;#main div.entry&quot;).css( ... );
entries.find(&quot;div.body&quot;).css( ... );
entries.find(&quot;div.head&quot;).css( ... );
||&lt;
こいつもメソッドチェーンしてしまいましょう。end() を使えば、find() で探す前の状態に戻すことができます。

&gt;|javascript|
$(&quot;#main div.entry&quot;)
    .css( ... );
    .find(&quot;div.body&quot;) // #main div.entry div.body になる
        .css( ... )
    .end()            // #main div.entry に戻る
    .find(&quot;div.head&quot;) // #main div.entry div.head になる
        .css( ... )
    .end();
||&lt;
ここまで来るとアクロバティックですが…一番最初のコードより高速なのは間違いありません。

**5. 子供セレクタ(&gt;)を使うと速くなることがある
***改善前
&gt;|javascript|
&lt;!--例題 5--&gt;
&lt;body&gt;
&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(function(){
    $(&quot;#main div.entry&quot;).css( ... ); // ← ココ
});
&lt;/script&gt;
&lt;div id=&quot;main&quot;&gt;
  &lt;div class=&quot;entry&quot;&gt;
    &lt;div class=&quot;header&quot;&gt; ... &lt;/div&gt;
    &lt;div class=&quot;body&quot;&gt; ... &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;entry&quot;&gt;
    &lt;div class=&quot;header&quot;&gt; ... &lt;/div&gt;
    &lt;div class=&quot;body&quot;&gt; ... &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
||&lt;

***どこが問題なのか
「#main div.entry」は #main のあとに子孫セレクタ（スペース）があります。つまり、#main ノードの下の全ての div ノードから entry クラスを探し出します。

&lt;code&gt;$(&quot;#main div.entry&quot;)&lt;/code&gt; の背後では次のような処理が実行されています。
&gt;|javascript|
// セレクタで選択した結果を格納する配列
var ret = [];

// #main を探す
var main = document.getElementsById(&quot;main&quot;);

// #main の配下から全ての div を列挙する
var elems = main.getElementsByTagName(&quot;div&quot;);

// それぞれについて、クラス名が foo のものを ret に入れる
for(var i = 0; i &lt; elems.length; i++){
    var classes = elems[i].className.split(&quot; &quot;);
    if(classes.indexOf(&quot;foo&quot;) != -1){
        ret.push(elems[i]);
    }
}
||&lt;

elems には &lt;code&gt;div#main&lt;/code&gt; の下の全ての div タグが格納されます。この全てについてクラス名を確認するわけですら、場合によっては遅くなってしまいます。

もし、div.entry が div#main 直下にのみ存在するのであれば、「子孫セレクタ」ではなく「子供セレクタ」を使えば効率的に動作するかもしれません。

***改善方法
子供セレクタ(&gt;)を使います。
&gt;|javascript|
    $(&quot;#main &gt; div.entry&quot;).css( ... );
||&lt;

jQuery では子供セレクタが出てくると、全ての子孫ではなく、子供の中からマッチするものを調べます。孫やその子供については調査しないため、高速化が期待されます。

&lt;code&gt;$(&quot;#main &amp;gt; div.entry&quot;)&lt;/code&gt; の背後では次のような処理が実行されます。
&gt;|javascript|
// セレクタで選択した結果を格納する配列
var ret = [];

// #main を探す
var main = document.getElementsById(&quot;main&quot;);

// #main の子ノードの中から
// タグ名が DIV であり、クラス名が entry のものを
// ret に入れる
var child = main.firstChild;
while(child){
    var classes = elems[i].className.split(&quot; &quot;);
    if (child.tagName == &quot;DIV&quot;
    &amp;&amp; classes.indexOf(&quot;entry&quot;) != -1){
        ret.push(child);
    }

    child = child.nextSibling;
}
||&lt;
子供セレクタを使えば必ず速くなるというわけにはいきませんが、子供の数に比べて子孫が大量にいる場合には、子供セレクタのほうが速くなります。

**実際のコードで試す
実際にブラウザで実行したときに CSS セレクタによって処理速度がどれだけ改善するかを確認してみましょう。

試験はこのブログの HTML で実行してみました。HTML 構造はこんな感じです。
&gt;|html|
&lt;div id=&quot;days&quot;&gt;
    &lt;div class=&quot;day&quot;&gt;
        &lt;h2&gt;2008年12月11日&lt;/h2&gt;
        &lt;div class=&quot;body&quot;&gt;
            &lt;div class=&quot;section&quot;&gt;
                &lt;h3&gt;タイトル&lt;/h3&gt;
                &lt;p&gt;本文&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;day&quot;&gt; ... &lt;/div&gt;
    &lt;div class=&quot;day&quot;&gt; ... &lt;/div&gt;
&lt;/div&gt;
||&lt;
このような HTML に対して、jQuery を実行してみました。
|*CSS セレクタ|*Firefox2|*IE7|*Opera9|*Safari3(Win)|
|&lt;code&gt;.body&lt;/code&gt;|22.18ms|19.85ms|5.32ms|2.49ms|
|&lt;code&gt;div.body&lt;/code&gt;|2.34ms|2.82ms|1.24ms|0.49ms|
|&lt;code&gt;#days &amp;gt; div.day &amp;gt; div.body&lt;/code&gt;|2.66ms|1.72ms|1.25ms|0.44ms|
-全てのブラウザで、&lt;code&gt;.body&lt;/code&gt; に比べて &lt;code&gt;div.body&lt;/code&gt; の方が5～10倍速くなっている。
-&lt;code&gt;#days &amp;gt; div.day &amp;gt; div.body&lt;/code&gt; は子供セレクタを２回使っているのに、&lt;code&gt;div.body&lt;/code&gt; と同じぐらいの速度で実行できている。

**最後に
jQuery はライブラリである以上、DOM を直接さわるのに比べて遅くなることは避けられません。

どうしても処理速度が気になる場合は、jQuery のコードを DOM を直接さわるコードに変換するとよいでしょう。経験的に Firefox や IE で処理速度が10倍ぐらいになります。

ただし、開発効率の面からも、最初は jQuery を使って書き始めることをお薦めします。jQuery のコードを DOM 直接に変換するのは簡単ですが、DOM 直接で開発を進めるのはめんどくさいですよね。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリー
-[http://d.hatena.ne.jp/nitoyon/20081121/jquery_array:title]
-[http://d.hatena.ne.jp/nitoyon/20080115/jquery_event:title]
-[http://d.hatena.ne.jp/nitoyon/20071227/cmpop:title]

</body>
</day>
<day date="2008-12-12" title="">
<body>
*hatebu_tips*はてなブックマークの細かすぎて伝わりにくい新機能を勝手に紹介
はてなブックマークがリニューアルして毎日楽しく使っているわけですが、そんな中で気付きにくいけど知ってると便利な機能を勝手にまとめてみました。

**人気エントリの要約を非表示に
みんな大好き人気エントリーに、リニューアル後から要約が表示されるようになりました。クリックする前に概要が分かって便利なのですが、古いインターフェースのほうがよかった…という人もいることでしょう。

でも大丈夫。そんな人は「人気エントリー」の右端にある▲のボタンを押してみましょう！

&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030026.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

要約が消えます。すっきり読みたい人にお勧め。

あ、もう一回クリックすると要約は復活します。

**タグとお気に入りを旧バージョンで
右側のボタンつながりで、タグとお気に入りを戻す方法を紹介します。

タグが一覧になってしまって悲しい人は、右側のボタンを押しましょう。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030024.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;
おー、一昔前のタグクラウドと切り替えられるわけですね。

お気に入りも見た目が変わりましたが、これも右側のボタンをクリック！
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030027.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;
こっちも切り替えられますね。切り替えた情報は Cookie に保存されるようなので、好きなほうに設定しておくとよいですね。

**タブを増やして観測範囲を広げる
ブックマックページには標準で「ブックマーク」と「お気に入り」の２つのタブが表示されていますが、設定の「タブ追加」から、このタブを増やすことができます。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030023.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

試しに全部追加してみるとこんな感じになります。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030022.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

追加されたタブの意味をざっと紹介！
:スターフレンド:スターフレンド（はてなスターをお互いにつけ合った人）のブックマークを閲覧できる。暇なときに見て、面白そうな人がいたら「お気に入り」に入れるとよさそう。
:コレクション:旧バージョンからあったコレクションを復活させる。詳しくはヘルプの &lt;a href=&quot;http://b.hatena.ne.jp/help/asin&quot;&gt;商品をコレクション&lt;/a&gt; を参照。
:グループ:※ はてなグループを使ってる人限定。&lt;br&gt;自分が参加してるグループの参加者のブックマークをまとめて閲覧することができる。興味の範囲が近い人のブックマークを見れて便利。

たまにスターフレンドやグループを見てみると新たな発見があって面白いです。

**AutoPagerize機能！
Firefox 拡張として一部の人にはお馴染みの AutoPagerize 風の機能が標準実装されています。

ページ下の灰色の■を押すと…(無駄にアニメーションで図説)
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030025.gif&quot; border=&quot;1&quot;&gt;&lt;/center&gt;
次のページが自動的にロードされるようになります。

そのままスクロールしていくと、３ページ目以降も自動的にロードされて、[次の20件] をクリックすることなく、ずんずん読み進めていくことができます。

すごく便利ですよー！

公式ヘルプにも &lt;a href=&quot;http://b.hatena.ne.jp/help/autop&quot;&gt;ページ自動ロード機能ってなに?&lt;/a&gt; としてこっそり掲載されています。

**キーボード ショートカットを使う
キーボード派の人はショートカットを覚えておくと病みつきになると思います。

私は人気エントリーやお気に入りを眺めているときに使うことが多いですね。利用イメージはこんな感じです。

&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212030029.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

このように、キーボードだけで全ての処理を完結できるわけですね。キーボード派ウハウハ。

キーボードショートカット機能は、前のバージョンにもあったのですが、b でブックマークするときにページ遷移がなくなってかなり快適になりました。また、AutoPagerize 機能と組み合わせることで、ページ切り替えする必要がないので、j を押して無限に読み進めていけるのが嬉しいです。

利用できるショートカットの一覧は、公式ヘルプの &lt;a href=&quot;http://b.hatena.ne.jp/help/keybind&quot;&gt;キーボードショートカット&lt;/a&gt; を見るとよいでしょう。私は、j, o, b ぐらいしか覚えてませんが…。

**タグを一括で置換する
前のバージョンで究極に分かりにくいといわれていたタグ置換機能ですが、だいぶ分かりやすくなりましたね。

たとえば、[はてな] タグと [hatena] タグの２つがあって、[hatena] に統合したいとします。

まず、自分のブックマークページから、[はてな]タグをクリックします。ここでは、タグの絞り込み機能を使ってみました（この機能自体は前のバージョンからありましたね）。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212043957.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

自分のブックマークの [はてな] タグがついたエントリーの一覧が表示されます。この画面で、右側の「○○ を編集」をクリック。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212043956.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

「hatena」と入力して、「置換する」ボタンをクリック。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212043955.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

これで、自分のブックマークの [はてな] タグをつけたものが全て [hatena] に置き換わります。簡単ですね。

**エントリページからタグ・コメント編集
「○○ users」のリンクをクリックして表示されるエントリーページから、自分のコメントやタグを編集できます。

マウスを自分の発言の上に持っていくと、編集アイコン・削除アイコンが登場しますよ。
&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081212/20081212043954.jpg&quot; border=&quot;1&quot;&gt;&lt;/center&gt;

他の人の発言と見比べて「自分だけ浮いてて気まずい！」と思ったときにその場で編集できて便利ですね。

**おしまい
という感じで、図で説明すると大変分かりやすいですね。

はてなさんも、&lt;a href=&quot;http://b.hatena.ne.jp/html/backstage_interview/&quot;&gt;id:jkondoが聞く、はてなブックマークリニューアルの舞台裏&lt;/a&gt; のようなきれいなページを作りこむ時間があったら、ヘルプページに図をたくさん入れていって、より多くの人が使いやすいようにしていってくれると嬉しいと思います。って、ずっと前から言われてることのような気はしますが…。

あ、ノベルティセットありがとうございます。はてなブックマークは、&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; を作ってしまうぐらいに好きなサービスなので、とてもうれしいです！　以上、お礼(?)エントリーでした。
</body>
<comments>
<comment>
<username>trshugu</username>
<body>そうだったのかー！知らなかった――！！！(使ってない(ことになってる)けどｗ)</body>
<timestamp>1229085292</timestamp>
</comment>
</comments>
</day>
<day date="2008-12-15" title="">
<body>
*yql_review*米 Yahoo! が SQL っぽく色んなデータを取ってこれるAPIを出した
米 Yahoo! から Yahoo! Pipes みたいに自由度が高くて、またちょっと毛色が違うサービスが出てきた。

題して、&lt;a href=&quot;http://developer.yahoo.com/yql/&quot;&gt;Yahoo! Query Language&lt;/a&gt;。YQL と呼ぶようだ。

SQL 風の言語を REST で投げて、結果を XML や JSON で受け取ることができる。

具体的にやってみないと分かりにくいので、とりあえず試してみた。

**RSS からデータ取得
YQL を使って RSS から最新のタイトルを取ってきてみる。こんな YQL になるらしい。
&gt;|sql|
select title from rss 
  where url='http://d.hatena.ne.jp/nitoyon/rss'
||&lt;
rss テーブルに対して select を発行している。

実際にこの YQL を試すには &lt;a href=&quot;http://developer.yahoo.com/yql/console/&quot;&gt;YQL 用の console&lt;/a&gt; を利用するとよい。（※要ログイン）

console の左上に YQL を入力して、TEST ボタンを押すと…
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081215/20081215034501.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
お、画面下側に結果の XML が表示されてる。

この XML の URL が http://query.yahooapis.com/v1/public/yql?q=select%20title%20from%20rss%20%0A%20%20where%20url%3D'http%3A%2F%2Fd.hatena.ne.jp%2Fnitoyon%2Frss'&amp;format=xml だ。上中央の The REST query に表示されている。(v1 のあとに手動で public を追加してやる必要がある)

**JSON でデータを取得
真ん中らへんのラジオボックスで JSON を選択すると、JSON でデータを取れる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081215/20081215034502.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
JSON の右側に文字を入力すると、その関数を呼び出す JSONP になる。ここが空だと、生の JSON になるようだ。

**テーブルの情報を取得
rss テーブルからどういう種類のデータをとれるかは、desc rss をクエリすると教えてくれる。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081215/20081215034503.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

&lt;font color=&quot;red&quot;&gt;url&lt;/font&gt; をキーに、&lt;font color=&quot;blue&quot;&gt;title, description, link, author, pubDate&lt;/font&gt; を取得できるとある。

ためしに、title だけでなく URL も取得してみる。
&gt;|sql|
select title,link from rss 
  where url='http://d.hatena.ne.jp/nitoyon/rss'
||&lt;
URL はこうなる。
-http://query.yahooapis.com/v1/public/yql?q=select%20title,link%20from%20rss%20%0A%20%20where%20url%3D'http%3A%2F%2Fd.hatena.ne.jp%2Fnitoyon%2Frss'&amp;format=xml
クリックしてみると、link の情報も取得できてることが分かってもらえるはず。URL 中の title,link を * に変えてみて情報が増えるのを見てもよいだろう。

**html テーブルで XPath!!
ここまでだと、Yahoo! Pipes とあんまり変わらない感じだけど、html テーブルを使えば任意の HTML を引っ張ってこれる。しかも、条件に xpath を指定できる。

たとえば &lt;a href=&quot;http://headlines.yahoo.co.jp/hl&quot;&gt;Yahoo!ニュース&lt;/a&gt; からヘッドラインをとってきてみよう。
&gt;|sql|
select * from html
  where
    url=&quot;http://headlines.yahoo.co.jp/hl&quot;
      and
    xpath=&quot;//li[@class='yjMt']/a&quot;
||&lt;
全ての yjMt クラスの li タグから、その直下の a タグを列挙している。

すると、こんな感じで a タグが格納された XML が返ってくる！

&gt;&lt;center&gt;&lt;a href=&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20html%20where%20url%3D%22http%3A%2F%2Fheadlines.yahoo.co.jp%2Fhl%22%20and%20xpath%3D%22%2F%2Fli%5B%40class%3D'yjMt'%5D%2Fa%22&amp;format=xml&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081215/20081215034500.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

すげー。日本語が文字化けしてるけど、すげー。

残念ながら valid な HTML じゃないとエラーが返ってくるので、現時点ではほとんどの URL で失敗してしまう。ちゃんと動くようになったとしたら恐ろしく楽しそうですね。

**Flickr からデータを取ってくる
あと、なぜか flickr がらみのテーブルが大量に用意されている。
-flickr.location * 
-flickr.photos.exif * 
-flickr.photos.info * 
-flickr.photos.interestingness * 
-flickr.photos.recent * 
-flickr.photos.search * 
-flickr.places * 

簡単なところで、flickr.photo.search というのを利用してみる。
&gt;|sql|
select * from flickr.photos.search
  where
    user_id='8078344@N06'
      and
    max_taken_date='2008-05-01'
||&lt;
私が Flickr にアップロードした写真の中から、2008-05-01 以前に撮った写真を検索してる。

&gt;&lt;center&gt;&lt;a href=&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20flickr.photos.search%20where%20user_id%3D'8078344%40N06'%20and%20max_taken_date%3D'2008-05-01'&amp;format=xml&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081215/20081215034459.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

おー、取れてる取れてる。

**まとめ
利用できるデータは、紹介した以外にも、地理情報・天気情報とかがあるんだけど、米Yahoo!が提供するデータなので、日本国内の情報は含まれていない。

YQL では基本的に select ぐらいしか実装されていないんだけど、サブクエリもサポートしていて結構複雑なこともできるようだ。Console のサンプル aggregate and filter multiple rss feed には次のような YQL が書いてある。
&gt;|sql|
select * from rss
  where
    url in (select title from atom where url=&quot;http://spreadsheets.google.com/feeds/list/pg_T0Mv3iBwIJoc82J1G8aQ/od6/public/basic&quot;)
      and
    description like &quot;Wall Street&quot;
  LIMIT 10 | unique(field=&quot;title&quot;)
||&lt;

そのほかにも、OAuth なんかを使って private なデータも取得できるようだけど試してない。

YQL の詳細は、&lt;a href=&quot;http://developer.yahoo.com/yql/guide/index.html&quot;&gt;Yahoo! Query Language (YQL) Guide - YDN&lt;/a&gt; あたりを見るとよいだろう。

まだまだ実験段階っぽい感じではありますが、将来的に楽しみなサービスであります。

Pipes と同じく、JavaScript から JSONP を叩いてドメイン制約を意識せずに情報を取ってきたりできるし、Flash からだと crossdomain.xml が設置してあるので楽々だ！

**参考URL
-&lt;a href=&quot;http://developer.yahoo.com/yql/&quot;&gt;Yahoo! Query Language - YDN&lt;/a&gt;
-&lt;a href=&quot;http://developer.yahoo.com/yql/guide/index.html&quot;&gt;Yahoo! Query Language (YQL) Guide - YDN&lt;/a&gt;
-&lt;a href=&quot;http://ajaxian.com/archives/yql-converting-the-web-to-json-with-mock-sql&quot;&gt;Ajaxian ≫ YQL - converting the web to JSON with mock SQL&lt;/a&gt;

</body>
<comments>
<comment>
<username>trshugu</username>
<body>読み方的にはワイクェルというのでしょうか</body>
<timestamp>1229408123</timestamp>
</comment>
</comments>
</day>
<day date="2008-12-17" title="">
<body>
*p1*[はてブ年鑑]はてブ年鑑 2008年12月前半分 アップ
12月前半分を反映させた。そのうち自動的に更新されるようにしたい。
-http://tech.nitoyon.com/hatebu_nenkan/#200812

相変わらず about:blank が強い中、風邪の話が２位にランクインしてるのが印象的。

ありがたいことに、はてブ年鑑自体は12位につけていますが、月末には20位以下に消えてそうな予感がぷんぷんします。
</body>
</day>
<day date="2008-12-18" title="">
<body>
*wonderfl_review*[as]AS3 を手軽に開発・投稿できるサービス Wonderfl がとてもいい感じ
KAYAC さんがリリースした（まだ正式リリースはしていない？） &lt;a href=&quot;http://wonderfl.kayac.com/&quot;&gt;Wonderfl Build Flash Online&lt;/a&gt; がとてもよい感じ。

&gt;&lt;center&gt;&lt;a href=&quot;http://wonderfl.kayac.com/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081218/20081218014636.png&quot;&gt;&lt;br&gt;Wonderfl Build Flash Online&lt;/a&gt;&lt;/center&gt;&lt;

**手軽に開発
ブラウザ上で ActionScript3 のソースコードを書いたら、リアルタイムでコンパイルしてプレビューできます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081218/20081218014637.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070914/how_to_install_rascut&quot;&gt;Flex SDK と rascut を導入&lt;/a&gt; すれば同じような感じで開発はできるんだけど、開発環境を整えることなくブラウザ上で手軽に試せるのがとてもよいですね。

**お手本を元に勉強し放題
しかも、他の人のソースとかも見れて、気になるやつは Fork して自分でいじって遊ぶこともできる。お手軽だー。

私も &lt;a href=&quot;http://wonderfl.kayac.com/code/a59130db3327183d2285068470d8ee7192032a98&quot;&gt;Hello World!!! | Wonderfl Build Flash Online&lt;/a&gt; というソースを試しに作ってみたのですが、それを Fork して &lt;a href=&quot;http://wonderfl.kayac.com/code/28ed7786ea13c306d1bd41fa9cba217a633f9898&quot;&gt;いい具合に改造する人が出てきたり&lt;/a&gt;して、それがまた愉快です。

**ログインも簡単
実際に利用するには、Open ID や Hatena、Yahoo!、livedoor、mixi などの ID でログインする必要があります。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081218/20081218014638.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

こんだけ選択肢があったら、どれかの ID は持ってるんじゃないでしょうか。手軽ですね。

いろんな意味で敷居を下げてくれる嬉しい楽しいサービスだと思います。今まで何となく敬遠していた人も、これを機会に AS3 を楽しもう！
</body>
</day>
<day date="2008-12-28" title="">
<body>
*recent_wonderfl*[as]最近 wonderfl に投稿したもの
&lt;center&gt;&lt;a href=&quot;http://wonderfl.kayac.com/code/aa8439bd903c21c8d8c8bb0d016e37727bfb1d4e&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081228/20081228204116.png&quot; width=&quot;387&quot; height=&quot;168&quot;&gt;&lt;/a&gt;&lt;/center&gt;

ここのところは他人のソースをいじって遊んでます。

**ニコニコテレビちゃんシリーズ
+id:uniq:detail さんの &lt;a href=&quot;http://wonderfl.kayac.com/code/e0729bcbc67c0d6e4624124d8e8a84d85e282d68&quot;&gt;ニコニコテレビちゃんを描いてみた&lt;/a&gt; を発見。
+気に入ったのでアニメーションさせてみた
--&lt;a href=&quot;http://wonderfl.kayac.com/code/480459c0d307fceff61b3cfc66ddf90d2e8e9dd7&quot;&gt;ニコニコテレビちゃんを動かしてみた&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081228/20081228204626.png&quot; width=&quot;250&quot; height=&quot;195&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://chabudai.sakura.ne.jp/blog/&quot;&gt;chabudaiさん&lt;/a&gt; が &lt;a href=&quot;http://wonderfl.kayac.com/code/30da5e4cd4285cfa31d439a5510e2fa630a2e6b1&quot;&gt;doraを動かしてみた&lt;/a&gt; に改造。かわいいー
+id:flashrod:detail さんの &lt;a href=&quot;http://wonderfl.kayac.com/code/5b890b411debeeda305f1c75a684867c04429fb4&quot;&gt;Tetris&lt;/a&gt; のブロックをニコニコちゃんにしてみた
--&lt;a href=&quot;http://wonderfl.kayac.com/code/3e920e56e83ef9363ca21fb3d3b60490c2563bd7&quot;&gt;niconico Tetris&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081228/20081228204418.png&quot; width=&quot;400&quot; height=&quot;380&quot;&gt;&lt;/a&gt;
--ついでにカーソルキーでも操作できるようにしてみた
+id:nemu90kWw:detail さんが BGM をつけてくれた！
--&lt;a href=&quot;http://wonderfl.kayac.com/code/91aea8283dfa635879b65db116a64d874905a31a&quot;&gt;ニコ割ゲームっぽくしてみた forked from: niconico Tetris | Wonderfl Build Flash Online&lt;/a&gt;

**ぱーてぃくるシリーズ
+&lt;a href=&quot;http://void.heteml.jp/blog/&quot;&gt;munegon さん&lt;/a&gt; の &lt;a href=&quot;http://wonderfl.kayac.com/code/e28a9ddbddf608539b55a02c5d42e85bfb12545c&quot;&gt;ぱーてぃくる&lt;/a&gt; を発見。
+飛び散るものを asahi.com の新着タイトルに変更。
--&lt;a href=&quot;http://wonderfl.kayac.com/code/976ff62ab9686fbb6ade389d322ed5f5bca725f7&quot;&gt;asahi.com ぱーてぃくる&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081228/20081228205023.png&quot; width=&quot;300&quot; height=&quot;292&quot;&gt;&lt;/a&gt;
--asahi.com 自体は crossdomain.xml を配置していないが、間に Yahoo! Pipes を噛ますことで任意のドメインの RSS を拾ってこれる！
--「減税」とか「女子高」といった言葉が飛び回っていてシュール…。

**Snow シリーズ
+Saqoosha さんの &lt;a href=&quot;http://wonderfl.kayac.com/code/71344f9a655053d9f793a32c68f00921c67f1977&quot;&gt;Snow&lt;/a&gt; がきれい
--きらきらの表現は 1/4 サイズのビットマップに縮小描画してsmoothingつきで拡大することで実現している
+テレビで文字が崩壊していくエフェクトを見て、Snow と合体させることを決意。
--&lt;a href=&quot;http://wonderfl.kayac.com/code/aa8439bd903c21c8d8c8bb0d016e37727bfb1d4e/&quot;&gt;Hello Snow!!!&lt;br&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081228/20081228204116.png&quot; width=&quot;387&quot; height=&quot;168&quot;&gt;&lt;/a&gt;
--風の表現に苦労したがとりあえずそれっぽくなったかな。重いのはご愛嬌。

**まとめ
Fork したりされたりしてるうちに、見た目ががらっと変わったり、機能が追加されたりして楽しいですね。
</body>
</day>
<day date="2008-12-30" title="">
<body>
*as_circle_skew*[as]AS3で半径小さい円を描いて拡大したらいびつになってる
&gt;&lt;center&gt;&lt;a href=&quot;http://wonderfl.kayac.com/code/1b7a6ce98692bf2232ad25ae76b964f5a4939abd&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20081230/20081230182050.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

題のまま。1×1の範囲に図形を描画して、あとで倍率変更してステージ全体に広げるコードを書いていたらうまく描画されずに悩んでしまった。

&lt;s&gt;円を描画するのはそこそこコストがかかる処理なので、半径が小さいときにはパス数を減らす最適化をしているんだろう。&lt;/s&gt; 

（追記）Flash 内部で 1/20 ピクセル以下の座標は切り捨てられているらしい。コメント欄で教えてもらいました。ありがとうございます。
-（参考）&lt;a href=&quot;http://f-site.org/articles/2006/04/26111538.html&quot;&gt;F-site | XY座標の最小単位&lt;/a&gt;

適度に 100×100 などの領域に描画するのがよさそう。&lt;s&gt;逆に、1000×1000のような領域に図形を描画してから縮小して使うと、描画効率が悪くなると予想される。&lt;/s&gt;

以下、実証コード。&lt;a href=&quot;http://wonderfl.kayac.com/code/1b7a6ce98692bf2232ad25ae76b964f5a4939abd&quot;&gt;wonderfl にも置いた&lt;/a&gt;。
&gt;|javascript|
package{   
import flash.display.Sprite;   
public class GunyaGunya extends Sprite{   
    public function GunyaGunya(){   
        var s:Sprite = new Sprite();   
        s.graphics.beginFill(0xff0000);   
        s.graphics.drawCircle(0, 0, 0.1);   
        s.graphics.endFill();   
        s.scaleX = s.scaleY = 200;   
        s.x = s.y = 100;   
        addChild(s);   
  
        s = new Sprite();   
        s.graphics.beginFill(0x0000ff);   
        s.graphics.drawCircle(0, 0, 0.2);   
        s.graphics.endFill();   
        s.scaleX = s.scaleY = 100;   
        s.x = s.y = 200;   
        addChild(s);   
  
        s = new Sprite();   
        s.graphics.beginFill(0x006600);   
        s.graphics.drawCircle(0, 0, 0.25);   
        s.graphics.endFill();   
        s.scaleX = s.scaleY = 100;   
        s.x = 240; s.y = 80;   
        addChild(s);   
    }   
}   
}  
||&lt;

</body>
<comments>
<comment>
<username>fladdict</username>
<body>パス数を減らしてるんじゃなくて、FlashのDisplayObjectの座標が小数点で下ウン桁でまるまっちゃってるんだと思う。</body>
<timestamp>1230639906</timestamp>
</comment>
<comment>
<username>key</username>
<body>ですね。各コントロールポイントとアンカーポイントの座標が1twip = 0.05pixelで丸まってると思います。</body>
<timestamp>1230653768</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>なるほどー。勉強になりました！</body>
<timestamp>1230660420</timestamp>
</comment>
</comments>
</day>
<day date="2008-12-31" title="">
<body>
*kotoshi_matome*今年まとめ（自己満足）
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071230/kotoshi_matome&quot;&gt;2007年&lt;/a&gt;に続き、2008年も自己満足エントリで締めくくる。

**今年の人気エントリ
はてなブックマークでいっぱいブックマークしてもらった順番。
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081212/hatebu_tips&quot;&gt;はてなブックマークの細かすぎて伝わりにくい新機能を勝手に紹介 - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00853.png&quot;&gt;
+&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00779.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081215/yql_review&quot;&gt;米 Yahoo! が SQL っぽく色んなデータを取ってこれるAPIを出した - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00637.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080825/design_pattern_js&quot;&gt;具体例で説明するデザインパターン - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00624.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080929/warioland_shake&quot;&gt;ワリオランドシェイクみたいに HTML が崩壊するブックマークレット（とそのソースコード） - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00621.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081211/jquery_fast_css&quot;&gt;jQuery を高速に使う CSS セレクタの書き方 - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00529.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1&quot;&gt;AS3.0 で 3D プログラミングを１から勉強する (1) - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00410.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080806/powershell_tutorial&quot;&gt;オブジェクト指向なコマンド環境「Powershell」を試してみた - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00257.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080528/it_study_calendar&quot;&gt;すさまじく充実してる IT 勉強会カレンダー - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00231.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080407/bakumatsu_hack&quot;&gt;幕末古写真ジェネレータをハックする - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00164.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081015/xray_as3&quot;&gt;&quot;XRay&quot; - ActionScript3 版の Firebug みたいなデバッグツール - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00153.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080723/as3_embed_font&quot;&gt;AS3 で埋め込みフォントを使うテクニック - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00153.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080312/air_as_flex_poster&quot;&gt;AIR・AS3・Flex3のクラス相関図ポスターが公開中 - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00132.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080720/wsh_dom&quot;&gt;WSHでDOM (Shibuya.js in Kyoto) - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00119.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080603/perl_open&quot;&gt;Perl 2008年のファイルオープン - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00089.png&quot;&gt;

上位に入るような記事は狙って書けるようになってきたけど、書き上げるのに恐ろしく時間がかかるし、狙って外したら悲しい。来年はほどよく力を抜いて書いていきたいものだ。とはいえ、メモ的な内容にはしたくないし、力加減が難しい。

**アクセス数が１番多かったのは
アクセス数が１番多かったのは、上のランキングでは5位に位置している「ワリオランドシェイクみたいな崩壊」ネタ。リンクされた数もコメント数もトラックバック数も桁違いだった。

実はこれ、3月ぐらいにほぼ完成していたんだけど、そこで飽きちゃってお蔵入りしてた。その約半年後、&lt;a href=&quot;http://jp.youtube.com/experiencewii&quot;&gt;ワリオランドシェイクの広告動画&lt;/a&gt; が話題になっているのを見て、あーそういえば、と思い出して一気に完成させた。

その後は、色んなサイトで紹介してもらった上に &lt;a href=&quot;http://www.nicovideo.jp/watch/nm4801333&quot;&gt;ニコニコ動画に埋め込んだ動画&lt;/a&gt;が公開された。この動画がなんと１週間で50万再生(現時点で80万再生)を集め、&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0810/03/news065.html&quot;&gt;ITmedia News でも取り上げられる&lt;/a&gt; など、予想以上の広がりっぷりにびっくりした。話題になれば10万単位の人に見てもらえて、反応がすぐに分かるニコニコ動画はすごいと実感した。

**発表資料まとめ
いろいろ発表した。
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080303/fxug36&quot;&gt;as3Query&lt;/a&gt;＠Flex3勉強会第36回
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080318/shibuya_abc&quot;&gt;avmplus拡張とwinQuery&lt;/a&gt;＠Shibuya.abc#1
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080330/java_ja6&quot;&gt;ActionScript for JAVAer&lt;/a&gt;＠java-ja第６回
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080518/silverlight_and_flash&quot;&gt;SilverlightとFlashをつなぐ&lt;/a&gt;＠Silverlightを囲む会 in大阪#2 
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080720/wsh_dom&quot;&gt;WSHでDOM&lt;/a&gt;＠Shibuya.js in Kyoto
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080728/fleverlight1&quot;&gt;ルーレットを Live Coding&lt;/a&gt;＠Fleverlight 勉強会

勉強会への参加は7月末で打ち止めにして、そのあとは Haskell や Smalltalk をかじってみたり、アルゴリズム方面に手を出してみたり、UI を凝ったサービスを作ってみたりした。

**2009年抱負
実を結ばせたい。
</body>
</day>
<day date="2009-01-06" title="">
<body>
*nenkan2008*[はてブ年鑑]はてブ年鑑 2008年分
年があけたので &lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/#2008&quot;&gt;2008年分&lt;/a&gt;、&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/#200812&quot;&gt;2008年12月分&lt;/a&gt;を集計しました。

2008年のランキングではイースターエッグの about:blank が堂々の１位です。そのあと、Excel、格言(?)、写真、Webサービス、料理などと例年通りな感じのラインナップになってます。

&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090106/20090106094228.png&quot; width=&quot;450&quot; height=&quot;202&quot;&gt;&lt;br&gt;はてブ年鑑&lt;/a&gt;&lt;/center&gt;&lt;

はてブ年鑑については、公開以後、表側は変化していませんが、バックエンドをいじり続けています。いままで独自のファイルフォーマットを利用していたのですが、SQL の勉強を兼ねて SQLite3 ベースに書き換えていってます。エントリ数が数万、ブックマーク数が数百万単位であるのでいい勉強になってます。

SQL への移行はだいたい完了したので、自動集計・週間ランキング・RSS配信あたりに対応したいところです。
</body>
</day>
<day date="2009-01-07" title="">
<body>
*nenga*うちの年賀状
例年、年賀状は自作しているのですが、今年は例年よりも出来がよかったので、ここで紹介しておきます。
&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090107/20090107020134_original.jpg&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090107/20090107020134.jpg&quot; width=&quot;450&quot; height=&quot;314&quot;&gt;&lt;/a&gt;&lt;/center&gt;
引っ越しして過ごしやすくなった様子を表現してみました。

ちなみに、&lt;a href=&quot;http://lab.co-conv.jp/blog/2009/01/post_13.html&quot;&gt;会社の年賀状&lt;/a&gt; も公開されてるのでぜひ見てやってください。左から２番目が私です！　こっちは弊社が誇るデザイナーの力作です。
</body>
</day>
<day date="2009-01-08" title="">
<body>
*alchemy_array*[as3]Alchemy で AS3 の Array を動的生成する
C++ だったら動的に確保された配列は要素数と先頭へのポインタで返すのが定石なんだけど、Alchemy で AS3 のライブラリに変換するときには Array オブジェクトを返すのが妥当だろう。

C++ 側のコードで AS3 の配列を動的に生成するには、次のようにする。
+AS3_Array で Array のインスタンスを作成する
+AS3_CallS で先ほど生成したインスタンスの push メソッドを呼んで要素を追加する
といっても、あとで AS3 に変換されるんだから変な気分だが。

具体的にはこうなる。
&gt;|cpp|
AS3_Val arr = AS3_Array(&quot;&quot;);
AS3_CallS(&quot;push&quot;, arr, AS3_Array(&quot;IntType&quot;, 3));
AS3_CallS(&quot;push&quot;, arr, AS3_Array(&quot;StrType&quot;, &quot;4&quot;));
||&lt;
AS3 でいうところのこんなコードのイメージ。
&gt;|javascript|
var arr:Array = Array();
arr.push.call(arr, Array(3));   // arr.push(3);
arr.push.call(arr, Array(&quot;4&quot;)); // arr.push(&quot;4&quot;);
||&lt;

C++ で使える関数は &lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Alchemy:Documentation:Developing_with_Alchemy:C_API&quot;&gt;Alchemy:Documentation:Developing with Alchemy:C API - Adobe Labs&lt;/a&gt; が詳しい。

</body>
</day>
<day date="2009-01-09" title="">
<body>
*alchemy_keep_intermediate_files*[as3]Alchemy で中間ファイルを消さない設定
alc-on して置き換わる gcc(achacks/gcc) は Perl でできてるんだけど、その最後に次のようなコードがある。
&gt;|perl|
# remove junk TODO failure leaves stuff around!
if(!$ENV{ACHACKS_TMPS})
  { sys(&quot;rm&quot;, &quot;-f&quot;, &lt;$$.achacks.*&gt;) }
||&lt;
これが中間ファイルを全部消す処理ですな。

ということで、どういう AS が吐かれるのかを見たいときには ACHACKS_TMPS を 1 にしよう。cygwin ではこうする。
&gt;|sh|
$ export ACHACKS_TMPS=1
||&lt;
こんな感じで中間ファイルが消えないよ。
&gt;|sh|
$ ls
3080.achacks.abc
3080.achacks.as
3080.achacks.exe
3080.achacks.exe.bc
3080.achacks.o
# ...
||&lt;
.o が llvm の中間ファイル。llvm-dis を実行すればディスアセンブルできる。
&gt;|sh|
$ llvm-dis 3080.achacks.o  
# → 3080.achacks.o.ll が生成される
||&lt;
.o から .as が生成されるらしいので、比較すると面白いはず。

**その他の環境変数
alc-util を使えばその他の有用そうな環境変数を確認できる。
&gt;|sh|
ALCHEMY_HOME=/home/nitoyon/doc/alchemy
ALCHEMY_VER=0.4a
PATH=/home/nitoyon/doc/alchemy/achacks:...
ADL=
ASC=C:/Alchemy/bin/asc.jar
ACHACKS_TMPS=1
LOG=
LOGLEVEL=
NOMEMUSER=
NOASVECTOR=
VISIBLEAIR=
||&lt;
NOASVECTOR を有効にすれば、Flash Player 9 でも動くライブラリを作れるのかなぁ？

</body>
</day>
<day date="2009-01-13" title="">
<body>
*alchemy_loglevel*[as3]Alchemy で内部ログを出力するには環境変数 LOGLEVEL を設定する
LOGLEVEL を設定すると、Alchemy の内部ログが出力されるようになる。

libc 部分の組み込み関数や Alchemy の内部処理の情報が出力されるので、デバッグ時に役立つ。

cygwin ではこんな感じ。
&gt;|sh|
$ export LOGLEVEL=6
||&lt;
LOGLEVEL は1～5まである模様。数字が大きいほど細かいログも出力するようになる。6だと1～5の全部を吐く。

ログは trace として吐かれる。注意しなきゃいけないのは、LOGLEVEL の値はコンパイル時に埋め込まれるので、レベルを変更するには再コンパイルする必要がある。

**ログの例
ためしに、6 にしてビルドすると、初期化時にはこんなログが出力された。
&gt;||
local system
local system w/o gsprite
Static init...
Undefined sym: _abort
Starting work...
_init
Caught AlchemyLibInit 3
||&lt;

**コンパイル時の流れ
gcc のソースを見てみる。

LOGLEVEL 環境変数の値がコンパイル時のパラメータとして渡されている。
&gt;|perl|
$confShell = $avmshell ? &quot;true&quot; : &quot;false&quot;;
$confNoShell = $avmshell ? &quot;false&quot; : &quot;true&quot;;
$confLogLevel = $ENV{LOGLEVEL} || &quot;0&quot;;
$confVector = $ENV{NOASVECTOR} ? &quot;false&quot; : &quot;true&quot;;
$confNoVector = $ENV{NOASVECTOR} ? &quot;true&quot; : &quot;false&quot;;
$setjmpAbuse = $ENV{SETJMPABUSE} ? &quot;true&quot; : &quot;false&quot;;
$confDebugger = $debug ? &quot;true&quot; : &quot;false&quot;;
$confNoDebugger = $debug ? &quot;false&quot; : &quot;true&quot;;
push(@asc,
  &quot;-config&quot;, &quot;Alchemy::Debugger=$confDebugger&quot;,
  &quot;-config&quot;, &quot;Alchemy::NoDebugger=$confNoDebugger&quot;,
  &quot;-config&quot;, &quot;Alchemy::Shell=$confShell&quot;,
  &quot;-config&quot;, &quot;Alchemy::NoShell=$confNoShell&quot;,
  &quot;-config&quot;, &quot;Alchemy::LogLevel=$confLogLevel&quot;,
  &quot;-config&quot;, &quot;Alchemy::Vector=$confVector&quot;,
  &quot;-config&quot;, &quot;Alchemy::NoVector=$confNoVector&quot;,
  &quot;-config&quot;, &quot;Alchemy::SetjmpAbuse=$setjmpAbuse&quot;
);
||&lt;

**AS のコード
gcc が吐き出す AS3 のコードはこんな感じ。

（※中間ファイルの吐き出し方は &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090109/alchemy_keep_intermediate_files&quot;&gt;Alchemy で中間ファイルを消さない設定&lt;/a&gt; を参照）

&gt;|javascript|
public var glogLvl:int = Alchemy::LogLevel;

public function log(lvl:int, msg:String):void
{
  if(lvl &lt; glogLvl)
    trace(msg);
}
||&lt;
Alchemy::LogLevel の値はコンパイル時に -config で指定された値が設定される。つまり、glogLvl には LOGLEVEL の値が格納される。

よって、log 関数では LOGLEVEL の値よりも小さいログレベルのログが trace に吐かれることとなる。

**ちなみに
自分で書いた関数でログを吐くには、&lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Alchemy:Documentation:Developing_with_Alchemy:C_API#void_sztrace.28char.2A_msg.29&quot;&gt;sztrace&lt;/a&gt; や &lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Alchemy:Documentation:Developing_with_Alchemy:C_API#void_AS3_Trace.28AS3_Val_val.29&quot;&gt;AS3_Trace&lt;/a&gt; が使えるよ。

</body>
</day>
<day date="2009-01-14" title="">
<body>
*alchemy_pointer*[as3]Alchemy でポインタを扱う
Alchemy は malloc にも対応している。malloc で確保したメモリのポインタを AS3 側に伝えるのも簡単だ。

**C 側の実装例
C で malloc した場所を AS3 に渡してみる。
&gt;|c|
static AS3_Val myAlloc(void* self, AS3_Val args)
{
    // 確保した値の初期値を受け取る
    int v;
    AS3_ArrayValue(args, &quot;IntType&quot;, &amp;v);

    // malloc でメモリ確保
    int* p = (int*)malloc(sizeof(int));

    // 確保したメモリに初期値を代入する
    *p = v;

    // ポインタを返す
    return AS3_Ptr((void*)p);
}

static AS3_Val myGetPtr(void* self, AS3_Val args)
{
    // ポインタを受け取る
    int* p;
    AS3_ArrayValue(args, &quot;PtrType&quot;, &amp;p);

    // ポインタが指す値を返す
    return AS3_Int(*p);
}
||&lt;
AS3_Ptr, PtrType がキーワード。

**ActionScript3 側の実装例
ポインタは uint で受け取れますよ。
&gt;|javascript|
var lib:CLibInit = new CLibInit();
var obj:Object = lib.init();

// メモリを確保する
var p:uint = obj.myAlloc(9999);

// ポインタを渡して中身を受け取る
var v:int  = obj.getPtr(p);
||&lt;

**ヒープの実装方法は？
AS3 にはご存知の通りポインタの概念はないんだけど、どのように実現されてるんだろう。また、C 側では malloc で確保したメモリがヒープ上にあるように見えるはずなんだけど、これはいったいどのように実現されているんだろう。

答えは簡単。ByteArray でヒープがエミュレートされている。ポインタの値はヒープのオフセット＋ByteArray の先頭から何バイト目かの値になるわけだ。

AS3 側から ByteArray でエミュレートされたメモリを直接参照するには、&lt;code&gt;GLEByteArrayProvider.get()&lt;/code&gt; を実行すればよい。詳しくは &lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Alchemy:Documentation:Developing_with_Alchemy:AS3_API#GLEByteArrayProvider&quot;&gt;Alchemy:Documentation:Developing with Alchemy:AS3 API - Adobe Labs&lt;/a&gt; にて。

</body>
</day>
<day date="2009-01-15" title="">
<body>
*alchemy_as_stack*[as3]Alchemy が吐く AS3 ソースを深追いする
C のソースがどんな AS3 のコードに変換されているかを細かく見ていこう。

お題は&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090114/alchemy_pointer&quot;&gt;前回&lt;/a&gt;紹介した malloc する関数。
&gt;|c|
// malloc sample (C)
static AS3_Val myAlloc(void* self, AS3_Val args)
{
    // 確保した値の初期値を受け取る
    int v;
    AS3_ArrayValue(args, &quot;IntType&quot;, &amp;v);

    // malloc でメモリ確保
    int* p = (int*)malloc(sizeof(int));

    // 確保したメモリに初期値を代入する
    *p = v;

    // ポインタを返す
    return AS3_Ptr((void*)p);
}
||&lt;

この関数を SWC に変換する過程の AS3 を見てみる。（参考：&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090109/alchemy_keep_intermediate_files&quot;&gt;Alchemy で中間ファイルを消さない設定&lt;/a&gt;）

少し長いけど全文掲載しておく。
====
&gt;|javascript|
public final class FSM_myAlloc extends Machine {

    public static function start():void {
            var result:FSM_myAlloc = new FSM_myAlloc
        gstate.gworker = result
    }

    public var i0:int, i1:int, i2:int

    public static const intRegCount:int = 3

    public static const NumberRegCount:int = 0
    public final override function work():void {
        Alchemy::SetjmpAbuse { freezeCache = 0; }
        __asm(label, lbl(&quot;_myAlloc_entry&quot;))
        __asm(push(state), switchjump(
            &quot;_myAlloc_errState&quot;,
            &quot;_myAlloc_state0&quot;,
            &quot;_myAlloc_state1&quot;,
            &quot;_myAlloc_state2&quot;,
            &quot;_myAlloc_state3&quot;))
    __asm(lbl(&quot;_myAlloc_state0&quot;))
    __asm(lbl(&quot;_myAlloc__XprivateX__BB75_0_F&quot;))
        mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
        mstate.ebp = mstate.esp
        mstate.esp -= 4
        i0 =  (__2E_str99)
        mstate.esp -= 12
        i1 =  ((__xasm&lt;int&gt;(push((mstate.ebp+12)), op(0x37))))
        i2 =  ((mstate.ebp+-4))
        __asm(push(i1), push(mstate.esp), op(0x3c))
        __asm(push(i0), push((mstate.esp+4)), op(0x3c))
        __asm(push(i2), push((mstate.esp+8)), op(0x3c))
        state = 1
        mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
        return
    __asm(lbl(&quot;_myAlloc_state1&quot;))
        mstate.esp += 12
        mstate.esp -= 8 
        i0 =  (4)
        i1 =  (0)
        __asm(push(i1), push(mstate.esp), op(0x3c))
        __asm(push(i0), push((mstate.esp+4)), op(0x3c))
        state = 2
        mstate.esp -= 4;FSM_pubrealloc.start()
        return
    __asm(lbl(&quot;_myAlloc_state2&quot;))
        i0 = mstate.eax
        mstate.esp += 8
        i1 =  ((__xasm&lt;int&gt;(push((mstate.ebp+-4)), op(0x37))))
        __asm(push(i1), push(i0), op(0x3c))
        mstate.esp -= 4                                        
        __asm(push(i0), push(mstate.esp), op(0x3c))
        state = 3
        mstate.esp -= 4;(mstate.funcs[_AS3_Ptr])()
        return
    __asm(lbl(&quot;_myAlloc_state3&quot;))
        i0 = mstate.eax
        mstate.esp += 4
        mstate.eax = i0
        mstate.esp = mstate.ebp
        mstate.ebp = __xasm&lt;int&gt;(push(mstate.esp), op(0x37)); mstate.esp += 4
        //RETL
        mstate.esp += 4
        mstate.gworker = caller
        return
    __asm(lbl(&quot;_myAlloc_errState&quot;))
        throw(&quot;Invalid state in _myAlloc&quot;)
    }
}
||&lt;

全体の構成として気になるのは、myAlloc 関数がクラスとして実現されていること。

次に目に付くのは、eax や esp などのプロパティ。どうやら、AS3 上でレジスタやスタックをエミュレートしているような雰囲気だ。

では細かく見ていく。まずは全体の構成。

**state で実現するタイムスライス
work 関数が関数処理の実体だ。work 関数の外側を見てみるとこうなっている。
&gt;|javascript|
public final override function work():void {
    //...
    __asm(push(state), switchjump(
        &quot;_myAlloc_errState&quot;,
        &quot;_myAlloc_state0&quot;,
        &quot;_myAlloc_state1&quot;,
        &quot;_myAlloc_state2&quot;,
        &quot;_myAlloc_state3&quot;))

__asm(lbl(&quot;_myAlloc_state0&quot;))
    //...
    state = 1
    // AS3_ArrayValue 関数呼びだし
    return

__asm(lbl(&quot;_myAlloc_state1&quot;))
    //...
    state = 2
    // malloc 関数呼びだし
    return

__asm(lbl(&quot;_myAlloc_state2&quot;))
    //...
    state = 3
    // AS3_Ptr 関数呼びだし
    return

__asm(lbl(&quot;_myAlloc_state3&quot;))
    // myAlloc 関数終了準備
    mstate.gworker = caller
    return

__asm(lbl(&quot;_myAlloc_errState&quot;))
    throw(&quot;Invalid state in _myAlloc&quot;)
}
||&lt;
このように、work 関数では、もともとの myAlloc() 関数の処理がぶつ切りにされている。FSM_myAlloc というところからも分かるとおり、関数の動作が FSM(有限オートマトン)として実現されている。work 関数が呼ばれるたびにステートが変化していくイメージだ。

この work 関数を呼び出しているのが、CRunner クラスだ。CRunner クラスのメインループをざっと見てみよう。
&gt;|javascript|
public class CRunner implements Debuggee
{
  // ...

  public function startInit():void
  {
    log(2, &quot;Static init...&quot;);
    //...

    timer = new Timer(1);
    timer.addEventListener(flash.events.TimerEvent.TIMER, 
      function(event:TimerEvent):void { work() });
    }
    //...
  }
||&lt;
こんな感じて定期的に work 関数を呼びだすようにしている。

work 関数は次のように定義されている。
&gt;|javascript|
  public function work():void
  {
    if(!isRunning)
      return;

    try
    {
      var startTime:Number = (new Date).time;

      while(true)
      {
        var checkInterval:int = 1000;

        while(checkInterval &gt; 0)
        {
          try
          {
            while(checkInterval-- &gt; 0)
              gstate.gworker.work();
          } catch(e:AlchemyDispatch) {}
        }
        if(((new Date).time - startTime) &gt;= 1000 * 10)
          throw(new AlchemyYield);
      }
    }
    //...
  }
||&lt;
gstate.gworker というのが現在処理中の関数を指すようになってる。どうやら、1000ステップごとに時間経過をチェックしていて、10秒以上実行していた場合には AlchemyYield 例外を発生させている。

AlchemyYield 例外が発生すると work() メソッドからは一旦抜けて、画面描画が行われる。

なお、C のソース上で再描画を強制するには、flyield() メソッドを呼ぶとよい。flyield() は &lt;code&gt;throw new AlchemyYield())&lt;/code&gt; という AS3 に変換される。

このように、Alchemy が変換する AS3 は細かくタイムスライスされていて、細かい処理の単位でいつでも中断できるようになっている。将来的にはマルチスレッドをエミュレートできるようになるかもしれない。

**疑似レジスタ
では、関数の最初から見ていこう。
&gt;|javascript|
__asm(lbl(&quot;_myAlloc_state0&quot;))
__asm(lbl(&quot;_myAlloc__XprivateX__BB75_0_F&quot;))
    mstate.esp -= 4; __asm(push(mstate.ebp), push(mstate.esp), op(0x3c))
    mstate.ebp = mstate.esp
    mstate.esp -= 4
    i0 =  (__2E_str99)
    mstate.esp -= 12
    i1 =  ((__xasm&lt;int&gt;(push((mstate.ebp+12)), op(0x37))))
    i2 =  ((mstate.ebp+-4))
    __asm(push(i1), push(mstate.esp), op(0x3c))
    __asm(push(i0), push((mstate.esp+4)), op(0x3c))
    __asm(push(i2), push((mstate.esp+8)), op(0x3c))
    state = 1
    mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
    return
||&lt;
この AS3 のコードは
&gt;|c|
    // 確保した値の初期値を受け取る
    int v;
    AS3_ArrayValue(args, &quot;IntType&quot;, &amp;v);
||&lt;
が変換されたものだ。

なんと長くなるんだ！と思うんだけど、１個ずつ見ていけば納得の処理である。まずは最初の２行。
&gt;|javascript|
// push ebp
mstate.esp -= 4;
__asm(push(mstate.ebp), push(mstate.esp), op(0x3c))

// mov ebp, esp
mstate.ebp = mstate.esp
||&lt;
__asm というのが初めて見るが、&lt;code&gt;__asm(push(a), push(b), op(0x3c))&lt;/code&gt; は「a の値を int として b のアドレスに代入する」という意味だと推測される。op(0x3c) は load a 32 bit integer from global memory を表す op code のようだ（参考：&lt;a href=&quot;http://llvm.org/devmtg/2008-08/Petersen_FlashCCompiler.pdf&quot;&gt;FlaCC の p17&lt;/a&gt;）。

つまり、1行目は push ebp であり、2行目は mov ebp,esp となる。これは、C で関数呼びだしの際に最初に行うお決まりのあの処理にあたる。呼びだし元の ebp を保存して、現在の ebp を esp（現在のスタックの場所）に初期化するというあれ。

このように、mstate プロパティにはレジスタの状態が擬似的に再現されているわけだ。mstate は全ての関数で共有されているグローバルな MState オブジェクトである。

次の１行はだいぶ分かりやすい。
&gt;|javascript|
    mstate.esp -= 4
||&lt;
スタックに４バイト積んでる。アセンブリで言うところの &lt;code&gt;sub esp, 4h&lt;/code&gt; で、&lt;code&gt;int v;&lt;/code&gt; に相当する。ローカル変数はスタック上に確保されるということだ。

どんどん進む。
&gt;|javascript|
i0 =  (__2E_str99)
mstate.esp -= 12
i1 =  ((__xasm&lt;int&gt;(push((mstate.ebp+12)), op(0x37))))
i2 =  ((mstate.ebp+-4))
__asm(push(i1), push(mstate.esp), op(0x3c))
__asm(push(i0), push((mstate.esp+4)), op(0x3c))
__asm(push(i2), push((mstate.esp+8)), op(0x3c))
||&lt;
関数呼びだしをするための準備として、引数をスタックに積んでいる処理だ。esp が一気に12も減っているのは、3回分の push を一気に再現するための最適化が実施されているようだ。最適化前を想像すると、こんな感じかな。

&gt;|javascript|
// push [&amp;v]
mstate.esp -= 4
i2 =  ((mstate.ebp+-4))
__asm(push(i2), push((mstate.esp)), op(0x3c))

// push &quot;StrPtr&quot;
mstate.esp -= 4
i0 =  (__2E_str99)
__asm(push(i0), push((mstate.esp)), op(0x3c))

// push args
mstate.esp -= 4
i1 =  ((__xasm&lt;int&gt;(push((mstate.ebp+12)), op(0x37))))
__asm(push(i1), push(mstate.esp), op(0x3c))
||&lt;

で、この部分の最後。
&gt;|javascript|
mstate.esp -= 4;(mstate.funcs[_AS3_ArrayValue])()
||&lt;
call ですな。最初の esp を -4 するところは、リターンアドレスをスタックに積むところを再現しているんだけど、AS3 では関数がクラスで再現されているのでアドレスがそもそも存在しない。なので、形式上、スタックに積んだことにしているようだ。実際には、呼びだし元は caller プロパティとして保持している。

**次のステートは...
長くなってきたけど、次のステートの最初も軽く見ておく。
&gt;|javascript|
    __asm(lbl(&quot;_myAlloc_state1&quot;))
        mstate.esp += 12
        mstate.esp -= 8 
||&lt;
最初の esp を 12 増やしてるのは、AS3_ArrayValue 呼び出しのために積んだ引数を取り除いている。1つ前の後処理だ。

２行目の、esp を 8 減らしているのは、次に呼び出す malloc() で２つの引数をスタックに積むためのもの。

**まとめ
Alchemy で変換したらどのような AS3 のコードが吐かれ、どのように実行されるかを追っていった。AVM の上に、さらに VM が実現されているのが大変興味深いですね。

</body>
</day>
<day date="2009-01-16" title="">
<body>
*alchemy_file_io*[as3]Alchemy でのファイル IO
fopen で読み書きするとどうなるか調べてみた。結論から行くと
-read のみ可能
-AS3 側から CLibInit::supplyFile() でファイルを登録する
という挙動のようだ。

以下、gcc で吐かれた &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090109/alchemy_keep_intermediate_files&quot;&gt;AS の中間コード&lt;/a&gt; を見つつ確認した情報。

**fopen
fopen からは open（FSM_open） が呼ばれていて、その中で mstate.system.open が呼ばれてる。

**CSystemLocal
system の実体は
-bridge を使うときは CSystemBridge
-それ以外は CSystemLocal
の模様。今回は swc なので CSystemLocal::open を見る。

**CSystemLocal::open
flags が 0 以外のとき、つまり、read only 以外のときは失敗するようだ。
&gt;|javascript|
  public function open(path:int, flags:int, mode:int):int
  {
    var spath:String = gstate.gworker.stringFromPtr(path);

    if(flags != 0)
    {
log(3, &quot;failed open(&quot; + spath + &quot;) flags(&quot; + flags + &quot;)&quot;);
      return -1;
    }

    var stat:Object = fetch(spath);

    if(stat.pending)
      throw(new AlchemyBlock);

    // snip...

log(4, &quot;open(&quot; + spath + &quot;): &quot; + io.size);
    return n;
  }
||&lt;
read only のときは fetch() を呼び出す。

**CSystemLocal::fetch
fetch は次のようになってる。
&gt;|javascript|
  private function fetch(path:String):Object
  {
    var res:Object = statCache[path];

    if(!res)
    {
      var gf:ByteArray = gfiles[path];

      if(gf)
      {
        res = { pending:false, size:gf.length, data:gf };
        statCache[path] = res;

        return res;
      }
    }

    Alchemy::Shell {

      var ns:Namespace = new Namespace(&quot;avmshell&quot;);
      var file:Object = ns::[&quot;File&quot;];
      // snip...
    }

    if(forceSync)
      return res || { size: -1, pending: false };

    Alchemy::NoShell {

    if(!res)
    {
      var request:URLRequest = new URLRequest(path);
      var loader:URLLoader = new URLLoader();
      // snip...
    }
  }
||&lt;
ざっと見た感じでは次のように実装されている。
+キャッシュがあればそれを利用する
+gfiles からファイルのデータを取得する（gfiles には &lt;a href=&quot;http://labs.adobe.com/wiki/index.php/Alchemy:Documentation:Developing_with_Alchemy:AS3_API#CLibInit&quot;&gt;CLibInit::supplyFile()&lt;/a&gt; 経由で AS3 から ByteArray を追加できる）
+avmshell 上で実行しているときはファイルを開く
+URLLoader を使ってロードする 

試してみたけど、URLLoader が使われることはなかった。公式のドキュメントには特に何も書いてなかったので深追いはしなかった。

**（関連情報）ファイルポインタが必要な場合
調べた過程で別の情報を発見。C ライブラリに FILE* を渡したい場合には、funopen を使うとよいようだ

-参考：&lt;a href=&quot;http://www.adobe.com/cfusion/webforums/forum/messageview.cfm?forumid=72&amp;catid=755&amp;threadid=1415332&amp;enterthread=y&quot;&gt;Reading local files - Adobe - Alchemy&lt;/a&gt;

</body>
</day>
<day date="2009-01-17" title="">
<body>
*flex_document_ja*[as3]Flex 3 リファレンスガイドの ZIP 版が公開
via &lt;a href=&quot;http://blog.isocchi.com/2009/01/flexair-adobe-flex-3.html&quot;&gt;[Flex][AIR] Adobe Flex 3 リファレンスガイドがダウンロード出来るようになりました。 - いそっちノート&lt;/a&gt;

ZIP には HTML と PDF が全て入ってるので、AS3 や Flex 3 の開発する人は手元に置いておくとよいですね。
-ドキュメント一覧：http://www.adobe.com/support/documentation/jp/flex/
-ZIPへの直リンク：http://livedocs.adobe.com/flex/3_jp/flex3jp_documentation.zip

HTML ヘルプ(chm) を作る方法は、ちょっと古いけど次のページが役に立つよ。
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080425/flex3_htmlhelp&quot;&gt;flex3_htmlhelp.rb の目次を充実させた - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://code.google.com/p/flashhelp2chm-ja/&quot;&gt;flashhelp2chm-ja - Google Code&lt;/a&gt;


</body>
</day>
<day date="2009-01-19" title="">
<body>
*hta*[JavaScript]JavaScriptでかんたんHTAアプリに挑戦
&gt;&lt;p&gt;こんにちは！&lt;br&gt;
みなさんガジェットつくってますか！&lt;br&gt;
なんだか最近、色々な種類があるみたいですね！&lt;br&gt;
Yahooナントカとか、Googleガジェットとか、Adobe AIRとか、シルバーナントカとか、あとWindowsサイドバーだとか、Operaナントカとか…。&lt;/p&gt;&lt;

&gt;&lt;p&gt;こういうガジェット的な、ちょっとしたデスクトップ用のツールって、&lt;br&gt;
どうやってつくるのかなーなんて思って、ちょっと調べてみました！&lt;/p&gt;&lt;

&gt;&lt;p&gt;そしたら意外と簡単だった…！
これならぼくにも作れそう！！&lt;/p&gt;&lt;

ってことで、ちょっとメモしておきますね！ 

**どれにしようかな…！
-つくるのが簡単なこと
-Winで動いたらいいや
-使う人がインストールしやすそうなのがいい

&gt;&lt;p&gt;こんな感じで考えていくと…&lt;br&gt;
Googleガジェット か AIR なのかなー、って思ったんだけど、&lt;/p&gt;&lt;

プラグインとかインストールはめんどくさいから、なにもせずに使えるものがいいよね！

だから &lt;font color=&quot;red&quot;&gt;&lt;b&gt;HTA（HTMLアプリケーション）に決定！&lt;/b&gt;&lt;/font&gt;

**つくるのかんたんそう？
&lt;font color=&quot;red&quot;&gt;&lt;b&gt;HTAってなんなの？おいしいの？&lt;/b&gt;&lt;/font&gt;

なんて思っていた時期がぼくにもありました…！ 

&lt;font color=&quot;red&quot;&gt;&lt;b&gt;大丈夫！ html と JavaScript だけでできるよ！&lt;/b&gt;&lt;/font&gt;

だからホームページ作るのと同じくらい簡単ですね！ 


&gt;&lt;p&gt;いまでこそ AIR とか Prism とかが少し注目されてるけど、&lt;br&gt;
HTA は Microsoft が10年も前に HTML と JavaScript でアプリケーション作れるようにしちゃえ！&lt;br&gt;
ってことで発表した仕組みだよ。&lt;/p&gt;&lt;


&gt;&lt;p&gt;ブラウザ上のページだと、JavaScriptとかで他のサイトの情報を取得できなかったり&lt;br&gt;
ファイルの読み書きできなかったりと、色々な制約があるんだけど、&lt;br&gt;
そんな制約なしで、ウイルスでも何でも好きなものがバンバンつくれます！&lt;br&gt;
やったね！&lt;/p&gt;&lt;

**つくるための準備
&gt;&lt;p&gt;Windowsでのやりかたです！&lt;br&gt;
Macとか他のへんなOS使ってるひとはあきらめてください！&lt;/p&gt;&lt;

&gt;&lt;p&gt;準備といっても、&lt;font color=&quot;red&quot;&gt;&lt;b&gt;HTA は IE5 以降についてくる&lt;/b&gt;&lt;/font&gt;から何もしなくてオッケーだよ&lt;br&gt;
IE4を使ってるひとは日常生活に支障がでてると思うので、いますぐIE7をインストールするといいと思うよ！&lt;/p&gt;&lt;

**よし！ つくろう！
***まず作業用フォルダをつくる
&gt;&lt;p&gt;ぼくはいつも C:\home\ にガラクタファイルを溜め込んでいってるので、&lt;br&gt;
&lt;b&gt;C:\home\HTA\test1&lt;/b&gt; ってフォルダを作ってみました！&lt;br&gt;
はい！ 今回つくるやつは「&lt;b&gt;test1&lt;/b&gt;」っていうHTAアプリです！&lt;/p&gt;&lt;

***作業用フォルダに必要なファイルを用意する
AIR だと３つぐらいのファイルを用意しなきゃいけないみたいだけど、HTA は１つのファイルでじゅうぶん！

&gt;&lt;p&gt;作業用フォルダの中に新しく「&lt;b&gt;test1.hta&lt;/b&gt;」ってファイルを作ってね！&lt;br&gt;
中身は…&lt;/p&gt;&lt;
&gt;|html|
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;てすと！&lt;/title&gt;
&lt;script&gt;
function start_load() {
    var xhr = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);
    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {
            view(xhr);
        }
    };

    xhr.open('get', 'http://b.hatena.ne.jp/hotentry');
    xhr.send(null);
}

function view(xhr) {
    document.getElementById('main').value = xhr.responseText;
}
&lt;/script&gt;
&lt;style&gt;
body {
    background: #000;
}

#main {
    width: 100%;
    height: 200px;
    color: red;
    font-size: 12px;
}
&lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;textarea id=&quot;main&quot;&gt;こんにちはこんにちは！&lt;/textarea&gt;
&lt;input type=&quot;button&quot; value=&quot;ひみつボタン&quot; onclick=&quot;start_load()&quot; /&gt;
&lt;/body&gt;
&lt;/html&gt;
||&lt;

&gt;&lt;p&gt;これをコピペでオッケー！&lt;br&gt;
ただし、&lt;font color=&quot;red&quot;&gt;&lt;b&gt;文字コードは Shift-JIS で保存してね！&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
(別の文字コードで保存したいばあいは、meta タグを書いてね)&lt;/p&gt;&lt;

**実行しよう
エクスプローラを起動して、作業フォルダに移動
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090118/20090118200619.jpg?1232276995&quot; width=&quot;437&quot; height=&quot;210&quot;&gt;&lt;/center&gt;&lt;

さっき作ったやつをダブルクリックで実行…！
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090118/20090118200730.png?&quot; width=&quot;450&quot; height=&quot;333&quot;&gt;&lt;/center&gt;&lt;
&gt;&lt;p&gt;できた！やった！なんかうごいた！&lt;br&gt;
ひみつボタン押したら、はてなブックマークのソースコードが表示されたよー。&lt;/p&gt;&lt;

**改造しよう！
HTA の html とか JavaScript は、IE と同じやつが使われてるらしいですよ！ 

&gt;&lt;p&gt;てことは、普段ホームページ作りの時に「あぁこれFirefoxだと使えないからなぁ」&lt;br&gt;
なんて諦めていたやつが色々つかえるかもしれないですね！&lt;br&gt;
ActiveX とか expression とか、なんかそういうの！&lt;/p&gt;&lt;

&gt;&lt;p&gt;あと &lt;b&gt;prototype.js&lt;/b&gt; とか &lt;b&gt;jQuery&lt;/b&gt; みたいな便利ライブラリも普通に使えるよ！&lt;br&gt;
やった！ すごい！ べんり！&lt;/p&gt;&lt;

**だけどHTAのちょっとまずいところ
***Windows 限定…！
Windows 以外のひとにも使ってもらいたいときは、HTA はあきらめたほうがよいだろうね…！

***cookieがIEと共通…！
&gt;&lt;p&gt;たとえ「標準のブラウザ」をFirefoxに設定していたとしても&lt;br&gt;
cookieはIEのものをつかっちゃう…！&lt;/p&gt;&lt;

&gt;&lt;p&gt;つまり、IEでhatenaにログインしていたら、HTAでもhatenaにログイン済み。&lt;br&gt;
その状態で、HTAから(IE以外の)標準のブラウザでリンクを開こうとすると&lt;br&gt;
ログインしていない状態でリンクが開かれちゃう。&lt;/p&gt;&lt;

**参考になるページ
公式のページに公開ファイルの作り方とか色々書いてあるよ！ 
-&lt;a href=&quot;http://www.microsoft.com/japan/technet/scriptcenter/hubs/htas.mspx&quot;&gt;HTA Developers Center&lt;/a&gt;
--入門ドキュメントが日本語で書いてあるよ
-&lt;a href=&quot;http://www.microsoft.com/japan/technet/scriptcenter/resources/qanda/htas.mspx&quot;&gt;Hey, Scripting Guy! ‐ HTML アプリケーション (HTA)&lt;/a&gt;
--かんたんなＱ＆Ａだよ
--ファイルを開いたり保存したりする方法も…！
--もちろん日本語！
-&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536473.aspx&quot;&gt;HTML Applications Reference&lt;/a&gt;
--英語だけど仕様がくわしく書いてるリファレンスだよ

ぼくが過去に作った HTA のツールも紹介します
-&lt;a href=&quot;http://tech.nitoyon.com/javascript/application/racing/2.html&quot;&gt;Google Earth でもドライビング！&lt;/a&gt;
--Google Earth の COM インターフェースを直接叩いてみた実験的な HTA。現在は動かないと思う…

みんなも作って、どんどこ公開しちゃえばいいんじゃないかな！

&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

ネタ元：
-&lt;a href=&quot;http://d.hatena.ne.jp/Hamachiya2/20090116/air&quot;&gt;JavaScriptでかんたんAIRアプリに挑戦 - ぼくはまちちゃん！(Hatena)&lt;/a&gt;

</body>
</day>
<day date="2009-01-20" title="">
<body>
*ie4_blueprint*IE4 の青写真を懐かしむ
Internet Explorer 4.0（以下、IE4）が登場したのは、10年以上前の1997年10月のこと。
いま改めて IE4 の資料を調べてみたところ、当時の Microsoft が目指していたものが見えてきて面白かったので、ここに記しておく。

**Windows 95 + IE4
生の Windows 95 に IE4 インストールすると、OS そのものの見た目が変わってしまったのが印象的だった。見た目だけでなく、エクスプローラの操作性が変わるなど、IE4 は Windows 95 SP1 といってもいいぐらいの位置づけだった。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080810/20080810005514.jpg&quot; width=&quot;450&quot; height=&quot;338&quot;&gt;&lt;/center&gt;&lt;

中でも目を引くのが、画面右側に登場する「チャンネル バー」だ。

このチャンネル バーは、IE4 の目玉新機能の
-Active Channel
-Active Desktop
を象徴したツールとなっている。

**お気に入りを発展させた Active Channel
まずは Active Channel を見てみよう。

Active Channel は、Web サイトの &lt;strong&gt;Push 配信&lt;/strong&gt;を可能にする技術だ。チャンネルは CDF（Channel Definition Format）と呼ばれる XML ファイルで定義される。

チャンネルを使うとこんなことができるようになる。
:チャンネルを公開したい人:CDF ファイルを作ることで、チャンネルを公開できる。
:チャンネルを購読したい人:ブラウザにチャンネルを登録しておくと、ブラウザが一定の頻度で CDF をチェックしてくれる。

ん？　これって、&lt;strong&gt;今で言う RSS&lt;/strong&gt; だよね…！

**CDF ファイルを試してみる
インターネット上に残っている数少ない資料を頼りに、CDF ファイルを作ってみた。

&gt;|xml|
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;CHANNEL HREF=&quot;http://example.com/&quot; BASE=&quot;http://example.com/&quot;&gt;
  &lt;TITLE&gt;てっく煮&lt;/TITLE&gt;
  &lt;ABSTRACT&gt;技術のごった煮 - てっく煮&lt;/ABSTRACT&gt;
  &lt;LOGO href=&quot;profile-big.jpg&quot; style=&quot;Image&quot; /&gt;
  &lt;LOGO href=&quot;profile_s.gif&quot; style=&quot;Icon&quot; /&gt;
  &lt;SCHEDULE&gt;
    &lt;INTERVALTIME HOUR=&quot;1&quot;/&gt;
  &lt;/SCHEDULE&gt;

  &lt;ITEM HREF=&quot;about.html&quot;&gt;
    &lt;TITLE&gt;このサイトについて&lt;/TITLE&gt;
  &lt;/ITEM&gt;

  &lt;ITEM&gt;
    &lt;TITLE&gt;作品&lt;/TITLE&gt;
    &lt;ITEM HREF=&quot;illusion1/&quot;&gt;
      &lt;TITLE&gt;Color Illusion Generator&lt;/TITLE&gt;
      &lt;ABSTRACT&gt;モノクロ画像に色がついたようにみえる錯視を簡単に作成できるジェネレータ。&lt;/ABSTRACT&gt;
    &lt;/ITEM&gt;
    &lt;ITEM HREF=&quot;marubiru/&quot;&gt;
      &lt;TITLE&gt;丸ビルRSSリーダー&lt;/TITLE&gt;
      &lt;ABSTRACT&gt;関西人にとっては思い入れの強い丸ビルを RSS リーダーにしてみました。&lt;/ABSTRACT&gt;
    &lt;/ITEM&gt;
  &lt;/ITEM&gt;
&lt;/CHANNEL&gt;
||&lt;
CDF ファイルへのリンクを IE4 でクリックすると、次のようなダイアログが表示される。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080810/20080810005511.jpg&quot; width=&quot;450&quot; height=&quot;189&quot;&gt;&lt;/center&gt;&lt;

「オフラインで見る」機能がユニークだ。

購読したチャンネルは、「&lt;strong&gt;チャンネル バー&lt;/strong&gt;」に列挙される。チャンネル名をクリックすると、CDF ファイルに記述されたコンテンツが列挙される。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080810/20080810005513.jpg&quot; width=&quot;400&quot; height=&quot;255&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

階層構造までサポートしている…！

**CDF の死
CDF は当初、W3C での策定を目指していたようなのだけれど、いつの間にか RDF が主流になって(&lt;a href=&quot;http://itpro.nikkeibp.co.jp/word/page/10003356/&quot;&gt;参考&lt;/a&gt;)、&lt;strike&gt;RDF が RSS と名前を変えた&lt;/strike&gt; RSS が広く利用されるようになった。その後のブログ ブームで、多くのサイトが RSS を配信するようになったのは皆さんご存知の通り。

今では RSS があるのが当たり前。多くのサイトが RSS を吐いて、RSS リーダーで新着情報を確認できる。&lt;strong&gt;IE4 が10年前に CDF で実現しようとしていた世界&lt;/strong&gt;だ。

その後の CDF の歴史を簡単に紹介しておこう。IE5 でチャンネル機能が削除されたが、CDF はサポートされ続けた(&lt;a href=&quot;http://hail2u.net/blog/rss/channel_definition_format.html&quot;&gt;参考&lt;/a&gt;)。だが、IE7 ではついに CDF 機能もサポートされなくなり、代わりに RSS に対応した(&lt;a href=&quot;http://www.microsoft.com/japan/msdn/ie/releasenotes/ie7.aspx&quot;&gt;参考&lt;/a&gt;)。

結局、死んだ技術になった CDF だが、階層構造をサポートしていたり、購読中のコンテンツをオフラインで読めたりと意外に高機能だ。いや、最初から高機能すぎたから普及しなかったかもしれない…。

**Active Desktop でデスクトップに Web を
IE4 のもう１つの目玉機能が Active Desktop だ。

Active Desktop は &lt;strong&gt;IE コンポーネントをデスクトップに貼り付ける&lt;/strong&gt;ための技術である。たとえば、HTML を壁紙にしたり、小さな時計アプリを HTML で作ってデスクトップ上に配置したりできる。

IE4 からは Dynamic HTML が強化されたので、ちょっとしたアプリケーションなら HTML＋JavaScript で記述できるというわけだ。

貼り付けられた HTML 一覧は、[画面のプロパティ] の [Web] タブから確認できる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20080810/20080810005512.jpg&quot; width=&quot;300&quot; height=&quot;270&quot;&gt;&lt;/center&gt;&lt;

チャンネル バーが Active Desktop を使って表示されていたことが分かる。

**とりあえず OFF にされた Active Desktop
しかし、当時はまだ、CPU もメモリも不十分だったため、Active Desktop は&lt;strong&gt;とても重かった&lt;/strong&gt;。「とりあえず無効に」という高速化テクニックが流行ったぐらいだ。

かなりマニアックな機能だが、Active Desktop は Active Channel とも連携していた。CDF ファイルでデスクトップに貼り付ける HTML を配布できたのだ。デスクトップへのアプリケーションの配布、という布石まで打っていたのだが…流行らなかった…。

そういえば、最近、Active Desktop と同じコンセプトの技術が注目を浴びている。

&lt;strong&gt;ガジェット（ウィジット）&lt;/strong&gt;だ。

皮肉にも、Microsoft は Windows Vista で Active Desktop を廃止し、同じく HTML ベースで開発できる「ガジェット」を導入した。よくよく考えてみると、ガジェットは Active Desktop の焼き直しじゃないか、と思ってしまうのだが、勘ぐりすぎだろうか。

**狙いは悪くなかった Microsoft
Active Channel にせよ、Active Desktop にせよ、10年たった今、似たような技術が再び注目されているのが面白い。&lt;strong&gt;IE4 の目玉機能は登場が早すぎた&lt;/strong&gt;のかもしれない。

そういえば、Microsoft の狙いは筋がいいことが多い。筋がいいんだけど、流行らない。

だから、今から6～7年ぐらい前に、Microsoft が声高々に叫んでいたことを見直してみると、次の2～3年先の流行が予測できるかもしれない。

そういえば、ビル・ゲイツは 2001年ぐらいから、&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0506/28/news019.html&quot;&gt;タブレットPCを猛プッシュしていた&lt;/a&gt;なぁ。うーん、確かに狙いは悪くない。だって、今、みんな、マルチタッチの iPhone に夢中だもんね…！

そういえば、.NET Framework が発表されてそろそろ10年だけど、最近、仮想化技術が熱いもんね…！

そういえば…！

</body>
<comments>
<comment>
<username>gabill</username>
<body>IE4やWindows98の主任設計者をつとめた中島聡さんは、次にNetDocsというウェブアプリケーション版Officeを作ろうとしたけど失敗したらしいですね。&lt;br&gt;10年のときを経て、次期Officeの目玉機能になるみたいですが。</body>
<timestamp>1232428376</timestamp>
</comment>
<comment>
<username>sakurai_youhei</username>
<body>この記事は面白かったです！</body>
<timestamp>1232436858</timestamp>
</comment>
<comment>
<username>transparent_cd</username>
<body>&gt;NetDocs&lt;br&gt;Google Docsを先取り…?</body>
<timestamp>1232439483</timestamp>
</comment>
<comment>
<username>zilog</username>
<body>ActiveX -&gt; Java Apllet -&gt; Flash Player -&gt; SilverLightとか</body>
<timestamp>1232444798</timestamp>
</comment>
<comment>
<username>nanto_vi</username>
<body>XHTMLがXML応用であるのと同様、RSS (より正確にはRSS 0.9/1.0)はRDF応用であるに過ぎません。XMLがXHTMLと名前を変えたのではないように、RDFもRSSと名前を変えたわけではありません。参考として挙げられた記事自体が間違っています。</body>
<timestamp>1232459655</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; gabill さん&lt;br&gt;この記事を書くにあたっても中島聡さんのブログの Windows 関連の記事を読み直して調べました。IE4 のころはアグレッシブな機能が多くて面白いです。&lt;br&gt;&lt;br&gt;&gt; nanto_vi さん&lt;br&gt;「RDF のあとは RSS という名称が一般になった」という気分で書いたのですが誤解を招いてしまいますね。修正しておきました。</body>
<timestamp>1232465752</timestamp>
</comment>
<comment>
<username>Sampo</username>
<body>10年前といえばUPnPです。個人的にはこっちが。</body>
<timestamp>1235364986</timestamp>
</comment>
<comment>
<username>nanasi</username>
<body>IE4の記事なのでお遊びでIE４でこのページを見てみたら・・・&lt;br&gt;&lt;br&gt;CPU使用率が上がり固まってしまいました。&lt;br&gt;今時IE4使ってる人なんていないので仕方がない事ですが、&lt;br&gt;記事がIE４のことなので、少しさみしいです。&lt;br&gt;IE5では正常でした＾＾</body>
<timestamp>1244451666</timestamp>
</comment>
<comment>
<username>127</username>
<body>2012 年の Web フォント事情のあわせてどうぞからこの記事に来たんですが、WebフォントもIE4で導入されているんですよね。&lt;br&gt;IE4すげぇ…</body>
<timestamp>1340655869</timestamp>
</comment>
</comments>
</day>
<day date="2009-01-21" title="">
<body>
*active_hogehoge*Active ナントカで年代測定
昨日公開した &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090120/ie4_blueprint&quot;&gt;IE4 の青写真を懐かしむ&lt;/a&gt; という記事の下調べの中で、Active Desktop とか Active Channel とか、やたら &lt;strong&gt;Active で始まる単語&lt;/strong&gt; が出てくるのが気になった。

そういや、一昔前には何でも .NET だったし、最近の Microsoft 製 Web サービスは Live がついてる。サービス名で発表された年代を推測できるようでおもしろい。

ということで、Active が付く Microsoft 用語のうち、現存するものを列挙してみた。
-ActiveX
-Active Directory
-Active Server Page (ASP)
-Active Data Object (ADO)
-Active Template Library (ATL)
-Active Streaming Format (ASF)
-ActiveSync
これらの機能・技術は10年以上前からある古株ということになりますね
</body>
</day>
<day date="2009-01-22" title="">
<body>
*block_scope_abc*[as3][tamarin]ActionScript3 ブロックスコープの ABC
※ AS3 にはブロックスコープがないよ、という内容です

&lt;a href=&quot;http://level0.kayac.com/2009/01/localvariables_optimization.php&quot;&gt;一時変数の効率化｜_level0.KAYAC&lt;/a&gt; という記事に怪しいことが書いてあったので突っ込んでおきます。

この記事によると、for の中で変数を宣言するよりも
&gt;|javascript|
// 中バージョン
function foo1():void{
  for(var i:int = 0; i &lt; 10; i++){
    var a:Object = new Object();
  }
}
||&lt;
外で宣言をしたほうが
&gt;|javascript|
// 外バージョン
function foo2():void{
  var a:Object;
  for(var i:int = 0; i &lt; 10; i++){
    a = new Object();
  }
}
||&lt;
a が宣言される回数が少ないので効率的だとしています。

けれども、&lt;strong&gt;これは間違い&lt;/strong&gt;です。

for の中で宣言したとしても、for のあとで変数は生き残ってます。さらに、for の前でも参照できます。

**実証コードを見てみよう
以下に実証コードを。
&gt;|javascript|
trace(a);                       // NaN

for(var i = 0; i &lt; 10; i++){
  var a:Number = new Number(i);
  trace(a);                     // 0, 1, ..., 9
}

trace(a);                       // 9
||&lt;
for の中で var a を宣言していますが、for を抜けたあとも 9 ですね。また、for の前では NaN（Number の初期値） になっています。

ということで、var は実はどこに書いても同じ。全て&lt;strong&gt;関数の冒頭に宣言した場合と同じ&lt;/strong&gt;になるわけです。

**ブロックスコープと let
この性質のことを専門用語でいうと、「&lt;strong&gt;ActionScript 3はブロックスコープを持たない&lt;/strong&gt;」といえます。var 宣言は &lt;strong&gt;関数スコープ&lt;/strong&gt; 内に変数を作成します。

そういえば、次の警告に出くわしたことある人も多いのでは。
&gt;|javascript|
var a;
for(var i = 0; i &lt; 10; i++){
  // 警告: 変数定義が重複しています。
  var a:Number = new Number(i);
}
||&lt;
この警告からも、AS3 がブロックスコープを持たないのが分かりますね。

対して、C++ や Java はブロックスコープを持つので、ブロックでだけ有効な変数を宣言することができます。

ちなみに、JavaScript だと with を使ってブロックスコープを再現できるのですが、AS3 では with はなかったことになってるので使えません。（関連）&lt;a href=&quot;http://d.hatena.ne.jp/amachang/20090119/1232331329&quot;&gt;for 文と無名関数のイディオム - IT戦記&lt;/a&gt;

また、JavaScript 1.7 からは let を使ってブロックスコープを宣言することができます。

&lt;strike&gt;ECMAScript 3.1 にも取り込まれるはずです&lt;/strike&gt; (追記)←取り込まれない方向のようです。失礼しました。

**バイトコードを見てみた
ここからが本題。

せっかくなので
-var を for の中に置く場合 （中バージョン）
-var を for の外に置く場合 （外バージョン）
でバイトコードがどう変わるかを見てみた。
====

これが検証用のソースコード。
&gt;|javascript|
// 中バージョン
function foo1():void{
  for(var i:int = 0; i &lt; 10; i++){
    var a:Object = new Object();
  }
}

// 外バージョン
function foo2():void{
  var a:Object;
  for(var i:int = 0; i &lt; 10; i++){
    a = new Object();
  }
}
||&lt;

Flex SDK 3.2 の asc.jar でコンパイルして、Tamarin 付属の abcdump でバイトコードを眺めてみた。

中バージョンではこんな感じになった。
&gt;|javascript|
var undefined():void    /* disp_id 0*/
{
  // local_count=3 max_scope=0 max_stack=2 code_len=33
  0         pushnull
  1         coerce              Object
  3         setlocal2
  4         pushbyte            0
  6         convert_i
  7         setlocal1
  8         jump                L1

  L2:
  12        label
  13        findpropstrict      Object
  15        constructprop       Object (0)
  18        coerce              Object
  20        setlocal2
  21        getlocal1
  22        increment_i
  23        convert_i
  24        setlocal1

  L1:
  25        getlocal1
  26        pushbyte            10
  28        iflt                L2

  32        returnvoid
}
||&lt;
いっぱい出てきたが、焦らずにゆっくり見ていこう。

**最初にローカル変数の準備
まずは冒頭の7行。

コメントでバイトコードにほぼ等しい AS3 の該当するコードを補っておいた。
&gt;|javascript|
// var a:Object = null
  0  pushnull          // null をスタックに積む
  1  coerce     Object // スタック1番上を Object にキャスト
  3  setlocal2         // pop して register 2 に代入

// var i:int = 0
  4  pushbyte   0      // 0 をスタックに積む
  6  convert_i         // スタック1番上を int にキャストする
  7  setlocal1         // pop して register 1 に代入

  8  jump       L1     // L1 に移動
||&lt;
関数の最初ではローカル変数 a と i を準備していることが分かる。

ここまでのバイトコードは、「外バージョン」も「中バージョン」も同じだった。&lt;strong&gt;ローカル変数は宣言した場所によらず、関数の冒頭で確保される&lt;/strong&gt;ようだ。

**for を抜けるチェック
次、L1 の処理を見ていく。
&gt;|javascript|
L1:
// i &lt; 10
  25 getlocal1         // i (register 1)をスタックに積む
  26 pushbyte   10     // 10 をスタックに積む
  28 iflt       L2     // スタック上の2つの値を比較して、
                       // i が小さければ L2 にジャンプする

  32 returnvoid        // void を返す
||&lt;
i &lt; 10 である限りは、L2 にジャンプし続けるわけですな。実はここも、外バージョンと中バージョンで同じ。

**いよいよ for の中を解析
最後に L2。ここで外と中の違いがでてくる。

まずは中バージョン（&lt;code&gt;var a:Object = new Object()&lt;/code&gt;）。
&gt;|javascript|
L2:
  12  label

// a = new Object()
  13 findpropstrict  Object
  15 constructprop   Object (0) // new Object() する
  18 coerce          Object     // Object にキャストする
  20 setlocal2                  // a (register 2) に代入

// i++
  21 getlocal1        // i (register 1) をスタックに取り出す
  22 increment_i      // スタック1番上を 1 加算する
  23 convert_i        // スタック1番上を int にキャストする
  24 setlocal1        // スタック1番上を register 1 に代入
||&lt;
素直な感じ。

次は外バージョン（&lt;code&gt;a = new Object()&lt;/code&gt;）。
&gt;|javascript|
// var c:* = new Object()
  13 findpropstrict  Object
  15 constructprop   Object (0) // new Object() する
  18 dup                        // スタック上で複製する
  19 setlocal3                  // pop して register 3 に代入

// a = (new の結果)
  20 coerce    Object // スタック1番上を Object にキャストする
  22 setlocal1        // a (register 2) に代入

// c = null
  23 getlocal3        // c (register 3) をスタックに複製する
  24 kill      3      // register 3 を undefined に初期化する
  26 pop              // スタックの1番上を取り除く

// i++
  27 getlocal2        // i (register 1) をスタックに取り出す
  28 increment_i      // スタック1番上を 1 加算する
  29 convert_i        // スタック1番上を int にキャストする
  30 setlocal2        // スタック1番上を register 1 に代入
||&lt;
ということで、new の結果を一時変数 var c:* に代入したような扱いになっている。

一時変数がどこからでてくるのかがよく分からなかったが、もしかしたら、
&gt;|javascript|
x = y = new Object();
||&lt;
のような構文で &lt;code&gt;y = new Object()&lt;/code&gt; の結果を &lt;code&gt;x&lt;/code&gt; に代入するための一時オブジェクトなのかもしれない。

C++ でいうコピーコンストラクタと代入演算子の違いのような感じ。

**バイトコードを見た感想
こうやって見ると、
&gt;|javascript|
// 中バージョン
function foo1():void{
  for(var i:int = 0; i &lt; 10; i++){
    var a:Object = new Object();
  }
}
||&lt;
の方が
&gt;|javascript|
// 外バージョン
function foo2():void{
  var a:Object;
  for(var i:int = 0; i &lt; 10; i++){
    a = new Object();
  }
}
||&lt;
よりも多少効率がよかった。とはいえ、ほんとうに些細な違いであり、無視していいレベルのはずだ。普通にコードを書いたら、ボトルネックは別の場所に出てくるだろう。

**結論
-AS3 は関数スコープ
-書きやすいほうで書け

</body>
<comments>
<comment>
<username>nanto_vi</username>
<body>ECMAScript 3.1は(個人的な印象では)バグ修正 + リファクタリング的な性格が強く、letのような大きな変更は含まれません。</body>
<timestamp>1232595726</timestamp>
</comment>
<comment>
<username>ryu-one</username>
<body>初めまして、僕も気になったので調べてみました。&lt;br&gt;結果、変わりませんでした。&lt;br&gt;&lt;br&gt;ベンチマーク結果&lt;br&gt;&lt;br&gt;foo1関数&lt;br&gt;実行回数：1000000(10を1000000に変更)&lt;br&gt;メモリサイズ：1394Byte～1397Byte&lt;br&gt;  430ms&lt;br&gt;  433ms&lt;br&gt;  427ms&lt;br&gt;  434ms&lt;br&gt;  433ms&lt;br&gt;&lt;br&gt;&lt;br&gt;foo2関数&lt;br&gt;実行回数：1000000(10を1000000に変更)&lt;br&gt;メモリサイズ：1395Byte～1398Byte&lt;br&gt;  435ms&lt;br&gt;  427ms&lt;br&gt;  433ms&lt;br&gt;  432ms&lt;br&gt;  436ms&lt;br&gt;&lt;br&gt;環境はFlashCS4(Win)/FP10です。</body>
<timestamp>1232633375</timestamp>
</comment>
</comments>
</day>
<day date="2009-01-23" title="">
<body>
*abcdump_build*[tamarin]Tamarin の abcdump.as から abcdump.exe を作成する方法 2009年1月版
abcdump.exe を作った方法をメモしておく。Windows での話。

完成品の abcdump.exe はこちら。
-http://tech.nitoyon.com/misc/abcdump20090123.zip

**使い方
&gt;|
abcdump xxxx.abc
|&lt;

**xxxx.abc って何？
ABC は ActionScript ByteCode のこと。SWF の中には ActionScript のソースコードを abc に変換したものが埋め込まれている。

xxxx.abc を作成するには次のような２つの方法がある。
***asc.jar を使って xxxx.as から変換する
-このあとの 3. あたりを参照
-Sprite とか MovieClip とかを含むコードは asc.jar ではビルドできないはず
***既存の SWF から abc を取り出す
-SWF からがんばって abc を取り出す方法
-（参考）&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080401/swfassist_abcdump&quot;&gt;OSS で SWF をデコンパイルする(2) - swfassist と abcdump で亜流デコンパイラ - てっく煮ブログ&lt;/a&gt;

**（追記）Mac OS X 版と Flash 10 対応版も登場
:Mac OS X 版:&lt;a href=&quot;http://www.noridon.net/weblogs/archives/2009/01/mac_os_xtamarin.html&quot;&gt;Mac OS Xで(も)tamarinのabcdump.asからabcdump.exeを作る：nod::ぶろぐ:RIA::Flex/AIR/Flash&lt;/a&gt;
:Flash 10 対応版 (Windows 用):&lt;a href=&quot;http://d.hatena.ne.jp/yukoba/20090129/p1&quot;&gt;Adobe AlchemyはFlashの隠し命令を使っているみたい - yukobaの日記&lt;/a&gt;

.


以下、abcdump.exe の作り方。
====
**1. Tamarin のソースコードを入手する
+Mercurial をインストールしていない場合は hg.exe を導入する (ダウンロード元：&lt;a href=&quot;http://www.selenic.com/mercurial/wiki/index.cgi/BinaryPackages&quot;&gt;BinaryPackages - Mercurial&lt;/a&gt;)
+hg を実行してソースを拾ってくる。&lt;pre&gt;$ hg clone http://hg.mozilla.org/tamarin-central tamarin-central&lt;/pre&gt;
+落ちてくるまでしばし待つ

（参考） &lt;a href=&quot;https://developer.mozilla.org/ja/Tamarin_Build_Documentation&quot;&gt;Tamarin Build Documentation - MDC&lt;/a&gt;

**2. asc.jar を入手する
&lt;a href=&quot;http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK&quot;&gt;Flex SDK&lt;/a&gt; の lib フォルダに入ってる。

全部持ってくるのが面倒な人は、SVN 上の http://opensource.adobe.com/svn/opensource/flex/sdk/branches/3.2.0/lib/ からダウンロードするといいと思う。

**3. abcdump.as から abcdump.abc を作る
+tamarin-central/core/builtin.as を abc に変換する&lt;pre&gt;java -jar asc.jar core\builtin.as&lt;/pre&gt;
+tamarin-central/shell/ByteArray.as を abc に変換する&lt;pre&gt;java -jar asc.jar -import core\builtin.abc shell\ByteArray.as&lt;/pre&gt;
+tamarin-central/utils/abcdump.as を abc に変換する&lt;pre&gt;java -jar asc.jar -import core\builtin.abc -import shell\ByteArray.abc utils\abcdump.as&lt;/pre&gt;

java の実行に失敗する場合は java のバージョンが古いのかも。&lt;a href=&quot;http://www.java.com/ja/download/&quot;&gt;最新の JRE をダウンロード&lt;/a&gt;しておくべし。

（参考） &lt;a href=&quot;http://www.5etdemi.com/blog/archives/2007/01/as3-decompiler/&quot;&gt;5 1/2 blog ≫ AS3 decompiler&lt;/a&gt;

**4. avmplus で実行
abcdump.abc を実行するには avmplus.exe が必要。avmplus.exe は tamarin のソースを Visual C++ でビルドしたら作れるのだけど、Flex SDK のソースに&lt;a href=&quot;http://opensource.adobe.com/svn/opensource/flex/sdk/branches/3.2.0/in/as/win/&quot;&gt;付いてくる&lt;/a&gt;ので今回はこれを使う。

&gt;|
avmplus abcdump.abc -- xxxx.abc
|&lt;

**5. avmplus と結合して abcdump.exe を作る
avmplus がないと動かないのが面倒なので、avmplus と結合して abcdump.exe を作っちゃう。
&gt;|
java -jar asc.jar -exe avmplus.exe -import core\builtin.abc -import shell\ByteArray.abc utils\abcdump.as
|&lt;
これで abcdump.exe ができた。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090122/block_scope_abc&quot;&gt;ActionScript3 ブロックスコープの ABC - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080401/swfassist_abcdump&quot;&gt;OSS で SWF をデコンパイルする(2) - swfassist と abcdump で亜流デコンパイラ - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080311/avmplus&quot;&gt;Tamarin Central の avmplus を VC++ 2005 でビルドする - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080308/asc_build&quot;&gt;Flex SDK の asc をビルドしてみた - てっく煮ブログ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070213/p1&quot;&gt;Tamarin の avmplus.exe に独自関数を実装 - てっく煮ブログ&lt;/a&gt;
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2009-01-27" title="">
<body>
*on_lisp*[book]On Lisp 読書中
&lt;a href=&quot;http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/&quot;&gt;On Lisp 邦訳&lt;/a&gt; が Web 上で公開されていたので読んでみた。
-http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/
-PDF版: http://user.ecc.u-tokyo.ac.jp/~tt076524/onlisp_j.pdf

On Lisp は &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/nitoyoncom-22/ref=nosim&quot;&gt;ハッカーと画家&lt;/a&gt; などの名著で有名な Paul Graham 氏の Lisp 本。&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/nitoyoncom-22/ref=nosim&quot;&gt;ハッカーと画家&lt;/a&gt; の中で Lisp が絶賛されていたので前から気になっていた。

いちおう Lisp 経験者のための本なんだけど、初心者向けの変な説明がなくて、初心者な自分にもわかりやすかった。Lisp 自体の経験はないんだけど、Lisp の影響を大きく受けたとされる Ruby や JavaScript の知識はあるので、いまのところ置き換えながら読めてますよ。

いきなり、関数、λ（無名関数）、高階関数（関数を引数）から説明しだすところがとても好感が持てる。

[asin:4274066371:detail]

[asin:4274065979:detail]

以下、読書メモ

**2. 関数
いきなり、defun と lambda の違い(分かりやすすぎる!)

|*.|*defun|*lambda|
|*定義|(defun x (引数) ...)|(lambda (引数) ...)|
|*実行するには|(x 渡す引数)|((lambda (引数) ...) 渡す引数)|
|*実体を取り出す|#'x|#'(lambda (引数) ...)|
|*シンボル|'x|なし|

apply, funcall
-JavaScript の知識があれば違和感ない

属性で OOP
-メソッドはオブジェクトのプロパティが関数であるにすぎない

レキシカルスコープ と ダイナミックスコープ
-レキシカルスコープ
--Common Lisp はこれ
--JavaScript もこれ
-ダイナミックスコープ
--スタックをたどる

末尾最適への書き方


**3. 関数的プログラミング
reverse を定義
-オレオレ reverse を書いてみた。
&gt;|lisp|
(defun myreverse (lst &amp;optional acc)
  (if (null lst) acc
    (myreverse (cdr lst) (cons (car lst) acc))))
||&lt;

非破壊的にしましょう
-破壊的なもの set setq setf psetf psetq incf decf push pop pushnew rplaca rplacd rotatef shiftf remf remprop remhash let* は意識して使う
-クォート付きオブジェクトを直接返すと、呼出後に返り値に破壊的な操作をされる可能性がある
-副作用を隔離するとすっきりするよ

多値
-values で返す
-mapliple-value-bind で受け取る

**4. ユーティリティ関数
本題とは関係ないけど &lt;code&gt;'(a b)&lt;/code&gt; は &lt;code&gt;(list 'a 'b)&lt;/code&gt; と同じかな。

具体例がどんどん出てくる。コードを読む前に自分で考えてみるが難しい。

飛ばし気味に読み進める。

</body>
<comments>
<comment>
<username>knenet</username>
<body>xyzzyの挙動で確認した限りでは、&#39;(a b)と(list &#39;a &#39;b)は違いますよ。前者はリスト（のポインタ）を指定してるので、中身の変更が反映されます。後者はリストをその場で作るので、そうはなりません。手前味噌ですが、http://d.hatena.ne.jp/knenet/20090107/1231295230 で触れてます。</body>
<timestamp>1233139205</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。そういえば、On Lisp にも &#39;(a b) を戻り値に返しちゃダメって書いてました！　なるほど！！</body>
<timestamp>1233245264</timestamp>
</comment>
</comments>
</day>
<day date="2009-01-28" title="">
<body>
*as3_simple_parser*[as3]10分で書ける、お手軽パーサーを AS3 で
&lt;a href=&quot;http://fxp.hp.infoseek.co.jp/arti/parser.html&quot;&gt;10分で書ける、お手軽パーザー&lt;/a&gt; にて C++ での数式パーサーが50行ほどで実装されていたので、これを AS3 で書き直してみた。

これが完成品。

&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FSimpleRecursiveDescentParsing.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=300&amp;amp;title=Simple+Recursive+Descent+Parsing+&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上がインストールされていれば、ここに Flash が表示されます)&lt;/noscript&gt;&lt;

数式を書き換えたらその場で計算してくれる。簡易 eval みたいな感じ。

再帰下降法と聞いてもピンと来なかったんだけど、移植する過程で理解が深まっていった。本家の説明が大変分かりやすいので、詳しい仕組みについては &lt;a href=&quot;http://fxp.hp.infoseek.co.jp/arti/parser.html&quot;&gt;10分で書ける、お手軽パーザー&lt;/a&gt; のほうをごらんあれ。

あ、オリジナルでは -3 などのマイナスのつく数字が扱えなかったので、自分で修正してみた。

以下、AS3 版のソースコード（97行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Simple Recursive Descent Parsing 
// see also: http://fxp.hp.infoseek.co.jp/arti/parser.html 
package{ 
import flash.display.*; 
import flash.events.Event; 
import flash.text.*; 

[SWF(backgroundColor=&quot;#ffffff&quot;)] 
public class SimpleRecursiveDescentParsing extends Sprite{ 
    public function SimpleRecursiveDescentParsing(){ 
        var parser:Parser = new Parser(); 

        var output:TextField = new TextField(); 
        output.x = 10; output.y = 40; 
        output.autoSize = &quot;left&quot;; 
        addChild(output); 

        var input:TextField = new TextField(); 
        input.border = true; 
        input.x = 10; input.y = 10; 
        input.width = 200; input.height = 20; 
        input.type = &quot;input&quot;; 
        input.text = &quot;5 * (1 + 2)&quot;; 
        input.addEventListener(&quot;change&quot;, function(event:*):void{ 
            try{ 
                output.text = parser.parse(input.text); 
                output.textColor = 0x000000; 
            }catch(e:Error){ 
                output.text = e.toString(); 
                output.textColor = 0xff0000; 
            } 
        }); 
        input.dispatchEvent(new Event(&quot;change&quot;)); 
        addChild(input); 
        scaleX = scaleY = 2; 
    } 
} 
} 

class Parser{ 
    private var pos:int; 
    private var str:String; 

    public function parse(s:String):String{ 
        str = s.replace(/ /g, &quot;&quot;); 
        pos = 0; 
        return expr().toString(); 
    } 

    // Expr = Term { (+|-) Term} 
    private function expr():int{ 
        var ret:int = term(); 
        while(true){ 
            switch(str.charAt(pos)){ 
                case &quot;+&quot;: pos++; ret += term(); break; 
                case &quot;-&quot;: pos++; ret -= term(); break; 
                default:  return ret; 
            } 
        } 
        return 0; // never comes here 
    } 

    // Term = Fact { (*|/) Fact} 
    private function term():int{ 
        var ret:int = fact(); 
        while(true){ 
            switch(str.charAt(pos)){ 
                case &quot;*&quot;: pos++; ret *= fact(); break; 
                case &quot;/&quot;: pos++; ret /= fact(); break; 
                default:  return ret; 
            } 
        } 
        return 0; // never comes here 
    } 

    // Fact = ( Expr ) | - Fact | number 
    private function fact():int{ 
        var ret:int; 
        var m:Array; 
        if((m = str.substr(pos).match(/^(\d+)/))){ 
            pos += m[1].length; 
            return parseInt(m[1]); 
        } 
        else if(str.charAt(pos) == &quot;-&quot;){ 
            pos++; 
            return -fact(); 
        } 
        else if(str.charAt(pos) == &quot;(&quot;){ 
            pos++; 
            ret = expr(); 
            if(str.charAt(pos) != &quot;)&quot;) throw new Error(&quot;No match for )&quot;); 
            pos++; 
            return ret; 
        } 
        throw new Error(&quot;invalid format&quot;); 
    } 
} 
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>mxg</username>
<body>つ http://wonderfl.kayac.com/code/1af5769693a65bca37c876bd5684dd9f335088fc&lt;br&gt;動かしてみたかったんです！</body>
<timestamp>1233198611</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>こっそりここに投稿してました！　http://wonderfl.kayac.com/code/71588b479653ca2876762c46989ce78934b7597a</body>
<timestamp>1233231220</timestamp>
</comment>
</comments>
</day>
<day date="2009-01-29" title="">
<body>
*as3_parser*[as3]10分で書いたパーサーを3時間かけて機能を増やした
昨日つくった &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090128/as3_simple_parser&quot;&gt;10分で書ける、お手軽パーザーを AS3 で&lt;/a&gt; が予想外に簡単だったので、練習用に機能を増やしていった。

ECMA-262 3rd Edition の &lt;a href=&quot;http://www2u.biglobe.ne.jp/~oz-07ams/prog/ecma262r3/11_Expressions.html&quot;&gt;11 式 (Expressions)&lt;/a&gt; の仕様を参考に、主要な演算子をサポートしてみた。10分で書いたやつのノリでどんどん実装していっただけ。目新しいことは何もない。

代入演算子（=, += など）以外は実装できたはず。代入演算子はバックトラックが発生するので、現状の実装では対応できない。

例によって、値を変更するとその場で計算してくれる。

&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FComplexRecursiveDescentParsing.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=200&amp;amp;title=Complex+Recursive+Descent+Parsing+&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上がインストールされていれば、ここに Flash が表示されます)&lt;/noscript&gt;&lt;

ここまで作って、条件演算子（A ? B : C）を処理するときに、A が true でも false でも B と C を評価してしまうことに気づいた。いまのところ、B も C も副作用はないから問題ないんだけど、なんかかっこ悪い。

if 文なんかも実装していくとしたらこのままでは無理だ。パースするときに構文木を作るだけにして、その後に構文木を元に評価していくようにしなきゃいけない。なるほど、世間一般のパーサーの実装に近づいていく。

ソースコードは以下に(334行)。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Complex Recursive Descent Parsing
// see also: http://fxp.hp.infoseek.co.jp/arti/parser.html
// 
package{
import flash.display.*;
import flash.events.Event;
import flash.text.*;

[SWF(backgroundColor=&quot;#ffffff&quot;)]
public class ComplexRecursiveDescentParsing extends Sprite{
    public function ComplexRecursiveDescentParsing(){
        var parser:Parser = new Parser();

        var output:TextField = new TextField();
        output.x = 5; output.y = 40;
        output.autoSize = &quot;left&quot;;
        addChild(output);

        var input:TextField = new TextField();
        input.border = true;
        input.x = input.y = 5;
        input.width = 190; input.height = 20;
        input.type = &quot;input&quot;;
        input.text = &quot;1 * 4 &gt; 2 &amp;&amp; 3 % 2 == 1 ? 100 / 3 : 3&quot;;
        input.addEventListener(&quot;change&quot;, function(event:*):void{
            try{
                output.text = parser.parse(input.text);
                output.textColor = 0x000000;
            }catch(e:Error){
                output.text = e.toString();
                output.textColor = 0xff0000;
            }
        });
        input.dispatchEvent(new Event(&quot;change&quot;));
        addChild(input);

        scaleX = scaleY = 2;
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;
    }
}
}

class Parser{
    private var pos:int;
    private var str:String;
    private var m:Array;

    private function Is(fn:Function):Boolean{
        var old_pos:int = pos;
        fn();
        if(pos != old_pos){
            pos = old_pos;
            return true;
        }
        return false;
    }

    public function parse(s:String):String{
        str = s.replace(/ /g, &quot;&quot;);
        trace(str);
        pos = 0;
        return ExpressionStatement().toString();
    }

    private function ExpressionStatement():Object{
        return Expression();
    }

    // Expression = AssignmentExpression { , AssignmentExpression }
    private function Expression():Object{
        var ret:Object = AssignmentExpression();
        while(str.charAt(pos) == &quot;,&quot;){
            pos++;
            ret = AssignmentExpression();
        }
        return ret;
    }

    // TODO: assignment
    // AssignmentExpression = ConditionalExpression 
    private function AssignmentExpression():Object{
        return ConditionalExpression();
    }

    // ConditionalExpression = LogicalORExpression
    //    | LogicalORExpression ? AssignmentExpression : AssignmentExpression
    private function ConditionalExpression():Object{
        var ret:Object = LogicalORExpression();

        if(str.charAt(pos) == &quot;?&quot;){
            var b:Boolean = Boolean(ret);
            var tmp:Object;
            pos++;
            tmp = AssignmentExpression();
            if(b) ret = tmp;

            if(str.charAt(pos) != &quot;:&quot;) throw new Error(&quot;Conditional Operator: no :&quot;);
            pos++;
            tmp = AssignmentExpression();
            if(!b) ret = tmp;
        }

        return ret;
    }

    // LogicalORExpression = LogicalANDExpression { || LogicalANDExpression }
    private function LogicalORExpression():Object{
        var ret:Object = LogicalANDExpression();
        while(str.substr(pos).match(/^\|\|/)){
            pos += 2;
            ret ||= LogicalANDExpression();
        }
        return ret;
    }

    // LogicalANDExpression = BitwiseORExpression { &amp;&amp; BitwiseORExpression }
    private function LogicalANDExpression():Object{
        var ret:Object = BitwiseORExpression();
        while(str.substr(pos, 2) == &quot;&amp;&amp;&quot;){
            pos += 2;
            ret &amp;&amp;= BitwiseORExpression();
        }
        return ret;
    }

    // BitwiseORExpression = BitwiseANDExpression { | BitwiseANDExpression }
    private function BitwiseORExpression():Object{
        var ret:Object = BitwiseXORExpression();
        while(str.substr(pos).match(/^\|[^|]/)){
            pos += 1;
            ret = int(ret) | int(BitwiseXORExpression());
        }
        return ret;
    }

    // BitwiseXORExpression = BitwiseANDExpression { ^ BitwiseANDExpression }
    private function BitwiseXORExpression():Object{
        var ret:Object = BitwiseANDExpression();
        while(str.substr(pos).match(/^\^/)){
            pos += 1;
            ret = int(ret) ^ int(BitwiseANDExpression());
        }
        return ret;
    }

    // BitwiseANDExpression = EqualityExpression { &amp; EqualityExpression }
    private function BitwiseANDExpression():Object{
        var ret:Object = EqualityExpression();
        while(str.substr(pos).match(/^&amp;[^&amp;]/)){
            pos += 1;
            ret = int(ret) &amp; int(EqualityExpression());
        }
        return ret;
    }

    // EqualityExpression = RelationalExpression { (==|!=|===|!==) RelationalExpression }
    private function EqualityExpression():Object{
        var ret:Object = RelationalExpression();

        while((m = str.substr(pos).match(/^(===|!==|==|!=)/))){
            switch(m[1]){
                case &quot;==&quot;:  pos += 2; ret = ret ==  RelationalExpression(); break;
                case &quot;!=&quot;:  pos += 2; ret = ret !=  RelationalExpression(); break;
                case &quot;===&quot;: pos += 3; ret = ret === RelationalExpression(); break;
                case &quot;!==&quot;: pos += 3; ret = ret !== RelationalExpression(); break;
            }
        }

        return ret;
    }

    // RelationalExpression = ShiftExpression { (&lt;|&gt;|&lt;=|&gt;=) ShiftExpression }
    private function RelationalExpression():Object{
        var ret:Object = ShiftExpression();

        while((m = str.substr(pos).match(/^(&lt;|&gt;|&lt;=|&gt;=)/))){
            switch(m[1]){
                case &quot;&lt;&quot;:  pos += 1; ret = ret &lt;  ShiftExpression(); break;
                case &quot;&gt;&quot;:  pos += 1; ret = ret &gt;  ShiftExpression(); break;
                case &quot;&lt;=&quot;: pos += 2; ret = ret &lt;= ShiftExpression(); break;
                case &quot;&gt;=&quot;: pos += 2; ret = ret &gt;= ShiftExpression(); break;
            }
        }

        return ret;
    }

    // ShiftExpression = AdditiveExpression { (&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;) AdditiveExpression }
    private function ShiftExpression():Object{
        var ret:Object = AdditiveExpression();

        while((m = str.substr(pos).match(/^(&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;)/))){
            switch(m[1]){
                case &quot;&lt;&lt;&quot;:  pos += 2; ret = int(ret) &lt;&lt; uint(AdditiveExpression()); break;
                case &quot;&gt;&gt;&quot;:  pos += 2; ret = int(ret) &gt;&gt; uint(AdditiveExpression()); break;
                case &quot;&gt;&gt;&gt;&quot;: pos += 3; ret = uint(ret) &gt;&gt;&gt; uint(AdditiveExpression()); break;
            }
        }

        return ret;
    }

    // AdditiveExpression = MultiplicativeExpression { (+|-) MultiplicativeExpression}
    private function AdditiveExpression():Object{
        var ret:Object = MultiplicativeExpression();

        while((m = str.substr(pos).match(/^(\+|-)/))){
            switch(m[1]){
                case &quot;+&quot;: pos++; ret = Number(ret) + Number(MultiplicativeExpression()); break;
                case &quot;-&quot;: pos++; ret = Number(ret) - Number(MultiplicativeExpression()); break;
            }
        }

        return ret;
    }

    // MultiplicativeExpression = UnaryExpression { (*|/|%) UnaryExpression}
    private function MultiplicativeExpression():Object{
        var ret:Object = UnaryExpression();

        while((m = str.substr(pos).match(/^(\*|\/|%)/))){
            switch(m[1]){
                case &quot;*&quot;: pos++; ret = Number(ret) * Number(UnaryExpression()); break;
                case &quot;/&quot;: pos++; ret = Number(ret) / Number(UnaryExpression()); break;
                case &quot;%&quot;: pos++; ret = Number(ret) % Number(UnaryExpression()); break;
            }
        }

        return ret;
    }

    // UnaryExpression = (delete|void|typeof|++|--|+|-|~|!) UnaryExpression 
    //   | PostfixExpression
    private function UnaryExpression():Object{
        if((m = str.substr(pos).match(/^(delete|void|typeof|\+\+|--|\+|-|~|!)/))){
            switch(m[1]){
                case &quot;delete&quot;: throw new Error(&quot;not implemented: delete&quot;);
                case &quot;void&quot;:   UnaryExpression(); return undefined;
                case &quot;typeof&quot;: pos += 6; return typeof UnaryExpression();
                case &quot;++&quot;:     throw new Error(&quot;not implemented: ++&quot;);
                case &quot;--&quot;:     throw new Error(&quot;not implemented: --&quot;);
                case &quot;+&quot;:      pos += 1; return Number(UnaryExpression());
                case &quot;-&quot;:      pos += 1; return -Number(UnaryExpression());
                case &quot;~&quot;:      pos += 1; return ~Number(UnaryExpression());
                case &quot;!&quot;:      pos += 1; return !Number(UnaryExpression());
            }
        }
        return PostfixExpression();
    }

    // TODO: Skipped some expressions
    // PostfixExpression = PrimaryExpression 
    private function PostfixExpression():Object{
        return PrimaryExpression();
    }

    // PrimaryExpression = this | Identifier | Literal | ArrayLiteral | ObjectLiteral
    //   | ( Expression )
    private function PrimaryExpression():Object{
        var ret:Object;
        var s:String = str.substr(pos);
        if(s.substr(0, 4) == &quot;this&quot;){
            throw new Error(&quot;not implemented: this&quot;);
        }
        else if(s.charAt(0) == &quot;(&quot;){
            pos++;
            ret = ExpressionStatement();
            if(str.charAt(pos) != &quot;)&quot;) throw new Error(&quot;No match for )&quot;);
            pos++;
            return ret;
        }
        else if(s.charAt(0) == &quot;[&quot;){
            throw new Error(&quot;not implemented: [ ]&quot;);
        }
        else if(s.charAt(0) == &quot;{&quot;){
            throw new Error(&quot;not implemented: { }&quot;);
        }
        else if(Is(Literal)){
            return Literal();
        }

        throw new Error(&quot;invalid format&quot;);
    }

    // Literal :: 
    //   NullLiteral 
    //   BooleanLiteral 
    //   NumericLiteral 
    //   StringLiteral 
    private function Literal():Object{
        if(Is(NullLiteral)){
            return NullLiteral();
        }
        if(Is(BooleanLiteral)){
            return BooleanLiteral();
        }
        if(Is(NumericLiteral)){
            return NumericLiteral();
        }
        return null;
    }

    // NullLiteral = null
    private function NullLiteral():Object{
        if(str.substr(pos, 4) == &quot;null&quot;){
            pos += 4;
            return null;
        }
        return undefined;
    }

    // BooleanLiteral = true | false
    private function BooleanLiteral():Object{
        if(str.substr(pos, 4) == &quot;true&quot;){
            pos += 4;
            return true;
        }else if(str.substr(pos, 5) == &quot;false&quot;){
            pos += 5;
            return false;
        }
        return undefined;
    }

    // TODO: HexDigit and ExponentialPart are not supported
    // NumericLiteral
    private function NumericLiteral():Object{
        if((m = str.substr(pos).match(/^([\d\.]+)/))){
            pos += m[1].length;
            return parseFloat(m[1]);
        }
        return undefined;
    }
}
||&lt;
&gt;&lt;/div&gt;

</body>
</day>
<day date="2009-01-30" title="">
<body>
*as3_parser_node*[as3]パーサーが生成する構文木を木にしてみた
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090129/as3_parser&quot;&gt;昨日の実験&lt;/a&gt;で、構文木を作らなきゃなーと思い知ったので作ってみた。

ただ作るだけじゃ面白くないので、木として描画してみることにした。これが成果物。
&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FParseNode.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=450&amp;amp;title=Parse+Node&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上がインストールされていれば、ここに Flash が表示されます)&lt;/noscript&gt;&lt;
-数式を編集するとその場で木が再描画されます。
-＋－×÷()しかサポートしてません。

複雑な例だとちょっと分かりにくいので、1+2*3 などとしてみると分かりやすいかと。
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090130/20090130031441.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

木構造は木で図示するに限りますね。

(参考文献) &lt;a href=&quot;http://www.sumita-planning.jp/~shunta/elementary/squeak/fractal-explain.html&quot;&gt;フラクタルについて&lt;/a&gt;

ソースコードは以下に(157行)。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Parse Node
// see also: http://fxp.hp.infoseek.co.jp/arti/parser.html
package{
import flash.display.*;
import flash.events.Event;
import flash.text.*;

[SWF(backgroundColor=&quot;#ffffff&quot;)]
public class ParseNode extends Sprite{
    private const THETA:Number = .6;
    private const RATIO:Number = .6;
    private const SIZE:Number = 180;
    private const WIDTH:Number = 15;
    private const CIRCLE_R:Number = 10;
    private var canvas:Sprite;

    public function ParseNode(){
        var parser:Parser = new Parser();

        addChild(canvas = new Sprite());

        var input:TextField = new TextField();
        input.border = true;
        input.x = 10; input.y = 10;
        input.width = 180; input.height = 20;
        input.type = &quot;input&quot;;
        input.text = &quot;1*(2+3)+4/5+6+7*(-8+9)&quot;;

        input.addEventListener(&quot;change&quot;, function(event:*):void{
            while(canvas.numChildren) canvas.removeChildAt(0);
            canvas.graphics.clear();

            try{
                var result:Object = parser.parse(input.text)
                draw(result, 100, 500, -Math.PI);
            }catch(e:Error){
            }
        });
        input.dispatchEvent(new Event(&quot;change&quot;));
        input.scaleX = input.scaleY = 2;
        addChild(input);

        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;
    }

    private function draw(result:Object, x:Number, y:Number, angle:Number, ratio:Number = 1, f:Boolean = false):void{
        canvas.graphics.lineStyle(WIDTH * ratio, 0x994c00, 1, false, &quot;normal&quot;, &quot;none&quot;);
        canvas.graphics.moveTo(x, y);
        x += SIZE * ratio * Math.sin(angle);
        y += SIZE * ratio * Math.cos(angle);
        canvas.graphics.lineTo(x, y);

        var isBranch = result is Array;
        if(isBranch){
            angle += (Math.random() - .5) * .2;
            if(result.length &gt; 1) draw(result[1], x, y, angle, ratio * RATIO, !f);
            angle += THETA * (f ? 1 : -1)
            if(result.length &gt; 2) draw(result[2], x, y, angle, ratio * RATIO, !f);
        }

        ratio = Math.pow(ratio, .8);
        if(isBranch){
            canvas.graphics.lineStyle(.2 * WIDTH * ratio, 0x994c00);
            canvas.graphics.beginFill(0xffffff);
            canvas.graphics.drawCircle(x, y, CIRCLE_R * ratio);
            canvas.graphics.endFill();
        }else{
            var leaf:Leaf = new Leaf();
            leaf.x = x;
            leaf.y = y;
            leaf.rotation = -angle / Math.PI * 180;
            leaf.scaleX = leaf.scaleY = CIRCLE_R * ratio;
            canvas.addChild(leaf);
        }

        var tf:TextField = new TextField();
        tf.autoSize = &quot;left&quot;;
        tf.text = (result is Array ? result[0] : result.toString());
        tf.scaleX = tf.scaleY = ratio * 4;
        tf.x = x;
        tf.y = y - ratio * 8;
        tf.selectable = false;
        canvas.addChild(tf);
    }
}
}

import flash.display.*;

class Leaf extends Sprite{
    public function Leaf(){
        graphics.beginFill(0x006600);
        graphics.drawEllipse(-2, -4, 4, 8);
        graphics.endFill();
    }
}

class Parser{
    private var pos:int;
    private var str:String;

    public function parse(s:String):Object{
        str = s.replace(/ /g, &quot;&quot;);
        pos = 0;
        return expr();
    }

    // Expr = Term { (+|-) Term}
    private function expr():Object{
        var ret:Object = term();
        while(true){
            switch(str.charAt(pos)){
                case &quot;+&quot;: pos++; ret = [&quot;+&quot;, ret, term()]; break;
                case &quot;-&quot;: pos++; ret = [&quot;-&quot;, ret, term()]; break;
                default:  return ret;
            }
        }
        return 0; // never comes here
    }

    // Term = Fact { (*|/) Fact}
    private function term():Object{
        var ret:Object = fact();
        while(true){
            switch(str.charAt(pos)){
                case &quot;*&quot;: pos++; ret = [&quot;*&quot;, ret, fact()]; break;
                case &quot;/&quot;: pos++; ret = [&quot;/&quot;, ret, fact()]; break;
                default:  return ret;
            }
        }
        return 0; // never comes here
    }

    // Fact = ( Expr ) | - Fact | number
    private function fact():Object{
        var ret:Object;
        var m:Array;
        if((m = str.substr(pos).match(/^(\d+)/))){
            pos += m[1].length;
            return parseInt(m[1]);
        }
        else if(str.charAt(pos) == &quot;-&quot;){
            pos++;
            return [&quot;-&quot;, fact()];
        }
        else if(str.charAt(pos) == &quot;(&quot;){
            pos++;
            ret = [&quot;( )&quot;, expr()];
            if(str.charAt(pos) != &quot;)&quot;) throw new Error(&quot;No match for )&quot;);
            pos++;
            return ret;
        }
        throw new Error(&quot;invalid format&quot;);
    }
}
||&lt;
&gt;&lt;/div&gt;

</body>
</day>
<day date="2009-02-02" title="">
<body>
*hatebu_nenkan200901*[はてブ年鑑][jQuery][JavaScript]はてブ年鑑2009年1月分うｐ と jQuery.remove() の高速化話
2009年1月分を集計してアップロードしておいた。
-http://tech.nitoyon.com/hatebu_nenkan/

先月までは「SEO」「CMS」といった技術系のキーワードが必ず TOP10 にランクインしてたのに今月は見当たらない。いちおう「データベース」とか「配色」といったキーワードは出てきてはいるんだけど、専門用語ではないのが印象的だ。対して台頭したのが料理ネタ。衣食住に関係するネタが増えてきて技術色が薄くなっているような気がする。

あくまで気がするだけなので、カテゴリ別の割合遷移といったものを算出したら興味深い結果になるかもしれない。やろうと思えばできるんだけど、ここ最近は自分の興味が実装よりも勉強のほうによってきたので手は止まっている。

**おまけ：jQuery の remove の話
関係ないけど、ページの JavaScript 初期化をちょっと速くした。jQuery.remove() を自前で removeChild するようにしたら 600ms→1ms ぐらいになった。

jQuery の remove() は子孫ノードを全て列挙して、イベントやデータを削除していくので、子孫ノードがたくさんある場合には時間かかる。はてブ年鑑では歴代の記録を全部 HTML で保持しているので、再帰的なノード列挙は、かなりの無駄な処理だったようだ。

もちろん、jQuery を使ってイベント登録したり、data() を呼んでたりした場合には jQuery.remove() を使ったほうがメモリリークしないから安心だろう。それでも、イベントとか data() を使ってなかったり、初期化の段階だったら、めんどうだけど &lt;code&gt;elm.parentNode.removeChild(elm)&lt;/code&gt; としたほうがかなり速いのは覚えておいたほうがよいかもしれない。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20081210/hatebu_nenkan_release:title]
-[http://d.hatena.ne.jp/nitoyon/20090202/hatebu_nenkan200901:title]
-[http://d.hatena.ne.jp/nitoyon/20090106/nenkan2008:title]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2009-02-03" title="">
<body>
*ansicl_chm*ANSI Common Lisp の仕様書を HTML Help にした
Amazon から &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274066371/nitoyoncom-22/ref=nosim&quot;&gt;On Lisp&lt;/a&gt; の本も届き、&lt;a href=&quot;http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/&quot;&gt;On Lisp Web 版&lt;/a&gt; と合わせて読み進めているのだけど、Common Lisp の知識がある前提で書かれていてつらい。

こういうときは仕様書が頼り。Common Lisp の仕様書を探したら &lt;a href=&quot;http://www.franz.com/support/documentation/&quot;&gt;Franz Inc Product Documentation&lt;/a&gt; に発見。ANSI Specification のリンクをたどると &lt;a href=&quot;http://www.franz.com/support/documentation/8.1/ansicl/ansicl.htm&quot;&gt;ANSI Common Lisp&lt;/a&gt; に行き着く。まとめてダウンロードもできてありがたいんだけど、いかんせん生の HTML だと使い勝手が悪い。

ということで、HTML Help（CHM）にしてみましたよっと。

Alt-N→関数名→Enter で定義に行き着けて大変幸せ。読書効率があがりました。あとは理解していくだけ…。

-http://tech.nitoyon.com/misc/ansicl-chm.zip&lt;br&gt;&lt;a href=&quot;http://tech.nitoyon.com/misc/ansicl-chm.zip&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090203/20090203015728.png&quot;&gt;&lt;/a&gt;

[asin:4274066371:detail]
</body>
<comments>
<comment>
<username>tmp</username>
<body>ありがとう！つかわせてもらいます！！</body>
<timestamp>1233668158</timestamp>
</comment>
<comment>
<username>naoya_t</username>
<body>GJ!</body>
<timestamp>1234246285</timestamp>
</comment>
<comment>
<username>karasu</username>
<body>これは便利ですね。ありがたく使わせていただきます。</body>
<timestamp>1234378001</timestamp>
</comment>
<comment>
<username>sato</username>
<body>いただきました！ありがとうございます。</body>
<timestamp>1251211056</timestamp>
</comment>
<comment>
<username>nohohoii</username>
<body>ありがとうございます！使わせていただきます</body>
<timestamp>1295789462</timestamp>
</comment>
<comment>
<username>kaz</username>
<body>使わせて頂きます。ありがとうございます。</body>
<timestamp>1326324972</timestamp>
</comment>
</comments>
</day>
<day date="2009-02-05" title="">
<body>
*on_lisp2*On Lisp 続き 6章～9章
&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274066371/nitoyoncom-22/ref=nosim&quot;&gt;On Lisp&lt;/a&gt; を読みつつのメモだったり感想だったりの続き。いよいよマクロへ。

**6. 表現としての関数
-Lisp でネットワークを定義する。
-DSL だなぁ、すごい。

**7. マクロ
いよいよマクロ。
-逆クォート
--,で打ち消し、,@で展開
--マクロ展開時に引数に置き換えてほしいものの前に , や ,@ をつけるイメージ
-マクロ展開の確認
--xyzzy には pprint がないので展開を確認できない
--&lt;a href=&quot;http://www.shido.info/lisp/macro1.html&quot;&gt;テンプレートの使い方と展開形の確認&lt;/a&gt; に対応方法が書いてある
--けど、ここからは clisp で確認していくことにする
-構造化代入
--よく分からないのでパス
-マクロのモデル
--defmacro の簡易実装が書いてある
--が、理解できない…。ひとまずパス。
-関数からマクロへ
--単純に変換できない場合の対処法
 + のマクロ版が
&gt;|lisp|
(defmacro sum (&amp;rest args)
  `(apply #'+ (list ,@args)))
||&lt;
と定義されていたが、これでもいけた。
&gt;|lisp|
(defmacro mysum (&amp;rest args)
  `(funcall #'+ ,@rest))
||&lt;

***いつマクロを使うべきか

-基本はマクロ
-マクロが必要なときはマクロ
--いつ必要かを説明していくよ

***マクロにしかできないこと
引数の評価を抑制する。

On Lisp に出てきた while を使ってみる。
&gt;|lisp|
(let ((x 10) (sum 0)) 
  (while (&gt; x 0) 
    (incf sum x)
    (decf x)) sum)
||&lt;
すごく手続きっぽい書き方になってしまったが、while の中の setq は x の値によって呼ばれる回数が変わってくる。全く評価されないかもしれない。

+変形(setfパターン)
--setf は引数として与えられた値に書き込む
--&lt;pre&gt;(let ((x '(3 4))) (setf (car x) 9) x)  ; (9 4)&lt;/pre&gt;
--第一引数を見て判断するのでマクロでないとできない
+束縛
--let や setq などのレキシカルな束縛を変更する処理はマクロが必須
+条件分岐
--条件が満たされたときのみ評価するにはマクロが必須
--&lt;code&gt;(if t (print 3) (print 4))&lt;/code&gt; で 4 が表示されては困る。if が関数なら呼び出す時点で評価されてしまう。
+複数回の評価
--while など、ループのたびに評価されるようにするにはマクロが必須。
+呼び出し側環境の利用
--呼ばれた場所のコンテキストに応じた変数を使える
--これは危険。通常は使うな。 (On Lisp の本では継続とATNコンパイラで利用している)
+新しい環境を包み込む
--ちょっと分からん。保留。
+関数呼び出しの節約
--インラインでも同じ

悩むような微妙なケース。

avg のサンプル
&gt;|lisp|
&gt;(defmacro avg (&amp;rest args)
  `(/ (+ ,@args) ,(length args)))
&gt; (pprint (macroexpand-1 '(avg 10 11 12)))
; (/ (+ 10 11 12) 3)
||&lt;
コンパイル時には長さが固定された状態になっている。

長所まとめ：
+コンパイル時計算
--一部をコンパイル時に展開できる。上の avg みたいな。
--詳細は13章
+Lisp との連携
--一部を Lisp に任せられる。DSL などで有利。
--よく分からんが詳細は19章とのこと
+関数呼び出しの節約
--inline でも同じだけど。
短所まとめ：
+マクロを渡せない
--apply に関数を渡すことはできるけど、マクロを渡すことはできない。
--lambda で擬似的に再現することはできるが不便。
+読みにくい
+デバッグしにくい
+再帰が難しい (→10.4 章)

長所と短所のバランスが大事。

***で、どう使うの？
-構文変換として使うよ。
--よくあるパターンをマクロで定義すれば、処理が明確になって嬉しいよね。
--defun も lambda で生成した関数を symbol-function で登録しているに過ぎない
-DSLとして使うよ。
--「再描画しつつ○○する」の共通武運を with-redraw マクロで実装
--(雑感) lambda でもできなくはなさそうだが、ソースはすっきりするのかな

**9. 変数捕捉
マクロ引数の捕捉
-マクロに渡された変数名が内部で宣言してる変数とかぶってしまう。
-マクロ内で定義したスコープに本来の値が奪われてしまう。
-で、どうしたらいいの？はあとで

フリーシンボルの捕捉
-グローバルなつもりで使っている変数名が、マクロを展開した場所で既に使われている。
-で、どうしたらいいの？はあとで

-フリー
--束縛されていないこと
--スコープ内に定義がない
-骨格
--マクロ呼び出し時の引数を取り除いたもの
--バッククォートを使っている場合は ,x のようなカンマがつくものを取り除いたのが骨格

捕捉可能の定義。
+あるシンボルが骨格内にフリーなまま登場する
--gripe の例
+マクロの引数が束縛または評価される骨格の一部に、あるシンボルが束縛されている
--for の例

for の例を解決するいろんな方法を取り上げる
-別の let に入れる
-gensym する
-lambda に入れる

</body>
</day>
<day date="2009-02-06" title="">
<body>
*silverlight2_trial*[silverlight]Silverlight 2 でちょっとしたアプリケーションをデザイナと作った話
先週のことになりますが、会社でデザイナーさんと一緒に Silverlight 2 アプリケーションを開発してみました。

&gt;&lt;center&gt;&lt;a href=&quot;http://lab.co-conv.jp/blog/2009/02/02/Default.html&quot;&gt;&lt;img alt=&quot;20090202_sanmoku.jpg&quot; src=&quot;http://lab.co-conv.jp/blog/2009/02/02/20090202_sanmoku.jpg&quot; width=&quot;310&quot; height=&quot;233&quot;&gt;&lt;br&gt;完成品（４色３目並べ）&lt;/a&gt;&lt;/center&gt;&lt;

デザイナーとプログラマーの感想は会社のブログに書いています。
-&lt;a href=&quot;http://lab.co-conv.jp/blog/2009/02/silverlight2.html&quot;&gt;デザイナー側の感想&lt;/a&gt;
-&lt;a href=&quot;http://lab.co-conv.jp/blog/2009/02/silverlight2_programmer.html&quot;&gt;プログラマー側（私）の感想&lt;/a&gt;

ブログの方にも書いてますが、とても快適に開発することができました。いままで HTML とか Flex でストレスに感じていたことをほとんど解消してくれる気がします。

あと、デザイナーさんが Expression Blend を試すところを横で見ていたのですが、Photoshop や Illustrator を使える人ならば大きな苦労もなく馴染めるようです。ちょっとした操作感の違いはありますが、予想したよりも短い時間で使いこなしている様子に驚きました。

Adobe も Expression Blend にあたる Flash Catalyst（旧 Thermo）を開発中のようですが、それまでは Silverlight のほうが開発環境ではリードしているような印象を受けました。少なくとも、今、Flex を使って上のようなゲームを作れ、といわれると「ムリ！」って答えてしまいます…。
</body>
<comments>
<comment>
<username>naoki0311</username>
<body>今まで、開発生産性が高いです。と書かれていたSilverlightで、実際.NET開発者はそうだよなぁ。と思ってたと思いますが、Web開発者+デザイナ視点の具体的な（作業内容的な）例が無く完成系ばかり見ていたので、今回のBlogの内容素晴らしかったです。&lt;br&gt;&lt;br&gt;どちらの視点からのメリットや、始めて触れる場合のポイントとかも一度触れてる側からはイメージしやすかったです。&lt;br&gt;&lt;br&gt;ただ、おっしゃる通り開発環境的に優れてるのがSiverlightのメリットであり、デザイナにとっての優位性にはなりかねるんですよねぇ。</body>
<timestamp>1233866647</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>コメントありがとうございます。&lt;br&gt;&lt;br&gt;&gt; デザイナにとっての優位性にはなりかねるんですよねぇ。&lt;br&gt;&lt;br&gt;あとからデザイナが見た目の調整をできる、というのは大きなメリットでした。&lt;br&gt;&lt;br&gt;デザインをする上で「Blend でなければできないこと」はほとんどないかもしれませんが、全体の作業フローが改善するので、そこは優位性といっていいと思います。</body>
<timestamp>1233882690</timestamp>
</comment>
</comments>
</day>
<day date="2009-02-10" title="">
<body>
*caravan2008_kyoto*[event]セキュリティ＆プログラミングキャンプキャラバン京都2008に行ってみた
2月7日の京大でやってた「&lt;a href=&quot;http://www.jipdec.or.jp/camp/caravan/kyoto.html&quot;&gt;セキュリティ＆プログラミングキャンプキャラバン京都2008&lt;/a&gt;」に行ってみた。人が多くて(80人ぐらいだったらしい)盛り上がってました。志の高い学生さんみたいな人がいっぱいいて活気がありました。

**プログラミング基礎
ミラクルリナックスの吉岡さん(id:hyoshiok:detail)の入門心構え。

「ソースコード読むチカラ」が重要ですよ、という話が印象的だった。同感。他人のソースを読んで理解して真似できるかどうかが決めてだと思います。私も読んでる時間のほうが長いなぁ。

最後の質疑応答で「何を読めばいいか」といった質問があったけど、やっぱり数をこなすしかないところもある。色んなコード読んでるうちに、これはきれいだなー、とか、ほーそんなやり方が！といった驚きに出会える。いきなり Linux とか Apache とかのソースを読むのは荷が重過ぎるので、最初は自分の興味のあるジャンルの数百行程度のサンプルみたいなやつをいじり始めるのがいいんじゃないでしょうか。

質問していた人は「Apache のソースを読んでみたが分からなかった」といってたので、それなら Apache 拡張を読んでみる書いてみるとか、lighttpdを読んでみるとか（Apacheよりかはシンプルかなと思っただけ。詳しくないので嘘かもしれない）、簡単な Web サーバを作ってみようサンプルを拡張してみるとか…。ちなみに、ActionScript の良質なサンプル探すなら wonderfl がオススメ。

**プログラミング応用
サイボウズラボ竹迫さん(id:TAKESAKO:detail)。JavaScript を中心とした Web 技術をざっくり紹介。

相変わらず発表がうまいと思いました。細かい突っ込み。TraceMonkey のあとに Tamarin にみたいな話をしていたけど、Firefox には Tamarin 本体がのることはないはず。あと、サーバーサイド JS だと Rhino あたりにも触れておいたほうがよいと思った。

**情報セキュリティ基礎
サイバー大学の園田さん(id:sonodam:detail)からセキュリティの概要。セキュリティの基礎。何がセキュアか。昼過ぎの眠気が…すいません。

**セキュリティ応用
最後はネットエージェントのはせがわさん(id:hasegawayosuke:detail)による UTF-8 の話。ずっと前にスライドはざっとみたことあったけど、生で聞くとやっぱり面白い。MS にバグ報告したときの回答（仕様です）とそのときの本音。

要約：0x5c と 0xA5 が両方 \ で、ANSI にコンバートすると両方 0x5c になる。コンバート前にチェックしてても無駄だよ。

**おまけ
&lt;a href=&quot;http://atnd.org/events/292&quot;&gt;IT勉強会カレンダーのはなずきん♪さんに感謝状を贈ろう！&lt;/a&gt;の表彰式が実施された。

id:hanazukin:detail さんに感謝状が贈呈されました。これからもよろしくお願いします。

ちなみに、IT勉強会カレンダーでぐぐると、
-１位：id:hasegawayosuke:detail さんの IT勉強会カレンダー検索
-２位：私の紹介記事
-３位：id:hakobe932:detail さんの絞込みスクリプト
-４位：@IT の記事
-５位：@IT の記事
-６位：やっと本家
という結果に。おぉ、１～３位の人が会場にいるじゃないか。

それはそうと、Google さん、本家（https://www.google.com/calendar/embed?src=fvijvohm91uifvd9hratehf65k@group.calendar.google.com）を１位にしてあげてください…！

&lt;a href=&quot;https://www.google.com/calendar/embed?src=fvijvohm91uifvd9hratehf65k@group.calendar.google.com&quot;&gt;IT勉強会カレンダー&lt;/a&gt;　&lt;a href=&quot;https://www.google.com/calendar/embed?src=fvijvohm91uifvd9hratehf65k@group.calendar.google.com&quot;&gt;勉強会の情報ならIT勉強会カレンダー&lt;/a&gt;　&lt;a href=&quot;https://www.google.com/calendar/embed?src=fvijvohm91uifvd9hratehf65k@group.calendar.google.com&quot;&gt;IT勉強会カレンダーで勉強会に参加しよう&lt;/a&gt;
</body>
</day>
<day date="2009-02-12" title="">
<body>
*flashcontent_noscript*[as3]&amp;lt;div id=&quot;flashcontent&quot;&amp;gt;の中身も…
&lt;a href=&quot;http://www.trick7.com/blog/2009/02/11-233001.php&quot;&gt;trick7 - 地図を使った「N-04A」スペシャルサイト&lt;/a&gt; にて紹介されていた N-04A のサイトがいい感じですね。

自分の知る限り、Google Maps API for Flash を前面に押し出した最初のキャンペーンサイトです。しっかりと作り込んでいて、地図と Flash の連携も大変面白いです。

が、詰めが甘かった。JavaScript オフで見ると…

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090212/20090212015723.png&quot; border=&quot;1&quot; width=&quot;450&quot; height=&quot;188&quot;&gt;&lt;/center&gt;&lt;

あぎゃー。なんじゃこれーと思ってぐぐってみると、&lt;a href=&quot;http://gihyo.jp/dev/feature/01/progression/0004&quot;&gt;Flashのフレームワーク「Progression3」を始めてみよう！：第4回　Progression3でWebサイトを作る（前編）｜gihyo.jp&lt;/a&gt; の &lt;a href=&quot;http://gihyo.jp/assets/files/dev/feature/01/progression/0004/deploy/index.html&quot;&gt;サンプルサイト&lt;/a&gt; が引っかかりました。なるほど、これをベースに作成したんですね！

私は普段、JavaScript オフで生活しているので、こういう面白い事例に出会いやすいです。JavaScript オフのとき用のページもしっかり作りこんであると好印象ですね。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連記事
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080930/swfobject_copy&quot;&gt;代替テキスト(SEO対策) または 代替画像 - てっく煮ブログ&lt;/a&gt;
&gt;&lt;/div&gt;&lt;

*cl_eval_mindmap*[lisp]Common Lisp 仕様書の Evaluation Model を読んでマインドマップにまとめた
ANSI Common Lisp の &lt;a href=&quot;http://www.franz.com/support/documentation/6.0/ansicl/subsecti/theevalu.htm&quot;&gt;3.1.2 The Evaluation Model&lt;/a&gt; あたりを読みつつ、Common Lisp が S式をどのように評価するかを理解してみました。

マインドマップを書きながら読んでいきました。できあがったのはこんなの。あまり自信ないのでなんか変なこと書いてたら教えてください。
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090212/20090212004414_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090212/20090212004414.png&quot; width=&quot;450&quot; height=&quot;214&quot; alt=&quot;Common Lisp Evaluation Model&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

こうやって図にしてみると、評価の手順は本当にシンプルなことに驚きます。すごいなぁ。

**マインドマップについて
マインドマップは &lt;a href=&quot;http://www.xmind.net/&quot;&gt;XMind&lt;/a&gt; という Eclipse ベースのフリーのツールを使って描いてみました。ほとんどの操作がキーボードでできるのがよかったです。ただ、ダウンロードするためにはアカウント登録が必要で、登録すると &lt;a href=&quot;http://share.xmind.net/&quot;&gt;XMind Share&lt;/a&gt; で公開するためのアカウントがついてきて、探した限りでは退会できませんでした。なんという強制参加…。せっかくなので、今回作ったものを http://share.xmind.net/nitoyon/xmind-819696/ にアップロードしておきました。生の xmind ファイルもここからダウンロードできますよ。

マインドマップ初挑戦でしたが、作った人が思い出すには便利なメモ方法だと思いました。問題は他人に伝わるか。分類はできるんだけど、分類の意図が伝わりにくい印象です。マインドマップを他人に見せるときには、しっかり推敲して、それでも伝わりにくそうだったら注釈や補足を付け加えたほうがよさそうです。
</body>
</day>
<day date="2009-02-16" title="">
<body>
*lisp_macro_what_are_you_doing*[lisp]Common Lisp のマクロが何をやってるか把握する
Common Lisp のマクロの背後で何が行われているのかがいまいち分からなかったので、少し詳しく見ていくことにした。

&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4274066371/nitoyoncom-22/ref=nosim&quot;&gt;On Lisp&lt;/a&gt; の&lt;a href=&quot;http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/macros.html&quot;&gt;7章 マクロ&lt;/a&gt; には、&lt;code&gt;defmacro&lt;/code&gt; と &lt;code&gt;macroexpand-1&lt;/code&gt; の内部処理を Lisp でエミュレートしたコードが紹介されている。
&gt;|lisp|
(defmacro our-expander (name) `(get ,name 'expander))

(defmacro our-defmacro (name parms &amp;body body)
  (let ((g (gensym)))
    `(progn
       (setf (our-expander ',name)
             #'(lambda (,g)
                 (block ,name
                        (destructuring-bind ,parms (cdr ,g)
                          ,@body))))
       ',name)))

(defun our-macroexpand-1 (expr)
  (if (and (consp expr) (our-expander (car expr)))
      (funcall (our-expander (car expr)) expr)
      expr))
||&lt;

7章の冒頭に登場する &lt;code&gt;nil!&lt;/code&gt; を &lt;code&gt;our-defmacro&lt;/code&gt; を使って定義したとしよう。
&gt;|lisp|
(our-defmacro nil! (var) `(setq ,var nil))
||&lt;

このとき、いったいどういう処理が実施されてるんだろう。それ理解するのが今回の趣旨。

====
**our-defmacro がすること
our-defmacro はマクロなので、&lt;code&gt;(our-defmacro nil! (var) `(setq ,var nil))&lt;/code&gt; は次のように展開される。
&gt;|lisp|
(progn
  (setf (our-expander 'nil!)
        #'(lambda (#:G3123)
            (block nil!
                   (destructuring-bind (var) (cdr #:G3123)
                   `(setq ,var nil)))))
  'nil!)))
; #:G3123 が gensym で定義されたシンボルだとしておく
||&lt;
&lt;code&gt;progn&lt;/code&gt; では２つの式を順番に評価している。１つ目が &lt;code&gt;setf&lt;/code&gt; で２つ目が &lt;code&gt;'nil!&lt;/code&gt; だ。

２つ目の結果が &lt;code&gt;progn&lt;/code&gt; の評価結果となるので、この式の戻り値はシンボル &lt;code&gt;nil!&lt;/code&gt; となる。

１つ目の &lt;code&gt;setf&lt;/code&gt; のところを見ていこう。&lt;code&gt;our-expander&lt;/code&gt; マクロが登場してるのでこれも展開してみる。
&gt;|lisp|
  (setf (get 'nil! 'expander) #'(lambda (#:G3123) (...)) )
||&lt;
&lt;code&gt;nil!&lt;/code&gt; シンボルの &lt;code&gt;expander&lt;/code&gt; プロパティに lambda を設定している。この lambda は ANSI Common Lisp の仕様書で expansion function と定義されているものに該当するようだ。

expansion function は「マクロを展開する処理」を実装した関数である。マクロ評価時に expansion function がどうやって呼ばれるかを見ていこう。

**expansion function はどう呼ばれるか
expansion function を呼び出すのは &lt;code&gt;our-macroexpand-1&lt;/code&gt; だ。こいつを見ていく。
&gt;|lisp|
(defun our-macroexpand-1 (expr)
  (if (and (consp expr) (our-expander (car expr)))
      (funcall (our-expander (car expr)) expr)
      expr))
||&lt;
この関数は &lt;code&gt;(our-macro-expand '(nil! x))&lt;/code&gt; のように呼び出す。

１行目の &lt;code&gt;if&lt;/code&gt; では、引数のチェックをしている。
+&lt;code&gt;expr&lt;/code&gt; が &lt;code&gt;cons&lt;/code&gt; であるか？
+&lt;code&gt;car expr&lt;/code&gt;（つまり &lt;code&gt;'nil!&lt;/code&gt;）に &lt;code&gt;expand&lt;/code&gt; プロパティが定義されているか？

&lt;code&gt;'(nil! x)&lt;/code&gt; はこの条件を満たすので、晴れて２行目が評価される。

２行目は、&lt;code&gt;(funcall [expansion function] expr)&lt;/code&gt; を実施している。ここで expansion function が呼ばれている。引数は &lt;code&gt;expr&lt;/code&gt; だ。

つまり、expansion function は &lt;code&gt;'(nil! x)&lt;/code&gt; を引数に呼び出されることが分かった。

**expansion function の定義を見つつ、our-macroexpand-1 の結果を追う
引数が分かったところで、expansion function の動きを追っていく。

expansion function を再掲しておく。この関数の引数が &lt;code&gt;'(nil! x)&lt;/code&gt; である。
&gt;|lisp|
  #'(lambda (expr)
      (block nil!
             (destructuring-bind (var) (cdr expr)
             `(setq ,var nil)))))
||&lt;

&lt;code&gt;(block nil! ...)&lt;/code&gt; では &lt;code&gt;nil!&lt;/code&gt; という名前のブロックを定義してる。この構文のおかげで、マクロの中で &lt;code&gt;return-from nil!&lt;/code&gt; を実行できるわけだ。

次の、&lt;code&gt;destructuring-bind&lt;/code&gt; は &lt;code&gt;var&lt;/code&gt; に引数の &lt;code&gt;cdr&lt;/code&gt; を代入してる。ただの代入じゃなくて、構造化代入を使ってるが、詳しくは、On Lisp の &lt;a href=&quot;http://user.ecc.u-tokyo.ac.jp/~tt076524/onlispjhtml/destructuring.html&quot;&gt;18. 構造化代入&lt;/a&gt; に書いてあるのでここでは触れない。

ということで、ブロックの中を整理すると、次のような評価になる。
&gt;|lisp|
  (destructuring-bind (var) (x) `(setq ,var nil))
||&lt;
シングルクォートで書き直すとこうなる。
&gt;|lisp|
  (destructuring-bind (var) (x) (list 'setq var 'nil))
||&lt;
さらに &lt;code&gt;let&lt;/code&gt; で書き直すとこうなる。
&gt;|lisp|
  (let ((var x))
    (list 'setq var 'nil))
||&lt;

つまり、expansion function の評価結果は
&gt;|lisp|
(setq x nil)
||&lt;
である。

**おわりに
マクロの説明なのにマクロを使ってるのが少し気持ち悪いが、処理系内で何が起こってるかを説明するためにはこのような書き方になるんだと思う。

実際に処理系がマクロを評価する場合、&lt;code&gt;our-macroexpand-1&lt;/code&gt; で展開した結果のリストを再度評価する。つまり、&lt;code&gt;(setq x nil)&lt;/code&gt; を評価して、実際に &lt;code&gt;x&lt;/code&gt; に &lt;code&gt;nil&lt;/code&gt; が代入される。もし、マクロの評価結果のリストがマクロなら、もう一度、上記のような処理を実施するわけだ。

ちなみに、&lt;code&gt;our-expander&lt;/code&gt; にあたる関数は Common Lisp では  &lt;code&gt;macro-function&lt;/code&gt; が用意されている。こいつにシンボル名を渡せば expansion function を取得できる。

[asin:4274066371:detail]

</body>
</day>
<day date="2009-02-17" title="">
<body>
*polygon_monalisa*[as3]「50個のポリゴンでモナリザ」を AS3 で
&lt;a href=&quot;http://www.nitenichiryu.org/articles/image-evolution-with-canvas&quot;&gt;ニテンイチリュウ : Image Evolution&lt;/a&gt; 経由で知った Image Evolution を試してみた。50個の半透明なポリゴンを塗り重ねてモナリザに近づけてみよう、という試みだ。

仕組みは単純。ランダムに配置したポリゴンをランダムに変形させたり色を変えたりしてみて、モナリザの画像の色に近づけば採用、そうでなければ止める。これだけ。微分してとか、輪郭抽出してとか、そういう賢いことは何もやらない。単に力任せにシミュレーションし続けている。

手元の環境で動かしたらこんな感じになった。
[f:id:nitoyon:20090217014358j:image]

壮大なる CPU の無駄使い。だが面白い。

いちおう Flash も貼っておく。が、猛烈にブラクラなので扱いは慎重に。

&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FMonalisaEvolve.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=420&amp;amp;title=embed+flash&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上がインストールされていれば、ここにFlashが表示されますよ)&lt;/noscript&gt;&lt;

高速化のために、BitmapData.compare() といったビルトインのメソッドを使っているので、Firefox 3 で &lt;a href=&quot;http://alteredqualia.com/visualization/evolve/&quot;&gt;canvas 版&lt;/a&gt; よりも10倍ぐらい速く動いた。オリジナルの &lt;a href=&quot;http://rogeralsing.com/2008/12/11/genetic-programming-mona-lisa-source-code-and-binaries/&quot;&gt;C# 版&lt;/a&gt; は、さらに3倍ぐらい速い。しかもポリゴン数や節点数もランダムに動かしてるので、より精度が高いような気がする。

ソースコードは以下に(189行)。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package{
import flash.display.*;
import flash.text.*;
import flash.geom.*;
import flash.filters.ColorMatrixFilter;
import flash.utils.setInterval;

[SWF(backgroundColor=&quot;#eeeeee&quot;)]
public class Evolve extends Sprite{
    [Embed(source='mona_lisa_crop.jpg')]
    private var MonaLisa:Class;
    private var imgWidth:int;
    private var imgHeight:int;

    private const POLYGONS:int = 50;
    private var polygons:Array = [];
    private var mutating:Boolean = false;

    private var monotoneFilter:ColorMatrixFilter = new ColorMatrixFilter([
            1 / 3, 1 / 3, 1 / 3, 0, 0, 
            1 / 3, 1 / 3, 1 / 3, 0, 0, 
            1 / 3, 1 / 3, 1 / 3, 0, 0, 
                0,     0,     0, 1, 0 ]);
    private var pt0:Point = new Point(0, 0);
    private var rect:Rectangle;

    private var bestBmd:BitmapData;
    private var testBmd:BitmapData;
    private var inputBmd:BitmapData;
    private var debugBmd:BitmapData;

    private var canvas:Sprite;

    private var score:uint;
    private var scoreMax:uint;
    private var mutations:uint = 0;
    private var candidates:uint = 0;
    private var totalTime:Number = 0;
    private var time:Date;
    private var scoreText:TextField;

    public function Evolve(){
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        // init image
        var bmp:Bitmap = new MonaLisa();
        inputBmd = bmp.bitmapData;
        addChild(bmp);
        imgWidth = bmp.width;
        imgHeight = bmp.height;
        rect = inputBmd.rect;
        score = scoreMax = rect.width * rect.height * 255;

        // init buffer
        bestBmd = inputBmd.clone(); bestBmd.fillRect(rect, 0x000000);
        testBmd = inputBmd.clone(); testBmd.fillRect(rect, 0x000000);
        debugBmd = inputBmd.clone();
        addChild(new Bitmap(bestBmd)).x = bmp.width + 10;

        // init data and canvas
        canvas = new Sprite();
        for(var i:int = 0; i &lt; POLYGONS; i++){
            polygons[i] = new Polygon();
            canvas.addChild(new Sprite());
        }
        drawTest();
        testToBest();

        // init ui
        var tf:TextField = new TextField();
        tf.text = &quot;click to start&quot;;
        tf.y = bmp.height + 10;
        tf.scaleX = tf.scaleY = 3;
        addChild(tf);
        stage.addEventListener(&quot;click&quot;, function(event:*):void{
            mutating = !mutating;
            time = (mutating ? new Date() : null);
            tf.text = (mutating ? &quot;Now Simulating...&quot; : &quot;click to start&quot;);
        });
        scoreText = new TextField();
        scoreText.autoSize = &quot;left&quot;;
        scoreText.y = bmp.height + 60;
        scoreText.scaleX = scoreText.scaleY = 3;
        addChild(scoreText);

        // start timer
        setInterval(update, 10);
    }

    private function update():void{
        if(!mutating) return;
        var t:Date = new Date();
        totalTime += (t.getTime() - time.getTime()) / 1000;
        time = t;

        for(var i:int = 0; i &lt; 10; i++) update1();
        scoreText.text = (int((1 - score / scoreMax) * 10000) / 100)
             + &quot;%\n&quot; + mutations + &quot; / &quot; + candidates + &quot;\n&quot;
             + (int(totalTime * 10) / 10) + &quot;s&quot;;
    }

    private function update1():void{
        var index:int = Math.random() * POLYGONS;
        var backup:Polygon = polygons[index].clone();
        polygons[index].mutate();
        drawTest();

        var diffBmd:BitmapData = testBmd.compare(inputBmd) as BitmapData;
        diffBmd.applyFilter(diffBmd, rect, pt0, monotoneFilter);
        var testScore:uint = 0;
        for(var i:int = 0; i &lt; 0x100; i++){
            testScore += diffBmd.threshold(diffBmd, rect, pt0, &quot;==&quot;, i, i, 0xff) * i;
        }

        if(score &gt; testScore){
            score = testScore;
            testToBest();
            mutations++;
        }else{
            polygons[index] = backup;
        }
        candidates++;
    }

    private function drawTest():void{
        canvas.graphics.clear();
        for(var i:int = 0; i &lt; POLYGONS; i++){
            polygons[i].draw(canvas, imgWidth, imgHeight);
        }

        testBmd.fillRect(rect, 0x000000);
        testBmd.draw(canvas);
    }

    private function testToBest():void{
        bestBmd.copyPixels(testBmd, rect, pt0);
    }
}
}

import flash.display.*;
import flash.geom.*;

class Polygon{
    private const POINTS:int = 6;

    public var points:Array = [];
    public var color:uint;
    public var alpha:Number;

    public function Polygon(polygon:Polygon = null){
        for(var i:int = 0; i &lt; POINTS; i++)
            points[i] = (polygon ? polygon.points[i].clone() : new Point(Math.random(), Math.random()));
        color = (polygon ? polygon.color : 0xffffff * Math.random());
        alpha = (polygon ? polygon.alpha : .1);
    }

    public function clone():Polygon{
        return new Polygon(this);
    }

    public function mutate():void{
        (Math.random() &lt; 0.5 ? mutateColor() : mutatePosition());
    }

    private function mutateColor():void{
        switch(int(Math.random() * 4)){
            case 0: color = (color &amp; 0x00ffff) + int(Math.random() * 255) * 0x010000; break;
            case 1: color = (color &amp; 0xff00ff) + int(Math.random() * 255) * 0x000100; break;
            case 2: color = (color &amp; 0xffff00) + int(Math.random() * 255) * 0x000001; break;
            case 3: alpha = Math.random(); break;
        }
    }

    private function mutatePosition():void{
        var p:int = Math.random() * POINTS;
        if(Math.random() &lt; .5) points[p].x = Math.random();
        else                   points[p].y = Math.random();
    }

    public function draw(canvas:Sprite, w:Number, h:Number):void{
        canvas.graphics.beginFill(color, alpha);
        canvas.graphics.moveTo(points[0].x * w, points[0].y * h);
        for(var i:int = 1; i &lt; POINTS; i++)
            canvas.graphics.lineTo(points[i].x * w, points[i].y * h);
        canvas.graphics.endFill();
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-02-18" title="">
<body>
*screen_client_transform*スクリーン座標・クライアント座標の変換いろいろ
GUI なコーディングしてると必ず出てくる「スクリーン座標とクライアント座標の変換」。

環境によって名前がバラバラで思い出すのに時間がかかってしまうのでメモしておく。
|*環境|*変換方法|
|ActionScript3|DisplayObject.globalToLocal(pt:Point), DisplayObject.localToGlobal(pt:Point)|
|JavaScript|event.screenX, event.screenY, event.clientX, event.clientY|
|JavaScript (prototype.js)|Position.positionedOffset()|
|Win32|ClientToScreen(), ScreenToClient(), GetWindowRect()|
|WinForms|Control.PointToClient(), Control.PointToScreen()|
|WPF/XAML|MouseEventArgs.GetPosition(IInputElement relativeTo), Visual.TransformToAncestor(Visual ancestor)|
自分が知ってるのはこのへんまで。他の環境ではどんな名前がついてるんだろな。
</body>
</day>
<day date="2009-02-19" title="">
<body>
*object_jquery*[JavaScript]jQuery と object タグの怪
&lt;a href=&quot;http://d.hatena.ne.jp/coma2n/20090218/1234958106&quot;&gt;Silverlightコンテンツを埋め込むｊQueryプラグイン - Programmable Life&lt;/a&gt; で困ってたので一緒に悩んでみた。
&gt;http://d.hatena.ne.jp/coma2n/20090218/1234958106:title&gt;
でも何故かIEでは動かない。誰か動くようにしてけれ！
&lt;&lt;

**object を作れていない？
手元に環境を作って動かしてみると、&amp;lt;object&amp;gt; に &amp;lt;param&amp;gt; を追加するところで JavaScript エラーが出る。状況を切り分けるために、&amp;lt;param&amp;gt; を追加する部分をコメントアウトしてみた。

IE DOM Explorer で眺めてみると DIV タグが追加されている。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090219/20090219004208.png&quot; width=&quot;296&quot; height=&quot;195&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

どうやら
&gt;|javascript|
var obj = $('&lt;object&gt;').attr({ ... });
||&lt;
のところで object タグが作られていないようだ。

jQuery でよく見る現象だ。こういうときは閉じ括弧を入れてあげると大抵うまくいく。
====
&gt;|javascript|
var obj = $('&lt;object/&gt;').attr({ ... });
||&lt;
IE DOM Explorer で確認したら &amp;lt;object&amp;gt; になってた。

**でも、だめ
一歩前進したのでコメントアウトを外してみた。

が、やっぱり append のところでエラーがでる。
&gt;|javascript|
            obj.append( // ←ココ
                $('&lt;param&gt;').attr({
                    name: name,
                    value: value
                })
            );
||&lt;
同じ作戦で &lt;code&gt;&amp;lt;param&amp;gt;&amp;lt;/param&amp;gt;&lt;/code&gt; のようにやってみたが変わらず。

仕方がないので、jQuery の &lt;code&gt;$('&amp;lt;param&amp;gt;')&lt;/code&gt; から呼ばれる clean のソースを読んでみた。

IE で &lt;code&gt;$('&amp;lt;param&amp;gt;')&lt;/code&gt; とすると、内部ではこんな処理をしてる。
&gt;|javascript|
var div = document.createElement(&quot;div&quot;);
div.innerHTML = &quot;div&lt;div&gt;&quot; + html + &quot;&lt;/div&gt;&quot;;
div = div.lastChild;
return jQuery.makeArray( div.childNodes );
||&lt;
空の div タグを作って、その中に innerHTML で HTML 文字列を流し込んで DOM ノードを作成しているようだ。

ここでピーンときた。仕様上は param タグは、本来は object タグの内部にしか入れることができない。なので、&lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;param&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; のような HTML を innerHTML で設定すると、このときに生成される param タグは本来の param タグではなく、何か別のものになってるんじゃないだろうか。だから、object に appendChild すると不正なノードを追加したのでエラーになる。

あくまで想像。

**同じような工夫は歯が立たない
同様の問題は既に jQuery で対応されている。例えば td タグなどを生成するときに単に innerHTML でノード生成するとエラーに出くわすので、一旦 table で囲ってから innerHTML する、といった泥臭いことをしている。

param タグに関しても、同じ仕組みを使えばうまくいくはず、と信じて前後を object タグで囲ってから innerHTML してみた。

が、うまく行かない…。

&gt;|javascript|
// IE7 で検証したよ
div.innerHTML = &quot;&lt;object&gt;&lt;param&gt;&lt;/object&gt;&quot;;
alert(div.innerHTML);  // &lt;OBJECT&gt;&lt;/OBJECT&gt;
div.innerHTML = &quot;&lt;object&gt;&lt;param/&gt;&lt;/object&gt;&quot;;
alert(div.innerHTML);  // &lt;OBJECT&gt;&lt;/OBJECT&gt;
||&lt;
なぜか param が消える。ナゼジャー！

**仕方がないから諦めた
ということで、諦めて次のように置き換えたらうまく行った。
&gt;|javascript|
  $(document.createElement('param')).attr({
||&lt;
jQuery に任せず、自分で作っちゃえ！ということですな。

**そして…
IE DOM Explorer で眺めてみたら、ちゃんと object の中に param が入って理想的な DOM ノードが構築されていた。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090219/20090219004209.png&quot; width=&quot;435&quot; height=&quot;243&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

おお、完璧。

しかし…肝心の Silverlight コンテンツが表示されない。

ナゼダ…。

さらに、代替コンテンツの「Microsoft Silverlight を取得」のリンクもなぜか object ノードに入っていない。上と同じく document.createElement 作戦を試したが、それでもエラー。

不思議だ…。

**まとめ
-object は鬼門
-謎な挙動が多い
-同じようなことを Flash でやる超有名ライブラリの SWFObject は object 全体を innerHTML で作成してる。ソースを読んでてもバッドノウハウの塊っぽい


→ &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090220/object_jquery2&quot;&gt;jQuery と object タグの怪 (その２)&lt;/a&gt; に続く。

</body>
<comments>
<comment>
<username>coma2n</username>
<body>速っ！！&lt;br&gt;&lt;br&gt;やっぱcreateElementで直接作ってやるしかないんですね。でも、それでもIEじゃ表示されないのかー。&lt;br&gt;Silverlight.jsのヘルパー関数を使えってことなのかなー。ちょっと調べてみます。</body>
<timestamp>1235000997</timestamp>
</comment>
<comment>
<username>nanto_vi</username>
<body>http://yupotan.sppd.ne.jp/web/xhtml-multimedia.html#dom-element-ie を参考に、param要素を追加した後でobject要素にtype属性を設定するようにしたら、IE 7でもSilverlightが表示されました。&lt;br&gt;&lt;br&gt;それでも代替内容をobjectの子要素にする方法はわからないので、Silverlightが入っていなければそもそもobjectを作らないという方針にしたほうがよさそうです。Silverlightがインストールされているかの判別には以下が参考になりました。&lt;br&gt;http://blogs.msdn.com/piotrp/archive/2008/05/07/determining-if-silverlight-is-installed-using-javascript.aspx&lt;br&gt;http://blog.inomata.lolipop.jp/?eid=929818</body>
<timestamp>1241972657</timestamp>
</comment>
</comments>
</day>
<day date="2009-02-20" title="">
<body>
*object_jquery2*[JavaScript]jQuery と object タグの怪 (その２)
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090219/object_jquery&quot;&gt;jQuery と object タグの怪&lt;/a&gt; の続き。

**コメントいただきました
コメント欄で id:coma2n:detail さんのコメントを読んで Silverlight.js の存在を思い出した。
&gt;&gt;
Silverlight.jsのヘルパー関数を使えってことなのかなー。ちょっと調べてみます。
&lt;&lt;

Silverlight.js の存在を完全に忘れていたが、過去の自分が書いていた…。
&gt;http://d.hatena.ne.jp/nitoyon/20080516/silverlight_xaml_and_js:title&gt;
silverlight.js は SDK インストール時に C:\Program Files\Microsoft SDKs\Silverlight\v2.0\Tools に展開されている。HTML で書くよりも細かな設定ができる印象だ。いくつかの付加機能も魅力的。Flash での swfobject みたいな感じ。
&lt;&lt;
そういえばそんなものがあったなぁ。

**Silverlight.js を読む
で、さっそく読んでみた。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090220/20090220005441.png&quot; width=&quot;450&quot; height=&quot;381&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

Oh! Obfuscated!!!　読めねー。

こういうときは、偉い人にソースを整形してもらう。なんでもいいんだけど、私は &lt;a href=&quot;http://www.gosu.pl/JsDecoder/&quot;&gt;JsDecoder - javascript decoder - decode obfuscated script&lt;/a&gt; というのを使ってる。
====
出てきたコードがこんな感じ。
&gt;|javascript|
Silverlight.createObject = function (l, g, m, j, k, i, h)
{
    // 最初のほう省略
                slPluginHTML = Silverlight.buildHTML(b, a) ;
    // 間らへんも省略

        if (b.parentElement) {
            b.parentElement.innerHTML = slPluginHTML;
        }
        else {
            return slPluginHTML;
        }
    }
}

Silverlight.buildHTML = function (c, d)
{
    var a = [], e, i, g, f, h;
    if (Silverlight.ua.Browser == &quot;Safari&quot;)
    {
        a.push(&quot;&lt;embed &quot;);
        e = &quot;&quot;;
        i = &quot; &quot;;
        g = '=&quot;';
        f = '&quot;';
        h = ' type=&quot;application/x-silverlight-2-b1&quot;/&gt;' + &quot;&lt;iframe style='visibility:hidden;height:0;width:0'/&gt;&quot;
    }
    else
    {
        a.push('&lt;object type=&quot;application/x-silverlight-2-b1&quot; data=&quot;data:application/x-silverlight-2-b1,&quot;');
        e = &quot;&gt;&quot;;
        i = ' &lt;param name=&quot;';
        g = '&quot; value=&quot;';
        f = '&quot; /&gt;';
        h = &quot;&lt;/object&gt;&quot;
    }
    a.push(' id=&quot;' + c.id + '&quot; width=&quot;' + c.width + '&quot; height=&quot;' + c.height + '&quot;
||&lt;

ってことで、Silverlight.js でも innerHTML 作戦で書いてるようだ。

どうでもいいんですが、Silverlight.js に次のようなコードを発見。
&gt;|javascript|
    if (window.addEventListener) {
        window.addEventListener(&quot;onunload&quot;, Silverlight.__cleanup, false);
    }
    else {
        window.attachEvent(&quot;onunload&quot;, Silverlight.__cleanup);
    }
||&lt;
誰のせいでこの if 文を…と思うと少し悲しくなった。もちろん、Silverlight.js を書いた人には罪はないんでしょうけど、切ないものがある。

(追記)コメント欄で教えてもらいました。http://code.msdn.microsoft.com/silverlightjs に難読化前のソースが公開されているようです。っきさん、ありがとうございます。

**jQuery 1.3 系でも試してみた
次のようなツッコミが。ありがたや。
&gt;http://d.hatena.ne.jp/monjudoh/20090219/1235010981:title&gt;
これ、1.3系では$('&lt;tagname/&gt;')とか$('&lt;tagname&gt;')の場合は

createElementでDOM要素を生成するように変更されましたな。
&lt;&lt;
ソースを見たら本当だった。

ということで、1.3 系で動かしてみたがやっぱりエラー。

原因はこれか。
&gt;http://subtech.g.hatena.ne.jp/mayuki/20090219/1235013299:title&gt;
どうもDocumentFragmentを作ってそれに入れてから実際のオブジェクトに追加されるらしく、object要素にDocumentFragmentを突っ込もうとして死ということみたい。
&lt;&lt;
DocumentFragment ってよく知らんなぁ。勉強せねば。

**今日のまとめ
-Silverlight2.js も innerHTML で作成している
-ブログに分からないことを書いたら色んな人が教えてくれてありがたい
-ブログに書いておくとあとで思い出しやすい

</body>
<comments>
<comment>
<username>っき</username>
<body>最新のSilverlight.js はMSDN Code Gallery でも提供されていて、そっちだとソースが整形済みでコメントもついてます。&lt;br&gt;http://code.msdn.microsoft.com/silverlightjs&lt;br&gt;&lt;br&gt;Silverlightアプリの呼び出し方については、(Beta時代の情報がメインなので少し古い記述もありますが)担当の Piotr Puszkiewicz氏のblogを一通り読むのがオススメです。私もお世話になりました。&lt;br&gt;http://blogs.msdn.com/piotrp/default.aspx</body>
<timestamp>1235093087</timestamp>
</comment>
</comments>
</day>
<day date="2009-02-23" title="">
<body>
*window7_math*Windows 7 の手書き入力は数式も認識するらしい
&lt;a href=&quot;https://partner.microsoft.com/Japan/productssolutions/windows/wiwindows7&quot;&gt;Windows 7 パートナー様向け資料&lt;/a&gt; の &lt;a href=&quot;https://partner.microsoft.com/Japan/productssolutions/windows/40095762&quot;&gt;Windows 7 開発者向けガイド&lt;/a&gt; を何気なく眺めていたら、手書き入力の「数式認識」という項目が目に入った。

手書きで書いた数式を認識した上に、MathML に吐き出してくれるらしい。

&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090223/20090223032409_original.jpg&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090223/20090223032409.jpg&quot; width=&quot;450&quot; height=&quot;396&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

これはすごい。

マルチタッチ機能と同じく Tablet PC でしか利用できないのかなぁ。Windows 7 を試しにインストールした人がいたら教えてほしいです！
</body>
</day>
<day date="2009-02-26" title="">
<body>
*hatebu2_css*[css]はてブのCSSをカスタマイズしてみた その２
はてなブックマークが新しいデザインは気に入っていたのですが、メリハリのきいた色使いに少し飽きてきたので、シンプルなものに変えてみました。

こんな感じです。
&gt;&lt;center&gt;&lt;a href=&quot;http://b.hatena.ne.jp/nitoyon/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090226/20090226012132.jpg&quot; width=&quot;450&quot; height=&quot;390&quot;&gt;&lt;br&gt;b:id:nitoyon&lt;/a&gt;&lt;/center&gt;&lt;

自分が一番知りたいのは「ページのタイトル」だったので、そこを目立たせる感じで配置してみました。

その他のこだわりを4箇所ほど紹介します。

**1. favicon の位置
&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090226/20090226013316.jpg&quot; width=&quot;137&quot; height=&quot;240&quot; border=&quot;1&quot; align=&quot;left&quot; style=&quot;margin-right: 1em&quot;&gt;&lt;

はてなブックマークがリニューアルしてから favicon が表示されるようになりました。これをどう扱うかが悩ましかったのですが、タイトルの横に付けてみました。

デフォルトのデザインのちょっとうるさい印象も緩和できたのではないかと思います。

アイコンを左に出すアイディアは tumblr の&lt;a href=&quot;http://nitoyon.tumblr.com/&quot;&gt;デフォルトのデザイン&lt;/a&gt;から拝借しました。全体的に tumblr っぽく仕上げてます。

&lt;br clear=&quot;all&quot;&gt;
.

**2. ブックマーク数は digg 風に
&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090226/20090226012133.jpg&quot; width=&quot;260&quot; height=&quot;148&quot; align=&quot;right&quot; border=&quot;1&quot; style=&quot;margin: 0 0 1em 1em&quot;&gt;&lt;
ブックマーク数と B! のリンクを &lt;a href=&quot;http://digg.com/&quot;&gt;digg&lt;/a&gt; みたいにしてみました。

本当はもっと凝ったことをやりたかったのですが、はてな側の CSS で ○○users の色や背景に「!important」が指定されていました。

つまり、CSS で ○○users の配色をいじれないのです…。

仕方がないので、苦肉の策で、無理やり横幅と縦幅を指定して digg 風にして個性(?)を出してみました。

&lt;br clear=&quot;all&quot;&gt;

**3. タイトル リンクのちょっとした工夫
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090226/20090226012134.jpg&quot; width=&quot;450&quot; height=&quot;132&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
動きが欲しかったので、タイトル部分にマウスを乗っけるとアニメーション GIF の背景がでかめに動くようにしてみました。

さらに、訪問済みのページにはうっすらとその旨が分かるようなギミックを設けてます。
この説明では伝わりにくいと思うので、詳しくは&lt;a href=&quot;http://b.hatena.ne.jp/nitoyon/&quot;&gt;現物をみて&lt;/a&gt;確認してください。

**4. 動画のサムネイルは大きく
動画のサムネイルもあえて大きくして目立たせてみました。YouTube とニコニコ動画に対応してます。

&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090226/20090226012131.jpg?1235579419&quot; width=&quot;200&quot; height=&quot;196&quot; border=&quot;1&quot;&gt;

**まとめ
喧騒に疲れたのでシンプルに行くことにしました。

ちなみに、初代はてなブックマークの CSS をいじったときの記事はこちら。
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070125/p1&quot;&gt;はてブのCSSをカスタマイズしてみた - てっく煮ブログ&lt;/a&gt;
</body>
</day>
<day date="2009-03-02" title="">
<body>
*hatebu_nenkan200902*[はてブ年鑑]はてブ年鑑2009年2月分
月１恒例(?)、&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; のランキング更新しました。

&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090302/20090302013740.png&quot; width=&quot;450&quot; height=&quot;339&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

「Firefox ノベルティセット」がダブルスコアをつけての堂々１位でした。この手の「ブックマークして○○をもらおう」企画って、はてな以外が主催してもいいんでしょうかね。「ブックマークした人から抽選で10名様に1万円プレゼント」といったイベントをやれば、下手な SEO 業者に頼むよりも効果ありそうだと思ったり思わなかったり。

10位以内には料理ネタが２つ。ここ数ヶ月で料理ネタの常連化してきてるようです。

ちなみに、はてブ年鑑のソースコードは http://github.com/nitoyon/hatebu_nenkan/ あたりにこっそりとコミットしてます。月１で更新するたびにこそこそといじってたりします。

</body>
</day>
<day date="2009-03-03" title="">
<body>
*dp*アルゴリズムイントロダクション輪講 動的計画法の発表資料
2009年3月2日に、はてな京都オフィスで開催された &lt;a href=&quot;http://d.hatena.ne.jp/motemen/20090224/1235486053&quot;&gt;アルゴリズムイントロダクション輪講&lt;/a&gt; の第12回で「動的計画法」について発表しました。

資料をここにおいておきます。

&gt;&lt;center&gt;&lt;div style=&quot;width:425px;text-align:left&quot; id=&quot;__ss_1086077&quot;&gt;&lt;noscript&gt;（Flash Player がインストールされていればここにスライドが表示されます）&lt;/noscript&gt;&lt;object style=&quot;margin:0px&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slideshare.net/swf/ssplayer2.swf?doc=dp-090301060132-phpapp01&amp;stripped_title=ss-1086077&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed src=&quot;http://static.slideshare.net/swf/ssplayer2.swf?doc=dp-090301060132-phpapp01&amp;stripped_title=ss-1086077&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;div style=&quot;font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;&quot;&gt;View more &lt;a style=&quot;text-decoration:underline;&quot; href=&quot;http://www.slideshare.net/&quot;&gt;presentations&lt;/a&gt; from &lt;a style=&quot;text-decoration:underline;&quot; href=&quot;http://www.slideshare.net/nitoyon&quot;&gt;nitoyon&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/center&gt;&lt;

分かりやすくしようと気合を入れてまとめたら165ページの大作になっちゃいました。無駄に長くてすいません。

asin:4764903350:detail
</body>
</day>
<day date="2009-03-06" title="">
<body>
*tdw_review*都道府県大戦にはまった
ここ数日、&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20090303_tdw/&quot;&gt;「信長の野望」のように全47都道府県を制覇する国盗りシミュレーションゲーム「都道府県大戦」 - GIGAZINE&lt;/a&gt; で紹介されていた &lt;a href=&quot;http://suznooto.com/flash/TDW.html&quot;&gt;都道府県大戦&lt;/a&gt;にはまってた。

&gt;&lt;center&gt;&lt;a href=&quot;http://suznooto.com/flash/TDW.html&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090306/20090306015509.png&quot; width=&quot;450&quot; height=&quot;339&quot;&gt;&lt;br&gt;すずぬーと：FLASHゲーム：都道府県大戦&lt;/a&gt;&lt;/center&gt;&lt;

最初は京都でやってみたが、四方八方を囲まれているので身動きができず終了。端っこならば強いかと思い、北海道を選択したが、青森で量産されるゾンビに手が出ず、青森で再スタート。東北を統一してそのままの勢いで全国制覇できた。

その後、初心に帰って京都で全国統一を目指す。最初に近畿制圧を目指したが隣接都道府県が多くて難しい。作戦を変更して、中国地方へと勢力を伸ばしたらうまくいった。中国地方は都道府県が升目上になってるので、全勢力で攻め込んで戻らなくてよいのがポイント。

何はともあれ、かなり楽しませてもらいました。こういうゲームが作れる人はすごいなぁ。

**おまけ：ぜいたくな大玉×25
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090306/20090306015222.png&quot; width=&quot;450&quot; height=&quot;338&quot;&gt;&lt;/center&gt;&lt;

</body>
</day>
<day date="2009-03-09" title="">
<body>
*context_free_try*驚きの表現力のお絵かきプログラミング Context Free Art を試してみた
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308183735.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

文脈自由文法でアートが楽しめる &lt;a href=&quot;http://www.contextfreeart.org/&quot;&gt;Context Free Art&lt;/a&gt; というのを試してみた。

Windows, Mac, Linux などで利用できて、簡単なコードを書けくだけで複雑な幾何学アートを生成してくれる。

**サンプルから１つ
起動後、メニューの Example からいくつかのサンプルを試してみた。

たとえば、木を生成するサンプル「weighting_demo」のソースはこんなの。
&gt;|cpp|
startshape SEED1

rule SEED1 {
 SQUARE{}
 SEED1 {y 1.2 size 0.99 rotate 1.5 brightness 0.03}
}

rule SEED1 0.05 {SEED1 {flip 90}}

rule SEED1 0.05 {
 SQUARE{}
 SEED1 {y 1.2 s 0.99 r 1.5 b -0.5 flip 90}
 SEED1 {y 1.2 x 1.2 s 0.6 r -60 b -0.5}
 SEED1 {y 1.2 x -1.2 s 0.5 r 60 b -0.5 flip 90}
}
||&lt;
それっぽい木を生成してくれる。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308183736.jpg&quot;&gt;
確率的に描画してるので、メニューから Render→Render で再描画すると、また違った見た目の木ができあがる。

こんな簡単なルールの記述で自然界のものを記述できることが驚きだ。自然のものは案外、単純なルールと確率的な振る舞いで出来てるんだろうか。

**文脈自由文法って？
Context Free という名前の通り、文脈自由文法でプログラムを記述する。文脈自由文法については &lt;a href=&quot;http://ja.wikipedia.org/wiki/%E6%96%87%E8%84%88%E8%87%AA%E7%94%B1%E6%96%87%E6%B3%95&quot;&gt;文脈自由文法 - Wikipedia&lt;/a&gt; が詳しいんだけど、小難しくてよく分からん。どうやら、プログラミング言語の文法定義に出てくる「A は A か B」みたいなやつのようだ。BNF も文脈自由文法を記述するための方法らしい。

Context Free Art では文法を定義するような感じで、図形のルールを記述していく。変数や関数もないし、凝ったことはできないんだけど、幾何学模様や木のような自然界のものは短いコードで描画できる。できあがった絵は、ちょっと値を変えるだけで見た目が大幅に変わるし、ちょっとした実験が気軽にできて楽しい。

**ためしに作ってみた
自分でも作ってみようと &lt;a href=&quot;http://d.hatena.ne.jp/propella/20080622/p1&quot;&gt;文脈自由絵画 Context Free Art http://contextfreeart.org - 言語ゲーム&lt;/a&gt; の解説を参考に、改造していった。

&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308183737.png&quot;&gt;

なんかそれっぽいのができた。ソースはこんなの。詳しくは&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090310/context_free_tutorial_uni&quot;&gt;次回&lt;/a&gt;解説する。
&gt;|cpp|
startshape Test

rule Test{
  CIRCLE { h 30 sat 1 b 1 }
  Test { x 1 s .9 r 10  h 30}
}
rule Test{
  Test { flip 180 }
}
rule Test .2{
  Test { flip -30 s .7}
  Test { flip 30 s .7}
  Test {}
}
||&lt;
&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090310/context_free_tutorial_uni:title]
-[http://d.hatena.ne.jp/nitoyon/20090311/context_free_tile:title]
-[http://d.hatena.ne.jp/nitoyon/20090312/context_free_3d:title]
-[http://d.hatena.ne.jp/nitoyon/20090313/context_free_favorite5:title]
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>通りすがり</username>
<body>自己相似と確率なので違うんだろうけど&lt;br&gt;どことなくフラクタルっぽい絵画ですね&lt;br&gt;&lt;br&gt;http://images.google.co.jp/images?q=%E3%83%95%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%AB&amp;lr=lang_ja&amp;oe=utf-8&amp;rls=org.mozilla:ja:official&amp;client=firefox-a&amp;um=1&amp;ie=UTF-8&amp;ei=CQq0Sbu-L5z47APgkIW6BQ&amp;sa=X&amp;oi=image_result_group&amp;resnum=4&amp;ct=title</body>
<timestamp>1236535949</timestamp>
</comment>
</comments>
</day>
<day date="2009-03-10" title="">
<body>
*context_free_tutorial_uni*ウニができるまで ～ Context Free Art の遊び方
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195148.png&quot;&gt;
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090309/context_free_try&quot;&gt;前回&lt;/a&gt;に引き続き、Context Free Art を取り上げる。今回は、Context Free Art で変なウニ風の生き物を作っていく手順を紹介する。

さぁ、準備はいいですか？

**1. 基本となる図形
まずは基本となる図形を描画する。こんなやつ。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195149.png&quot;&gt;

ソースコードは次のようなもの。
&gt;|cpp|
startshape LINE   // LINE というルールを描画しろ

rule LINE {       // ルール LINE の定義
    CIRCLE { s 6 1  x 3 sat 1 b .3 hue 30}
}
||&lt;
１行目の &lt;code&gt;startshepe LINE&lt;/code&gt; では、「&lt;code&gt;LINE&lt;/code&gt; というルールを描画しろ」と指定してる。

じゃあ、&lt;code&gt;LINE&lt;/code&gt; ルールはどうなってるかというと３行目で定義している。

&lt;code&gt;LINE&lt;/code&gt; ルールでは &lt;code&gt;CIRCLE&lt;/code&gt; を１つ描画する。&lt;code&gt;CIRCLE&lt;/code&gt; は Context Free で定義されている円を描画するルールだ。ルールにいくつか追加のパラメータを渡している。詳しく説明するとこうなる。
&gt;|cpp|
rule LINE {
    CIRCLE {    // 以下の条件で円を描く
        s 6 1   // 倍率を横を6倍、縦を1倍に設定
        x 3     // 表示する X 座標を 3 増やす
        sat 1   // HSB の S（彩度）を 100% にする
        b .3    // HSB の B（明度）を 3 割増やす
    }
}
||&lt;

**2. 白抜きにする
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195150.png&quot;&gt;

白い円を小さめに描画して白抜きにした。
====
&gt;|cpp|
startshape LINE

rule LINE {
    CIRCLE { s 6 1  x 3 sat 1 b .3 hue 30}
    CIRCLE { s 5 .2 x 3 sat 0 b 1 } // ← ここを追加
}
||&lt;

**3. 再帰呼び出しで列挙
ここからが面白い。１行追加するだけで劇的に見た目が変わる。触角みたい…。

&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195151.png&quot;&gt;

正体は再帰呼び出し。LINE の中で LINE を定義してる。
&gt;|cpp|
startshape LINE

rule LINE {
    CIRCLE { s 6 1  x 3 sat 1 b .3 hue 30}
    CIRCLE { s 5 .2 x 3 sat 0 b 1 }
    LINE   { s .9   x 3 r 10 a -.1}  // ←ここを追加
}
||&lt;

もうちょっと詳しく説明するとこうなる。右側に少し小さい LINE を回転させながら配置していってる。
&gt;|cpp|
    CIRCLE { s 6 1  x 3 sat 1 b .3 hue 30}
    CIRCLE { s 5 .2 x 3 sat 0 b 1 }
    LINE {     // LINE を以下の条件で表示する
        s .9   // 表示倍率を90%にする
        x 3    // 右に 3 移動する
        r 10   // 10°回転する
        a -.1  // 透明度を 10% 減らす
    }
||&lt;
無限再帰呼び出しになってるんだけど、描画する図形がどんどん小さくなるので、サイズが見えないぐらいに小さくなった時点で描画が止まってくれるようだ。

**4. うねうねさせる
LINE に新たなルールを追加してみる。
&gt;|cpp|
startshape LINE

rule LINE {
    CIRCLE { s 6 1  x 3 sat 1 b .3 hue 30}
    CIRCLE { s 5 .2 x 3 sat 0 b 1 }
    LINE   { s .9   x 3 r 10 a -.1}
}

// ↓ここを追加
rule LINE {
    LINE { flip 180 }  // flip 180 した上で LINE を表示
}
||&lt;
LINE のルールを２つ書いた。同じ名前が２つあると、どちらかのルールが等確率で選ばれる。

flip というのは180度反転するということ。つまり、1/2 の確率で曲がる方向が反転する。

&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195152.png&quot;&gt;

**5. 枝を作る
時々、枝分かれするようにしてみる。次のルールを追加する。
&gt;|cpp|
// 0.3 の割合で選択される
rule LINE .3{
    // そのまま続ける
    LINE {}

    //  30°回転させて 5割の大きさで LINE を描く
    LINE { r  30  s .5 }

    // -30°回転させて 5割の大きさで LINE を描く
    LINE { r -30  s .5 }
}
||&lt;
0.3 の割合でこの枝分かれルールが選択される。こんな感じになる。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195153.png&quot;&gt;

枝がでてきた！　木を描くときも同じようなソースになる。

ちなみに、枝が追加される確率を計算すると、それぞれのルールが
-通常 LINE： 1.0
-反転： 1.0 （4.で追加したルール）
-枝生成： 0.3 （今回追加したルール）
の割合を占めるので、枝が追加されるのは 0.3/2.3 = 0.130... の確率となる。

**6. いっぱい回す
今までは１本だけ描いてたけど、これを大量生産する。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308195155.png&quot;&gt;

START というルールを新たに定義して、&lt;code&gt;startshape&lt;/code&gt; も START に変更する。
&gt;|cpp|
startshape START

rule START{
    60 * { r 6 hue 6} LINE {}
}
||&lt;
&lt;code&gt;START&lt;/code&gt; ルールでは &lt;code&gt;60 * {} LINE {}&lt;/code&gt; という文法で 60 個の LINE を生産している。

１つ目の {} の中がポイント。&lt;code&gt;r 6 hue 6&lt;/code&gt; は 6°ずつ回転、hue（色相）を 6°増やす、という意味。つまり、少しずつ回転させて、色を変えながら LINE を60回描画している。

**7. 長さをばらつかせる
ちょっと長さにばらつきを持たせたかったので、まれに枝が元気なくなるようにさせた。
&gt;|cpp|
rule LINE .1{
    LINE { s .7 }
}
||&lt;

**おわり
これで終わり。最終的なソースコードはわずか25行！

一通りの文法は解説したが、詳しくは &lt;a href=&quot;http://www.contextfreeart.org/mediawiki/index.php/Reference_Card&quot;&gt;Reference Card - Context Free Art&lt;/a&gt; に書いてある。

最後に、ウニの最終的なソースコードを掲載しておく。Enjoy Context Free Art！
&gt;|cpp|
startshape START

rule START {
    60 * { r 6 hue 6} LINE {}
}

rule LINE {
    CIRCLE { s 6 1  x 3 sat 1 b .3 hue 30}
    CIRCLE { s 5 .2 x 3 sat 0 b 1 }
    LINE   { s .9   x 3 r 10 a -.1}
}

rule LINE {
    LINE { flip 180 }
}

rule LINE .3 {
    LINE {}
    LINE { r  30  s .5 }
    LINE { r -30  s .5 }
}

rule LINE .1 {
    LINE { s .7 }
}
||&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090309/context_free_try:title]
-[http://d.hatena.ne.jp/nitoyon/20090311/context_free_tile:title]
-[http://d.hatena.ne.jp/nitoyon/20090312/context_free_3d:title]
-[http://d.hatena.ne.jp/nitoyon/20090313/context_free_favorite5:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-11" title="">
<body>
*context_free_tile*Context Free Art の tile が便利!?
Context Free Art の tile 機能がちょっと素敵だ。

次のように書くと、120×120 のタイルを作成してくれる。
&gt;||
tile {s 120}
||&lt;

例えば、サンプルの ciliasun をベースに２つのヒマワリを配置してみる。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090309/20090309012301.png&quot;&gt;&lt;/center&gt;&lt;

これに tile コマンドを追加すると…。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090309/20090309012258.png&quot;&gt;&lt;/center&gt;&lt;

このように、はみ出た部分が反対側から出てくる。繰り返し用のタイル画像として使える！


ためしに敷き詰めてみた。こんな感じ。OH！ TILE！！
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090309/20090309012159.png&quot;&gt;&lt;/center&gt;&lt;

**まとめ
Context Free Art で快適なタイル生活を

tile についての詳細は &lt;a href=&quot;http://www.contextfreeart.org/mediawiki/index.php/Reference_Card#tile&quot;&gt;Reference Card 1.1.4 tile&lt;/a&gt; にて。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090309/context_free_try:title]
-[http://d.hatena.ne.jp/nitoyon/20090310/context_free_tutorial_uni:title]
-[http://d.hatena.ne.jp/nitoyon/20090312/context_free_3d:title]
-[http://d.hatena.ne.jp/nitoyon/20090313/context_free_favorite5:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-12" title="">
<body>
*context_free_3d*Context Free Art で立体を描く
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308220235.png&quot;&gt;&lt;/center&gt;&lt;

**ビル群
ちょっとした立体風のものを描いてみた。立体を描く方法は &lt;a href=&quot;http://www.contextfreeart.org/mediawiki/index.php/Design_ideas&quot;&gt;Design ideas - Context Free Art&lt;/a&gt; を参照した。

ソースはこちら。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|cpp|
startshape ALL

rule ALL{
  Buildings { hue 0 b .7}
}

rule Buildings{
  Building {}
  BuildingsRecur { hue 10 y 2 s .8 x 4 z -1}
  BuildingsRecur { hue 10 y 2 s .8 x -4 z -1}
}
rule BuildingsRecur .1{}
rule BuildingsRecur { Buildings{} }

rule Building{
  CUBESIDE {  }
  Building { y 1 }
}
rule Building .2{
  CUBETOP { }
  CUBESIDE {} 
}

rule CUBE{
  CUBETOP {}
  CUBESIDE {}
}

rule CUBETOP {
  TOP{b .7  sat .7}
}

rule CUBESIDE{
  SIDE{ b .8 sat .7 s -1 1 }
  SIDE{ b .5 sat .7}
}

rule SIDE {FACE{skew 0 30}}
rule TOP {FACE[s 1.413 .816 r 135]}
rule FACE {SQUARE{x .5 y -.5 h 30}}
||&lt;
&gt;&lt;/div&gt;&lt;

**バベルの塔
今度は円柱。縦に連ねて塔みたいなもの。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308220802.png&quot;&gt;

&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;||
startshape BODY

rule BODY {
	CYLINDER { b .4  }
}

rule CYLINDER {
	CYLINDER_BOTTOM {}
}

rule CYLINDER_BOTTOM {
	CIRCLE { s 1 .2 }
	SQUARE { y .125 s 1 .25}
	CYLINDER_BODY { y .25}
}
rule CYLINDER_BODY {
	SQUARE { y .125 s 1 .25}
	CYLINDER_BODY { y .25 }
}
rule CYLINDER_BODY {
	CYLINDER_TOP {  }
}
rule CYLINDER_TOP {
	CIRCLE { s 1 .2 b .5 }
	CYLINDER { s .8  }
}
||&lt;
&gt;&lt;/div&gt;&lt;

**LEGO
同じ円柱を活用して分岐させてみた。レゴっぽい。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090308/20090308220942.png&quot;&gt;

&gt;|cpp|
startshape BODY

rule BODY {
	CYLINDER { b .5 sat 1 }
}

rule CYLINDER {
	CYLINDER_BOTTOM {}
}

rule CYLINDER_BOTTOM {
	CIRCLE { s 1 .2 }
	SQUARE { y .125 s 1 .25}
	CYLINDER_BODY { y .25}
}
rule CYLINDER_BODY {
	SQUARE { y .125 s 1 .25}
	CYLINDER_BODY { y .25 }
}
rule CYLINDER_BODY {
	CYLINDER_TOP {  }
}
rule CYLINDER_TOP {
	CIRCLE { s 1 .2 b .5 sat 1 }
	CYLINDER { s .3 x -.25  z 3 hue 45 }
	CYLINDER { s .3 x  .25  z 3 hue 200 }
}
||&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090309/context_free_try:title]
-[http://d.hatena.ne.jp/nitoyon/20090310/context_free_tutorial_uni:title]
-[http://d.hatena.ne.jp/nitoyon/20090311/context_free_tile:title]
-[http://d.hatena.ne.jp/nitoyon/20090313/context_free_favorite5:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-13" title="">
<body>
*context_free_favorite5*Context Free Art のお気に入り作品５点
今週は Context Free Art を紹介してきましたが、最終日の本日は Web でみつけた作品の中で気に入ったものを５つ紹介します。

**CityMap
地図っぽいもの。
&gt;&lt;center&gt;&lt;a href=&quot;http://gofar2.iobb.net/~htaka/wordpress/archives/856&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090313/20090313004334.png&quot;&gt;&lt;br&gt;CityMap&lt;/a&gt;&lt;/center&gt;&lt;

**Pink blossom
公式ギャラリーより。よくあるパターンの木なんだけど、花がきれいなので見違えますね。
&gt;&lt;center&gt;&lt;a href=&quot;http://www.contextfreeart.org/gallery/view.php?id=137&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090313/20090313004339.png&quot;&gt;&lt;br&gt;Pink blossom&lt;/a&gt;&lt;/center&gt;&lt;

**explosion
同じく公式ギャラリーより、上と同じ &lt;a href=&quot;http://www.contextfreeart.org/gallery/view.php?by=momo&quot;&gt;momo&lt;/a&gt; さんの作品。宇宙が爆発ような模様。確率的ではないので毎回同じ模様になる。
&gt;&lt;center&gt;&lt;a href=&quot;http://www.contextfreeart.org/gallery/view.php?id=110&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090313/20090313004337.png&quot;&gt;&lt;br&gt;explosion&lt;/a&gt;&lt;/center&gt;&lt;


**Spiders Web
ギアのような機械のような。他の作品は &lt;a href=&quot;http://contextfree.lazymoon.org/&quot;&gt;Context Free Gallery&lt;/a&gt; から。
&gt;&lt;center&gt;&lt;a href=&quot;http://contextfree.lazymoon.org/view/14&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090313/20090313004336.png&quot;&gt;&lt;br&gt;Spiders Web&lt;/a&gt;&lt;/center&gt;&lt;

**network
方向転換しながら増殖していく。Context Free Art を知るきっかけとなった &lt;a href=&quot;http://d.hatena.ne.jp/KZR/&quot;&gt;Radium Software&lt;/a&gt; さんより。Z 座標で前後関係を設定して囲み枠を描いている。
&gt;&lt;center&gt;&lt;a href=&quot;http://d.hatena.ne.jp/KZR/20090207/p2&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090313/20090313004335.png&quot;&gt;&lt;br&gt;network&lt;/a&gt;&lt;/center&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090309/context_free_try:title]
-[http://d.hatena.ne.jp/nitoyon/20090310/context_free_tutorial_uni:title]
-[http://d.hatena.ne.jp/nitoyon/20090311/context_free_tile:title]
-[http://d.hatena.ne.jp/nitoyon/20090312/context_free_3d:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-16" title="">
<body>
*postal_map*郵便番号マップを作ってみた
asin:4873113784:title を読んでたら「アメリカの郵便番号を地図上に図示する」という例が出てきたので、これの日本版を作ってみました。

&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/misc/js/postal_code/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090315/20090315225620.png&quot; width=&quot;450&quot; height=&quot;395&quot;&gt;&lt;br&gt;郵便番号マップ&lt;/a&gt;&lt;/center&gt;&lt;

内陸地がぽっかりあいてるのが不思議だったり、色でどのへんの地域が近い番号なのかが分かったり、いろいろ興味深いです。

**絞り込み機能
先頭の数字で絞り込む機能もつけてみました。

これが東京（1XX）。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090315/20090315235211.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

これが中国四国地方（7XX）。うっすら四国の海岸線が見えます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090315/20090315235210.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

今週は、これを作っていく過程を紹介していきたいと思います。乞うご期待。

[asin:4873113784:detail]

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20090317/postal_map1:title]
-[http://d.hatena.ne.jp/nitoyon/20090318/postal_map2:title]
-[http://d.hatena.ne.jp/nitoyon/20090320/postal_map3:title]

**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20080325/traditional_color_hsv:title]
-[http://d.hatena.ne.jp/nitoyon/20080326/tradcolors_hsv:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>なまえ</username>
<body>海岸線から内陸に向かって境界線が引かれる傾向にあるんですね。。</body>
<timestamp>1237164516</timestamp>
</comment>
<comment>
<username>tamai22jp</username>
<body>北区は115からかと。。</body>
<timestamp>1237187656</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>鳥取・島根がスカスカで・・・</body>
<timestamp>1237204614</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>郵便番号の網羅率はどれくらいでしょうか？&lt;br&gt;自分の住んでた地域の番号がなかったので気になりました。</body>
<timestamp>1237213518</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; 自分の住んでた地域の番号がなかったので気になりました。&lt;br&gt;コメントありがとうございます。&lt;br&gt;全ての郵便番号を列挙すると量が多くなりすぎるので、下４桁が 0000 の郵便番号だけを列挙しています。</body>
<timestamp>1237218223</timestamp>
</comment>
<comment>
<username>通りすがりの紋別市民</username>
<body>094の位置ですが、実際の位置よりかなり南にずれてます。&lt;br&gt;太平洋側ではなく、オホーツク海側の街なのですが。。。&lt;br&gt;&lt;br&gt;まあ、1ヶ月前のエントリーだし、手遅れかなｗｗｗ</body>
<timestamp>1239974587</timestamp>
</comment>
</comments>
</day>
<day date="2009-03-17" title="">
<body>
*postal_map1*郵便番号マップ作成記 (1) - 郵便番号データをデータベースに入れる
前回予告した通り、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090316/postal_map&quot;&gt;郵便番号マップ&lt;/a&gt;を作った手順を紹介していこう。

ビジュアライジングのためにはデータ収集が重要だ。今回はデータベースに郵便番号データを入れていくところを説明する。泥臭いけど避けては通れない作業だ。

**郵便番号データを入手
まずは郵便番号のデータを手に入れる。といっても日本郵便が郵便番号データを CSV の形で提供してくれてるので、特に凝ったことはしなくてもよい。

以下のサイトから全国一括のファイルをダウンロードするだけ。ありがたや。
-&lt;a href=&quot;http://www.post.japanpost.jp/zipcode/download.html&quot;&gt;郵便番号データダウンロード - 日本郵便&lt;/a&gt;

Shift-JIS なので utf-8 に変換しておいた。
&gt;|
% wget http://www.post.japanpost.jp/zipcode/dl/oogaki/lzh/ken_all.lzh
&lt;font color=&quot;#999999&quot;&gt;--00:23:50--  http://www.post.japanpost.jp/zipcode/dl/oogaki/lzh/ken_all.lzh
           =&gt; `ken_all.lzh.1'
www.post.japanpost.jp をDNSに問いあわせています... 122.215.192.22
www.post.japanpost.jp|122.215.192.22|:80 に接続しています... 接続しました。
HTTP による接続要求を送信しました、応答を待っています... 200 OK
長さ: 1,726,157 (1.6M) [application/octet-stream]

100%[=============================================&amp;gt;] 1,726,157      1.11M/s

00:23:52 (1.11 MB/s) - `ken_all.lzh.1' を保存しました [1726157/1726157]&lt;/font&gt;

% lha -x ken_all.lzh
&lt;font color=&quot;#999999&quot;&gt;ken_all.csv     - Melted   :  ooooooooooooooooooooooooooooooooooooooooooooooo&lt;/font&gt;
% nkf -w ken_all.csv &amp;gt; ken_all_utf8.csv
|&lt;

**データベースへの作成
asin:4873113784:title でのアメリカ版では CSV データに経度緯度データも入っていたんだけど、日本郵便のデータには入っていない。ならば、ジオコーディングで取得するしかない。

今回はその準備のためにデータベース環境を整えていく。言語は Ruby を選択した。O/R マッパーとして Ruby on Rails の ActiveRecord を使って省エネを狙う。DB は手軽に使える sqlite3 を使う。

バージョンはこんな感じ。
-Ruby 1.8.5
--ActiveRecord 1.15
--sqlite3-ruby 1.2.4
-sqlite3 3.6.6.2

**テーブルの準備
まずは、DB とテーブルの作成。ActiveRecord の Migration 機能を使ってテーブル構造を定義してやる。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|ruby|
# EntrySchema.rb
require 'rubygems'
require 'active_record'

ActiveRecord::Base.establish_connection(
  :adapter =&gt; 'sqlite3',
  :dbfile =&gt; &quot;geocode.db&quot;
  )

class EntrySchema &lt; ActiveRecord::Migration
  def self.up
    create_table(:codes){ |t|
      t.column :high, :string, :null =&gt; false
      t.column :low, :string, :null =&gt; false
      t.column :pref, :string, :null =&gt; false
      t.column :city, :string, :null =&gt; false
      t.column :lat, :float
      t.column :lng, :float
    }
  end

  def self.down
    drop_table :codes
   end
end

class Code &lt; ActiveRecord::Base
end
||&lt;
&gt;&lt;/div&gt;&lt;
こう書いておくと、次のようなコードを実行させるだけでテーブルを作成してくれる。
&gt;|
% ruby -e 'require &quot;EntrySchema&quot;; EntrySchema.migrate(:up)'
&lt;font color=&quot;#999999&quot;&gt;== EntrySchema: migrating
 ====================================================
 -- create_table(:codes)
   -&amp;gt; 0.0397s
 == EntrySchema: migrated (0.0402s) ============================================&lt;/font&gt;
|&lt;
素晴らしい。

Migration については、以下のサイトを参考にした。
-&lt;a href=&quot;http://tam.qmix.org/wiki/Migration.html&quot;&gt;pylori*style wiki - MigrationによるDB管理&lt;/a&gt;
-&lt;a href=&quot;http://tech.feedforce.jp/railsmigration.html&quot;&gt;FFTT : RailsのMigration&lt;/a&gt;
-&lt;a href=&quot;http://wota.jp/ac/?date=20050817&quot;&gt;優しいRailsの育て方 - ヽ( ・∀・)ノくまくまー(2005-08-17)&lt;/a&gt;

**CSV を DB に流し込む
お次は DB に CSV のデータを流し込むところ。

Ruby には標準で CSV クラスがついてくる。こいつを使えば１行を配列としてパースしてくれる。

DB 側は ActiveRecord と併用すればいとも簡単。コードがこれ。
&gt;|ruby|
require 'EntrySchema'
require 'csv'

i = 1
CSV.open('ken_all_utf8.csv', 'r') do |row|
  # 下４桁が 0000 のだけ突っ込む
  next unless row[2].to_s.slice(3, 4) == &quot;0000&quot;

  # 既に突っ込んだ場合はそのデータを読み取る
  code = Code.find_by_id(i)
  code = Code.new if code.nil?

  # CSV のデータを保存する
  code.high = row[2].to_s.slice(0, 3)
  code.low = row[2].to_s.slice(3, 4)
  code.pref = row[6]
  code.city = row[7]
  code.save

  # 出力
  puts &quot;#{code.pref} #{code.city}&quot;
  i += 1
end
||&lt;
ActiveRecord のおかげで、Code オブジェクトのプロパティを設定して save するだけで DB に格納してくれる。抽象度が高くて幸せ。

実行してみる。
&gt;|
% ruby script/parse_postal.rb
&lt;font color=&quot;#999999&quot;&gt;北海道 札幌市中央区
北海道 札幌市北区
北海道 札幌市東区
北海道 札幌市白石区
北海道 札幌市豊平区
  : (略)
沖縄県 沖縄市
沖縄県 宮古島市
沖縄県 八重山郡竹富町&lt;/font&gt;
|&lt;
いい具合に DB に突っ込まれていく。

ActiveRecord については以下のサイトがとても参考になる。
-[http://dev.ariel-networks.com/articles/workshop/rails-activerecord/:title]

**sqlite3 コンソールで確認
ちゃんと入ってることを確認する。
&gt;|
sqlite&amp;gt; select * from codes;
&lt;font color=&quot;#999999&quot;&gt;      :
784|904|0000|沖縄県|沖縄市||
785|906|0000|沖縄県|宮古島市||
786|907|0000|沖縄県|八重山郡竹富町||&lt;/font&gt;
|&lt;
786件のデータが入力されている。やったね。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090318/postal_map2&quot;&gt;次回&lt;/a&gt;は、経度緯度を埋めていくところから。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次（予定）
-[http://d.hatena.ne.jp/nitoyon/20090316/postal_map:title]
-郵便番号マップ作成記 (1) - 郵便番号データをデータベースに入れる
-[http://d.hatena.ne.jp/nitoyon/20090318/postal_map2:title]
-[http://d.hatena.ne.jp/nitoyon/20090320/postal_map3:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-18" title="">
<body>
*postal_map2*郵便番号マップ作成記 (2) - ジオコーディングで経度緯度を求める
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090317/postal_map1&quot;&gt;第１回&lt;/a&gt; では郵便番号データをデータベースに格納するところまでを作った。今回は住所から緯度経度を求めていこう。ビジュアライズのための下準備は今回で完了だ。

**ジオコーディング API は何を使おう
ジオコーディングとは、住所や名所から緯度経度を求めること。世の中にはいくつかジオコーディングの API が存在するが、今回は Google が提供する &lt;a href=&quot;http://code.google.com/intl/ja/apis/maps/documentation/services.html#Geocoding&quot;&gt;ジオコーディング API&lt;/a&gt; を選択した。

理由はGoogle が提供するという安心感と、&lt;a href=&quot;http://googlejapan.blogspot.com/2007/09/ip.html&quot;&gt;１日あたり1万5千回まで OK&lt;/a&gt; と太っ腹なところ。REST で利用できるのも魅力的だった。

**いざ実行
スクリプトをがーっと書いてひたすら実行する。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|ruby|
require 'EntrySchema'
require 'cgi'
require 'open-uri'

$URL = &quot;http://maps.google.com/maps/geo?&quot;

Code.find_all_by_low(&quot;0000&quot;).each do |code|
  # 経度緯度を既に求めていたら次
  next unless code.lat.nil? and code.lng.nil?

  # URL を求める
  q = code.pref + code.city
  url = $URL + {&quot;q&quot; =&gt; q, &quot;output&quot; =&gt; &quot;xml&quot;}.map { |key, value|
    &quot;#{CGI.escape(key)}=#{CGI.escape(value)}&quot;
  }.join(&quot;&amp;&quot;)

  # 読み取る
  open(url) do |f|
    xml = f.read
    puts xml
    doc = REXML::Document.new(xml)

    # coordinates タグの中身を読み取る
    latlng = REXML::XPath.first(doc.root, '//coordinates').text
    lng, lat = latlng.split(/,/)
    code.lng = lng.to_f
    code.lat = lat.to_f
    puts &quot;#{q} #{lng} #{lat}&quot;
  end

  # 保存
  code.save

  # ３秒スリープしておく
  sleep(3)
end
||&lt;
&gt;&lt;/div&gt;&lt;

エラー処理は特にやってないので、例外が起きたらそこで止まる。データ量も多くないので、止まってたらそのときに手作業で対応すればよいだろう。

途中、「岡山市北区」でエラーになった。「Google さん、しっかりしてよー」と調べてみたら…
&gt;http://ja.wikipedia.org/wiki/%E5%8C%97%E5%8C%BA_(%E5%B2%A1%E5%B1%B1%E5%B8%82):title&gt;
北区（きたく）は岡山県岡山市が2009年4月1日の政令指定都市移行に伴い設置を決めた4つの行政区のうちの一つ
&lt;&lt;
とのことらしい。

まだ存在してない区ならば、取得できなくても仕方がない…。

岡山市の４つの区については Google Maps で検索して、見つかった適当なデータから緯度経度を直接 INSERT して対応しておいた。

**DB の中身を JSON で出力
さて、これで緯度経度のデータが出揃った。JavaScript で扱いやすいように、JSON データとして出力しておく。

これも簡単なスクリプトを書いて実現した。住所に \ が含まれることはないので凝った JSON 化は不要だろう。何も考えず使い捨てな勢いで出力コードを書いておいた。
&gt;|ruby|
require 'EntrySchema'

json = Code.find_all_by_low(&quot;0000&quot;).map { |code|
  %Q|{&quot;lat&quot; : #{code.lat}, &quot;lng&quot; : #{code.lng}, &quot;name&quot; : &quot;#{code.pref}#{code.city}&quot;, &quot;code
&quot; : &quot;#{code.high}&quot;}|
}.join(&quot;,\n&quot;)

puts &quot;[#{json}]&quot;
||&lt;

続く。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次（予定）
-[http://d.hatena.ne.jp/nitoyon/20090316/postal_map:title]
-[http://d.hatena.ne.jp/nitoyon/20090317/postal_map1:title]
-郵便番号マップ作成記 (2) - ジオコーディングで経度緯度を求める
-[http://d.hatena.ne.jp/nitoyon/20090320/postal_map3:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-20" title="">
<body>
*postal_map3*郵便番号マップ作成記 (3) - 経度緯度から動的に郵便番号を描画する
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090318/postal_map2&quot;&gt;前回&lt;/a&gt; まででデータを表示するためのデータ収集は完了した。いよいよデータを表示する集大成だ。

**JSON をちょっとだけ修正
前回の最後に出力した JSON はこんな感じのデータだった。
&gt;|javascript|
[{&quot;lat&quot; : 43.0577485, &quot;lng&quot; : 141.3451574, &quot;name&quot; : &quot;北海道札幌市中央区&quot;, &quot;code&quot; : &quot;060&quot;},
{&quot;lat&quot; : 43.1060624, &quot;lng&quot; : 141.3406195, &quot;name&quot; : &quot;北海道札幌市北区&quot;, &quot;code&quot; : &quot;001&quot;},
{&quot;lat&quot; : 43.0944552, &quot;lng&quot; : 141.3766337, &quot;name&quot; : &quot;北海道札幌市東区&quot;, &quot;code&quot; : &quot;065&quot;},
// (以下略)
||&lt;

このままではデータを利用できないので、postal 変数に代入しておく。
&gt;|javascript|
postal = [{&quot;lat&quot; : 43.0577485, &quot;lng&quot; : 141.3451574, &quot;name&quot; : &quot;北海道札幌市中央区&quot;, &quot;code&quot; : &quot;060&quot;},
{&quot;lat&quot; : 43.1060624, &quot;lng&quot; : 141.3406195, &quot;name&quot; : &quot;北海道札幌市北区&quot;, &quot;code&quot; : &quot;001&quot;},
{&quot;lat&quot; : 43.0944552, &quot;lng&quot; : 141.3766337, &quot;name&quot; : &quot;北海道札幌市東区&quot;, &quot;code&quot; : &quot;065&quot;},
// (以下略)
||&lt;
修正後のソースを postal.js として保存する。

**座標データを描画していく
ここからは JavaScript のコーディング。

まずは表示する郵便番号の上下左右の端を求めておく。
&gt;|javascript|
var latmin = 9999, latmax = 0, lngmin = 9999, lngmax = 0;
for(var i = 0, len = postal.length; i &lt; len; i++){
    var p = postal[i];
    if(latmin &gt; p.lat) latmin = p.lat;
    if(latmax &lt; p.lat) latmax = p.lat;
    if(lngmin &gt; p.lng) lngmin = p.lng;
    if(lngmax &lt; p.lng) lngmax = p.lng;
}

// WIDTH(600px)に収まるように表示倍率を求める
var ratio = WIDTH / (lngmax - lngmin);
||&lt;

準備ができれば、あとはそれぞれの郵便番号について表示していくだけ。
&gt;|javascript|
for(var i = 0, len = postal.length; i &lt; len; i++){
    var p = postal[i];

    // SPAN タグを作る
    var pos = document.createElement(&quot;span&quot;);

    // クラス名は &quot;a&quot; + 郵便番号の先頭文字
    pos.className = &quot;a&quot; + p.code.substr(0, 1);

    // 緯度経度に応じて絶対座標配置する
    pos.style.position = &quot;absolute&quot;;
    pos.style.top = ((latmax - p.lat) * ratio * 1.2) + 'px';
    pos.style.left = ((p.lng - lngmin) * ratio) + 'px';

    // 郵便番号の文字列を SPAN の中身に追加する
    pos.appendChild(document.createTextNode(p.code));

    // 表示用の DIV タグに追加する
    canvas.appendChild(pos);
}
||&lt;

実際のソースコードは、絞り込みやポップアップ表示でもう少し複雑になっているが、基本的にはこんなところだ。

緯度経度が正しければ日本地図が浮かび上がる。当たり前なんだけど面白い！
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090320/20090320121458.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**CSS で虹色グラデーション
JavaScript では郵便番号の先頭文字に応じてクラスを変更するようにしていた。だから、次のような CSS を書いておけば、色分けも一発だ。簡単簡単。
&gt;|css|
span.a0{color: #cc0000}
span.a1{color: #cc7a00}
span.a2{color: #a3cc00}
span.a3{color: #28cc00}
span.a4{color: #00cc51}
span.a5{color: #00cccc}
span.a6{color: #0051cc}
span.a7{color: #2800cc}
span.a8{color: #a300cc}
span.a9{color: #cc007a}
||&lt;
一気に見た目が鮮やかに！
&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/misc/js/postal_code/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090315/20090315225620.png&quot; width=&quot;450&quot; height=&quot;395&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

**おわりに
３回に渡って作り方を解説してきたが、１つ１つの手順は短いシンプルなコーディングで実現できた。世の中にはまだまだ多くのデータが転がっている。同様の手順で他のデータも可視化してみると面白いかもしれない。

今回の郵便番号マップではデータ量が1000件以下だったので、あまり複雑なことをせずともデータ収集、ビジュアライズを行えた。しかし、データ量が増えてくると、処理時間も増えるし、リアルタイムな描画も困難になってくる。そこで工夫をするのがプログラミングの難しいところでもあり、面白いところでもある。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**連載目次
-[http://d.hatena.ne.jp/nitoyon/20090316/postal_map:title]
-[http://d.hatena.ne.jp/nitoyon/20090317/postal_map1:title]
-[http://d.hatena.ne.jp/nitoyon/20090318/postal_map2:title]
-郵便番号マップ作成記 (3) - 経度緯度から動的に郵便番号を描画する
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-24" title="">
<body>
*hatebu_blog*濃いはてなーが大好きな濃いブログBEST50
&lt;a href=&quot;http://zapanet.info/blog/item/1570&quot;&gt;はてなーが大好きなブログBEST100&lt;/a&gt; を見ると、ホットエントリ常連ばかりで新鮮さがなかったので、ブックマーク コメントが多い順を調べてみたくなりました。

幸い、手元には [http://tech.nitoyon.com/hatebu_nenkan/:title] を作るときに収集したデータがあるので、ちょっと頑張ればブログごとのコメント数を割り出すことができました。データ量が多かったので、2008年の日ごとホットエントリに１度でも入ったことのあるエントリからの集計です。

**コメントが多いブログ BEST10
コメントつきのブックマーク数順に並べてみました。
|*順位|*サイト名|*コメント数|*ブックマーク数|*コメント率|
|1位|[http://anond.hatelabo.jp/:title]|47249|94402|50.1%|
|2位|[http://blog.livedoor.jp/dqnplus/:title]|39949|67470|59.2%|
|3位|&lt;a href=&quot;http://gigazine.net/&quot;&gt;GIGAZINE（ギガジン）&lt;/a&gt;|15975|64979|24.6%|
|4位|[http://blog.livedoor.jp/dankogai/:title]|9686|29685|32.6%|
|5位|[http://blog.goo.ne.jp/ikedanobuo/:title]|6074|14409|42.2%|
|6位|[http://alfalfa.livedoor.biz/:title]|5830|23759|24.5%|
|7位|[http://urasoku.blog106.fc2.com/:title]|5614|17695|31.7%|
|8位|&lt;a href=&quot;http://www.ideaxidea.com/&quot;&gt;IDEA*IDEA&lt;/a&gt;|5549|38013|14.6%|
|9位|[http://d.hatena.ne.jp/fromdusktildawn/:title]|4884|14439|33.8%|
|10位|[http://coliss.com/:title]|4322|54546|7.9%|

とまあ、こんな具合に列挙していっても面白いのですがコメント率順に並べてみたほうが面白かったのでそっちを紹介しましょう。


**コメントの割合が多いブログ BEST10
まずはコメントの割合が多いブログ BEST10。
|*順位|*サイト名|*コメント率|*コメント数|*ブックマーク数|
|1位|[http://d.hatena.ne.jp/mereco/:title]|64.4%|1858&lt;br&gt;(27位)|2884&lt;br&gt;(48位)|
|2位|[http://blog.livedoor.jp/dqnplus/:title]|59.2%|39949&lt;br&gt;(2位)|67470&lt;br&gt;(2位)|
|3位|[http://d.hatena.ne.jp/kokorosha/:title]|55.4%|2509&lt;br&gt;(20位)|4527&lt;br&gt;(34位)|
|4位|[http://d.hatena.ne.jp/y_arim/:title]|53.8%|3300&lt;br&gt;(14位)|6132&lt;br&gt;(26位)|
|5位|[http://d.hatena.ne.jp/asami81/:title]|51.9%|1385&lt;br&gt;(42位)|2668&lt;br&gt;(50位)|
|6位|[http://d.hatena.ne.jp/kanose/:title]|51.1%|1534&lt;br&gt;(37位)|3000&lt;br&gt;(46位)|
|7位|[http://anond.hatelabo.jp/:title]|50.1%|47249&lt;br&gt;(1位)|94402&lt;br&gt;(1位)|
|8位|[http://d.hatena.ne.jp/jkondo/:title]|49.4%|1473&lt;br&gt;(39位)|2980&lt;br&gt;(47位)|
|9位|[http://d.hatena.ne.jp/KoshianX/:title]|48.7%|1734&lt;br&gt;(32位)|3564&lt;br&gt;(40位)|
|10位|[http://d.hatena.ne.jp/thir/:title]|47.1%|1264&lt;br&gt;(48位)|2685&lt;br&gt;(49位)|

「はてな率」の高さが際立ってます…（２位以外は全部…）。コメント率の高いブログをざっと見てみると、何か一言いいたくなるブログが多いように感じます。

堂々の１位は id:mereco:detail さん。コメント数では 27位だったのですが、実に３人に２人がブックマーク時にコメントを書いてしまう独特の魅力があるようです。最近のエントリ、[http://d.hatena.ne.jp/mereco/20090317/p1:title] の &lt;a href=&quot;[http://b.hatena.ne.jp/entry/[http://d.hatena.ne.jp/mereco/20090317/p1&quot;&gt;ブックマークページ&lt;/a&gt; を見ても、コメント率の多さがよく分かります。

&gt;&lt;center&gt;&lt;a href=&quot;[http://b.hatena.ne.jp/entry/[http://d.hatena.ne.jp/mereco/20090317/p1&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090324/20090324095918.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;


**コメントの割合が多いブログ BEST11～30
続いて11位から30位まで。
|*順位|*サイト名|*コメント率|*コメント数|*ブックマーク数|
|11位|[http://d.hatena.ne.jp/aureliano/:title]|43.4%|3998&lt;br&gt;(11位)|9212&lt;br&gt;(19位)|
|12位|[http://blog.goo.ne.jp/ikedanobuo/:title]|42.2%|6074&lt;br&gt;(5位)|14409&lt;br&gt;(13位)|
|13位|[http://blog.tatsuru.com/:title]|42.1%|1856&lt;br&gt;(28位)|4409&lt;br&gt;(36位)|
|14位|[http://d.hatena.ne.jp/finalvent/:title]|42.0%|1397&lt;br&gt;(41位)|3328&lt;br&gt;(43位)|
|15位|[http://d.hatena.ne.jp/Hamachiya2/:title]|41.5%|2866&lt;br&gt;(17位)|6905&lt;br&gt;(25位)|
|16位|[http://d.hatena.ne.jp/takerunba/:title]|40.6%|2475&lt;br&gt;(21位)|6097&lt;br&gt;(27位)|
|17位|[http://d.hatena.ne.jp/Chikirin/:title]|40.3%|1778&lt;br&gt;(30位)|4411&lt;br&gt;(35位)|
|18位|[http://medt00lz.s59.xrea.com/:title]|40.2%|1648&lt;br&gt;(35位)|4097&lt;br&gt;(37位)|
|19位|&lt;a href=&quot;http://kirik.tea-nifty.com/&quot;&gt;切込隊長BLOG（ブログ）&lt;/a&gt;|39.8%|1269&lt;br&gt;(47位)|3192&lt;br&gt;(44位)|
|20位|[http://d.hatena.ne.jp/kaien/:title]|39.6%|1232&lt;br&gt;(49位)|3109&lt;br&gt;(45位)|
|21位|[http://d.hatena.ne.jp/guri_2/:title]|38.5%|2177&lt;br&gt;(22位)|5650&lt;br&gt;(29位)|
|22位|&lt;a href=&quot;http://takagi-hiromitsu.jp/diary/&quot;&gt;高木浩光＠自宅の日記&lt;/a&gt;|37.7%|3317&lt;br&gt;(13位)|8802&lt;br&gt;(21位)|
|23位|[http://takekuma.cocolog-nifty.com/:title]|37.4%|1293&lt;br&gt;(46位)|3458&lt;br&gt;(41位)|
|24位|[http://d.hatena.ne.jp/mkusunok/:title]|36.6%|1882&lt;br&gt;(26位)|5146&lt;br&gt;(31位)|
|25位|[http://d.hatena.ne.jp/essa/:title]|36.3%|1409&lt;br&gt;(40位)|3886&lt;br&gt;(39位)|
|26位|[http://d.hatena.ne.jp/higayasuo/:title]|35.7%|1213&lt;br&gt;(50位)|3394&lt;br&gt;(42位)|
|27位|[http://satoshi.blogs.com/:title]|35.1%|1691&lt;br&gt;(34位)|4814&lt;br&gt;(33位)|
|28位|[http://d.hatena.ne.jp/kotorikotoriko/:title]|34.3%|1351&lt;br&gt;(44位)|3937&lt;br&gt;(38位)|
|29位|[http://d.hatena.ne.jp/fromdusktildawn/:title]|33.8%|4884&lt;br&gt;(9位)|14439&lt;br&gt;(12位)|
|30位|[http://blog.livedoor.jp/dankogai/:title]|32.6%|9686&lt;br&gt;(4位)|29685&lt;br&gt;(6位)|
同じくはてな率が高いですが、相変わらず「何か一言、言いたくなるブログ」のランキングが高いようです。

**コメントの割合が多いブログ BEST31～50
最後に50位まで。
|*順位|*サイト名|*コメント率|*コメント数|*ブックマーク数|
|31位|[http://urasoku.blog106.fc2.com/:title]|31.7%|5614&lt;br&gt;(7位)|17695&lt;br&gt;(11位)|
|32位|[http://d.hatena.ne.jp/shi3z/:title]|31.3%|1711&lt;br&gt;(33位)|5472&lt;br&gt;(30位)|
|33位|[http://guideline.livedoor.biz/:title]|30.5%|2152&lt;br&gt;(23位)|7056&lt;br&gt;(24位)|
|34位|[http://news23vip.blog109.fc2.com/:title]|30.2%|3128&lt;br&gt;(15位)|10369&lt;br&gt;(16位)|
|35位|[http://labaq.com/:title]|29.4%|2633&lt;br&gt;(19位)|8946&lt;br&gt;(20位)|
|36位|[http://workingnews.blog117.fc2.com/:title]|28.1%|2716&lt;br&gt;(18位)|9664&lt;br&gt;(17位)|
|37位|[http://blog.livedoor.jp/kensuu/:title]|26.5%|1356&lt;br&gt;(43位)|5121&lt;br&gt;(32位)|
|38位|[http://waranote.blog76.fc2.com/:title]|26.2%|1904&lt;br&gt;(25位)|7272&lt;br&gt;(23位)|
|39位|&lt;a href=&quot;http://gigazine.net/&quot;&gt;GIGAZINE（ギガジン）&lt;/a&gt;|24.6%|15975&lt;br&gt;(3位)|64979&lt;br&gt;(3位)|
|40位|[http://news4vip.livedoor.biz/:title]|24.6%|3350&lt;br&gt;(12位)|13613&lt;br&gt;(15位)|
|41位|[http://alfalfa.livedoor.biz/:title]|24.5%|5830&lt;br&gt;(6位)|23759&lt;br&gt;(8位)|
|42位|[http://mudainodqnment.blog35.fc2.com/:title]|23.4%|1329&lt;br&gt;(45位)|5678&lt;br&gt;(28位)|
|43位|[http://vipvipblogblog.blog119.fc2.com/:title]|22.1%|1853&lt;br&gt;(29位)|8392&lt;br&gt;(22位)|
|44位|[http://d.hatena.ne.jp/amachang/:title]|19.0%|1767&lt;br&gt;(31位)|9297&lt;br&gt;(18位)|
|45位|[http://e0166.blog89.fc2.com/:title]|16.1%|2919&lt;br&gt;(16位)|18160&lt;br&gt;(10位)|
|46位|[http://www.ideaxidea.com/:title]|14.6%|5549&lt;br&gt;(8位)|38013&lt;br&gt;(5位)|
|47位|[http://www.moongift.jp/:title]|11.0%|1520&lt;br&gt;(38位)|13807&lt;br&gt;(14位)|
|48位|[http://coliss.com/:title]|7.9%|4322&lt;br&gt;(10位)|54546&lt;br&gt;(4位)|
|49位|[http://www.designwalker.com/:title]|7.7%|2009&lt;br&gt;(24位)|26120&lt;br&gt;(7位)|
|50位|&lt;a href=&quot;http://phpspot.org/&quot;&gt;phpspot開発日誌&lt;/a&gt;|7.7%|1613&lt;br&gt;(36位)|21008&lt;br&gt;(9位)|

最後の方は無言ブックマーク率の高いサイトです。48位～50位のコリスさん, DesignWalker さん, phpspot 開発日誌さんは圧巻の３強ですね。

**まとめ
ついつい何か言いたくなるようなブログを見つけて、楽しいブログウォッチができるといいですね！
</body>
<comments>
<comment>
<username>nasunori</username>
<body>これは読むブログ選びの参考になるのですが、34位のリンクとタイトルが変な感じです。&lt;br&gt;VIPPERな俺&lt;br&gt;http://news23vip.blog109.fc2.com/</body>
<timestamp>1237951134</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。修正しておきました。</body>
<timestamp>1238071720</timestamp>
</comment>
<comment>
<username>rvr4411rvr</username>
<body>凄い&lt;br&gt;この順位の方がシックリきます～</body>
<timestamp>1325348462</timestamp>
</comment>
</comments>
</day>
<day date="2009-03-26" title="">
<body>
*firecube_as3*[as]Processing の燃えるエフェクトを AS3 に移植した
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090309/20090309001432.png&quot; width=&quot;398&quot; height=&quot;168&quot;&gt;&lt;/center&gt;&lt;

Processing のサンプル &lt;a href=&quot;http://processing.org/learning/topics/firecube.html&quot;&gt;FireCube&lt;/a&gt; が興味深かったので ActionScript 3.0 に移植してみました。

完成品がこれ。
&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FFireCube.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=300&amp;amp;title=FireCube+AS3&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が有効なら、ここに Flash が表示されますよ！)&lt;/noscript&gt;&lt;/center&gt;&lt;

**&lt;b&gt;パフォーマンス改善&lt;/b&gt;
Processing 版の&lt;a href=&quot;http://processing.org/learning/topics/firecube.html
&quot;&gt;ソースコード&lt;/a&gt; に比べて、AS3 版ではいくつかのパフォーマンス改善を行っています。

オリジナルでは、何かと色んな処理をピクセルごとの演算をしていました。
-ノイズの作成
-周りのピクセルとの平均
-色の変換

それぞれ、ActionScript 3.0 では次のように実装しました。
-ノイズの作成 → &lt;code&gt;BitmapData.noise()&lt;/code&gt;
-周りのピクセルとの平均 → &lt;code&gt;ConvolutionFilter&lt;/code&gt;
-色の変換 → &lt;code&gt;BitmapData.paletteMap()&lt;/code&gt;
その結果、ピクセルごとではなく、画像に対して一気に計算できたので、パフォーマンスが大幅に向上しました。

BitmapData 系のメソッドが充実してるのは ActionScript の楽しいところですね。

**&lt;b&gt;苦しんだところ&lt;/b&gt;
AS3.0 で苦しんだところといえば、HSB がネイティブにサポートされてないこと。仕方がないので、&lt;a href=&quot;http://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93&quot;&gt;HSV色空間 - Wikipedia&lt;/a&gt; を参考にしながら HSVtoRGB という関数を中途半端に実装しました。

あと、Cube の描画も面倒だったので、円でお茶を濁しておきました。マウスで場所を変えられるから許してね。

**&lt;b&gt;まとめ&lt;/b&gt;
さらに炎っぽくさせるとしたら「ゆらめき」を与えるところでしょうか。当然、DisplacementMapFilter を使って頑張ることになります。

ソースは以下に（83行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Processing FireCube (AS3 version) 
// original source: http://processing.org/learning/topics/firecube.html
package {
import flash.display.*;
import flash.filters.*;
import flash.geom.*;

public class FireCube extends Sprite{
    private const WIDTH:int = 200;
    private const HEIGHT:int = 150;

    public function FireCube(){
        stage.align = &quot;TL&quot;;
        stage.scaleMode = &quot;noScale&quot;;
        scaleX = scaleY = 2;

        // Create circle
        var circle:Sprite = new Sprite();
        circle.graphics.beginFill(0x808080);
        circle.graphics.drawCircle(0, 0, 10);
        circle.graphics.endFill();

        // Create buffered image
        var fire:BitmapData = new BitmapData(WIDTH, HEIGHT, false, 0);
        var pg:BitmapData = fire.clone();
        var noiseBmd:BitmapData = new BitmapData(WIDTH, 1);

        var bmp:Bitmap = new Bitmap(pg);
        addChild(bmp);

        // Generate the palette
        var r:Array = [], g:Array = [], b:Array = [];
        for(var x:int = 0; x &lt; 256; x++) {
            //Hue goes from 0 to 85: red to yellow
            //Saturation is always the maximum: 255
            //Lightness is 0..255 for x=0..128, and 255 for x=128..255
            HSVtoRGB(x / 3, 1, Math.min(x * 3 / 255.0, 1), r, g, b);
        }

        // Use ConvolutionFilter to calculate for every pixel
        var filter:ConvolutionFilter = new ConvolutionFilter(3, 3, [0, 0, 0, 16, 16, 16, 0, 16, 0], 65);

        // Prepare points and matrix
        var matrix:Matrix = new Matrix();
        var pt0:Point = new Point(0, HEIGHT - 1);
        var pt1:Point = new Point(0, -1);
        var pt2:Point = new Point(0, 1);

        // Do loop
        addEventListener(&quot;enterFrame&quot;, function(event:*):void{
            // Randomize the bottom row of the fire buffer
            noiseBmd.noise(Math.random() * 0xffffffff, 0, 190, 7, true);
            fire.copyPixels(noiseBmd, noiseBmd.rect, pt0);

            // Display circle
            matrix.tx = mouseX;
            matrix.ty = mouseY;
            fire.draw(circle, matrix);

            // Add pixel values around current pixel
            fire.applyFilter(fire, fire.rect, pt1, filter);

            // Output everything to screen using our palette colors
            pg.paletteMap(fire, fire.rect, pt2, r, g, b);
        });
    }

    // AS3 does not natively support HSV...  :-(
    private function HSVtoRGB(h:int, s:Number, v:Number, r:Array, g:Array, b:Array):void {
        if (h &lt; 60) {
            r.push((v * 255) &lt;&lt; 16);
            g.push((v * (1 - (1 - h / 60.0) * s) * 255) &lt;&lt; 8)
            b.push(v * (1 - s) * 255);
        } else if (h &lt; 120) {
            r.push((v * (1 - (-h / 60.0 - 1) * s) * 255) &lt;&lt; 16);
            g.push((v * 255) &lt;&lt; 8);
            b.push(v * (1 - s) * 255);
        } else {
            throw Error('not implemented');
        }
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20070928/bitmapdata_extend:title]
-[http://d.hatena.ne.jp/nitoyon/20080526/google_earth:title]
-[http://d.hatena.ne.jp/nitoyon/20080523/google_maps_earth2:title]
-[http://d.hatena.ne.jp/nitoyon/20071009/as3_histogram1:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-27" title="">
<body>
*tunnel_as3*[as]Processing のトンネルを AS3 で書いてみた
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090309/20090309003805.png&quot; width=&quot;450&quot; height=&quot;166&quot;&gt;&lt;/center&gt;&lt;

昨日に続き、Processing 本体に付属しているサンプルで面白かった &lt;a href=&quot;http://processing.org/learning/topics/tunnel.html&quot;&gt;Tunnel&lt;/a&gt; を ActionScript 3 に移植してみました。

完成品はこちら。重めなのでクリックすると始まりますよ。
&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FTunnel.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=480&amp;amp;h=300&amp;amp;title=Tunnel+AS3&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;（Flash Player 9 以降がインストールされていると、ここにトンネルが表示されますよ）&lt;/noscript&gt;&lt;/center&gt;&lt;

**&lt;b&gt;仕組み&lt;/b&gt;
ぐるぐる吸い込まれるように見えますが、「トンネルの中をまっすぐ進むアニメーション」と「絵全体の平行移動」を組み合わせです。平行移動は単にずらすだけなので、「トンネルの中を進むアニメーション」について説明していきましょう。

トンネルの壁面は red_smoke.jpg という上下左右がつながったテクスチャ画像を貼り付けてます。そこで気になるのが、テクスチャを貼り付けるときの計算式。

実はこのような式で計算しています。
- [tex:{\rm depth} = \frac{\rm ratio}{l_{x,y}} \times h_{\rm texture} \, {\rm mod} \, h_{\rm texture}]
- [tex:{\rm angle} =  \frac{\theta}{2\pi} \times w_{\rm texture}]

まずは depth。l&lt;sub&gt;x,y&lt;/sub&gt; が中心からの距離、ratio が定数（ここでは32）です。つまり、中心からの距離に応じて、縦方向の座標が決まります。

続いて angle。こちらは、中心からの角度に応じて横方向の位置が決まります。

図にすると、こうなります。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090326/20090326020632.png&quot; width=&quot;406&quot; height=&quot;269&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

もっと直感的に考えると、テクスチャを縦に並べて、右と左をわっかにして上から覗き込んだイメージでしょうか。

**&lt;b&gt;高速化必須！&lt;/b&gt;
オリジナルのはピクセル単位に演算していたのですが、これをそのまま移植してみたらデュアルコアで CPU 常時 50% になってしまった。ちなみに、オリジナルの Processing 版は 30% 程度。

高速化しようにも getPixel/setPixel は必須そうだったので、あらかじめバッファに必要な画像を描画しておく作戦をとりました。流れとしてはこんな感じです。
+回転中の映像が一定周期でループするようにパラメータを調整する
+再生前に１ループを50個の BitmapData に描画しておく
+実際にアニメーションが始まったら、BitmapData を順番に表示していく
結果として、CPU 2～3% 程度に収まったので、なんとか Web 上で公開できるレベルになりました。

以下、ソースコードです。高速化のために、だいぶ長くなっちゃいました。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;
&gt;|javascript|
// Processing Tunnel (AS3 version) 
// original source: http://processing.org/learning/topics/tunnel.html
package {
import flash.display.*;
import flash.geom.*;
import flash.text.*;
import flash.utils.setTimeout;

[SWF(backgroundColor=&quot;#ffffff&quot;, width=&quot;320&quot;, height=&quot;200&quot;)]
public class Tunnel extends Sprite{
    [Embed(source='red_smoke.jpg')]
    private var Texture:Class;
    private var textureImg:BitmapData;

    private var tunnelEffect:BitmapData;
    private var distanceTable:Array = [];
    private var angleTable:Array = [];

    private var w:int;
    private var h:int;

    private var count:int;
    private const CYCLE:int = 50;
    private var bmdCache:Array = [];

    public function Tunnel(){
        // Load texture 512 x 512
        textureImg = new Texture().bitmapData;

        // Create buffer screen
        tunnelEffect = new BitmapData(320, 200);
        addChild(new Bitmap(tunnelEffect));
        w = tunnelEffect.width;
        h = tunnelEffect.height;

        var ratio:Number = 32.0

        // Make the tables twice as big as the screen. 
        // The center of the buffers is now the position (w,h).
        for (var x:int = 0; x &lt; w * 2; x++){
            distanceTable[x] = [];
            angleTable[x] = [];
            for (var y:int = 0; y &lt; h * 2; y++){
                var depth:int = int(ratio * textureImg.height / Math.sqrt((x - w) * (x - w) + (y - h) * (y - h))) ;
                var angle:int = int(0.5 * textureImg.width * atan2(y - h, x - w) / Math.PI) ;

                // The distance table contains for every pixel of the 
                // screen, the inverse of the distance to the center of 
                // the screen this pixel has.
                distanceTable[x][y] = depth ;

                // The angle table contains the angle of every pixel of the screen, 
                // where the center of the screen represents the origin.
                angleTable[x][y] = angle ;
            }
        }

        var tf:TextField = new TextField();
        tf.text = &quot;Click to start...&quot;;
        addChild(tf);

        var i:int = 0;
        stage.addEventListener(&quot;click&quot;, function(event:*):void{
            stage.removeEventListener(&quot;click&quot;, arguments.callee);
            setTimeout(function():void{
                if(i &gt;= CYCLE){
                    // Buffering finish. Start animating.
                    addEventListener(&quot;enterFrame&quot;, function(event:*):void{draw()});
                    removeChild(tf);
                    return;
                }

                // Create buffered images.
                tf.text = &quot;Buffering &quot; + int(i / CYCLE * 100) + &quot;%...&quot;;
                createBmdCache(i++);
                setTimeout(arguments.callee, 20);
            }, 0);
        });
    }

    // Create i-th buffered image.
    private function createBmdCache(i:int):void{
        var timeDisplacement:Number = count++ / CYCLE;

        // Calculate the shift values out of the time value
        var shiftX:int = textureImg.width * timeDisplacement; // speed of zoom
        var shiftY:int = textureImg.height * timeDisplacement; //speed of spin

        var bmd:BitmapData = new BitmapData(w * 2, h * 2);
        for (var y:int = 0; y &lt; h * 2; y++)  {
            for (var x:int = 0; x &lt; w * 2; x++) {
                // Make sure that x + shiftLookX never goes outside 
                // the dimensions of the table
                var texture_x:int = (distanceTable[x][y] + shiftX) % textureImg.width;
                var texture_y:int = (angleTable[x][y] + shiftY + textureImg.height) % textureImg.height;

                var color:uint = textureImg.getPixel(texture_x, texture_y);
                color = darken(color, 300 / distanceTable[x][y]);
                bmd.setPixel(x, y, color);
            }
        }
        bmdCache[i] = bmd;
    }

    private function draw():void{
        // looking left/right and up/down
        var shiftLookX:int = w / 2 + w / 4 * Math.sin(count / 20);
        var shiftLookY:int = h / 2 + h / 4 * Math.sin(count / 20 * 1.5);
        var rect:Rectangle = new Rectangle(shiftLookX, shiftLookY, w, h);

        tunnelEffect.copyPixels(bmdCache[count % CYCLE], rect, new Point(0, 0));
        count++;
    }

    private function darken(color:uint, brightness:Number):uint{
        brightness = brightness &gt; 1 ? 1 : brightness &lt; 0 ? 0 : brightness;
        return (((color &amp; 0xff0000) &gt;&gt; 16) * brightness &lt;&lt; 16)
             + (((color &amp; 0x00ff00) &gt;&gt;  8) * brightness &lt;&lt;  8)
             + (((color &amp; 0x0000ff)      ) * brightness      );
    }

    private function atan2(y:Number, x:Number):Number{
        if (x == 0) return Math.PI * (y &gt; 0 ? .5 : -.5);
        if (x &lt; 0 &amp;&amp; y &lt; 0) return Math.atan(y / x) - Math.PI;
        return Math.atan(y / x) + (x &gt; 0 ? 0 : Math.PI)
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-03-30" title="">
<body>
*processing_trial*Processing をちょっと触ってみた
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090327/tunnel_as3&quot;&gt;前回&lt;/a&gt;、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090326/firecube_as3&quot;&gt;前々回&lt;/a&gt; でも触れたとおり、Processing を少し触ってみました。その雑感をエントリにしておきます。

まず感じたのは Java の知識がなくても、ソースをいじっていけるのが素敵だということ。クラスすら定義しなくていいので変数やループが分かれば一通りのことができるのが魅力的です。しかも、標準関数では、3D 使えたり、HSV が使えたり、ちょっとした便利関数（&lt;a href=&quot;http://processing.org/reference/rectMode_.html&quot;&gt;rectMode()&lt;/a&gt; や &lt;a href=&quot;http://processing.org/reference/constrain_.html&quot;&gt;constrain()&lt;/a&gt;）が用意されてたり、お手軽感満載でした。ヘルプも関数ごとに小さなサンプルとスクリーンキャプチャがあってイメージが沸きやすいし、標準付属のサンプルも非常に充実していて、順番に見ていくだけでも楽しかったです。

対して、ActionScript ではフィルタが充実していたり、BitmapData のメソッドでマニアックな最適化ができたりと、噛みごたえもあるのですが、ヘルプもサンプルも微妙だし、OOP で学習しにくいし……。

と考えると、初心者には Processing の方が学習しやすいかもしれません。Web で作品を公開するなら、Flash Player のほうが JAVA Applet よりも心理的な抵抗が小さいのはメリットなんですが…。

</body>
<comments>
<comment>
<username>fu</username>
<body>processingは思いついたのをパッとアウトプットできてよいですよね！</body>
<timestamp>1238450979</timestamp>
</comment>
</comments>
</day>
<day date="2009-04-01" title="">
<body>
*april_fool2009*エイプリルフールをやってるサイトまとめ 2009
2009年4月1日にエイプリルフールのネタをやってるホームページを全力でまとめます。

※見つけ次第、随時追加していきます。

====
（追記）2009/04/02 1:00

取り上げる予定でしたが１つも見つけられませんでした。詳しく知りたい人は &lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20090401_april_fool_matome/&quot;&gt;エイプリルフールに便乗しているサイトまとめ2009年版 - GIGAZINE&lt;/a&gt; を見るといいと思います。
</body>
</day>
<day date="2009-04-02" title="">
<body>
*hatebu_nenkan200903*[はてブ年鑑]はてブ年鑑2009年3月分 更新
&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090402/20090402014023.png?1238604220&quot; width=&quot;450&quot; height=&quot;382&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

３月は少し技術的な内容が多かったような気がします。いくつか見落としてた記事があるので、あとでじっくり見てみよっと。

続きは &lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; で！
</body>
</day>
<day date="2009-04-06" title="">
<body>
*irbweb_released*[ruby][silverlight]ブラウザ上で Ruby を試せる「IRBWEB」を作ってみた
Ruby を試してみたいけどインストールするのは面倒…。そんな人のためにブラウザ上で Ruby を試せる &lt;a href=&quot;http://tech.nitoyon.com/irb/&quot;&gt;IRBWEB&lt;/a&gt; というサービスを作ってみました。

irb のように、Ruby の構文を実験できてとてもお手軽です。
&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/irb/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090406/20090406011151.png&quot; width=&quot;450&quot; height=&quot;344&quot; border=&quot;0&quot;&gt;&lt;br&gt;IRBWEB&lt;/a&gt;&lt;/center&gt;&lt;

完全にブラウザ上で動作するため、動作もさくさく。ちょっとしたコードを書いて動作確認も楽しめますね。

なお、変数を定義するには $a のようにグローバル変数として定義しないと、次の入力で参照できません。

**動作環境
Silverlight 2.0 のランタイムが必要です。

Silverlight 2.0 は Windows の IE だけでなく、Firefox や Mac の Safari、さらには主要な Linux ディストリビューションでも動作するので、この機会にインストールしてみるとよいですね。

(追記 2009/4/6) &lt;s&gt;Firefox 3.0 では動かないようです。&lt;/s&gt; → 修正しました。ロード完了後に Silverlight オブジェクトを &lt;code&gt;display: none&lt;/code&gt; で隠したのがいけなかったようです。なんというバッドノウハウ。

**仕組み
Silverlight 2.0 には DLR という仕組みがあって、この上で Ruby や Python が動きます。今回は、&lt;a href=&quot;http://www.codeplex.com/sdlsdk&quot;&gt;Silverlight Dynamic Language SDK&lt;/a&gt; 0.5.0 についてきた repl のサンプルを少し修正して公開しています。
</body>
<comments>
<comment>
<username>ujihisa</username>
<body>どういう実装かわからないけど、evalしているならbindingを保持すればローカル変数使えそうな気がする。どうなのだろう</body>
<timestamp>1238952422</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>なるほど。いまはすごく手抜きで、ライブラリが用意している Repl クラスを使ってるだけなので、余力があればその辺も調査したいところです！</body>
<timestamp>1238990985</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>while 1&lt;br&gt;end&lt;br&gt;ってやってみた。ひでぇ（笑</body>
<timestamp>1238996780</timestamp>
</comment>
<comment>
<username>kanegon</username>
<body>ローカル変数はevalするとき、第2パラメタにTOPLEVEL_BINDINGを付加するだけでいけそうな気がします</body>
<timestamp>1239158893</timestamp>
</comment>
</comments>
</day>
<day date="2009-04-07" title="">
<body>
*ipyweb_released*ブラウザ上で Python を試せる「IPYWEB」を作ってみた
Silverlight2 の IronRuby を使って &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090406/irbweb_released&quot;&gt;ブラウザ上で Ruby を試せる「IRBWEB」を作ってみた&lt;/a&gt; ので、その延長でブラウザ上で Python を試せる &lt;a href=&quot;http://tech.nitoyon.com/ipy/&quot;&gt;IPYWEB&lt;/a&gt; を作ってみた。

&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/ipy/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090407/20090407014321.png?1239036637&quot;&gt;&lt;br&gt;IPYWEB&lt;/a&gt;&lt;/center&gt;&lt;

Silverlight のソースは &lt;a href=&quot;http://www.codeplex.com/sdlsdk&quot;&gt;Silverlight Dynamic Languages SDK&lt;/a&gt; 0.5.0 の &lt;a href=&quot;http://github.com/jschementi/agdlr/blob/446d01e6ba570c7a489a4f02d1f7dc60781bc132/samples/python/repl/python/app.py&quot;&gt;Repl サンプル&lt;/a&gt;そのまま。修正したのは HTML・JavaScript・CSS だけ。IronPython さまさま。

**Firefox の謎
現在の *.xap は、Iron*** を含んでいて 1MB 近くあるので、ローディング中は Silverlight を表示したい。ただ、ロードが完了すれば Silverlight の表示は不要になるので、*.xap の初期化が完了した段階で JS を使って *.xap を隠している。

けれども、これをやると IE では動くのに、何故か Firefox で *.xap が再度実行されてしまう。対処方法は全く不明で、JS 経由であれやこれやするのがいけないのかもしれない。全く意味が分からん。

手がかりは昨日のエントリで id:matarillo:detail さんがコメントしてくれた
&gt;http://b.hatena.ne.jp/matarillo/20090406#bookmark-12830524:title&gt;
bodyのスタイルを後からoverflow:hiddenにするとapp.rbが再度動いてしまいREPLのdivがさらに追加されるのでJSでセットしない
&lt;&lt;
というコメントのみ。んー、これってどこかに情報があるんでしょうか。。。対処法はないんだろうか。。。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090406/irbweb_released:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-04-09" title="">
<body>
*kmeans_visualise*クラスタリングの定番アルゴリズム「K-means法」をビジュアライズしてみた
&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873113644/nitoyoncom-22/ref=nosim&quot;&gt;集合知プログラミング&lt;/a&gt; を読んでいたら、K-means 法（K平均法）の説明が出てきました。

K-means 法はクラスタリングを行うための定番のアルゴリズムらしいです。存在は知っていたんだけどいまいちピンときていなかったので、動作を理解するためにサンプルを作ってみました。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FKMeans.swf&amp;amp;up_background=%23223344&amp;amp;synd=open&amp;amp;w=430&amp;amp;h=410&amp;amp;title=K-means+algorithm&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が有効だと、ここ分かりやすい Flash が表示されますよ)&lt;/noscript&gt;&lt;/center&gt;&lt;

クリックすると１ステップずつ動かすことができます。クラスタの数や点の数を変更して、Restart を押すと好きなパラメータで試すことができます。

こうやって１ステップずつ確認しながら動かしてみると、意外に単純な仕組みなのが実感できました。

**K-means 法とは
&lt;a href=&quot;http://ja.wikipedia.org/wiki/K%E5%B9%B3%E5%9D%87%E6%B3%95&quot;&gt;K平均法 - Wikipedia&lt;/a&gt; に詳しく書いてあるけど、もうすこしザックリと書くとこんなイメージになります。
+各点にランダムにクラスタを割り当てる
+クラスタの重心を計算する。
+点のクラスタを、一番近い重心のクラスタに変更する
+変化がなければ終了。変化がある限りは 2. に戻る。
これでも分かりにくいですね。例題を紹介しましょう。

**図で解説！
***(ステップ1) 1. 初期状態
これが初期状態です。色がクラスタを表していています。５色あるので、クラスタは５つですね。

各点にランダムな色を割り振っています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022450.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

***(ステップ2) 2. 重心を計算する
クラスタごとに重心（座標の平均値）を求めます。×印が重心です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022519.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;
====

***(ステップ3) 3. 一番近い重心の色に変わる
それぞれの点の色を塗り替えます。自分から一番近い重心の色に変わります。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409023131.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

青の重心は近くに点が少ないので、寂しいクラスタになっちゃってますね。

***(ステップ4) 2. 再度、重心を計算する
重心の位置やクラスタに変化があったので、2. に戻ります。

新しいクラスタでの重心の位置を求めます。×印がクラスタの中心に移動してますね。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022541.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

***(ステップ5) 3. 再度、色を置き換える
新しい重心の位置に応じて、もう一度色を置き換えます。青と黄が勢力を拡大しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022619.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

***(ステップ6) 2. また重心を計算する
相変わらず変化があったので、重心の位置をもう１度計算します。

黄緑の重心が少し右方向に移動しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022633.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;


***(ステップ7) 3. また色を置き換える
再クラスタリングします。

黄緑が赤を少し奪い、黄色が黄緑を少し奪いました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022700.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

***(ステップ7) 2. またまた重心を計算する
黄緑の重心が、さらに右に移動しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022726.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

***(ステップ8) 3. またまた色を置き換える
黄緑がさらに右方向に勢力を拡大しています。それに伴い、左の方の陣地は、黄色や青色に奪われています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409022852.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;


***(最後) 9. 変化がなくなった
さらに何ステップか経過させた結果、ここで終了しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090409/20090409023141.png&quot; width=&quot;350&quot; height=&quot;264&quot;&gt;&lt;/center&gt;&lt;

最終的に黄緑は右上の点を占領したようです。

全ての点が一番近い重心に属していて、重心の位置も変化しない状態です。それらしく色分けできているのが分かります。


**まとめ
K-means 法は単純な仕組みで動いていることが分かりました。単純だからこそ、色んな改良をしやすいんでしょうね。

ソースコードは少し長いので http://tech.nitoyon.com/misc/swf/KMeans.as に置いています。

isbn:4873113644:detail

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090413/kmeans_visualize_3d:title]
-[http://d.hatena.ne.jp/nitoyon/20100126/dijkstra_aster_visualize:title]
-[http://d.hatena.ne.jp/nitoyon/20090316/postal_map:title]
-[http://d.hatena.ne.jp/nitoyon/20090303/dp:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>なまえ</username>
<body>はじめまして。&lt;br&gt;ソースを拝見したところ、初期のデータ分布はランダムのようですが、&lt;br&gt;「どんな構造のデータでもクラスタリングできる」と誤解を招く恐れが&lt;br&gt;あるのではないかと思います。ビジュアライズが非常に美しいだけに。</body>
<timestamp>1239363644</timestamp>
</comment>
<comment>
<username>yukoba</username>
<body>ぜひ、今度、滑降シンプレックス法（関数の最小値を求めるやつ、最適化）をビジュアライズしてください～!3次元だと楽しいと思います。&lt;br&gt;Numerical Recipes in C にアルゴリズムが載っています。</body>
<timestamp>1239423669</timestamp>
</comment>
<comment>
<username>nishiohirokazu</username>
<body>ちょっと昔だとこういうのはJavaアプレットで作ってたけど、やっぱりFlashだとかっこよさが段違いですねぇ。</body>
<timestamp>1242366514</timestamp>
</comment>
</comments>
</day>
<day date="2009-04-13" title="">
<body>
*kmeans_visualize_3d*３Ｄ版！「K-Means法」ビジュアライズしてみた
前回の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise&quot;&gt;クラスタリングの定番アルゴリズム「K-means法」をビジュアライズしてみた&lt;/a&gt; が好評だったので、３Ｄ空間でも K平均法をビジュアライズしてみました。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FKMeans3D.swf&amp;amp;up_background=%23223344&amp;amp;synd=open&amp;amp;w=430&amp;amp;h=410&amp;amp;title=K-means+algorithm+3D&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 10 以上が有効だと、ここに Flash が表示されますよ)&lt;/noscript&gt;&lt;/center&gt;&lt;

ちょっと重めなのでクリックすると始まります。さらにクリックして、１ステップずつ動かしてみてください。3次元にしてみると、宇宙空間のように見えてきて美しいです。

前回からは数式の上ではほとんど変わってなくて、２次元空間上での距離だったのが３次元での距離になったぐらいです。K平均法については、前回のエントリ &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise&quot;&gt;クラスタリングの定番アルゴリズム「K-means法」をビジュアライズしてみた&lt;/a&gt; をご覧ください。

ちなみに、3次元座標の計算は、Flash 10 から導入された Matrix3D を使っています。ソースは &lt;a href=&quot;http://nutsu.com/blog/2008/102321_matrix3d_test.html&quot;&gt;[as]FP10をそろそろ。Matrix3Dとか [NUTSU]&lt;/a&gt; を参考にさせてもらいました。Zソートしてないので、たまに奥のものが手前に表示されたりするのですが、あまり気にならないのでそのままにしてます。

以下、ソースコードです(364行)。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// K-Means algorithm visualization
//  - requires sketchbook
//    http://sketchbook.libspark.org/
//  - requires tweener
//    http://code.google.com/p/tweener/
package{
import flash.display.*;
import flash.events.Event;
import flash.text.TextField;
import flash.geom.*;
import sketchbook.colors.ColorSB;
import caurina.transitions.Tweener;
import flash.system.Capabilities;

[SWF(backgroundColor=&quot;#223344&quot;, frameRate=18, width=400, height=400)]
public class KMeans3D extends Sprite{
    private var k:int;
    private var n:int;
    private var colors:Array;
    private var dots:Vector.&lt;Dot&gt;;
    private var dotsPos:Vector.&lt;Number&gt;;
    private var dotsView:Vector.&lt;Number&gt;;
    private var groups:Array;
    private var centers:Vector.&lt;Center&gt;;
    private var changed:Boolean;
    private var canvas:Sprite = new Sprite();
    private var lineCanvas:Sprite = new Sprite();
    private var started:Boolean = false;

    private var _matrix:Matrix3D = new Matrix3D;
    private var rotateAxis:Vector3D = new Vector3D( 0.2, 1.0, 0.1 );

    private const WIDTH:int = 400;
    private const HEIGHT:int = 300;
    private const SIZE:int = 200;
    private const ANIMATE:Number = .4;

    public function KMeans3D():void{
        stage.scaleMode = &quot;noScale&quot;;

        var version:int = parseInt(Capabilities.version.split(&quot; &quot;)[1].split(&quot;,&quot;)[0]);
        if (version &lt; 10){
            var tf:TextField = new TextField();
            tf.textColor = 0xffffff;
            tf.autoSize = &quot;left&quot;;
            tf.text =&quot;Flash Player 10 or later required.&quot;;
            addChild(tf);
            return;
        }

        // init canvas
        canvas.x = lineCanvas.x = WIDTH / 2;
        canvas.y = lineCanvas.y = HEIGHT / 2;
        canvas.graphics.beginFill(0x000000, 0);
        canvas.graphics.drawRect(-WIDTH / 2, -HEIGHT / 2, WIDTH, HEIGHT);
        canvas.graphics.endFill();
        canvas.useHandCursor = buttonMode = true;
        canvas.mouseChildren = false;
        addChild(lineCanvas);
        addChild(canvas);

        var state:int = 0;
        canvas.addEventListener(&quot;click&quot;, function(event:Event):void{
            if (!started){
                addEventListener(&quot;enterFrame&quot;, render);
                started = true;
                return;
            }

            if(state == 0){
                moveCenter();
            }else{
                updateGroups();
            }
            state = (state + 1) % 2;
        });

        // init inputs
        var nInput:Input = new Input(&quot;N (the number of node):&quot;, &quot;100&quot;);
        nInput.y = HEIGHT + 5;
        addChild(nInput);

        var kInput:Input = new Input(&quot;K (the number of cluster):&quot;, &quot;5&quot;);
        kInput.y = nInput.y + nInput.height + 5;
        addChild(kInput);

        var nextButton:Button = new Button(&quot;Step&quot;);
        nextButton.y = kInput.y + kInput.height + 5;
        addChild(nextButton);
        nextButton.addEventListener(&quot;click&quot;, canvas.dispatchEvent);

        var resetButton:Button = new Button(&quot;Restart&quot;);
        resetButton.x = nextButton.width + 5;
        resetButton.y = nextButton.y;
        addChild(resetButton);
        resetButton.addEventListener(&quot;click&quot;, function(event:Event):void{
            changed = true;
            state = 0;

            k = kInput.value;
            n = nInput.value;
            init();
        });
        resetButton.dispatchEvent(new Event(&quot;click&quot;));
        render();
    }

    private function init():void{
        // remove previous sprites
        graphics.clear();
        for each(var dot:Dot in dots){
            canvas.removeChild(dot);
        }
        for each(var center:Center in centers){
            if(center) canvas.removeChild(center);
        }

        // init colors
        colors = [];
        for(var i:int = 0; i &lt; k; i++){
            colors.push(ColorSB.createHSB(i * 360 / k, 90, 100).value);
        }

        // init dot
        dots = new Vector.&lt;Dot&gt;(n);
        dotsPos = new Vector.&lt;Number&gt;((n + k) * 3);
        dotsView = new Vector.&lt;Number&gt;((n + k) * 3);
        groups = [];
        centers = new Vector.&lt;Center&gt;(k);
        for(i = 0; i &lt; n; i++){
            var group:int = Math.floor(Math.random() * k);
            dots[i] = new Dot(colors[group]);
            canvas.addChild(dots[i]);
            dotsPos[i * 3 + 0] = Math.random() * SIZE - SIZE / 2;
            dotsPos[i * 3 + 1] = Math.random() * SIZE - SIZE / 2;
            dotsPos[i * 3 + 2] = Math.random() * SIZE - SIZE / 2;

            if(!groups[group]) groups[group] = [];
            groups[group].push(i);
        }
    }

    private function render(event:Event = null):void{
        _matrix.appendRotation( 1, rotateAxis );
        _matrix.transformVectors(dotsPos, dotsView);

        //描画
        for (var i:int = 0; i &lt; n; i++){
            dots[i].update(dotsView[i * 3], 
                           dotsView[i * 3 + 1],
                           dotsView[i * 3 + 2]);
        }

        lineCanvas.graphics.clear();
        for (i = 0; i &lt; k; i++){
            if (!centers[i]) continue;
            centers[i].update(dotsView[(n + i) * 3], 
                              dotsView[(n + i) * 3 + 1],
                              dotsView[(n + i) * 3 + 2]);
            var col:uint = colors[i];
            var cx:Number = centers[i].x;
            var cy:Number = centers[i].y;

            for each(var index:int in groups[i]){
                lineCanvas.graphics.lineStyle(0, col, .5);
                lineCanvas.graphics.moveTo(dots[index].x, dots[index].y);
                lineCanvas.graphics.lineTo(cx, cy);
                lineCanvas.graphics.lineStyle();
            }
        }
    }

    private function moveCenter():void{
        for each(var dot:Dot in dots) dot.glow = false;
        if(!changed) return;

        graphics.clear();
        var animated:Boolean = false;
        for(var i:int = 0; i &lt; groups.length; i++){
            if(!groups[i] || !groups.length){
                continue;
            }

            // get center of gravity
            var x:Number = 0, y:Number = 0, z:Number = 0;
            for each(var index:int in groups[i]){
                x += dotsPos[index * 3];
                y += dotsPos[index * 3 + 1];
                z += dotsPos[index * 3 + 2];
            }
            var gc:int = groups[i].length;
            x /= gc;
            y /= gc;
            z /= gc;

            if(centers[i]){
                Tweener.addTween(centers[i], {
                    ax: x, ay: y, az: z, time: ANIMATE
                });
                animated = true;
            }else{
                centers[i] = new Center(colors[i], dotsPos, (n + i) * 3);
                dotsPos[(n + i) * 3 + 0] = x;
                dotsPos[(n + i) * 3 + 1] = y;
                dotsPos[(n + i) * 3 + 2] = z;
                centers[i].update(x, y, z);
                canvas.addChild(centers[i]);
            }
        }
    }

    private function updateGroups():void{
        changed = false;
        groups = [];
        for (var i:int = 0; i &lt; n; i++){
            // find the nearest group
            var min:Number = Infinity;
            var group:int = -1;
            for(var j:int = 0; j &lt; k; j++){
                var center:Center = centers[j];
                if(!center) continue;

                var d:Number = Math.sqrt(
                      Math.pow(dotsPos[(n + j) * 3 + 0] - dotsPos[i * 3 + 0], 2)
                    + Math.pow(dotsPos[(n + j) * 3 + 1] - dotsPos[i * 3 + 1], 2)
                    + Math.pow(dotsPos[(n + j) * 3 + 2] - dotsPos[i * 3 + 2], 2));
                if(d &lt; min){
                    min = d;
                    group = j;
                }
            }

            // update group
            var dot:Dot = dots[i];
            if(!groups[group]) groups[group] = [];
            groups[group].push(i);
            if(dot.color != colors[group]){
                dot.color = colors[group];
                dot.glow = true;
                changed = true;
            }
        }
    }
}
}

import flash.display.*;
import flash.text.*;
import flash.filters.GlowFilter;

const F:Number = 400;

class Sprite3D extends Sprite{
    public function update(_x:Number, _y:Number, _z:Number):void{
        var vz:Number = F / (_z + F);
        x = _x * vz;
        y = _y * vz;
        scaleX = scaleY = vz - .5;
    }
}

class Dot extends Sprite3D{
    private var _color:uint;
    public function get color():uint{return _color;}
    public function set color(v:uint):void{
        _color = v;
        draw();
    }

    public function set glow(v:Boolean):void{
        if(v) filters = [new GlowFilter(0xffffff, 1, 5, 5)];
        else filters = [];
    }

    public function Dot(col:uint){
        color = col;
    }

    private function draw():void{
        graphics.clear();
        graphics.beginFill(_color);
        graphics.drawCircle(0, 0, 5);
        graphics.endFill();
    }
}

class Center extends Sprite3D{
    private var dots:Vector.&lt;Number&gt;;
    private var index:int;

    public function get ax():Number{ return dots[index]; }
    public function get ay():Number{ return dots[index + 1]; }
    public function get az():Number{ return dots[index + 2]; }
    public function set ax(v:Number):void{ dots[index] = v; }
    public function set ay(v:Number):void{ dots[index + 1] = v; }
    public function set az(v:Number):void{ dots[index + 2] = v; }

    public function Center(col:uint, dots:Vector.&lt;Number&gt;, index:int){
        this.dots = dots;
        this.index = index;

        graphics.lineStyle(3, 0xffffff);
        draw();
        graphics.endFill();

        graphics.lineStyle(2, col);
        draw();
        graphics.endFill();
    }

    private function draw():void{
        graphics.moveTo(-5, -5);
        graphics.lineTo(5, 5);
        graphics.moveTo(5, -5);
        graphics.lineTo(-5, 5);
    }
}

class Button extends Sprite{
    public function Button(label:String){
        useHandCursor = buttonMode = true;
        mouseChildren = false;

        var t:TextField = new TextField();
        t.text = label;
        t.autoSize = &quot;left&quot;;
        t.selectable = false;
        t.x = t.y = 5
        addChild(t);

        graphics.beginFill(0xcccccc);
        graphics.drawRect(0, 0, t.width + 10, t.height + 10);
        graphics.endFill();
    }
}

class Input extends Sprite{
    private var input:TextField;

    public function get value():int{
        return parseInt(input.text, 10);
    }

    public function Input(labelStr:String, valueStr:String):void{
        var tf:TextFormat = new TextFormat();
        tf.size = 20;

        var label:TextField = new TextField();
        input = new TextField();
        input.textColor = label.textColor = 0xffffff;
        input.defaultTextFormat = label.defaultTextFormat = tf;

        label.text = labelStr;
        label.autoSize = &quot;left&quot;;
        addChild(label);

        input.border = true;
        input.borderColor = 0x999999;
        input.type = &quot;input&quot;;
        input.text = valueStr;
        input.height = 22;
        addChild(input).x = 220;
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise:title]
-[http://d.hatena.ne.jp/nitoyon/20080616/as_3d_lessen1:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-04-15" title="">
<body>
*hokkaido*北海道を落とすとどう跳ねるのか？
北海道を落としたらどうなるんだろう？　少し気になったので調べてみました。START をクリックすると確認できます。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://tech.nitoyon.com/hokkaido/hokkaido_gadgets.xml&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=350&amp;amp;title=&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090415/20090415115348.png&quot; width=&quot;450&quot; height=&quot;350&quot;&gt;&lt;br&gt;&lt;strong&gt;(Flash Player 9 が有効になっている必要があります)&lt;/strong&gt;&lt;/noscript&gt;&lt;/center&gt;&lt;


北海道以外も確認できるので、しばらく待って気になる都道府県が登場するのを待つとよいかもしれません。特に九州の長崎と鹿児島は壮観です。

**スクリーンセーバー
スクリーンセーバを作成しました。全画面で落とせます。
-&lt;a href=&quot;http://www.vector.co.jp/soft/winnt/amuse/se475616.html&quot;&gt;Windows 向けスクリーンセーバー&lt;/a&gt;

**ホームページ・ブログへの埋め込み
ホームページやブログに埋め込むこともできます。次の HTML を貼り付けてみてください。
&gt;&lt;textarea rows=&quot;3&quot; cols=&quot;50&quot;&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://tech.nitoyon.com/hokkaido/hokkaido_gadgets.xml&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=350&amp;amp;title=&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;/textarea&gt;&lt;

&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fhokkaido-omiyage%2F435124%2F444035%2F%23379380&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fhokkaido-omiyage%2Fi%2F379380%2F&quot;&gt;&lt;img src=&quot;http://image.rakuten.co.jp/wshop/data/ws-mall-img/hokkaido-omiyage/img128/img103264925.jpeg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;よつ葉バター1缶&quot; title=&quot;よつ葉バター1缶&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fhokkaido-omiyage%2F435124%2F444035%2F%23379380&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fhokkaido-omiyage%2Fi%2F379380%2F&quot;&gt;よつ葉バター1缶&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ジャンル:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz100227%2F&quot; target=&quot;_blank&quot;&gt;食品&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz100262%2F&quot; target=&quot;_blank&quot;&gt;チーズ・乳製品&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz404974%2F&quot; target=&quot;_blank&quot;&gt;バター&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz100264%2F&quot; target=&quot;_blank&quot;&gt;その他&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ショップ:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fhokkaido-omiyage%2F&quot; target=&quot;_blank&quot;&gt;北海道お土産探検隊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;価格:&lt;/span&gt; 593円&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fhokkaido-omiyage%2F435124%2F444035%2F%23379380&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fhokkaido-omiyage%2Fi%2F379380%2F&quot; target=&quot;_blank&quot;&gt;楽天で詳細を見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>non</username>
<body>最後、「どの都道府県を落とますか？」に……</body>
<timestamp>1239750976</timestamp>
</comment>
<comment>
<username>iojoire</username>
<body>最後の選択出来る所で右下1個空いてるので、そこに隠し要素で変なの入ってると楽しいかも？</body>
<timestamp>1239757480</timestamp>
</comment>
<comment>
<username>lock”the”sys</username>
<body>日本列島を落とすが欲しかったです</body>
<timestamp>1239758421</timestamp>
</comment>
<comment>
<username>tani</username>
<body>神奈川バランスよすぎ</body>
<timestamp>1239758732</timestamp>
</comment>
<comment>
<username>the48</username>
<body>イタリアとか落とせませんか？</body>
<timestamp>1239762711</timestamp>
</comment>
<comment>
<username>nakakoh</username>
<body>あとで友達みせるために飛ばして次の都道府県いく機能ほしい</body>
<timestamp>1239766579</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>群馬踊りすぎだろｗ</body>
<timestamp>1239767011</timestamp>
</comment>
<comment>
<username>MG-TSK</username>
<body>バカリズムみたいで面白い&lt;br&gt;&lt;br&gt;あと、神奈川の安定性ｗｗｗ</body>
<timestamp>1239767526</timestamp>
</comment>
<comment>
<username>akiyan</username>
<body>ニコニコ動画にアップすべき</body>
<timestamp>1239770491</timestamp>
</comment>
<comment>
<username>yoshi</username>
<body>石川県の直立具合www</body>
<timestamp>1239773170</timestamp>
</comment>
<comment>
<username>natumezaka</username>
<body>栃木県しぶとすぎｗ</body>
<timestamp>1239774582</timestamp>
</comment>
<comment>
<username>hive</username>
<body>佐渡かわいそう</body>
<timestamp>1239777047</timestamp>
</comment>
<comment>
<username>og</username>
<body>面白かったです。無駄に時間を費やした間はありますが（笑）&lt;br&gt;&lt;br&gt;沖縄まで見終わった後の選択して見れるのはいいのですが”Replay”のスペルが間違っているようです。</body>
<timestamp>1239781861</timestamp>
</comment>
<comment>
<username>og</username>
<body>面白かったです。無駄に時間を費やした間はありますが（笑）&lt;br&gt;&lt;br&gt;沖縄まで見終わった後の選択して見れるのはいいのですが”Replay”のスペルが間違っているようです。</body>
<timestamp>1239781913</timestamp>
</comment>
<comment>
<username>Joske</username>
<body>長崎飛び散りすぎｗｗｗ</body>
<timestamp>1239783133</timestamp>
</comment>
<comment>
<username> </username>
<body>さいたま、お前にはガッカリだ。</body>
<timestamp>1239783902</timestamp>
</comment>
<comment>
<username>tani</username>
<body>立った。。。&lt;br&gt;石川県が、立った！！</body>
<timestamp>1239784596</timestamp>
</comment>
<comment>
<username>yorihito_tanaka</username>
<body>落ちるだけでなく細い箇所がバキンと折れたりしたら、</body>
<timestamp>1239785569</timestamp>
</comment>
<comment>
<username>ha</username>
<body>愛媛県の大三島のバランスの良さ！</body>
<timestamp>1239786083</timestamp>
</comment>
<comment>
<username>mitimasu</username>
<body>おおお、鶴が舞ってる舞ってる＞群馬</body>
<timestamp>1239787616</timestamp>
</comment>
<comment>
<username>chosa</username>
<body>おもしれえ！！&lt;br&gt;岩手県、異様に固くないっすか？&lt;br&gt;次回作はガラス製みたくして、群馬県の鶴の首部分や茨城県や愛媛県の折れそうなところが折れるようにしてほしい。</body>
<timestamp>1239788423</timestamp>
</comment>
<comment>
<username>ke-tu</username>
<body>地味に都道府県の勉強になりました。</body>
<timestamp>1239788491</timestamp>
</comment>
<comment>
<username>ｎ</username>
<body>栃木県だけ弾力性高すぎだろwww</body>
<timestamp>1239789542</timestamp>
</comment>
<comment>
<username>daradaru</username>
<body>群馬と栃木が動きっぱなしなんだがｗ</body>
<timestamp>1239792079</timestamp>
</comment>
<comment>
<username>ff</username>
<body>愛媛のバランスワロタｗｗ</body>
<timestamp>1239792546</timestamp>
</comment>
<comment>
<username>masahiror</username>
<body>すごい！&lt;br&gt;最後の「どの都道府県を落とますか？」で選んで落としたときは、ドラック＆ドロップでつかんだり移動できたりするのが何気に面白かったです。</body>
<timestamp>1239796085</timestamp>
</comment>
<comment>
<username>　</username>
<body>やっぱ神奈川が一番うけるw</body>
<timestamp>1239796515</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>これ面白くするために微妙にパラいじってね？&lt;br&gt;あえて序盤の北海道から離島を除いてたり。&lt;br&gt;&lt;br&gt;最初に出た離島の佐渡に笑わせてもらい、淡路で笑えず、&lt;br&gt;香川の瀬戸内海の島々の爆発に感動しますたｗ</body>
<timestamp>1239796975</timestamp>
</comment>
<comment>
<username>kikinight</username>
<body>次は是非世界編をｗ</body>
<timestamp>1239797483</timestamp>
</comment>
<comment>
<username>minusdriver</username>
<body>重さや跳ね返り方が県によって違うのは、どういうパラメータなんですかね。面積？人口？その辺と絡めてるなら面白いかも。人口あるいは人口密度が高いところはずっしり重い設定、とか。</body>
<timestamp>1239798740</timestamp>
</comment>
<comment>
<username>marukomekid</username>
<body>神奈川に１０点満点</body>
<timestamp>1239799635</timestamp>
</comment>
<comment>
<username>ぶんぶく</username>
<body>栃木サイコー</body>
<timestamp>1239801171</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>県によって反発係数違いすぎｗ</body>
<timestamp>1239803980</timestamp>
</comment>
<comment>
<username>やぶ</username>
<body>茨城県とパーマンバッジってにてる！</body>
<timestamp>1239804406</timestamp>
</comment>
<comment>
<username>tezoooka</username>
<body>やっと見終わった。最後に気づいたけど、落下中にマウスでつまめるんだ。</body>
<timestamp>1239805907</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>反発係数一定にして欲しいな</body>
<timestamp>1239806292</timestamp>
</comment>
<comment>
<username>mm</username>
<body>山形、飛島ないんだけど</body>
<timestamp>1239808669</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>つかむとしたらこう</body>
<timestamp>1239809484</timestamp>
</comment>
<comment>
<username>熊本県</username>
<body>熊本県の離島部分をはずすと&lt;br&gt;熊に見えることに気が付いた&lt;br&gt;（上下逆さま）&lt;br&gt;誰かうまいことキャラクター化しないかな？</body>
<timestamp>1239811198</timestamp>
</comment>
<comment>
<username>CorseccEratta</username>
<body>　こうして見ると、安定性の良い県って、四足の動物に似ているかも。</body>
<timestamp>1239812050</timestamp>
</comment>
<comment>
<username>レンタル携帯</username>
<body>なんでも落とせる様にしてみたい!!&lt;br&gt;&lt;br&gt;てか、これ栃木永遠に動いてるんじゃないの？ｗｗｗｗｗ</body>
<timestamp>1239812585</timestamp>
</comment>
<comment>
<username>tatt61880</username>
<body>Phunで作ってみました。&lt;br&gt;http://www.phunland.com/phunbox/details.php?id=19506&lt;br&gt;反発係数など、自由に弄れます。</body>
<timestamp>1239817086</timestamp>
</comment>
<comment>
<username>ｎｆ２</username>
<body>凄いなぁ。是非世界の国で、フィリピンとかインドネシアを・・・</body>
<timestamp>1239823821</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>面白い発想だね</body>
<timestamp>1239830696</timestamp>
</comment>
<comment>
<username>MP40</username>
<body>長崎が爆発してて笑った&lt;br&gt;あと、北方領土（管轄は北海道？）も忘れないでね……</body>
<timestamp>1239837658</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>群馬はしゃぎ過ぎｗｗ</body>
<timestamp>1239840643</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>実直な神奈川、石川の意外性、栃木の落ち着きのなさ、長崎の壊れっぷりにｗ</body>
<timestamp>1239841498</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; non さん、og さん&lt;br&gt;ご指摘ありがとうございます。&lt;br&gt;修正しました。&lt;br&gt;&lt;br&gt;&gt; nakakoh さん&lt;br&gt;青森以降で右下に SKIP ボタンが表示されるようにしました。&lt;br&gt;これをクリックすると一気に最後に飛べます。</body>
<timestamp>1239842519</timestamp>
</comment>
<comment>
<username>MMGames</username>
<body>肝心のフラッシュがなぜか表示されなくなってますよ。&lt;br&gt;とりあえず修正されるまでの避難用に直リンク張っておきます。&lt;br&gt;http://tech.nitoyon.com/hokkaido/hokkaido.swf</body>
<timestamp>1239848157</timestamp>
</comment>
<comment>
<username>Luna</username>
<body>大阪って90度左回転させると高知っぽく見えるなぁ</body>
<timestamp>1239850997</timestamp>
</comment>
<comment>
<username>RYDEEN</username>
<body>三重回りすぎwいいねw</body>
<timestamp>1239852811</timestamp>
</comment>
<comment>
<username>ym</username>
<body>栃木うぜぇｗｗｗ</body>
<timestamp>1239858646</timestamp>
</comment>
<comment>
<username>dosanko</username>
<body>最後、「どの都道府県を落と『し』ますか？」の『し』が抜けてます・・・。&lt;br&gt;&lt;br&gt;&lt;br&gt;北海道だけ周辺の島が省略されてるのは何故？なんて思ったり&lt;br&gt;北方四島は大人の事情かもしれませんけどｗ&lt;br&gt;アメリカ各州でやったら海外でも受けるかもしれませんね</body>
<timestamp>1239859886</timestamp>
</comment>
<comment>
<username>Kohsh!</username>
<body>弾性力はどのくらいなんですか？</body>
<timestamp>1239860177</timestamp>
</comment>
<comment>
<username>小柄</username>
<body>北海道の島が省略さていたので残念です。&lt;br&gt;でもとても面白かったです。&lt;br&gt;あちこち貼り付けていいですか？</body>
<timestamp>1239862998</timestamp>
</comment>
<comment>
<username>gavin</username>
<body>「落とますか」でいらっとしてしまいます。</body>
<timestamp>1239863756</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>こんなときしか栃木は目立てないのか</body>
<timestamp>1239866869</timestamp>
</comment>
<comment>
<username>WIN7</username>
<body>愛媛は本当に奇跡だね</body>
<timestamp>1239867736</timestamp>
</comment>
<comment>
<username>tomono-blog</username>
<body>愛知が怪獣に似ててかわいい</body>
<timestamp>1239867870</timestamp>
</comment>
<comment>
<username>blurblue</username>
<body>島がある県が素敵。&lt;br&gt;スキップ機能があるとすごくよかったのに。</body>
<timestamp>1239869644</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>石川県すごいｗｗｗｗ立ったｗｗｗｗ</body>
<timestamp>1239873327</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>俺の長崎に何をするだァー！</body>
<timestamp>1239885214</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>岡山の自立の仕方は6通り</body>
<timestamp>1239889562</timestamp>
</comment>
<comment>
<username>コルシカン</username>
<body>ほんとだ！つかめるんですね。&lt;br&gt;&quot;星探&quot;の1か2か忘れたけれど、落とさないように慎重に運ぶ面を、思い出しました。^^</body>
<timestamp>1239905348</timestamp>
</comment>
<comment>
<username>r1757</username>
<body>イタリアとか落としたら石川みたいに立つんだろうか</body>
<timestamp>1239917523</timestamp>
</comment>
<comment>
<username>M3</username>
<body>これは世界地図やアメリカの州でやってYOUTUBEにあげれば&lt;br&gt;かなり伸びる</body>
<timestamp>1239922575</timestamp>
</comment>
<comment>
<username>masakanou</username>
<body>島根県が落ちきったあと、島後島と本州の間が微妙に空間開いちゃってる気が。</body>
<timestamp>1239935833</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>すごいい！！！！</body>
<timestamp>1239937078</timestamp>
</comment>
<comment>
<username>Dr_G</username>
<body>跳ね終わった後の姿を見て、もとの都道府県名がいえるかテストも、またおかし。</body>
<timestamp>1239942286</timestamp>
</comment>
<comment>
<username>津</username>
<body>三重県は回り過ぎだと思うんだよな</body>
<timestamp>1239959284</timestamp>
</comment>
<comment>
<username>okenosokonuke</username>
<body>クール！私のHPに貼りました。</body>
<timestamp>1239961608</timestamp>
</comment>
<comment>
<username>jinsei-owata</username>
<body>栃木と三重落ち着きなさすぎ</body>
<timestamp>1239975166</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>マウスで掴んで壁の方へ投げつけると重力の向きが変わるんですが、そこは変わらない方が面白かったかも</body>
<timestamp>1239977673</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>岩手が跳ねなさすぎだ</body>
<timestamp>1240025959</timestamp>
</comment>
<comment>
<username>エクスタシー</username>
<body>大阪　新喜劇のズッコケに似てるなｗ</body>
<timestamp>1240030318</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>淡路島、兵庫県本土側に吹っ飛ばされて踏みつけられて可哀想過ぎるｗｗｗ</body>
<timestamp>1240061195</timestamp>
</comment>
<comment>
<username>mai</username>
<body>発想が素晴らしい～！！　堪能させていただきました。面白すぎる！！&lt;br&gt;石川県と群馬が個人的に大好きですｖ&lt;br&gt;これは是非世界とかにしてワールドワイドに世界の人に楽しめるようにしなければ！&lt;br&gt;この発想は日本だけでなく世界の宝ですよ、宝！</body>
<timestamp>1240063975</timestamp>
</comment>
<comment>
<username>sai</username>
<body>群馬県と栃木県の動きっぱなしが可愛らしいｗ&lt;br&gt;是非ブログに貼りたいと思います</body>
<timestamp>1240102467</timestamp>
</comment>
<comment>
<username>ml</username>
<body>愛知が立った！愛知が立った！</body>
<timestamp>1240107482</timestamp>
</comment>
<comment>
<username>eclairlove</username>
<body>長崎県民、鹿児島県民が泣いてしまうじゃないか</body>
<timestamp>1240152962</timestamp>
</comment>
<comment>
<username>565</username>
<body>愛媛の離島すっげｗｗｗｗ</body>
<timestamp>1240203185</timestamp>
</comment>
<comment>
<username>ss</username>
<body>徳島の離島どこいったｗ</body>
<timestamp>1240203690</timestamp>
</comment>
<comment>
<username>isanan</username>
<body>XPでスクリーンセーバー入れようとしたら画面が真っ白なだけなんですが</body>
<timestamp>1240231277</timestamp>
</comment>
<comment>
<username>red</username>
<body>大阪が意外と面白くない。</body>
<timestamp>1240240032</timestamp>
</comment>
<comment>
<username>good</username>
<body>栃木の粘りに脱帽</body>
<timestamp>1240245382</timestamp>
</comment>
<comment>
<username>aaa</username>
<body>神奈川の安定感は異常ｗｗ&lt;br&gt;&lt;br&gt;あと、北海道の離島も入れてくれるとうれしい</body>
<timestamp>1240265284</timestamp>
</comment>
<comment>
<username>aaa</username>
<body>神奈川の安定感は異常ｗｗ&lt;br&gt;&lt;br&gt;あと、北海道の離島も入れてくれるとうれしい</body>
<timestamp>1240265284</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; isanan さん&lt;br&gt;&gt; XPでスクリーンセーバー入れようとしたら画面が真っ白なだけなんですが&lt;br&gt;&lt;br&gt;たぶん Internet Explorer 用の Flash Player 9.0 以上がインストールされていないからだと思います。&lt;br&gt;エラーメッセージを表示するなど、分かりやすいようにしたいと思います。</body>
<timestamp>1240274672</timestamp>
</comment>
<comment>
<username>Luv134</username>
<body>いいですね、楽しかったです。&lt;br&gt;神奈川さいこー&lt;br&gt;&lt;br&gt;※岡山の一部が落下しないのが気になります；</body>
<timestamp>1240303512</timestamp>
</comment>
<comment>
<username>isanan</username>
<body>IEのFlashのバージョンを9.0.124.0→10.0.22.87にして、1.0.2版のスクリーンセーバーを落としたら正しく表示されました。&lt;br&gt;ありがとうございました。</body>
<timestamp>1240324465</timestamp>
</comment>
<comment>
<username>kazu</username>
<body>速度時間同数での動き見たい</body>
<timestamp>1240455511</timestamp>
</comment>
<comment>
<username>bay</username>
<body>ワイド画面ようのスクリーンセーバーが欲しいです！</body>
<timestamp>1240497836</timestamp>
</comment>
<comment>
<username>玉</username>
<body>愛媛の大三島出身者です・・・&lt;br&gt;こんな形で地元の島がいきるとは。びっくり。</body>
<timestamp>1240577023</timestamp>
</comment>
<comment>
<username>たけし</username>
<body>弾力性や特徴なしのみんな同じのバージョン作ってください&lt;br&gt;&lt;br&gt;（栃木や岩手も普通に）</body>
<timestamp>1240590496</timestamp>
</comment>
<comment>
<username>ape</username>
<body>東京都と岡山県と沖縄県の離島の一部が空中浮遊しているような……</body>
<timestamp>1240657233</timestamp>
</comment>
<comment>
<username>inarmo</username>
<body>デュアルディスプレイでスクリーンセイバーを動かすと、2枚のディスプレイの間で県が跳ね回ってちょっと悲しいです。</body>
<timestamp>1240918387</timestamp>
</comment>
<comment>
<username>藍古</username>
<body>し、島根が！隠岐の島が潰されてます！！&lt;br&gt;&lt;br&gt;個人的には地元・広島がほどほどに飛び散っててGoodｖ</body>
<timestamp>1240979165</timestamp>
</comment>
<comment>
<username>はぎはぎ</username>
<body>茨城県に霞ヶ浦を描画してもらえないでしょうか&lt;br&gt;滋賀県の琵琶湖とかしっかり描画されているので・・・。</body>
<timestamp>1240999283</timestamp>
</comment>
<comment>
<username>キャー</username>
<body>香川はドラッグして小豆島が下敷きになるように落とすと延々と小刻みに震えます。&lt;br&gt;断末魔のようでもありちょっとかわいそうですが笑えます。</body>
<timestamp>1241106004</timestamp>
</comment>
<comment>
<username>最高だ</username>
<body>島根ｗｗｗころころすんなｗｗｗｗ&lt;br&gt;ほんで神奈川ｗｗｗ動けｗｗｗｗ&lt;br&gt;そして栃木ｗｗｗｗｗお前にはもう何もいわないｗｗｗｗ</body>
<timestamp>1241227224</timestamp>
</comment>
<comment>
<username>最高だ</username>
<body>島根ｗｗｗころころすんなｗｗｗｗ&lt;br&gt;ほんで神奈川ｗｗｗ動けｗｗｗｗ&lt;br&gt;そして栃木ｗｗｗｗｗお前にはもう何もいわないｗｗｗｗ</body>
<timestamp>1241227225</timestamp>
</comment>
<comment>
<username>DYUOI</username>
<body>マジで受けるwwwwwww</body>
<timestamp>1241239655</timestamp>
</comment>
<comment>
<username>やばい</username>
<body>和歌山県が北山村を打ったwwwww</body>
<timestamp>1241510303</timestamp>
</comment>
<comment>
<username>栃木県民</username>
<body>栃木かわいいよ栃木www&lt;br&gt;次はぜひ世界地図で。。と思ったんですが、シャレのわからない&lt;br&gt;国もあるからな。&lt;br&gt;「我が国を落とすとは何ごとだッッ！」とか文句つけてきそう。</body>
<timestamp>1241528952</timestamp>
</comment>
<comment>
<username>aaa</username>
<body>栃木がここまで注目されることも珍しいわｗ</body>
<timestamp>1241553716</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>和歌山の子供がおもろいｗ</body>
<timestamp>1241574973</timestamp>
</comment>
<comment>
<username>マッチェロ</username>
<body>試しにこのFlashで私の地元の山形を落としてみた</body>
<timestamp>1241598485</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>おもしろーい＾＾</body>
<timestamp>1241600710</timestamp>
</comment>
<comment>
<username>生え</username>
<body>佐賀だけ跳ねない・・・&lt;br&gt;ボトって感じで・・</body>
<timestamp>1241784382</timestamp>
</comment>
<comment>
<username>広島が不思議</username>
<body>微妙にですが、広島の跳ね方が毎回違いますね。&lt;br&gt;小島を全部左に履き寄せたり、掃き寄せに失敗して途中で止まったり…。</body>
<timestamp>1241831818</timestamp>
</comment>
<comment>
<username>miko</username>
<body>うぅ～&lt;br&gt;我が神奈川～（泣）</body>
<timestamp>1242118266</timestamp>
</comment>
<comment>
<username>mono</username>
<body>北海道に北方四島・奥尻・利尻・礼文を入れていただけるともっと面白い落ち方になってくれるかと、、、；</body>
<timestamp>1243235196</timestamp>
</comment>
<comment>
<username>i</username>
<body>岩手地味すぎ</body>
<timestamp>1244293952</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>岩手地味すぎ</body>
<timestamp>1244293954</timestamp>
</comment>
<comment>
<username>ああああ</username>
<body>広島が島掃除してる・・・。</body>
<timestamp>1247360769</timestamp>
</comment>
<comment>
<username>はしご</username>
<body>この世界観がツボにはまりました☆&lt;br&gt;ブログで紹介させてください＊＾－＾＊</body>
<timestamp>1247536992</timestamp>
</comment>
<comment>
<username>rika</username>
<body>yahooブログに貼り付けさせていただきます</body>
<timestamp>1252127922</timestamp>
</comment>
<comment>
<username>light</username>
<body>おースゴイですねー&lt;br&gt;ブログで紹介させてもらいますー</body>
<timestamp>1252926502</timestamp>
</comment>
<comment>
<username>たまご</username>
<body>地元の愛知県が安定しててうれしいｗ</body>
<timestamp>1255229994</timestamp>
</comment>
<comment>
<username>Mr.名無し</username>
<body>これはニコ動にUPして評価されるべき。&lt;br&gt;かなりの再生数とコメントが期待される。</body>
<timestamp>1257517249</timestamp>
</comment>
<comment>
<username>こっこ</username>
<body>面白いのでお借りしてブログに張り付けました。&lt;br&gt;沖縄・・バラバラになって・痛そう（－－；(笑）</body>
<timestamp>1257752896</timestamp>
</comment>
<comment>
<username>ぴぽ</username>
<body>とても面白かったです！&lt;br&gt;世界版ができれば…と思います^^&lt;br&gt;ポリネシアとかどうなるんだろうｗ</body>
<timestamp>1270489755</timestamp>
</comment>
<comment>
<username>nns</username>
<body>日本列島を落としてみたいです&lt;br&gt;あとは世界の国々とか・・・</body>
<timestamp>1270535437</timestamp>
</comment>
<comment>
<username>a</username>
<body>富山はどうみても跳ねるだろ・・・&lt;br&gt;何か嫌な思いでもあるのかよ　死ね</body>
<timestamp>1270544379</timestamp>
</comment>
<comment>
<username>あああい</username>
<body>どの都道府県を落としますか?の時に和歌山をマウスでいじってたら&lt;br&gt;島がめり込んだｗｗ</body>
<timestamp>1270552032</timestamp>
</comment>
<comment>
<username>Line</username>
<body>群馬がしつこく踊りますねｗｗ　まだ踊るか！ｗ&lt;br&gt;日本列島落下、確かにちょっと期待してしまうかも……（=ω=*）ｗ</body>
<timestamp>1270569054</timestamp>
</comment>
<comment>
<username>あああ</username>
<body>和歌山の飛び地がww</body>
<timestamp>1270619749</timestamp>
</comment>
<comment>
<username>akjahkdjfha</username>
<body>ちょ・・・おい、石川とか愛知とか泊まるとこ違うだろ。&lt;br&gt;群馬とか三重とか回り杉www.</body>
<timestamp>1270802022</timestamp>
</comment>
<comment>
<username>サム</username>
<body>これは面白いですねｗ&lt;br&gt;ブログで紹介させていただきます。</body>
<timestamp>1270911026</timestamp>
</comment>
<comment>
<username>ペテン師</username>
<body>広島ガクブルｗｗｗ</body>
<timestamp>1275205180</timestamp>
</comment>
<comment>
<username>nayuta1214</username>
<body>千葉は、逆立ちしてたーでも、楽しかった。</body>
<timestamp>1276348481</timestamp>
</comment>
<comment>
<username>nayuta1214</username>
<body>千葉は、逆立ちしてたーでも、楽しかった。</body>
<timestamp>1276348482</timestamp>
</comment>
<comment>
<username>ss</username>
<body>サンプルにしては面白すぎ。すっかり本島以外の島を忘れていてほくそ笑みました。</body>
<timestamp>1276888769</timestamp>
</comment>
<comment>
<username>ss</username>
<body>サンプルにしては面白すぎ。すっかり本島以外の島を忘れていてほくそ笑みました。</body>
<timestamp>1276888769</timestamp>
</comment>
<comment>
<username>栃木県民</username>
<body>かつてこれほどまでに栃木県が注目され、これほどまでにはしゃぎまわりつづけている姿はみたことがありません。ありがとうございます！</body>
<timestamp>1277283138</timestamp>
</comment>
<comment>
<username>がるる</username>
<body>スクリーンセーバーがFlash10.1でエラーになります。なにか方法が間違っているのでしょうか。。</body>
<timestamp>1277554505</timestamp>
</comment>
<comment>
<username>もん</username>
<body>東京都に小笠原諸島が無いような・・・</body>
<timestamp>1278983462</timestamp>
</comment>
<comment>
<username>キルア</username>
<body>神奈川安定感ありすぎ！&lt;br&gt;あと長崎と沖縄がバラバラ・・・&lt;br&gt;そして三重の回転力！&lt;br&gt;この４県は気に入った</body>
<timestamp>1283246631</timestamp>
</comment>
<comment>
<username>pochi</username>
<body>群馬荒ぶってるｗｗｗ</body>
<timestamp>1287582880</timestamp>
</comment>
<comment>
<username>d</username>
<body>「発行元が～」っと出てインストールできません。&lt;br&gt;さらに、スクリーンセーバーなのにいちいちクリックしなくちゃいけない点も非常に煩わしく、改善してください。</body>
<timestamp>1290257832</timestamp>
</comment>
<comment>
<username>チビハゲガッパ</username>
<body>日本固有の『北方領土』が省略されているのは問題アリでは？？？</body>
<timestamp>1294070087</timestamp>
</comment>
<comment>
<username>どっかの名無し</username>
<body>岩手マジ重いｗｗｗｗ</body>
<timestamp>1295797168</timestamp>
</comment>
<comment>
<username>とおる</username>
<body>神奈川安定感すごいなぁ</body>
<timestamp>1297415299</timestamp>
</comment>
<comment>
<username>おーが</username>
<body>富山は五点着地法をマスターしたのか</body>
<timestamp>1301904191</timestamp>
</comment>
<comment>
<username>ゆとり世代</username>
<body>群馬の細くなってるとこよく折れなかったなw</body>
<timestamp>1302692005</timestamp>
</comment>
<comment>
<username>カランカラン</username>
<body>世界版をやってみたい</body>
<timestamp>1306395347</timestamp>
</comment>
<comment>
<username>ｄｄｄｄｄｄ</username>
<body>わろたわ</body>
<timestamp>1317726194</timestamp>
</comment>
<comment>
<username>meme</username>
<body>うわああああ隠岐ィィーーーーー！！</body>
<timestamp>1334390826</timestamp>
</comment>
<comment>
<username>わろた</username>
<body>是非Windows7版のスクリーンセーバーも作ってください。</body>
<timestamp>1335321695</timestamp>
</comment>
<comment>
<username>ピロリン２世</username>
<body>小豆島もかなり悲惨ですぜ。</body>
<timestamp>1335334714</timestamp>
</comment>
<comment>
<username>syk</username>
<body>小豆島が、超アグレッシブｗｗｗ</body>
<timestamp>1335360651</timestamp>
</comment>
<comment>
<username>なんか変だ</username>
<body>跳ね返る力が、それぞれちがうんだけど...&lt;br&gt;めちゃくちゃはねてる県と、どてっとすぐ落ち着く県と。</body>
<timestamp>1336755926</timestamp>
</comment>
</comments>
</day>
<day date="2009-04-21" title="">
<body>
*hokkaido_scr*北海道を落とすとどう跳ねるのか？スクリーンセーバ
おかげさまで各所で評判になっている &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot; title=&quot;北海道を落とすとどう跳ねるのか？&quot;&gt;北海道を落とすとどう跳ねるのか？&lt;/a&gt; ですが、Windows 版のスクリーンセーバーが完成しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090421/20090421023008.png&quot; width=&quot;400&quot; height=&quot;361&quot;&gt;&lt;/center&gt;&lt;

スクリーンセーバー版独自の機能として、落とす順番を「北から」と「ランダム」のうちから選ぶことができます！

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090421/20090421023007.png?1240249181&quot; width=&quot;400&quot; height=&quot;212&quot;&gt;&lt;/center&gt;&lt;

いつ何時でも全画面で北海道を落とすことができるので、幸せなパソコンライフを過ごせそうですね。

**ダウンロード
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot;&gt;北海道を落とすとどう跳ねるのか？&lt;/a&gt; からどうぞ。

**ソースコード
スクリーンセーバーのソースコードを公開しています。
-http://github.com/nitoyon/hokkaido/tree/master

scr フォルダに C# 版実装（1.0.0～1.0.1）、scrcpp フォルダに C++ 版実装（1.0.2）があります。Flash でスクリーンセーバーを作りたい人は参考にしてみてください。

Flash の&lt;a href=&quot;http://github.com/nitoyon/hokkaido/blob/f946f80e0263cc4a5461c72fc6d611f5141bcc43/HokkaidoBox2d.as&quot;&gt;ソースコード&lt;/a&gt;も公開しています。そこそこ複雑なことをやってるので1,000行ぐらいあります。興味がある人は見てください。今回得たノウハウについては、ブログで順次記事にしていきたいと思います。
</body>
</day>
<day date="2009-04-22" title="">
<body>
*hokkaido_uragawa*[as]北海道を落とすとどう跳ねるのか？の裏側
おかげさまで大好評の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot;&gt;北海道を落とすとどう跳ねるのか？&lt;/a&gt; ですが、どのように作ったか、製作過程を紹介することにします。

**1. 地図の素材を取ってくる
まずは地図の素材が必要です。以下のサイトから拝借しました。
-[http://www.freemap.jp/:title:bookmark]

pdf や eps 形式の地図データを無料で配布してくれているありがたいサイトです。

**2. 都道府県ごとに分割する
上記の素材は県境もベクター形式で提供されていて大変ありがたかったのですが、島がどの都道府県に属しているかの情報がありませんでした。

そこで、Google Maps と見比べながら、島を都道府県ごとに分類していきました。無事、全ての島を分類し終わって、こんな感じになりました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090422/20090422011510.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

とても地味な作業でした…。

**3. 都道府県ごとに SVG で出力する
次に、Illustrator 内で分類したデータをプログラムで扱える形式にしなければなりません。ここでは XML 形式でプログラムからも扱いやすい &lt;strong&gt;SVG&lt;/strong&gt; で出力することにしました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090422/20090422011511.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

このように、都道府県ごとに SVG で出力していきます。
====
**4. SVG を座標データに変換する
ActionScript で座標を扱いやすくするために、SVG を座標データに変換しました。

例えば、北海道の座標では、SVG には次のようなデータが含まれています。
&gt;|xml|
&lt;path i:knockout=&quot;Off&quot; fill=&quot;#FFFFFF&quot; d=&quot;
  M122.377, 57.787
  c     0,      0, -5.191, -2.143, -8.04,  -3.73
  c-2.848, -1.588, -3.957, -2.445, -4.058, -2.672
  c-0.102, -0.227,  0.024, -1.008, -0.353, -1.234
  ... 以下略
||&lt;
この記号の羅列が座標を知る鍵です。最初の、&lt;code&gt;M122.377, 57.787&lt;/code&gt; は (122.377, 57.787) まで移動しろということで、次の c が３次ベジェ曲線を&lt;code&gt;(-8.04, -3.73)&lt;/code&gt; まで描け、ということです。

こんな感じで、SVG の中身をパースして、図形を描画するところまでできました。ベジェ曲線は途中のカーブは無視して始点と終点だけを結んで描画してます。それなりに再現できてたので曲線の描画は省略しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090422/20090422011512.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

ところで、物理エンジン（Box2d）では図形は出っ張ってないといけません。直線を結んだだけでは凹んだ箇所が出てくるのでシミュレーションできません。

そこで、このプログラムでは図形の&lt;strong&gt;凸包&lt;/strong&gt;を求めています。上の図では水色の線が凸包です。凸包は図形の外側を布で覆ったところをイメージすると分かりやすいでしょう。

凸包を求めるアルゴリズムは &lt;a href=&quot;http://hilbert.elcom.nitech.ac.jp/~hontani/lecture/CompGeo/04/04.pdf&quot;&gt;凸包の計算 (PDF)&lt;/a&gt; が分かりやすかったです。今回は計算時間は重要ではなかったので、一番シンプルで泥臭い方法で求めています。

そんなこんなで SVG を座標の集合に変換することができました。変換をしているのが &lt;a href=&quot;http://github.com/nitoyon/hokkaido/blob/e06a22457df921cee4531cf78f27c0ed05d8ada3/EasySvgConvert.as&quot;&gt;EasySvgConvert.as&lt;/a&gt; で、変換結果が &lt;a href=&quot;http://github.com/nitoyon/hokkaido/raw/f946f80e0263cc4a5461c72fc6d611f5141bcc43/Prefs.as&quot;&gt;Prefs.as&lt;/a&gt; です。

**5. Box2dFlashAS3 で落とす
先ほど作った凸包の形で物体を作成して、物理シミュレーションを開始します。シミュレーション結果の位置に応じて、地形を移動回転させています。

Box2dFlashAS3 の DebugDraw 機能を ON にしてみるとこのような見た目になります。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090422/20090422011513.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

物理エンジンは複雑な地形は考えていなくて、凸包だけを認識しているわけです。

ちなみに、北海道は本島のみを落としていて、そのほかの島々は登場しません。それには理由があって、北海道がこのようないびつな形をしているからです。もし、小さな島も一緒に落としてしまうと、島との当たり判定が変に見えてしまったことでしょう。

**6. 頂点の数を減らす
SVG からそのまま凸包を求めてシミュレーションすると、どうしても丸みを帯びた角が地面に接触するときに計算数が増えてしまい、コマ落ちしてしまいました。また、素の状態だと頂点のデータだけで 150KB 程度の容量を食っていたので、データのダイエットが必須でした。

そこで頂点数を適度に間引くためのツールを Flex で作りました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090422/20090422011514.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

真ん中がオリジナル、右が間引いたあとです。この図は間引きすぎですが、違和感がない程度まで間引くよう調整しました。シリアライズして GZIP 圧縮した結果、150KB あったデータを 60KB まで削減でき、描画速度も向上しました。

ソースコードは &lt;a href=&quot;http://github.com/nitoyon/hokkaido/blob/f946f80e0263cc4a5461c72fc6d611f5141bcc43/LightenPrefs.mxml&quot;&gt;LightenPrefs.mxml&lt;/a&gt; や &lt;a href=&quot;http://github.com/nitoyon/hokkaido/blob/f946f80e0263cc4a5461c72fc6d611f5141bcc43/LightenPrefsImpl.as&quot;&gt;LightenPrefsImpl.as&lt;/a&gt; あたりです。

**7. 反発係数や摩擦を調整する
ただ落とすだけでも十分面白かったのですが、都道府県ごとに個性を持たせるようにしました。例えば、「岩手県は名前も堅そうだし形もごつごつしているのでほとんど跳ねないようにしよう」とか「栃木県は丸いからスーパーボールみたいに弾みそうだよね」とか「石川県が立ったら面白いに違いない」とかそんな感じです。

完成したパラメータは &lt;a href=&quot;http://github.com/nitoyon/hokkaido/blob/f946f80e0263cc4a5461c72fc6d611f5141bcc43/PrefBox2d.as&quot;&gt;こんな感じ&lt;/a&gt; になりました。
&gt;|javascript|
package{
public var PrefBox2d:Array = [
  {name: '北海道',   zoom: 1.0, r: 0.71, f: .12},
  {name: '青森県',   zoom: 2.5},
  {name: '岩手県',   zoom: 2.0, r: 0.25, f: .4},
  {name: '秋田県',   zoom: 1.6, r: 0.55, f: .1},
  {name: '宮城県',   zoom: 2.0, r: 0.66, f: .6},
  {name: '山形県',   zoom: 2.2, r: 0.88, f: .2},
// ...以下略
||&lt;
&lt;code&gt;r&lt;/code&gt; が反発係数、&lt;code&gt;f&lt;/code&gt; が摩擦係数です。全ての都道府県について何か見所があるようにパラメータを調整したつもりです。

**8. 細かな調整
完成度を上げるところが一番地味ですが重要なところです。表示のタイミングを調整したり、都道府県を選ぶ UI を作ったり、選んだあとはドラッグできるようにしたり…。状態遷移が複雑になってきたので、State パターンみたいな感じで状態を定義しました。

**まとめ
駆け足でみていきましたが、完成までの流れがだいたい分かっていただけたと思います。実際にはいろいろと試行錯誤を繰り返しながら、時にはつまずいて諦めかけながら完成に持っていきました。

興味ある人は &lt;a href=&quot;http://github.com/nitoyon/hokkaido/tree/master&quot;&gt;ソースコード&lt;/a&gt; をじっくり読んで研究してみてください。

</body>
</day>
<day date="2009-04-23" title="">
<body>
*as3_simple_button*[as]AS3.0 だけでちょっと素敵なボタンを描くよ
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090423/20090423003149.png&quot; width=&quot;450&quot; height=&quot;90&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

生の ActionScript には標準のボタンコントロールがなくて、手軽に UI を作りこむのが面倒なんだけど、その分、ちょっとがんばればかっこいいボタンを作れちゃうのも魅力的。

ここでは70行ほどで作った簡単なボタンを紹介する。&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot;&gt;北海道を落とすとどう跳ねるか？&lt;/a&gt; で使ったやつ。

**うれしいこと
-画像でデータを持つよりもサイズが小さい。
-拡大しても劣化しない。
-使い回しがきく。使いまわすと、Flash 全体で見た目を統一できる。

**実物
上下のボタンはクリックすると移動するよ。TEST ボタンは押しても何も起こらないよ。
&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FButtonTest.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=200&amp;amp;title=Button+Test&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9.0 以上がインストールされていると、ここに Flash が表示されますよーっと)&lt;/noscript&gt;&lt;/center&gt;&lt;

**やってること：
+グラデーションを定義
+&lt;code&gt;drawRoundRect()&lt;/code&gt; で角丸四角を描く
+内側に向けて &lt;code&gt;GlowFilter&lt;/code&gt; で光らせる
+太めに境界線を描く
+マウスが乗っていないときには白黒にする

**みどころ
テキストの中身の HTML を作るときに、E4X を使ってテンプレート風の書き方をしてる。
&gt;|javascript|
textField.htmlText = &lt;font size={size} color=&quot;#6B8399&quot;&gt;
    {label}
  &lt;/font&gt;.toXMLString();
||&lt;
たとえば、size 変数が 11 で label 変数が foo だったときには、
&gt;|javascript|
&lt;font size=&quot;11&quot; color=&quot;#6B8399&quot;&gt;
  foo
&lt;/font&gt;
||&lt;
が入るわけですな。

コレはお手軽！

(関連) [http://d.hatena.ne.jp/nitoyon/20080612/e4x_expression:title]

**ソース
ソースは以下に（99行）
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package{
import flash.display.*;
import flash.events.*;

[SWF(backgroundColor=&quot;#f0f3f9&quot;, width=&quot;180&quot;, height=&quot;120&quot;)]
public class ButtonTest extends Sprite{
    public function ButtonTest(){
        var up:Button   = addChild(new Button(30, 30, 30, &quot;▲&quot;, 21)) as Button;
        var down:Button = addChild(new Button(30, 30, 30, &quot;▼&quot;, 21)) as Button;
        down.y = 40;

        up.addEventListener(&quot;click&quot;, function(event:Event):void{
            up.y -= 5; down.y -= 5;
        });
        down.addEventListener(&quot;click&quot;, function(event:Event):void{
            up.y += 5; down.y += 5;
        });

        addChild(new Button(100, 40, 20, &quot;TEST&quot;, 32)).x = 50;
    }
}
}

import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextField;
import flash.geom.Matrix;
import flash.filters.ColorMatrixFilter;
import flash.filters.GlowFilter;

class Button extends Sprite{
    private static const mono:ColorMatrixFilter = new ColorMatrixFilter([
        1 / 3, 1 / 3, 1 / 3, 0, 10,
        1 / 3, 1 / 3, 1 / 3, 0, 10,
        1 / 3, 1 / 3, 1 / 3, 0, 10,
            0,     0,     0, 1, 0
    ]);

    private var _hover:Boolean = false;
    public function get hover():Boolean{
        return _hover;
    }
    public function set hover(value:Boolean):void{
        if(_hover != value){
            _hover = value;
            filters = (_hover ? null : [mono]);
        }
    }

    public function Button(W:Number, H:Number, R:Number, label:String = &quot;&quot;, size:int = 11){
        var matrix:Matrix = new Matrix();
        matrix.createGradientBox(W, H, Math.PI / 2);

        var bg:Sprite = new Sprite();

        bg.graphics.beginGradientFill(&quot;linear&quot;, [0xDDE9F4, 0xD5E4F1, 0xBAD2E8], [1, 1, 1],
            [0, 120, 136], matrix);
        bg.graphics.drawRoundRect(0, 0, W, H, R, R);
        bg.graphics.endFill();

        bg.filters = [new GlowFilter(0xFFFFBE, .5, 10, 10, 2, 1, true)];
        addChild(bg);

        var line:Sprite = new Sprite();
        line.graphics.lineStyle(3, 0xBAD2E8);
        line.graphics.drawRoundRect(0, 0, W, H, R, R);
        addChild(line);

        filters = [mono];
        buttonMode = true;
        mouseChildren = false;

        if (label != &quot;&quot;){
            var textField:TextField = new TextField();
            textField.selectable = false;
            textField.autoSize = &quot;left&quot;;
            textField.htmlText = &lt;font size={size} color=&quot;#6B8399&quot;&gt;{label}&lt;/font&gt;.toXMLString();
            textField.x = (W - textField.width) / 2;
            textField.y = (H - textField.height) / 2;
            addChild(textField);
        }

        addEventListener(&quot;rollOver&quot;, buttonRollOver);
        addEventListener(&quot;rollOut&quot;, buttonRollOut);
        addEventListener(&quot;removed&quot;, function(event:Event):void{
            removeEventListener(&quot;rollOver&quot;, buttonRollOver);
            removeEventListener(&quot;rollOut&quot;, buttonRollOut);
            removeEventListener(&quot;removed&quot;, arguments.callee);
        });
    }

    protected function buttonRollOver(event:Event):void{
        hover = true;
    }

    protected function buttonRollOut(event:Event):void{
        hover = false;
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20070830/rss_icon_as3:title]
-[http://d.hatena.ne.jp/nitoyon/20070801/as3_iphone_button:title]
-[http://d.hatena.ne.jp/nitoyon/20080612/e4x_expression:title]
-[http://d.hatena.ne.jp/nitoyon/20080613/p1:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-04-27" title="">
<body>
*mixi_hokkaido*mixi で自分の都道府県を落とすアプリを作ってみた
自分が住んでる都道府県をプロフィールページに貼っつけて、訪問した人に落としまくってもらうための mixi アプリを作ってみました。

**サンプル
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090427/20090427012631.png&quot; width=&quot;450&quot; height=&quot;252&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
私の mixi アカウントに設置してます（足跡が気になる人は注意してね）。
-http://platform001.mixi.jp/show_friend.pl?id=10037

**インストールするには
※mixi アプリはβテスト中なのでちょっと手順が複雑になってます
+&lt;a href=&quot;http://platform001.mixi.jp/view_community.pl?id=3217244&quot;&gt;mixiアプリ オープンβ&lt;/a&gt; コミュニティーに参加する
+&lt;a href=&quot;http://platform001.mixi.jp/view_appli.pl?id=1742&quot;&gt;○○県を落とすとどう跳ねるのか&lt;/a&gt; からアプリ登録する
+http://platform001.mixi.jp/home.pl を開くと自分のページにも追加されてる！

**やってること
+OpenSocial の API でアプリを設置した人の住所を取得する
+北海道を落とすとどう跳ねるのか？ の Flash を都道府県を渡しつつ埋め込む

とても簡単でした。隠すことは何もないのでソースコードも公開中。&lt;a href=&quot;http://tech.nitoyon.com/hokkaido/hokkaido_gadgets_mixi.xml&quot;&gt;こちらからどうぞ&lt;/a&gt;。
</body>
</day>
<day date="2009-04-28" title="">
<body>
*box2dflashas3_2_0_2*[box2d][as]Box2DFlashAS3 の単純なサンプルと使い方 (2.0.2版)
Box2dFlashAS3 はバージョンによって API が激しく変わっていてなかなか困りものだ。2.0.0 なら gihyo.jp の &lt;a href=&quot;http://gihyo.jp/dev/feature/01/box2d&quot;&gt;特集：Box2DでActionScript物理プログラミング&lt;/a&gt; が分かりやすくてよいんだけど、2.0.1 で重要な API が改名されていて、そのことがパッケージには書いていない。

「Box2dFlashAS3 どうなってるんだ」と思ったら、どうやら Box2D 本家の API 変更に素直に追従しているだけのようだ。本家側ではそこそこドキュメントはそろっているようなので、ドキュメントが欲しい人は &lt;a href=&quot;http://sourceforge.net/projects/box2d&quot;&gt;Box2D&lt;/a&gt; 付属のクラスライブラリや &lt;a href=&quot;http://www.box2d.org/manual.html&quot;&gt;Box2D User Manual&lt;/a&gt; を見たほうがよいかもしれない。

今回は Box2dFlashAS3 &lt;strong&gt;ver 2.0.2&lt;/strong&gt; の単純なサンプルを作った。クリックすると始まるよ。
&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBox2dSimpleSample202.swf&amp;amp;up_background=%23666666&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=450&amp;amp;title=Box2dFlashAS3+simple+sample&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;br&gt;&lt;/noscript&gt;（表示されない場合はリロードしてください。）&lt;/center&gt;&lt;

これのソースコードを紹介しながら Box2dFlashAS3 を使う手順を解説していく。

**目次：
+世界の作成
+床の作成
+落下する物体の作成
+シミュレーションの開始
+描画
====
**1. 世界の作成
シミュレーションを行うための世界を作成する。

&gt;|javascript|
// シミュレーションする座標の範囲を指定する
var worldAABB:b2AABB = new b2AABB();
worldAABB.lowerBound.Set(-100.0, -100.0);
worldAABB.upperBound.Set(100.0, 100.0);

// 重力を定義する
var gravity:b2Vec2 = new b2Vec2(0.0, 10.0);

// 世界のインスタンスを作成する
world = new b2World(worldAABB, gravity, true);
||&lt;

まずは、&lt;code&gt;worldAABB&lt;/code&gt; を作ってシミュレーション計算する範囲を指定する。((ver 1 では &lt;code&gt;b2AABB&lt;/code&gt; の範囲を指定するプロパティは minVertex, maxVertex だったのが、ver 2 からはそれぞれ &lt;code&gt;lowerBound&lt;/code&gt;, &lt;code&gt;upperBound&lt;/code&gt; に変わっいてる))

次に重力を設定する。y 軸正方向に 10.0。物理をかじったことある人にはおなじみの値（正確には 9.80665… [m/s&lt;sup&gt;2&lt;/sup&gt;]）。

これで準備完了。世界を生成する。
&gt;|javascript|
m_world = new b2World(worldAABB, gravity, true);
||&lt;
第3パラメータは &lt;code&gt;doSleep&lt;/code&gt;。ここを &lt;code&gt;true&lt;/code&gt; にしておくと、物体が動いていないときはその分のシミュレーション処理を削減できる。

**2. 床の作成
さて、世界ができたら床を作っていこう。

ここから世界に物体を配置していくんだけど、Box2D では、円や箱を作る手順がちょっと複雑なので毎回忘れてしまう。始めに手順を整理しておく。

&gt;&gt;
***物体を作る方法
+物体の定義を作る
--&lt;code&gt;new b2BodyDef()&lt;/code&gt;
--場所や角度を決める
+物体を作る
--&lt;code&gt;world.CreateBody(bodyDef):b2Body&lt;/code&gt;
--世界上に物体を作成する
+形の定義を作る
--&lt;code&gt;b2PolygonDef, b2CircleDef&lt;/code&gt;
--形の大きさなどを決める
--反発係数、摩擦係数などを決める
+形を物体に追加する
--&lt;code&gt;body.CreateShape(shapeDef)&lt;/code&gt;
--物体上に形を追加する
--いくつもの形を追加してもよい
+(動く物体の場合のみ) 重さを計算する
--&lt;code&gt;body.SetMassFromShapes()&lt;/code&gt;
--これを忘れると落ちない
&lt;&lt;

&lt;code&gt;XXXDef&lt;/code&gt; というのは &lt;code&gt;XXX&lt;/code&gt; を作成するときのパラメータだと考えるとよいだろう。事前に &lt;code&gt;XXXDef&lt;/code&gt; に値を設定しておいて、&lt;code&gt;CreateXXXX(XXXDef);&lt;/code&gt; メソッドで実体を作る、という流れになる。

それでは、手順に沿って作成していこう。

***2-1. 物体の定義を作る。
&gt;|javascript|
// 物体の定義を作る
var wallBdDef:b2BodyDef = new b2BodyDef();
wallBdDef.position.Set(400 / SCALE / 2, 300 / SCALE);
wallBdDef.angle = Math.PI / 24;
||&lt;
400, 300 の位置に物体を作る。角度はラジアンで指定する（π(=180°) / 24 なので 7.5°傾ける）。

***2-2. 物体を作る。
世界上に物体を作成する。
&gt;|javascript|
// 物体を作る
var wallBd:b2Body = world.CreateBody(wallBdDef);
||&lt;

***2-3. 形の定義を作成する
&gt;|javascript|
// 形の定義を作る
var wallShapeDef:b2PolygonDef = new b2PolygonDef();
wallShapeDef.SetAsBox(180 / SCALE, 10 / SCALE);
||&lt;
&lt;code&gt;b2PolygonDef&lt;/code&gt; を使って 180×10 の四角形の定義を作る。((ver1 には &lt;code&gt;b2BoxDef&lt;/code&gt; があったが、ver2 からは箱は &lt;code&gt;b2PolygonDef.SetAsBox()&lt;/code&gt; で作成するようになった))

***2-4. 形を物体に追加する
定義を作っただけではだめで物体に追加しなきゃいけない。
&gt;|javascript|
// 形を物体に追加する
wallBd.CreateShape(wallShapeDef);
||&lt;
&lt;code&gt;b2Body&lt;/code&gt; オブジェクトの &lt;code&gt;CreateShape&lt;/code&gt; を呼ぶ。((ver 2.0.0 では &lt;code&gt;CreateStaticShape()&lt;/code&gt; と &lt;code&gt;CreateDynamicShape()&lt;/code&gt; に分かれていたが、ver 2.0.1 からは &lt;code&gt;CreateShape()&lt;/code&gt; に統一された))

***2-5. (動く物体の場合のみ) 重さを計算する
今回は動かない物体なので必要ない。

**3. 落下する物体の作成
同じようにして積み木を作成していく。
&gt;|javascript|
// 物体の定義を作る (x 座標と角度はランダム)
var objBdDef:b2BodyDef = new b2BodyDef();
objBdDef.position.Set((300 * Math.random()) / SCALE, 0);
objBdDef.angle = Math.PI / 2 * Math.random();

// 物体を作る
var objBd:b2Body = world.CreateBody(objBdDef);

// 形の定義を作る
var shapeDef:b2PolygonDef = new b2PolygonDef();
shapeDef.SetAsBox(30 / SCALE, 30 / SCALE);
shapeDef.density = 1;
shapeDef.restitution = 0.4;
shapeDef.friction = 0.1;

// 形を物体に追加する
objBd.CreateShape(shapeDef);

// 定義を変更してもう１個の形を追加する
shapeDef.SetAsBox(40 / SCALE, 5 / SCALE);
objBd.CreateShape(shapeDef);

// 重さ・重心を計算する
objBd.SetMassFromShapes();
||&lt;
先ほどの手順と同じだが、動く物体なので最後に &lt;code&gt;SetMassFromShapes()&lt;/code&gt; を利用して重さや重心を計算している。

&lt;code&gt;ShepeDef&lt;/code&gt; のプロパティは次の通り。
:&lt;code&gt;density&lt;/code&gt;:&lt;code&gt;0&lt;/code&gt; 以外に設定すると、固定されない（自由落下する）ようになる。
:&lt;code&gt;restitution&lt;/code&gt;:はね返り具合。
:&lt;code&gt;friction&lt;/code&gt;:摩擦ぐあいを表すパラメータ。&lt;code&gt;0&lt;/code&gt; だとよく滑る。

物体にはいくつも形を追加できる。ここでは、２個の四角を追加している。

**4. シミュレーションの開始
&lt;code&gt;enterFrame&lt;/code&gt; の中で次の関数を実行する。
&gt;|javascript|
world.Step(1 / 9, 10);
||&lt;
-第一引数（&lt;code&gt;timeStep&lt;/code&gt;）は１回のステップで進める秒数。
-第二引数（&lt;code&gt;iterations&lt;/code&gt;）はシミュレーションの精度。小さいとパフォーマンスがよくなり、大きいと正確になる（めり込んだりしない）

**5. 描画
ver 2 から DebugView が導入された。開発の初期の段階では、物体を正しく定義できているか調べるのに便利だ。今回も DebugView を使って描画している。

一回、次のように定義するだけで、自動的に描画してくれるようになる。ありがたい。
&gt;|javascript|
//----------------------------------
// DebugDraw を有効にする
//----------------------------------
var debugDraw:b2DebugDraw = new b2DebugDraw();
debugDraw.m_sprite = this;
debugDraw.m_drawScale = SCALE;
debugDraw.m_fillAlpha = .8;
debugDraw.m_lineThickness = 1;
debugDraw.m_drawFlags = b2DebugDraw.e_shapeBit;
world.SetDebugDraw(debugDraw);
||&lt;

**ソース
コメントを細かく書いているので128行あります。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package {
import Box2D.Dynamics.*;
import Box2D.Collision.*;
import Box2D.Collision.Shapes.*;
import Box2D.Common.Math.*;
import flash.events.Event
import flash.display.Sprite;
import flash.text.TextField;

[SWF(backgroundColor=&quot;#666666&quot;, width=&quot;350&quot;, height=&quot;200&quot;)]
public class Box2dSimpleSample202 extends Sprite {
    private const SCALE:Number = 10;
    private var world:b2World;

    // コンストラクタ
    public function Box2dSimpleSample202() {
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        // メッセージとクリック時の処理
        var tf:TextField = new TextField();
        tf.textColor = 0xffffff;
        tf.text = &quot;Click to start&quot;;
        addChild(tf);
        var animation:Boolean = false;
        stage.addEventListener(&quot;click&quot;, function(event:Event):void{
            count = 0;
            animation = !animation;
            tf.text = &quot;Click to &quot; + (animation ? &quot;stop&quot; : &quot;start&quot;);
        });

        // 初期化
        init();
        createObject();

        // 毎フレームの処理
        var count:int = 0;
        addEventListener(&quot;enterFrame&quot;, function(event:Event):void {
            world.Step(1 / 9, 10);
            if (count == 0 &amp;&amp; animation){
                createObject();
            }
            count = (count + 1) % 30;

            // 下に行ったオブジェクトを削除する
            for (var b:b2Body = world.GetBodyList(); b; b = b.GetNext()) {
                if (b.GetWorldCenter().y * SCALE &gt; 600){
                    world.DestroyBody(b);
                }
            }
        });
    }

    // 初期化
    private function init():void {
        //----------------------------------
        // 世界を作成する
        //----------------------------------
        // シミュレーションする座標の範囲を指定する
        var worldAABB:b2AABB = new b2AABB();
        worldAABB.lowerBound.Set(-100.0, -100.0);
        worldAABB.upperBound.Set(100.0, 100.0);

        // 重力を定義する
        var gravity:b2Vec2 = new b2Vec2(0.0, 10.0);

        // 世界のインスタンスを作成する
        world = new b2World(worldAABB, gravity, true);

        //----------------------------------
        // 床を作る
        //----------------------------------
        // 物体の定義を作る
        var wallBdDef:b2BodyDef = new b2BodyDef();
        wallBdDef.position.Set(400 / SCALE / 2, 300 / SCALE);
        wallBdDef.angle = Math.PI / 24;

        // 物体を作る
        var wallBd:b2Body = world.CreateBody(wallBdDef);

        // 形の定義を作る
        var wallShapeDef:b2PolygonDef = new b2PolygonDef();
        wallShapeDef.SetAsBox(180 / SCALE, 10 / SCALE);

        // 形を物体に追加する
        wallBd.CreateShape(wallShapeDef);

        //----------------------------------
        // DebugDraw を有効にする
        //----------------------------------
        var debugDraw:b2DebugDraw = new b2DebugDraw();
        debugDraw.m_sprite = this;
        debugDraw.m_drawScale = SCALE;
        debugDraw.m_fillAlpha = .8;
        debugDraw.m_lineThickness = 1;
        debugDraw.m_drawFlags = b2DebugDraw.e_shapeBit;
        world.SetDebugDraw(debugDraw);
    }

    // 物体を１個作る
    private function createObject():void{
        // 物体の定義を作る (x 座標と角度はランダム)
        var objBdDef:b2BodyDef = new b2BodyDef();
        objBdDef.position.Set((300 * Math.random()) / SCALE, 0);
        objBdDef.angle = Math.PI / 2 * Math.random();

        // 物体を作る
        var objBd:b2Body = world.CreateBody(objBdDef);

        // 形の定義を作る
        var shapeDef:b2PolygonDef = new b2PolygonDef();
        shapeDef.SetAsBox(30 / SCALE, 30 / SCALE);
        shapeDef.density = 1;
        shapeDef.restitution = 0.4;
        shapeDef.friction = 0.1;

        // 形を物体に追加する
        objBd.CreateShape(shapeDef);

        // 定義を変更してもう１個の形を追加する
        shapeDef.SetAsBox(40 / SCALE, 5 / SCALE);
        objBd.CreateShape(shapeDef);

        // 重さ・重心を計算する
        objBd.SetMassFromShapes();
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**目次
-Box2DFlashAS3 の単純なサンプルと使い方 (2.0.2版)
-[http://d.hatena.ne.jp/nitoyon/20090430/box2d_no_debug_draw:title]

**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20071127/box2d_simple_sample:title] (ver 1.4.X 用のチュートリアル)
-[http://d.hatena.ne.jp/nitoyon/20071129/box2dflashas3_bitmap:title]
-[http://d.hatena.ne.jp/nitoyon/20080209/box2d_example:title]
-[http://d.hatena.ne.jp/nitoyon/20080625/zantetsu_mouse:title]
-[http://d.hatena.ne.jp/nitoyon/20080610/p1:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-04-30" title="">
<body>
*box2d_no_debug_draw*[as][box2d]DebugDraw を使わない Box2DFlashAS3 のサンプル (2.0.2版)
&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090430/20090430092231.png&quot; width=&quot;391&quot; height=&quot;113&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090428/box2dflashas3_2_0_2&quot;&gt;Box2DFlashAS3 の単純なサンプルと使い方 (2.0.2版)&lt;/a&gt; の続き。

前回は &lt;code&gt;b2DebugDraw&lt;/code&gt; を利用して描画をしていた。これを自前の描画に切り替えて行こう。

**床の描画
床は動かないので初期化の段階で描画しちゃおう。

&lt;code&gt;b2DebugDraw&lt;/code&gt; を初期化していた部分を床の描画に置き換える。

床はを作るときのパラメータはこんな感じだった。
&gt;|javascript|
// 位置：(400cm, 300cm)
// 角度：180° / 24
wallBdDef.position.Set(400 / 2 / SCALE, 300 / SCALE);
wallBdDef.angle = Math.PI / 24;

// 大きさ：360cm×20cm
wallShapeDef.SetAsBox(180 / SCALE, 10 / SCALE);
||&lt;
Box2D でシミュレーションするときは &lt;code&gt;1 / SCALE&lt;/code&gt; していた。&lt;code&gt;SCALE&lt;/code&gt; は &lt;code&gt;100&lt;/code&gt; なので、センチメーターをメーターに変換して Box2D に伝えていたと考えると良いだろう。

描画するときは Box2D のサイズを  &lt;code&gt;SCALE&lt;/code&gt; 倍して描画することにする。つまり、床の大きさは 360px×20px となる。
====
&gt;|javascript|
//----------------------------------
// 床を直接描画する
//----------------------------------
var floorSprite:Sprite = new Sprite();
floorSprite.graphics.beginFill(0x667788);
floorSprite.graphics.drawRect(-180, -10, 360, 20);
floorSprite.graphics.endFill();
floorSprite.x = 400 / 2;
floorSprite.y = 300;
floorSprite.rotation = 180 / 24;
addChild(floorSprite);
||&lt;

**箱の描画
落下する箱の Sprite を生成するメソッドを作成しておく。
&gt;|javascript|
// 物体の Sprite を作成する
private function createSprite():Sprite{
    var ret:Sprite = new Sprite();

    // 細長い横枠を描画
    ret.graphics.lineStyle(1, 0x000000);
    ret.graphics.beginFill(0x008000);
    ret.graphics.drawRect(-40, -5, 80, 10);
    ret.graphics.endFill();

    // 画像
    var bmp:Bitmap = new Icon();
    bmp.x = bmp.y = -30;
    ret.addChild(bmp);

    // 画像の周りの線を描画
    ret.graphics.drawRect(-30, -30, 60, 60);

    return ret;
}
||&lt;

箱の物体を Box2D に追加したあとに &lt;code&gt;m_userData&lt;/code&gt; に Sprite を設定して関連付けておく。
&gt;|javascript|
// Sprite を m_userData に割り当てる
var sprite:Sprite = createSprite();
sprite.x = sprite.y = -9999; // 画面外に移動
addChild(sprite);
objBd.m_userData = sprite;
||&lt;

**シミュレーション処理で位置も更新する
前のサンプルでは enterFrame のイベントではシミュレーションのみを行っていたが、ここに Sprite の位置を更新する処理を追加する。
&gt;|javascript|
// 毎フレームの処理
var count:int = 0;
addEventListener(&quot;enterFrame&quot;, function(event:Event):void {
    // シミュレーションする
    world.Step(1 / 9, 10);

    // たまに箱を生成する
    if (count == 0 &amp;&amp; animation){
        createObject();
    }
    count = (count + 1) % 30;

    // Sprite の場所を更新する
    for (var b:b2Body = world.GetBodyList(); b; b = b.GetNext()) {
        var sprite:Sprite = b.GetUserData() as Sprite;
        if (sprite){
            sprite.x = b.GetWorldCenter().x * SCALE;
            sprite.y = b.GetWorldCenter().y * SCALE;
            sprite.rotation = b.GetAngle() * 180 / Math.PI;

            // 画面外に出たオブジェクトを削除する
            if (sprite.y &gt; 600){
                world.DestroyBody(b);
                removeChild(sprite);
            }
        }
    }
});
||&lt;

**完成品
クリックすると始まるよ。
&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBox2dSimpleSample202MyDraw.swf&amp;amp;up_background=%23ccddff&amp;amp;synd=open&amp;amp;w=430&amp;amp;h=450&amp;amp;title=Box2dFlashAS3+simple+sample&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player 9 以上が必要です)&lt;br&gt;&lt;/noscript&gt;（表示されない場合はリロードしてください。）&lt;/center&gt;&lt;

ソースコードは以下に（165行）
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
package {
import Box2D.Dynamics.*;
import Box2D.Collision.*;
import Box2D.Collision.Shapes.*;
import Box2D.Common.Math.*;
import flash.events.Event;
import flash.display.*;
import flash.text.TextField;

[SWF(backgroundColor=&quot;#ccddff&quot;)]
public class Box2dSimpleSample202MyDraw extends Sprite {
    private const SCALE:Number = 10;
    private var world:b2World;

    [Embed(source=&quot;icon.png&quot;)]
    private var Icon:Class;

    // コンストラクタ
    public function Box2dSimpleSample202MyDraw() {
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        // メッセージとクリック時の処理
        var tf:TextField = new TextField();
        tf.text = &quot;Click to start&quot;;
        addChild(tf);
        var animation:Boolean = false;
        stage.addEventListener(&quot;click&quot;, function(event:Event):void{
            count = 0;
            animation = !animation;
            tf.text = &quot;Click to &quot; + (animation ? &quot;stop&quot; : &quot;start&quot;);
        });

        // 初期化
        init();
        createObject();

        // 毎フレームの処理
        var count:int = 0;
        addEventListener(&quot;enterFrame&quot;, function(event:Event):void {
            world.Step(1 / 9, 10);
            if (count == 0 &amp;&amp; animation){
                createObject();
            }
            count = (count + 1) % 30;

            // 下に行ったオブジェクトを削除する
            for (var b:b2Body = world.GetBodyList(); b; b = b.GetNext()) {
                var sprite:Sprite = b.GetUserData() as Sprite;
                if (sprite){
                    sprite.x = b.GetWorldCenter().x * SCALE;
                    sprite.y = b.GetWorldCenter().y * SCALE;
                    sprite.rotation = b.GetAngle() * 180 / Math.PI;

                    if (sprite.y &gt; 600){
                        world.DestroyBody(b);
                        removeChild(sprite);
                    }
                }
            }
        });
    }

    // 初期化
    private function init():void {
        //----------------------------------
        // 世界を作成する
        //----------------------------------
        // シミュレーションする座標の範囲を指定する
        var worldAABB:b2AABB = new b2AABB();
        worldAABB.lowerBound.Set(-100.0, -100.0);
        worldAABB.upperBound.Set(100.0, 100.0);

        // 重力を定義する
        var gravity:b2Vec2 = new b2Vec2(0.0, 10.0);

        // 世界のインスタンスを作成する
        world = new b2World(worldAABB, gravity, true);

        //----------------------------------
        // 床を作る
        //----------------------------------
        // 物体の定義を作る
        var wallBdDef:b2BodyDef = new b2BodyDef();
        wallBdDef.position.Set(400 / 2 / SCALE, 300 / SCALE);
        wallBdDef.angle = Math.PI / 24;

        // 物体を作る
        var wallBd:b2Body = world.CreateBody(wallBdDef);

        // 形の定義を作る
        var wallShapeDef:b2PolygonDef = new b2PolygonDef();
        wallShapeDef.SetAsBox(180 / SCALE, 10 / SCALE);

        // 形を物体に追加する
        wallBd.CreateShape(wallShapeDef);

        //----------------------------------
        // 床を直接描画する
        //----------------------------------
        var floorSprite:Sprite = new Sprite();
        floorSprite.graphics.beginFill(0x667788);
        floorSprite.graphics.drawRect(-180, -10, 360, 20);
        floorSprite.graphics.endFill();
        floorSprite.x = 400 / 2;
        floorSprite.y = 300;
        floorSprite.rotation = 180 / 24;
        addChild(floorSprite);
    }

    // 物体を１個作る
    private function createObject():void{
        // 物体の定義を作る (x 座標と角度はランダム)
        var objBdDef:b2BodyDef = new b2BodyDef();
        objBdDef.position.Set((300 * Math.random()) / SCALE, 0);
        objBdDef.angle = Math.PI / 2 * Math.random();

        // 物体を作る
        var objBd:b2Body = world.CreateBody(objBdDef);

        // 形の定義を作る
        var shapeDef:b2PolygonDef = new b2PolygonDef();
        shapeDef.SetAsBox(30 / SCALE, 30 / SCALE);
        shapeDef.density = 1;
        shapeDef.restitution = 0.4;
        shapeDef.friction = 0.1;

        // 形を物体に追加する
        objBd.CreateShape(shapeDef);

        // 定義を変更してもう１個の形を追加する
        shapeDef.SetAsBox(40 / SCALE, 5 / SCALE);
        objBd.CreateShape(shapeDef);

        // 重心を計算する
        objBd.SetMassFromShapes();

        // Sprite を m_userData に割り当てる
        var sprite:Sprite = createSprite();
        sprite.x = sprite.y = -9999; // 画面外に移動
        addChild(sprite);
        objBd.m_userData = sprite;
    }

    // 物体の Sprite を作成する
    private function createSprite():Sprite{
        var ret:Sprite = new Sprite();

        // 細長い横枠を描画
        ret.graphics.lineStyle(1, 0x000000);
        ret.graphics.beginFill(0x008000);
        ret.graphics.drawRect(-40, -5, 80, 10);
        ret.graphics.endFill();

        // 画像
        var bmp:Bitmap = new Icon();
        bmp.x = bmp.y = -30;
        ret.addChild(bmp);

        // 画像の周りの線を描画
        ret.graphics.drawRect(-30, -30, 60, 60);

        return ret;
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**目次
-[http://d.hatena.ne.jp/nitoyon/20090428/box2dflashas3_2_0_2:title]
-DebugDraw を使わない Box2DFlashAS3 のサンプル (2.0.2版)

**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20071127/box2d_simple_sample:title] (ver 1.4.X 用のチュートリアル)
-[http://d.hatena.ne.jp/nitoyon/20071129/box2dflashas3_bitmap:title]
-[http://d.hatena.ne.jp/nitoyon/20080209/box2d_example:title]
-[http://d.hatena.ne.jp/nitoyon/20080625/zantetsu_mouse:title]
-[http://d.hatena.ne.jp/nitoyon/20080610/p1:title]
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>imi</username>
<body>いつも読ませていただいています、今回こちらの記事を試してみたところ下記のようなエラーをはかれてしまい、どうしたらいいでしょうか？&lt;br&gt;5008: 定義 &#39;Box2dSimpleSample202MyDraw&#39; の名前にこのファイルの場所が反映されていません。このファイル内の定義の名前を変更するか、ファイルを移動してください。&lt;br&gt;恐らくこの命令で指定されているファイルの場所が違うという意味なのでしょうが、どこを修正すればよいのやら・・・。</body>
<timestamp>1262664135</timestamp>
</comment>
<comment>
<username>imi</username>
<body>上記は解決しました、アホな質問をして申し訳ありませんでした。</body>
<timestamp>1262678840</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-05" title="">
<body>
*hatebu_nenkan_200904*[はてブ年鑑]はてブ年鑑2009年4月分を更新した
&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090505/20090505232120.png&quot; width=&quot;450&quot; height=&quot;320&quot; alt=&quot;はてブ年鑑 2009年4月&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; の 2009年4月分を集計して更新しました。自分が作ったものが12位にランクインして過去最高で嬉しいです。トップ ページの変化がなくて悲しいので、月間ランキングが最初に表示されるように変更しました。
</body>
</day>
<day date="2009-05-11" title="">
<body>
*box2d_polygon*[box2d][as]Box2d で多角形を扱うときの注意点
Box2d で多角形を作るときには &lt;code&gt;b2PolygonDef&lt;/code&gt; を使うのだけれど、はまるポイントが意外に多い。今回はそのうち４つを紹介するよ。

+点を定義する順番に注意
+凸包にせよ
+頂点数は８個まで
+多角形の中心を取得してる？

**基本
&lt;code&gt;vertexCount&lt;/code&gt; に頂点の数、&lt;code&gt;vertices&lt;/code&gt; 配列に頂点の座標を設定する。
&gt;|javascript|
var shapeDef:b2PolygonDef = new b2PolygonDef();
shapeDef.vertexCount = 3;
shapeDef.vertices[0].Set(0, 0);
shapeDef.vertices[1].Set(50, 50);
shapeDef.vertices[2].Set(50, -50);
||&lt;

&lt;code&gt;shapeDef&lt;/code&gt; を作ったあとにどうすべきかは、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090428/box2dflashas3_2_0_2&quot;&gt;Box2DFlashAS3 の単純なサンプルと使い方 (2.0.2版)&lt;/a&gt; をご覧あれ。

**はまりポイント１：点を定義する順番に注意
時計回りに座標をしないとダメ。

反時計周りにすると、落ちてこなかったりする。

**はまりポイント２：凸包にせよ
へっこんだ部分やクロスする部分があるとダメ。

&gt;http://gihyo.jp/dev/feature/01/box2d/0004?page=3:title&gt;
おかしな動きをする五角形
&lt;img src=&quot;http://image.gihyo.co.jp/assets/images/dev/feature/01/box2d/0004/04-02.jpg&quot;&gt;
&lt;&lt;

どうしてもへっこんだ多角形を作りたい場合には、複数の凸包を組み合わせて作るしかない。

**はまりポイント３：頂点数は８個まで
多角形の頂点数は最大 8 個に制限されている。(※2.0.2 の場合。バージョンによって異なるかもしれない)
====
8個以上の頂点を作りたいときの対策は２つ。好きなほうを選ぶとよいだろう。
+&lt;code&gt;Box2D.Common.b2Setting&lt;/code&gt; の &lt;code&gt;b2_maxPolygonVertices&lt;/code&gt; で定義されている最大頂点数を変更する
+複数の shape に分解する

2つ目の分解を選ぶときには色々と注意が必要だ。

分解した多角形の頂点が特定の頂点に集まるとパフォーマンス上の問題が生じる。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090511/20090511005635.png&quot; width=&quot;445&quot; height=&quot;204&quot;&gt;&lt;/center&gt;&lt;

図の左側がその例。一番下の頂点に全ての四角形の頂点が集中しているが、この頂点が衝突したときの計算量が増えて処理落ちしてしまう。

右の例のように頂点を分散させる工夫が必要だ。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot;&gt;北海道を落とすとどう跳ねるのか&lt;/a&gt; では特定の頂点から開始して、左回り・右回りに多角形に使う頂点を選んでいってる。少し複雑になってるが、上の図の右にある分解を実現している。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// points には x 座標、 y 座標が順番に入ってる
var x0:Number = points.shift(), y0:Number = points.shift();
var y1:Number = points.pop(), x1:Number = points.pop();

// 点がある限り続ける
while(points.length){
    // 今回の多角形の頂点数を決める。最大 8
    var pointsLeft:int = Math.min(points.length / 2 + 2, 8);

    // 1つ目と最後の頂点を設定する
    shapeDef.vertices[0].Set(x0 / SCALE * zoom, y0 / SCALE * zoom);
    shapeDef.vertices[pointsLeft - 1].Set(x1 / SCALE * zoom, y1 / SCALE * zoom);
    // 残りの点を設定
    for(var i:int = 2; i &lt; pointsLeft; i++){
        if (i % 2 == 0){
            // 偶数版目は時計回りの点を設定する
            x0 = points.shift();
            y0 = points.shift();
            shapeDef.vertices[i / 2].Set(x0 / SCALE * zoom, y0 / SCALE * zoom);
        } else {
            // 奇数版目は反時計回りの場所にある点を設定する
            y1 = points.pop();
            x1 = points.pop();
            shapeDef.vertices[pointsLeft - Math.floor(i / 2) - 1].Set(x1 / SCALE * zoom, y1 / SCALE * zoom);
        }
    }

    // 点の数を設定して、shape を追加する
    shapeDef.vertexCount = pointsLeft;
    body.CreateShape(shapeDef);
}
||&lt;
&gt;&lt;/div&gt;&lt;
ただ、このように分解した結果、分解した多角形の隙間を小さな島がすり抜けてしまう現象が発生してしまった。図形のサイズが一定ではない場合には、&lt;code&gt;b2_maxPolygonVertices&lt;/code&gt; を変更する方法を選択すべきだったのかもしれない。

**はまりポイント４：多角形の中心を取得してる？
&lt;code&gt;b2DebugDraw&lt;/code&gt; を使っていると気づきにくいのだけど、物体の位置は物体の重心で表現される。そのため、多角形を表示する &lt;code&gt;Sprite&lt;/code&gt; は &lt;code&gt;Sprite&lt;/code&gt; の &lt;code&gt;(0, 0)&lt;/code&gt; を物体の重心に合わせておくべきだ。そうしないと、物体がずれて表示されてしまう。

重心はあらかじめ計算しておくこともできるが、複数の shape を組み合わせたり、物体を動的に作ったりする場合には面倒だ。Box2d が認識している重心を取得するのが確実だろう。

この１文で完璧。
&gt;|javascript|
// SetMassFromShapes() を実行したあとに調べてね
var center:b2Vec2 = body.GetLocalCenter();
||&lt;
&lt;code&gt;Sprite&lt;/code&gt; の &lt;code&gt;(0, 0)&lt;/code&gt; をこの座標に対応する位置にしておこう。

</body>
</day>
<day date="2009-05-12" title="">
<body>
*zenjido_bkm*全自動ブックマーク棚卸しが想像以上に有意義な件
&gt;&lt;center&gt;&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hbtimemachine2&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090512/20090512010000_original.png&quot; width=&quot;468&quot; height=&quot;60&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
みんな、自分が過去にブックマークした記事って気になるよね。

はてなブックマークを使ってると、勢いでブックマークしてしまうけど、なかなか振り返る機会はないもの…。

少し前に「ブックマーク棚卸しがイイヨ」という記事があったんだけど

&gt;http://d.hatena.ne.jp/naoya/20051231/1135991616:title&gt;
ブックマークの棚卸し(?)をしてます。今年一年かけてブックマークしたものを順番に見て行ってます。見るといっても、全部の記事を開いて見るわけではなく、流し読みで、「ああ、これはもう一回読んでおきたい」と思ったものを開いてはインプットしているという感じです。
&lt;&lt;
１年分の棚卸しとなると楽しくないし…。わたしもみんなと同じ、その一員でした。

**でも、もう平気。「全自動ブックマーク棚卸し」があれば！
&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hbtimemachine2&quot;&gt;全自動ブックマーク棚卸し&lt;/a&gt; があればもう大丈夫。

全自動で &lt;strong&gt;１年前のブックマークを RSS 配信&lt;/strong&gt; してくれちゃいます。

試しにやってみましょう。

「はてな ID」の欄に自分の ID を入力して、[Run Pipe] ボタンを押します。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090507/20090507013318.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

するとあら不思議。１年前の自分のブックマークが表示されます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090507/20090507013317.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

&gt;&gt;
**注意
-ちょうど１年前の今日にブックマークしてなかったら何も表示されません。
-あと、ブックマークはパブリックじゃないとだめなので、プライベートな人は今すぐパブリックにしちゃいましょう。
&lt;&lt;

いちいちこのページをチェックするのはめんどう。

RSS リーダーに追加すればいいんですね。[Get as RSS] の URL を RSS リーダーに突っ込んでおきましょう。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090507/20090507013311.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**過去の自分にありがとう
RSS リーダーに登録しておくと、毎日毎日、去年の自分のブックマークが RSS リーダーにやってきます。

「１年前はこんなこと考えてたのかー」とか、「ああ、もうあれから１年なのか…」とか、「うわ、この記事の予想、間違ってるし」とか、「ああ、これやろうと思ってたのに、まだ手を出してないや…」とか、想像以上に発見が多い。

理由を考えてみたんですが、&lt;strong&gt;１年前の自分がおもしろいと思ったものは、今の自分が見てもおもしろい&lt;/strong&gt;んですよ。そこらへんの誰かがまとめたものよりも数百倍おもしろい。

１年前の資産をそのまま忘れてしまうのはもったいない。ぜひ、全自動ブックマーク棚卸しで過去の資産を生かしてみましょう。

**２年前でも３ヶ月前でも…
&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hbtimemachine2&quot;&gt;全自動ブックマーク棚卸し&lt;/a&gt; は１年前だけじゃなく、２年前でも３ヶ月前にもさかのぼれます。

[何ヶ月前？] のところに &lt;code&gt;24&lt;/code&gt; と入力して [Run Pipe] してみましょう。２年前のブックマークが表示されます。そのまま [Get as RSS] ボタンを押すと２年前のブックマークの RSS になります。

はてなブックマークを始めたのは3ヶ月だよ…という人は &lt;code&gt;3&lt;/code&gt; を入力すれば OK！　ただ、30日の月に31日の月を振り返ると取りこぼしが発生しそうなので、入力する値は12の倍数にするのがオススメ。

**今すぐ、使ってみよう
もう悩まない！

.

**補足
&lt;a href=&quot;http://pipes.yahoo.com/nitoyon/hbtimemachine2&quot;&gt;全自動ブックマーク棚卸し&lt;/a&gt; は Yahoo! Pipes を利用して作成していますが、元ネタは &lt;a href=&quot;http://pipes.yahoo.com/pipesofpeace/hbtimemachine&quot;&gt;Pipes: hatena bookmark timemachine feed&lt;/a&gt; です。オリジナルのものに比べて以下の点を改善しています。
-RSS のリンク先をブックマークしたページにした
-何ヶ月前かを指定できるようにした
</body>
<comments>
<comment>
<username>なまえ</username>
<body>&gt; ただ、30日の月に31日の月を振り返ると取りこぼしが発生しそうなので、入力する値は12の倍数にするのがオススメ。&lt;br&gt;&lt;br&gt;これでも閏年は回避できないですよね・・・</body>
<timestamp>1242114654</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-15" title="">
<body>
*genotyp_review*フォント同士を交配させて新しいフォントを作る「genoTyp」が面白い
&gt;&lt;center&gt;&lt;a href=&quot;http://www.puls-der-zeit.de/genotyp/english/genotyp_en.htm&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021807.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;
「この発想はなかった！」と驚いた。

&lt;a href=&quot;http://www.puls-der-zeit.de/genotyp/english/genotyp_en.htm&quot;&gt;genoTyp&lt;/a&gt; はフォント同士を交配させて新しいフォントを生み出す実験サイトだ。早速、試しにやってみた。

**1. 第一世代の親を決める
&lt;a href=&quot;http://www.puls-der-zeit.de/genotyp/english/genotyp_en.htm&quot;&gt;genoTyp&lt;/a&gt; を開いて左上の [Breed] タブをクリックすると「交配ページ」が表示される。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021806.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

[add original font] ボタンをクリックして、祖先となるフォントを２つ追加してみた。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021805.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

交配させるために２つのフォントをドラッグしてくっつけた。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021804.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

くっついた状態になれば交配の準備は完了だ。

**2. 交配させてみる
中央の [cross] ボタンを押すと第一世代が誕生する。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021803.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

４人の子供が誕生した。父親似だったり、母親似だったり、子供によって雰囲気が異なっている。

**3. 第一世代でも交配
別の [original font] を追加させて、第一世代の中から気に入ったものと交配させてみた。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021802.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

３人の子供が第二世代に誕生した。

**4. さらに交配！
今度は第二世代の子供同士を交配させてみた。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021801.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**5. フォント詳細をみる
気に入ったフォントをクリックして [Gen Laboratory] ボタンを押すと、フォントの詳細が分かる。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090515/20090515021755.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
親の特徴をどのように引き継いでいるかがグラフ表示されている。

**まとめ
適当に交配させると予想外なフォントが誕生して楽しい。あくまで実験サイトなので、フォントのダウンロードはできないようなのが残念だ。

自作できないかと考えてみたが、フォントごとに「どの点がどの点に相当するか」という情報をもっているような様子で、フォントデータを作るのも大変そうだ。ましてや日本語対応は気が遠くなる。

-&lt;a href=&quot;http://www.puls-der-zeit.de/genotyp/english/genotyp_en.htm&quot;&gt;genoTyp&lt;/a&gt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise&quot;&gt;クラスタリングの定番アルゴリズム「K-means法」をビジュアライズしてみた&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090413/kmeans_visualize_3d&quot;&gt;３Ｄ版！「K-Means法」ビジュアライズしてみた&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070918/bezier_1&quot;&gt;ベジエ曲線の仕組み (1) - 昔話&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070919/bezier_2&quot;&gt;ベジエ曲線の仕組み (2) - ２次ベジエ曲線を詳しく&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070920/bezier_3&quot;&gt;ベジエ曲線の仕組み (3) - ３次ベジエ曲線&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070921/bezier_4&quot;&gt;ベジエ曲線の仕組み (4) - ActionScript 3.0 でベジエ曲線を描く&lt;/a&gt;
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>yasu</username>
<body>これ面白そうだけど&lt;br&gt;フォントがダウンロードできないと&lt;br&gt;使いようがないですね</body>
<timestamp>1242389840</timestamp>
</comment>
<comment>
<username>hobbling</username>
<body>遺伝するときにランダムでコピーミスが起きないと、最終的に同じフォントばかりになって進化の袋小路に入り込むことに……</body>
<timestamp>1242422509</timestamp>
</comment>
<comment>
<username>たかはし</username>
<body>やってみたけど配合の結果が酷いね。まだGENEに相当するfontの要素を巧く捉えられていないようだけど今後の発展に期待大だし、UIの作りも素晴らしい。Mashupで似たような事をやってるのですが、遺伝子をまねるという発想はなかったので、ぜひ参考にしたいです。教えてくださってありがとうございます。ここへはフォントの作り方を探してたどりついきました。</body>
<timestamp>1292340027</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-19" title="">
<body>
*histroy_lso*履歴消去じゃ消えないエロサイトの隠れた痕跡に要注意
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090519/20090519010844.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

色んなホームページを見ていると閲覧履歴が自動で保存されます。恥ずかしいページを見たあとには、他の人にばれてしまわないように、こっそり履歴を消している人もいることでしょう。

通常、ブラウザには「履歴を削除する機能」が備わっていて、ブラウザの履歴を削除すればあなたの悪行の数々は消え去ってくれるように思えます。

しかし、ブラウザからは消せない履歴が残っているのです…

**ブラウザからは消せない履歴
それが Flash の &lt;strong&gt;Local Shared Object&lt;/strong&gt; です。Local Shared Object は Flash 版の Cookie みたいなもので、Flash で一時的なデータを保存するときにはよく用いられるものです。

Local Shared Object は次の場所に保存されています。
|*OS|*場所|
|Windows XP|C:\Documents and Settings\ユーザ名\Application Data\Macromedia\Flash Player\#SharedObjects\ランダムなハッシュ\|
|Windows Vista|C:\Users\ユーザ名\AppData\Roaming\Macromedia\Flash Player\#SharedObjects\ランダムなハッシュ\|
|Mac OS X|~/Library/Preferences/Macromedia/Flash Player/#SharedObjects/ランダムなハッシュ/|
|Linux/Unix|~/.macromedia/Flash_Player/#SharedObjects/ランダムなハッシュ/|

試しに私の SharedObject 一覧を見てみると…。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090519/20090519010843.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

おー。色んなドメインのデータが保存されています。

Gmail とか twitter とかニコニコ動画も Local Shared Object を使っているようですね…。もうちょっと続きを見てみると…。

ん？？

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090519/20090519010841.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

お…。これは、エロ系の動画がよく上がってる d○○lymotion.com と、そのものズバリな porn○○○.com じゃないですか！　これは恥ずかしい！

**Local Shared Object の消し方
一番簡単なやり方は上のフォルダの中身を消すことなのですが、同じく Flash Player フォルダの &lt;code&gt;macromedia.com/support/flashplayer/sys&lt;/code&gt; にもドメインの情報が残ってしまいます。

Adobe が公式に提供している削除方法は &lt;a href=&quot;http://www.macromedia.com/support/documentation/jp/flashplayer/help/settings_manager07.html&quot;&gt;Adobe - Flash Player：設定マネージャ - Web サイトの記憶領域設定パネル&lt;/a&gt; です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090519/20090519010842.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

&lt;a href=&quot;http://www.macromedia.com/support/documentation/jp/flashplayer/help/settings_manager03.html&quot;&gt;Adobe - Flash Player : 設定マネージャ - グローバルストレージ設定パネル&lt;/a&gt; で Local Shared Object を拒否することもできますが、拒否すると動作しないサイトもでてきてしまうかもしれません。

また、（試していませんが）Firefox のアドオン、&lt;a href=&quot;http://objection.mozdev.org/&quot;&gt;Objection&lt;/a&gt; は、Local Shared Object の削除機能があるようです。

(追記) CCleaner をオススメしてる人が多いようです。Windows 用のフリーソフトのようです。→&lt;a href=&quot;http://www.forest.impress.co.jp/article/2006/07/31/ccleaner.html&quot;&gt;窓の杜 - 【NEWS】各種ソフトやWebブラウザーの履歴、不要レジストリなどを一括削除「CCleaner」&lt;/a&gt;

(追記2) Mac 用のフリーソフトを sta la sta さんが紹介してくれています。→ &lt;a href=&quot;http://sta-la-sta.com/2009/05/20/1337/&quot;&gt;MacでFlash版クッキー（Local Shared Object）を削除するためのフリーソフト - sta la sta&lt;/a&gt;

**まとめ
ブラウザの履歴を削除したときには、ついでに Local Shared Object も削除しておこう！
</body>
<comments>
<comment>
<username>id:k2jp</username>
<body>アドオンといえば『BetterPrivacy』でも同じことができます&lt;br&gt;https://addons.mozilla.org/ja/firefox/addon/6623&lt;br&gt;&lt;br&gt;起動時や終了時に自動削除とか便利です</body>
<timestamp>1242727014</timestamp>
</comment>
<comment>
<username>もふもふ</username>
<body>CCleanerはFlashももちろん、その他アプリのや、フォルダ履歴などもまとめて削除してくれるのでいいですよ。zip版もありますし。</body>
<timestamp>1242773387</timestamp>
</comment>
<comment>
<username>jazz</username>
<body>面白かったですw</body>
<timestamp>1242783017</timestamp>
</comment>
<comment>
<username>hb</username>
<body>ccleaner使ってます</body>
<timestamp>1242788918</timestamp>
</comment>
<comment>
<username>　</username>
<body>エクセルのハイパーリンク内の履歴もccleanerで消えます？</body>
<timestamp>1242837281</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>k2jpさんおすすめの「BetterPrivacy」。昨日メイン・マシーンにインストールして、サブのほうにもと思ってFirefox Add-onsへ取りにいったら消えちゃってますね・・・</body>
<timestamp>1242840849</timestamp>
</comment>
<comment>
<username>k2jp</username>
<body>(?_?) 『BetterPrivacy』 ない？&lt;br&gt;今、確認しに行きましたが...ありますので...</body>
<timestamp>1242948671</timestamp>
</comment>
<comment>
<username>ねこ</username>
<body>ウイルスバスター2008を使っています。&lt;br&gt;ウイルスバスターの機能の一つにフィッシング対策ってのがあって&lt;br&gt;その機能の中にアクセスを禁止するwebサイトを登録する箇所があります。&lt;br&gt;この登録する箇所で「履歴からURLをインポート」する事ができるのですが&lt;br&gt;この履歴がウイルスバスター独自の履歴のようで、普段使っているwebブラウザの履歴を削除しても&lt;br&gt;「履歴からURLをインポート」には、訪問したwebサイトの履歴が残っています。&lt;br&gt;他のセキュリティ製品は分かりませんが、痕跡の確認には使用しているセキュリティソフトにも注意した方がいいかもしれません。</body>
<timestamp>1242954206</timestamp>
</comment>
<comment>
<username>lisa</username>
<body>Windows Vistaを使っています。いろいろなサイトがSharedObjectに残っているのですが、見てもいない日の最終回覧日が記録されています。そんなことはあるのでしょうか。よろしくお願い致します。</body>
<timestamp>1260322103</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-21" title="">
<body>
*windows_debug*[book]Windows プログラマなら読んでおきたい「Windowsデバッグの極意」
ちょろちょろと色んなところで紹介されていた asin:4048676083:title を軽く読んでみたが、この本は Windows 開発をやってる人なら一読したほうがよさそうだ。

[asin:4048676083:detail]

**&lt;b&gt;前書きの売り文句&lt;/b&gt;
前書きには次のような逸話が紹介されている。
&gt;&gt;
MS のエンジニアが4～5日に1回クラッシュする問題を数週間かかっても解決できなかったが、gflags の使い方に詳しい人に教えてもらってから再現させると、そこから1時間で原因が分かった。
&lt;&lt;

どこの通販番組だよ、と思ってしまったが、１章を読んでみて確かにこの本はすごいと思った。

**&lt;b&gt;オススメのデバッグツール９選&lt;/b&gt;
１章ではオススメのデバッグツールが９つ紹介されている。ざっと紹介すると次のようになってる。
+&lt;a href=&quot;ftp://ftp.microsoft.com/PSS/Tools/Developer%20Support%20Tools/LeakDiag/&quot;&gt;LeakDiag&lt;/a&gt;
--メモリリーク検出ツール
+&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc267445.aspx&quot;&gt;Debugging Tools for Windows&lt;/a&gt;
--デバッガとツール群
+&lt;a href=&quot;http://support.microsoft.com/kb/268343/ja&quot;&gt;UMDH&lt;/a&gt;
--メモリリーク検出ツール (LeakDiag のサブセット)
+&lt;a href=&quot;http://www.microsoft.com/japan/windows/appcompatibility/appverifier.mspx&quot;&gt;Microsoft Application Verifier&lt;/a&gt;
--実行中のアプリケーションの自動診断
+gflags
--&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc267445.aspx&quot;&gt;Debugging Tools for Windows&lt;/a&gt; に同梱
--システムやプロセスごとのデバッグ設定を詳細に変更できる
+&lt;a href=&quot;http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx&quot;&gt;Process Explorer&lt;/a&gt;
--超強力なタスクマネージャ
+&lt;a href=&quot;http://www.microsoft.com/japan/whdc/DevTools/WDK/WDKpkg.mspx&quot;&gt;Windows Driver Kit&lt;/a&gt;
--ドライバー開発用 SDK
--ドキュメントが充実しているが難しい
+&lt;a href=&quot;http://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt;
--ネットワーク解析
--RPC のデバッグにも有効
+DebugDiag
--&lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=9bfa49bc-376b-4a54-95aa-73c9156706e7&amp;DisplayLang=en&quot;&gt;IIS Diagnostics Toolkit&lt;/a&gt; に同梱
--IIS のパフォーマンス分析ツール

メモリリーク・リソースリーク・セキュリティのなど問題を自動で診断してくれたり、厄介なプロセス間通信やマルチスレッドの手がかりとなったり…。確かに、数日悩んでも手がかりが掴めなさそうな問題にも手がかりを与えてくれそうだ。

なによりも、これらのツールは&lt;strong&gt;全て無料&lt;/strong&gt;で提供されている。便利なのは間違いないのだが、ドキュメントが少なかったり、逆に膨大すぎて使いどころが分からなかったりするのだが、この本では導入から、実際のバグに対してどのように利用するかが紹介されている。

**&lt;b&gt;各種バグへの対応方法&lt;/b&gt;
第１部ではデバッガの仕組みを深く解説している。難しそうだったので軽く飛ばして第２部をみてみた。第２部からは、起こりうるバグの種類１つずつについて、どういう挙動になるか、どのツールが便利か、どうやって原因を特定するか、といったことが事細かに書いてある。

本の値段はかなり高めだが、これを読めば数日悩むことがなくなると考えれば安い買い物かもしれない。ただし、.NET が前書きでばっさり切り捨てられていたり、Visual Studio も登場しなかったり、C++ を前提としていたりと、かなり硬派な本なので読む人を選びそうではある。

.NET な人には、&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4891003529/nitoyoncom-22/ref=nosim&quot;&gt;.NET&amp;Windowsプログラマのためのデバッグテクニック徹底解説&lt;/a&gt; が MS 公認だしおすすめ。Visual Studio を使った高度なデバッグテクニックが紹介されている。

[asin:4048676083:detail]

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連オススメ本
&gt;&lt;/div&gt;&lt;
[asin:4873114047:detail]

[asin:4774136689:detail]

[asin:4891003529:detail]

[asin:4048675095:detail]

</body>
</day>
<day date="2009-05-23" title="">
<body>
*h1n1_flu_kyoto_u*新型インフルに対する京都大学の対応がかっこよすぎる
&gt;&lt;div style=&quot;background-color: yellow; padding: 1em; color: red&quot;&gt;この記事は2009年5月時点のものです。最新の新型インフルエンザの対策方法ではない点にご注意ください&lt;/div&gt;&lt;

新型インフルエンザ（豚インフルエンザH1N1）の感染が広がっています。京都市内でも新型インフルエンザ感染者が見つかり、小中高校だけでなく、大学でも休校が相次いでいます。
&gt;http://www.kyoto-np.co.jp/article.php?mid=P2009052300042&amp;amp;genre=C4&amp;amp;area=K00:title=私立小中高など１６１校が休校　京都府内、新型インフルで：京都新聞&gt;
　新型インフルエンザの感染拡大を防ぐため、府内の私立の小中高校、幼稚園、専修・各種学校計１６１校・園が２２日夕までに休校を決めた。期間は一部を除き２７日まで。
&lt;&lt;

大学でも京都大学以外は休校・登校停止といった対応をしているようです。
&gt;http://www.kyoto-np.co.jp/article.php?mid=P2009052300042&amp;amp;genre=C4&amp;amp;area=K00:title=私立小中高など１６１校が休校　京都府内、新型インフルで：京都新聞&gt;
　大学、短期大学は国公立を含む府内全４７校のうち、京都大を除く４６校が休校・登校停止の措置をとった。 
&lt;&lt;

**&lt;b&gt;京都大学はなぜ休校しないのか？&lt;/b&gt;
京都大学のホームページを見てみましょう。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090523/20090523111545.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090520_2.htm:title&gt;
　京都市内において新型インフルエンザの感染が確認されたところです。また、京都市、京都府から休校も要請されているところでもあります。
&lt;&lt;
休校を要請されてはいるけど従っていないようです。無視しているようです。

しかし、なぜ堂々と無視するんでしょう。続きを見てみます。
&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090520_2.htm:title&gt;
　本学においては、今回の新型インフルエンザへの対応のため、感染症対策会議およびインフルエンザ対応専門家グループを設置し、医学的、生物学的見地をふまえ対応方針（最新の方針は平成21年5月20日付け第4版）を決定してきたところです。

　今回の、京都市内においての感染確認をふまえ、上記対策会議等で検討の結果、本学においては、現時点においては、通常どおりの授業を行うこととします。
&lt;&lt;
自分の大学が誇る専門家で協議したところ、いまの状況では休校の必要はない、と判断したようです。

一斉の休校は過剰反応で、医学的、生物学的に考えたら、まだ休校するような状況じゃないよ！といったところでしょうか。

もちろん、何が何でも授業をやるわけではなく、一定の条件で休校もしくは部分的な授業停止を考えているようです。
&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090520_2.htm:title&gt;
今後、流行範囲および規模、病原体の毒性の程度、学内感染の有無等の状況により、（中略）全学一斉休校、もしくは特定のキャンパスや研究室等を単位として、部分的な授業休止等を行う場合があります
&lt;&lt;
大学全体の休校は最終手段で、特定の範囲の問題ならば部分休校という措置をとるようです。

**&lt;b&gt;新型インフルエンザの実際&lt;/b&gt;
そんなかっこいい京都大学ですが、京都大学保健管理センターが出している &lt;strong&gt;&lt;a href=&quot;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090521_3.htm&quot;&gt;新型インフルエンザに関する緊急情報&lt;/a&gt;&lt;/strong&gt; がまたかっこいいです。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090523/20090523111544.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090521_3.htm:title&gt;
不幸中の幸いというべきか、毒性は強くありません。しかし、持病のある場合や妊婦では重症化するおそれもあります。また、秋以降に強毒化する可能性も懸念されています。

　このインフルエンザに効くワクチンは当分ありません。発症してしまった人はちょっと辛いのですが、これで免疫を獲得して今後同じタイプのインフルエンザにはかかりにくくなることが期待できますし、公衆衛生的観点からは集団免疫の成立にも貢献することになります。賢く行動してやり過ごしましょう。
&lt;&lt;

現在のところ毒性は強くない、感染しても騒ぐ状況ではない、なあに、かえって免疫力がつく、と言い切ってくれています。

過剰反応ぎみなマスコミの報道を一刀両断してくれています。しびれます。

**&lt;b&gt;予防法は&lt;/b&gt;
京都大学保健管理センターによると、やはり&lt;strong&gt;手洗い&lt;/strong&gt;と&lt;strong&gt;うがい&lt;/strong&gt;が良いようです。実証はされていないけど、効果はあるはず、とのことです。
&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090521_3.htm:title&gt;
これらの対策はインフルエンザ（通常型、トリ、ブタを問わず）に対する予防効果は実証されていませんが、論理的には有効と思われること、また少なくともインフルエンザよりはるかに多い普通の風邪の予防には有効であることが実証されていますので、ぜひ励行しましょう。
&lt;&lt;

また、マスクも有効ですが、適宜交換する必要があるようです。市販のマスクが品切れしていることについても
&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090521_3.htm:title&gt;
薬局やスーパーでディスポのマスクが手に入らなくても悲しむ必要はありません。昔風のガーゼ・マスク（手製でもOK)を一日の終わりに洗い、熱湯かアイロンをかけて消毒すれば何度でも使えます。
&lt;&lt;
と教えてくれてます。買い占めたりネットで高値で買ったりすることはナンセンスなんですね。
</body>
<comments>
<comment>
<username>mindcat</username>
<body>かっこよすぎて、涙が出ちゃうくらい、惚れ惚れします。ありががとう。</body>
<timestamp>1243046307</timestamp>
</comment>
<comment>
<username>t_sasa</username>
<body>問題が起きたときは慎重に行動しなければ、といつも思うのですが。。。&lt;br&gt;とても参考になる情報です。ありがとうございました。</body>
<timestamp>1243055855</timestamp>
</comment>
<comment>
<username>mao_mk68</username>
<body>知性は時として鋭利な刃物よりも鋭く、これぞ博識の府。おみごと。</body>
<timestamp>1243057907</timestamp>
</comment>
<comment>
<username>water_flea</username>
<body>そうだよね。&lt;br&gt;京都大学がこういうことをしてくれるのはいいですね。&lt;br&gt;京大が言ってくれると凄い説得力！&lt;br&gt;落ち着きましょう。</body>
<timestamp>1243058705</timestamp>
</comment>
<comment>
<username>itachy</username>
<body>京大万歳</body>
<timestamp>1243060962</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>流石京大ｗｗｗ&lt;br&gt;マスゴミを一刀両断かっけえｗ</body>
<timestamp>1243061650</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>流石京大ｗｗｗ&lt;br&gt;マスゴミを一刀両断かっけえｗ</body>
<timestamp>1243061651</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>流石京大ｗｗｗ&lt;br&gt;マスゴミを一刀両断かっけえｗ</body>
<timestamp>1243061655</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>流石京大ｗｗｗ&lt;br&gt;マスゴミを一刀両断かっけえｗ</body>
<timestamp>1243061656</timestamp>
</comment>
<comment>
<username>yo_from-satsuki</username>
<body>京大は、麻生さんのCMで言うところの焦らないを実行したようですね。&lt;br&gt;研究機関でもある大学らしい理論で考えた結果であって、何も考えずに恐怖を煽るマスコミとは大違い。</body>
<timestamp>1243068941</timestamp>
</comment>
<comment>
<username>よしぞう</username>
<body>日本の良心といった所でしょうか。格好良いです。</body>
<timestamp>1243069939</timestamp>
</comment>
<comment>
<username>m-yukawa</username>
<body>そのとおりですね。これまでずっと胸に抱いていたけれどなかなか口に出せなかったことを、ズバッと言い切ってくれたという思いです。それにしても、先達ての草薙くんの事件にしろ、”過剰反応”が多すぎます。</body>
<timestamp>1243070981</timestamp>
</comment>
<comment>
<username>mrt999</username>
<body>自分の頭で状況を判断して行動を決めたということが京大らしいところですねぇ。頭脳を持っている組織ともってない組織の差でしょう。</body>
<timestamp>1243072450</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>馬鹿なマスコミ騒ぎ過ぎ&lt;br&gt;この対応は適切</body>
<timestamp>1243075329</timestamp>
</comment>
<comment>
<username>jako</username>
<body>隣にあるうちの大学とえらい違いだ……。</body>
<timestamp>1243075605</timestamp>
</comment>
<comment>
<username>kyotokyoto</username>
<body>お見事。&lt;br&gt;現状は情報統制の通った集団ヒステリー症状にしか見えない。&lt;br&gt;戦後の情報体制みたいですもの。&lt;br&gt;しかし学校関係の人たちのリラックスした表情を久しぶりに見ました。&lt;br&gt;こんな完全な形での休みはなかなかないので、気持ちよく休めたと。</body>
<timestamp>1243081501</timestamp>
</comment>
<comment>
<username>runa-mizuki</username>
<body>にとろんイケメンだなおいｗ&lt;br&gt;京都にベンチャーなんてあったんだな&lt;br&gt;おれも京都で起業しようかな～</body>
<timestamp>1243081594</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>集団ヒステリーも過剰反応もなにもただマスゴミの飯の種だから騒いでるだけでしょ。別に騒ぎ過ぎなわけじゃないから。いい仕事してるな～と思っておけばよろし。&lt;br&gt;とりあえずさっさと京大休校にしろ。総長いい加減にしろって感じだよ。頼むよほんと。</body>
<timestamp>1243081876</timestamp>
</comment>
<comment>
<username>runa-mizuki</username>
<body>＞マスゴミ&lt;br&gt;？&lt;br&gt;低スペックで死んでもマスコミ業界なんて入れないお前が言うのか？（核爆｛笑｝）</body>
<timestamp>1243084693</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>本当に強力型が秋に来るのであれば、&lt;br&gt;現在マスクで防衛している人の方が先にやられる可能性があると思いません？&lt;br&gt;現在何も防衛していない人が免疫力をもってしまえば、強力型に対してやり過ごせるわけで...&lt;br&gt;勝手な超穿った見方ですが、秋に来る強力型まで免疫力を付けて欲しくないからマスクをして、ウイルスから隔離しているようにも思えます。&lt;br&gt;そうなると、現在マスクをしている人たちが真っ先に影響を受けるという皮肉な結果に...（あくまでSFです）</body>
<timestamp>1243085975</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>一番の低脳はマスゴミに煽られて騒いでるやつなのは間違いないな&lt;br&gt;当然、だからと言ってマスゴミが低脳ではないというわけではない&lt;br&gt;ぶっちゃけ目糞鼻糞の世界なんだわ&lt;br&gt;上にいる人間はマスゴミもそれに踊らされる馬鹿も目に入っちゃいない&lt;br&gt;それは逆も然りなわけだがね</body>
<timestamp>1243086384</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>この騒動はすっかり祭化してしまってますからね。&lt;br&gt;「踊る阿呆に見る阿呆。同じ阿呆なら踊らにゃ損々」って&lt;br&gt;踊ってる阿呆を尻目に、沈着冷静な判断を下す京都大学はかっこいいです。ハイ。</body>
<timestamp>1243086869</timestamp>
</comment>
<comment>
<username>通行人</username>
<body>恐れ入りました?ュ&lt;br&gt;さすがです。立派です。&lt;br&gt;よく言ってくれました。&lt;br&gt;ありがとう。&lt;br&gt;じゃなかった、おおきに</body>
<timestamp>1243089005</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>文面より、京都大学保健管理センターさんが意図しているのは&lt;br&gt;　「大きく変異しなければ秋以降もつかえる免疫になるから有利だよ」&lt;br&gt;ということではないかと。&lt;br&gt;&lt;br&gt;というのも、&lt;br&gt;弱毒型か強毒型はウイルス表面のヘマグルチニンが&lt;br&gt;どこで活性化されるかが大きな鍵で&lt;br&gt;　・弱毒型は呼吸器に多い酵素プロテアーゼで活性化&lt;br&gt;　・強毒型はヒトの体のどこにでもあるようなタンパク分解酵素活性で活性化&lt;br&gt;といわれています。&lt;br&gt;つまり弱毒型は呼吸器でしか暴れられないのですが&lt;br&gt;強毒型は全身で暴れることができるのでコワいワケです。&lt;br&gt;&lt;br&gt;で、人体が持つ免疫はそのヘマグルチニンに対して攻撃をします。&lt;br&gt;&lt;br&gt;なので、もしヘマグルチニンが変異して強毒型になってしまった場合&lt;br&gt;今回のインフルエンザにかかって得た免疫が使えるかといわれると…&lt;br&gt;それは保証の限りではないのです。</body>
<timestamp>1243090531</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>大学が休みになってくれればどーでもいいんです。&lt;br&gt;そんなこともわからないんですか？京大生なめたらあかんで（キリッ</body>
<timestamp>1243091820</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>（つづき）&lt;br&gt;&lt;br&gt;鳥インフルエンザでは18回ホップして感染すると&lt;br&gt;強毒型に変異するというヒヨコを使った実験結果があるのですが&lt;br&gt;これは例でしかないので、&lt;br&gt;実際に強毒型になるかどうかは秋以降に掛かってみないとわかりません。&lt;br&gt;でもそうならなかったら今回感染して免疫したヒトはお徳度高いですヨ！&lt;br&gt;&lt;br&gt;京都大学保健管理センターさんがそのような方針であるのは&lt;br&gt;&lt;br&gt;　　「今回は弱毒型かつ毒性が低いインフルエンザで、&lt;br&gt;　　　ぶっちゃけ病原体としては季節性インフルエンザと同等レベルだから&lt;br&gt;　　　特別なことはせず同じように対処すればよい」&lt;br&gt;&lt;br&gt;というのが大きいでしょう。&lt;br&gt;なお、かかってしまった場合の対処は厚生労働省のガイドラインとほぼ同一の対応をとる旨、別ページに記載があります。&lt;br&gt;&lt;br&gt;そうじゃなかったらノンケのヒトがホイホイついていくように&lt;br&gt;免疫、GETだぜ！とか言ってられません。&lt;br&gt;&lt;br&gt;ちなみに、国立感染症研究所の方いわく、今回のは&lt;br&gt;　「やばいと思ったときはハンカチで鼻と口をふさいでください」&lt;br&gt;というレベルでもよいのだそうです。&lt;br&gt;&lt;br&gt;でも満員電車だと手が自由になりませんから、そこでマスクの出番となります。&lt;br&gt;そういう意味でマスクを買い求めるのは至極まともな話だと思うのですが&lt;br&gt;現状は全く必要ない場所で装着されている方の方が多かったりします…&lt;br&gt;これはマスコミの過熱報道も要因の一つかもしれません。&lt;br&gt;&lt;br&gt;国が安全サイドに引っ込みすぎるからマスコミもここまで煽れるんでしょうね…</body>
<timestamp>1243091991</timestamp>
</comment>
<comment>
<username>nsoderland</username>
<body>皆様のコメントがなんとおもろい。　笑って病気を吹っ飛ばせ。又は死んでももともとよ。おおきに。もっと書いてんか。　な！！</body>
<timestamp>1243092708</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>大学が休みになればどうでもいいって…&lt;br&gt;じゃやめたら？</body>
<timestamp>1243094195</timestamp>
</comment>
<comment>
<username>つじすけ。</username>
<body>自分、職場が神戸なもんで・・通勤電車で大方のヒトがサージカルマスク着用してる様とか、「外出・営業時のマスク義務化」してる会社とかがあまりにも多くてちょっと辟易してます（&gt;&lt;）&lt;br&gt;ま、営業時ってのはわからんでもないっすけど・・。&lt;br&gt;&lt;br&gt;だからこそ、この京都大学さんの対応にちょっと感動しました♪&lt;br&gt;オトコ前すぎますっ！&lt;br&gt;いっそオヨメにゆきたいクオリティっす（爆）&lt;br&gt;&lt;br&gt;鴨川渡って反対側にあるガッコにも見習ってほしいくらいデスね・・・（・◇・）</body>
<timestamp>1243098377</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>&gt;持病のある場合や妊婦では重症化するおそれもあります。&lt;br&gt;集団免疫の成立のために、&lt;br&gt;重症化する可能性がある人達が犠牲になってもかまわんということか。&lt;br&gt;&lt;br&gt;&quot;京大&quot;の用意した&quot;専門家&quot;ってだけで、&lt;br&gt;その人の言ってること支持する理由にはならんなぁ。&lt;br&gt;&lt;br&gt;仮に専門家達が正しいことをいってたとしても、&lt;br&gt;京大側が言う&lt;br&gt;&gt;賢く行動してやり過ごしましょう。&lt;br&gt;を、京大生達が実践してるともおもえん。</body>
<timestamp>1243102923</timestamp>
</comment>
<comment>
<username>az</username>
<body>以前、あるところで同じようなこと書き込みしたらふるぼっこになりますた&lt;br&gt;やっぱ京大の信用度は格が違った&lt;br&gt;憧れますｗ</body>
<timestamp>1243122789</timestamp>
</comment>
<comment>
<username>ex_or</username>
<body>「弱毒性の今のうちに罹ったほうが、むしろ免疫が出来て得なのでは」&lt;br&gt;とは正直思っていたものの、流石に口には出せなかった。&lt;br&gt;確固たる学識と看板があるから書けることだよなあ、と。&lt;br&gt;&lt;br&gt;ただ、無防備に感染を広げまくったら、強毒性に変異するリスクが一挙に高まるわけで。&lt;br&gt;「ちゃんと罹らないよう注意しなきゃね！」&lt;br&gt;というポーズは取りつつ、自分だけ出し抜く形で罹らなきゃマズいというジレンマ。&lt;br&gt;&lt;br&gt;あと社会人的に、「自分の会社の罹患第一号」なんて不名誉な称号は、正直欲しくないし。&lt;br&gt;それにそもそも、弱毒性だろうが免疫が出来て得だろうが、やっぱ罹りたくないっていうか。&lt;br&gt;&lt;br&gt;と、諸々のジレンマを秤にかけた結果が、「百均の花粉症用マスク着用」だったりする毎日。&lt;br&gt;飛沫感染ぐらいは防げるかも＋対策ちゃんとやってますよポーズが取れると。</body>
<timestamp>1243124086</timestamp>
</comment>
<comment>
<username>deadpro</username>
<body>さすが京大。発言が正論過ぎて吹いたｗｗｗ。&lt;br&gt;&lt;br&gt;まあ、皆もっと落ち着こうよという話で。</body>
<timestamp>1243128075</timestamp>
</comment>
<comment>
<username>p_h</username>
<body>この対応をよしとする方々の考えが理解できません。感染症に限らず公衆衛生対策は、全員が足並みをそろえてこそ意義があるのであって、機関ごとに「うちはこう考えます、これが正しいのです」とてんでに行動することを許しては意味がありません。もし京都大学が本気で休校要請に異論があるのなら、ホームページなどに意見広告などせず、全力をかけて厚生労働省を説得するべきです。日本を代表する大学なのだからそれはできるはずだし、できないのなら、粛々と従うべきです。どんなに一部からはカッコよく見えようと、客観的に見れば、やっていることはSARSのとき、WHOが報告しろと言っても、「いえ、これは大したことはないのです」と報告しなかった国と同類なのです。</body>
<timestamp>1243128358</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>ん～。日本もあなどれんな・・・。政府や大マスコミの苦虫を噛み潰す顔が見えるようだ。&lt;br&gt;学者個人の書き込みならともかく、大学の機関、それも国立大の発表だとは・・・。&lt;br&gt;三権の分立していない国で、組織ぐるみで象牙の塔を守っている人たちがいたとは。おそれいった。</body>
<timestamp>1243128506</timestamp>
</comment>
<comment>
<username>いわね</username>
<body>さすが名門大学だなあ、というのが一つと、&lt;br&gt;実践的というか実用的なアドバイスをくれているのが&lt;br&gt;素晴らしいなあ、&lt;br&gt;と思いました。</body>
<timestamp>1243128748</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>京大のガイドラインの観点は面白いですね。&lt;br&gt;&lt;br&gt;しかし、インフルエンザが致命的になる持病を持っている者としては、少し大袈裟なぐらいがちょうど良いと思っています。&lt;br&gt;&lt;br&gt;もちろん、パニックをあおることは言語道断ですが、笑い話は後からいくらでもできるでしょう。&lt;br&gt;全く備えをしていなかった阪神大震災とその後の震災の被害を比べると国家方針として事前に備える大切さがわかると思います。&lt;br&gt;&lt;br&gt;国と大学とでは立場が全く異なることは見落として欲しくないです。</body>
<timestamp>1243129893</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>国だろうが大学だろうが、ちゃんと考えて考えたことを公表して&lt;br&gt;それに基づいて行動する、これは当たり前のこと。</body>
<timestamp>1243132550</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>まぁ、京都は確認されている感染者が少ない(一人だっけ？)ってのも、あるかもしれない。&lt;br&gt;大阪とか兵庫みたいに感染者100人超えそうな勢いだったら、&lt;br&gt;こうは言ってなかったと思う。&lt;br&gt;状況によって対応が違うだけの話で&lt;br&gt;さすが京大www&lt;br&gt;とかいってるやつは、なんかバカっぽい。</body>
<timestamp>1243136652</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>「予防法は」の所の引用文中にある、「論理的には有効」ということの意味が分かるようで分からないｗ</body>
<timestamp>1243142527</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>ワクチン作ってるからガタガタいうな！、って言ってるように見えたｗ。頑張れ京大。</body>
<timestamp>1243148337</timestamp>
</comment>
<comment>
<username>旭爺</username>
<body>院生をやっております。今休校になられると、史料が借りられず発表で死ねるので非常に助かっております。もちろん、慎重な対応は必要だと思いますけれど。</body>
<timestamp>1243148993</timestamp>
</comment>
<comment>
<username>dekoponn007</username>
<body>今、どうしても豚インフルにかかると仕事などで困る人は過剰反応でもいいと思うし、うがい手荒いをしっかりやってて健康に自信ある人はそんな必要ないと判断してもいいし。&lt;br&gt;すべては致死率の問題・・・とも言えるところが問題だと思ってる。&lt;br&gt;&lt;br&gt;現在は豚インフルの致死率は世界38カ国で8456人中73人の死亡で1％以下（5/16時点）。しかしメキシコでは1000人近くの感染確認で68人の死亡確認、その率約7％（あくまで4/24時点）&lt;br&gt;&lt;br&gt;この数字、この状況と自分がおかれてる状況（住んでる場所や出かける場所、健康状況など）を考慮し行動することに意味がある。&lt;br&gt;&lt;br&gt;つまり、何も考えずに「さすが京都大学かっけー」というのは、ほんとに何も考えてないバカで、致死率が一時10％だったときに世界に焦って報道したマスコミをひとくくりにしてバカというのも、マスコミをバカって言うことに酔いしれてるだけのバカである。&lt;br&gt;&lt;br&gt;日本の感染者で死者が出たらどうなるだろうか。</body>
<timestamp>1243153127</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>大学は研究機関であり、&lt;br&gt;情報発信拠点でもあるっていう良い例ですね。</body>
<timestamp>1243154891</timestamp>
</comment>
<comment>
<username>関係者</username>
<body>なんかべた褒めなので．突っ込んどきます．&lt;br&gt;初期の段階では、&lt;br&gt;http://www.kyoto-u.ac.jp/ja/news_data/h/h1/news5/2009/090501_2.htm&lt;br&gt;「感染の疑いのある国」から帰国しただけで、問答無用で7日間の自宅待機(就業禁止)を指示していました．&lt;br&gt;典型的な事務方の事なかれ主義．&lt;br&gt;&lt;br&gt;その後、&lt;br&gt;「国内で発生したら、全員就業禁止＝大学閉鎖するのか？」&lt;br&gt;という事実に気づき、それは大変ということで、「蔓延国」に対象を限定(第3版)．&lt;br&gt;&lt;br&gt;同時に、事前に届け出て問診票を出せば就業禁止を免除．&lt;br&gt;これは、海外の学会等に参加できなくなるとの抗議が大量にあったようで、この抜け道．&lt;br&gt;&lt;br&gt;さらに、日本が「蔓延国」でないと言い張れなくなったので、これまた大学閉鎖なんて無理ということで、&lt;br&gt;「蔓延国」からの帰国でも就業禁止を解除(第4版)．&lt;br&gt;&lt;br&gt;現実的に、24時間対応が必要な装置やら設備なんてもうゴロゴロしているわけで、大学の一律閉鎖なんて簡単にできないのです．それを考えず、その場しのぎの(責任回避)で方針を出している、よろしくない対応の例だと思うのですが...</body>
<timestamp>1243155133</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>私も京都大学の対応が一概にほめられたものじゃないと思いますよ。マスクしてまで授業受けるべきなのか、って感じです。知識と一緒に病気もらってもねえ。&lt;br&gt;大騒ぎするべきじゃないという投稿もありましたが、致死率見てたらそうも言えない現状ですよ。&lt;br&gt;学内から大量に患者が出ちゃったらどうするつもりなんでしょう（笑）</body>
<timestamp>1243155572</timestamp>
</comment>
<comment>
<username>日々是</username>
<body>なんとなく日本、マスコミが大げさに報道して、例によってみんな過剰反応だよ。マスクなんかオークションで５マンとかで取引されてるし、もうね・・・。&lt;br&gt;と思っていたのをバッサリやってくれたのが小気味よかったとです。ありがとう</body>
<timestamp>1243156754</timestamp>
</comment>
<comment>
<username>kiichan1115</username>
<body>「感染しても騒ぐ状況ではない、なあに、かえって免疫力がつく、」　と、&lt;br&gt;「また、マスクも有効ですが、適宜交換する必要があるようです。」　とは、&lt;br&gt;矛盾していませんか…？&lt;br&gt;感染しても平気だと言ってるのか、&lt;br&gt;感染しないように注意しましょうと言ってるのか。&lt;br&gt;&lt;br&gt;&lt;br&gt;●「かっこいい」　という表現について&lt;br&gt;&lt;br&gt;たとえ致死率が低くとも、&lt;br&gt;感染者数が増えれば、それにともなって死者が出る・増えることが予想されます。&lt;br&gt;（別に休校にしなくても、京大関係から死者は出ないかもしれませんが。）&lt;br&gt;&lt;br&gt;日本での致死率がどのくらいになるのか、まだよくわからないのに、&lt;br&gt;「かっこいい」　とかというとらえ方をしてしまうのは、&lt;br&gt;過剰反応のマスコミ以上に、まぬけな気がしますが…。&lt;br&gt;&lt;br&gt;僕の会社は関西への出張禁止になったけど、&lt;br&gt;クライアントの会社は関西への出張はさせてる。&lt;br&gt;別にどっちの対応が　「かっこいい」　とか、考えたこともない。</body>
<timestamp>1243156865</timestamp>
</comment>
<comment>
<username>kaiteki</username>
<body>感染症の危険性を分かってるのは研究機関だけで、その最高峰のひとつが京大でしょ。&lt;br&gt;政府もよく分からず、とりあえず大事になったときのために大げさに警戒している。備えあれば憂いなしというけど、警戒だってタダじゃないんだよ。膨大な金と時間を浪費する。&lt;br&gt;優秀な学生を抱えて安全策を取る義務がある京大の立場で、そこまで警戒する必要はないと言ってるんだから、単純に「それなら今のとこ」安心だな、と思ったけど。</body>
<timestamp>1243157695</timestamp>
</comment>
<comment>
<username>京大否定してる人</username>
<body>日本一優秀な機関が大丈夫って言ってるのになんなの？&lt;br&gt;京大の教授より優秀なの？</body>
<timestamp>1243158499</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>京大は優秀だろうけども、他の大学の先生やら役員やらも普通に優秀レベルだと思うが？「京大＝絶対」みたいな意見もはっきりいってバカまるだしなんだけど。&lt;br&gt;&lt;br&gt;つまり、すぐに「京都大学かっけー」っていうやつって、もし先に三流大学とされている大学が同じこと言ってたら「休講にしないんだ。やっぱ頭悪い大学w」って言いそう。&lt;br&gt;自分で判断できないやつなんだよな、きっと。</body>
<timestamp>1243160910</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>まぁ権威を全否定する人は少なくとも京大に苦労して入らないだろうな</body>
<timestamp>1243163388</timestamp>
</comment>
<comment>
<username>s</username>
<body>どのような対応が適切だったのかは、結局終わってみなきゃわからない。&lt;br&gt;&lt;br&gt;何も考えないというのは論外としても、考えた結果として「最悪を考えた慎重論をとる」のか、「コストを考えた適宜対応論をとる」のかは、どこまでいっても価値観の問題でしかないよ。&lt;br&gt;&lt;br&gt;自分の考えに近いからといって、今の段階で京大方式を「さすが！」といい、「自治体はバカ」と言っちゃえる人こそ、本物のバカだと思うよ。&lt;br&gt;&lt;br&gt;もちろん、何も考えず、何の責任も取らなくていいマスコミなんて相手にすらしたくないけど。</body>
<timestamp>1243163850</timestamp>
</comment>
<comment>
<username>shigmax-94</username>
<body>京大の工学部の講義で教授が、&lt;br&gt;「はやく休校になりませんかなぇ」&lt;br&gt;と授業開始に発言→生徒(笑)</body>
<timestamp>1243166011</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>＞なまえ  2009/05/24 00:56  &lt;br&gt;＞大学が休みになればどうでもいいって…&lt;br&gt;＞じゃやめたら&lt;br&gt;&lt;br&gt;「仕事やすみたいなぁ」→「仕事やめれば？」&lt;br&gt;あなたの論理はこういうことですね。マジキチ乙ですぅ～</body>
<timestamp>1243167320</timestamp>
</comment>
<comment>
<username>aa</username>
<body>午前1時に緊急会見やらなんやらをして煽りまくってばかりの桝添厚生労働大臣のボーナスステージが終了</body>
<timestamp>1243169460</timestamp>
</comment>
<comment>
<username>bonolon</username>
<body>多くの自治体や官公庁が上級官庁の顔色を伺って、その指示に右へならえをしているのが、これまでの新型インフルエンザに関する「危機管理」の実際だと思う。国民の健康とか、感染症対策ということよりも、自治体・官公庁では自分の組織や管轄地域から感染者が出たときの言い訳づくりを中心にした、役人的体質の現れでしかない。企業も、風評被害を恐れて、過剰反応している。その中で、京都大学のこの方針は、清涼な風を吹かせているようで、お見事といえよう。</body>
<timestamp>1243171990</timestamp>
</comment>
<comment>
<username>UndersizedWimps</username>
<body>京大賛美に吐き気</body>
<timestamp>1243174449</timestamp>
</comment>
<comment>
<username>あのにます</username>
<body>&gt;kiichan1115 &lt;br&gt;何にも矛盾してないでしょ、と思いますけどね。&lt;br&gt;「仮にかかっても」って意味が普通に読み取れますけど。&lt;br&gt;あなたの見解そのままなら、「進んで感染しましょう」って書かなくちゃならない。</body>
<timestamp>1243174885</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>↑↑&lt;br&gt;＞「危機管理」の実際だと思う。&lt;br&gt;＞役人的体質の現れでしかない&lt;br&gt;根拠が一切ないですね。想像と妄想でお仕事されてる方ですか？</body>
<timestamp>1243186126</timestamp>
</comment>
<comment>
<username>通りすがりの大阪人</username>
<body>かっこいいかは、別にして　人それぞれのとらえ方があるよね。&lt;br&gt;京大のインフルエンザに対する今回の対応は、賛否両論なのはわかる。&lt;br&gt;肝心なのは、みんながインフルエンザに対する正確な知識を持って、自分で自分を守るしかないって事。&lt;br&gt;体力のある人には大した事がなくても妊婦や持病をもった人には、&lt;br&gt;悪影響を与える事も伝えらているし・・・&lt;br&gt;豚インフルエンザが、毎年流行るインフルエンザ並みで良かったって思います。&lt;br&gt;今一番心配なのは、タイとかで流行っている鳥インフルエンザが、強毒性のまま人から人へ感染が広がる事です。&lt;br&gt;もっとも、インフルエンザは、宿り主にパラサイトしているので人への感染を強めた時は、弱毒性になると言う学者もいますが・・・&lt;br&gt;人間がバタバタしんだら、インフルエンザも繁殖できなもんね！</body>
<timestamp>1243191058</timestamp>
</comment>
<comment>
<username>NAME</username>
<body>感染者が増える事で遺伝子変異の可能性が高まるとかいう話も&lt;br&gt;京大では否定的なのかな</body>
<timestamp>1243229188</timestamp>
</comment>
<comment>
<username>犀霞</username>
<body>言ってる事は正しいように聞こえるけど？　今回の弱毒性インフルエンザと秋の強毒性のインフルエンザは違うもの。弱毒性に掛かったからと言って免疫になるとは考えづらいと思うけど？　それに変異はどこで起こるか解らないし弱者への感染が心配される以上、休校にせずに生徒を徘徊させることが果たして正しいのか疑問？　推測で判断しているだけですよね？　結果が良かったから良いものの余り得策とも思えません。</body>
<timestamp>1243256205</timestamp>
</comment>
<comment>
<username>HITO</username>
<body>マスクが手に入らなければクッキングペーパーで代用品を作ればいいって言う話を聞きましたｗｗ&lt;br&gt;終わってみなければ正しいかどうかなんて分からないですよね。俺も京都大の対応はかっこいいと思います。京大の教授の意見を重視したってことですよね。自大の教授信用できない大学なんて、ちょとかっこ悪いですよね。特に京大なんだし。</body>
<timestamp>1243272287</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>マスク意味ね～と思っている京大生ですが&lt;br&gt;休みほぴぃー</body>
<timestamp>1243292313</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>Fラン大がやったらフルボッコだろうな。所詮そんなもん。&lt;br&gt;京大の俺の評価は、「自主的にそう判断したなら別にいいんじゃね？」って感じだが、賞賛してる奴らがキモイ。&lt;br&gt;情報を判断できない一般人は騒ぎすぎぐらいでちょうどいいんだよ。&lt;br&gt;&lt;br&gt;こんなもん結果論。京大で集団感染が起きたら手のひら返しだろうなー。そのとき京大が責任取ることになるから、京大へのコメントは特に無いが、賞賛派が悦に入ってコメしてる様は滑稽だね。</body>
<timestamp>1243330310</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>マスゴミ涙目とか京大かっけー同じレベルだよね&lt;br&gt;そういう対応するところも出るだろう程度の反応です&lt;br&gt;&gt;京都市、京都府から休校も要請されている&lt;br&gt;ここを無視して対応を問題視する意見もわかるね</body>
<timestamp>1243351324</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>休校になったDQN感染高校生が&lt;br&gt;町に跳梁跋扈&lt;br&gt;&lt;br&gt;DQN感染高校生が京大キャンパスをうろちろょろするわけない。&lt;br&gt;京大キャンパス内はやや安全ウマー　じゃね。</body>
<timestamp>1243352930</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>２ちゃん系でてっく煮さんの名前があってびっくりしました。&lt;br&gt;多分、にとよんさん自身がもっとびっくりしてるとおもいますが。</body>
<timestamp>1243355740</timestamp>
</comment>
<comment>
<username>匿名希望</username>
<body>大阪の橋下にしても京大にしてもそうや、結局スーパーマン、正義の味方になりたいだけ。&lt;br&gt;結局、ばくちに過ぎない。&lt;br&gt;「弱毒性」という言葉に踊らされているのは、京大の方なのでは？&lt;br&gt;科学的根拠なし。&lt;br&gt;まぁ、せいぜい重症化リスク高い人の前でウイルスをばら撒いてくれや。</body>
<timestamp>1243405134</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>もう、おまえらのせいでマスク売れへんやんけ！！&lt;br&gt;インフルはどうでもええんや。&lt;br&gt;マスクさえ売れればええんや。&lt;br&gt;やっと１万円の子供用マスクに注文１個入ったとこやったのに。</body>
<timestamp>1243405341</timestamp>
</comment>
<comment>
<username>あ</username>
<body>噂の京大生ですが、京大の対応はぼちぼちやと思います。夏休みが縮むのは結構嫌やし。あの総長のことだから、みんなを休ませたくないだけなんじゃないかとも思うけども。&lt;br&gt;&lt;br&gt;あ、一つ言いたいことがある！&lt;br&gt;&lt;br&gt;ナノマスク以外のマスクは（N95マスク含む）ウイルスに対してあんまり有効ではありません。根拠は簡単。ウイルスよりもマスクの隙間の方が大きい。しかも、顔にフィットするマスクを見つけるのはすごく難しい。道行く人々を見る限り、あまりそのようなことは知られていないように思われます。&lt;br&gt;&lt;br&gt;要するに、マスクの着用を義務付けている会社は沢山ありますが、大概は対策をしてる　風　を　装　っ　て　い　る　だけ。&lt;br&gt;&lt;br&gt;そういうことなんで、普通のマスクをして歩いてる人がうようよしてるのを見ると　過　剰　反　応　乙　、としか言いようがない。ま、感染者が付ける分には効果があるでしょうが、そういう人はそもそも外出するべきじゃないよね。&lt;br&gt;あと、京大のサイトにも書いてあるように風邪の対策にはなるんじゃないすか。だから何もしないよりは若干マシ。&lt;br&gt;&lt;br&gt;風邪の対策は殆どしない人たちが、インフルが流行すると風邪の予防を始めるってどういうことだよー。と思うと、なんか嫌んなっちゃうねもう。</body>
<timestamp>1243823647</timestamp>
</comment>
<comment>
<username>あ</username>
<body>噂の京大生ですが、京大の対応はぼちぼちやと思います。夏休みが縮むのは結構嫌やし。あの総長のことだから、みんなを休ませたくないだけなんじゃないかとも思うけども。&lt;br&gt;&lt;br&gt;あ、一つ言いたいことがある！&lt;br&gt;&lt;br&gt;ナノマスク以外のマスクは（N95マスク含む）ウイルスに対してあんまり有効ではありません。根拠は簡単。ウイルスよりもマスクの隙間の方が大きい。しかも、顔にフィットするマスクを見つけるのはすごく難しい。道行く人々を見る限り、あまりそのようなことは知られていないように思われます。&lt;br&gt;&lt;br&gt;要するに、マスクの着用を義務付けている会社は沢山ありますが、大概は対策をしてる　風　を　装　っ　て　い　る　だけ。&lt;br&gt;&lt;br&gt;そういうことなんで、普通のマスクをして歩いてる人がうようよしてるのを見ると　過　剰　反　応　乙　、としか言いようがない。ま、感染者が付ける分には効果があるでしょうが、そういう人はそもそも外出するべきじゃないよね。&lt;br&gt;あと、京大のサイトにも書いてあるように風邪の対策にはなるんじゃないすか。だから何もしないよりは若干マシ。&lt;br&gt;&lt;br&gt;風邪の対策は殆どしない人たちが、インフルが流行すると風邪の予防を始めるってどういうことだよー。と思うと、なんか嫌んなっちゃうねもう。</body>
<timestamp>1243823702</timestamp>
</comment>
<comment>
<username>褒めるほどではない</username>
<body>批判するわけじゃないけど、万が一在校生が発症したら&lt;br&gt;コメントと全く反対の評価になったと思うけどな</body>
<timestamp>1244268803</timestamp>
</comment>
<comment>
<username>吉高由里子</username>
<body>吉高由里子 映画『蛇にピアス』初主演でヌ＿ド SE×【動.画】&lt;br&gt;&lt;br&gt;玉木宏と交際が発覚した吉高由里子。&lt;br&gt;フジドラマ「白い春」に出演しており、映画「蛇にピアス」で大胆なヌ.ードシーンを披露し話題を集めた。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;http://hebinipias.blogspot.com/&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;サデ.ィストな彼によって肉.体改.造してくこの映画。&lt;br&gt;&lt;br&gt;「スプ.リットタン」「ピアス」「刺青」「激しい肉.体関.係」といった表現が象徴的に使われ、もちろん本格ヌ- ドも。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;http://hebinipias.blogspot.com/&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;過去のレ.イプシ.ー ンと合わせてどうぞ。</body>
<timestamp>1245639495</timestamp>
</comment>
<comment>
<username>James</username>
<body>Thanks for sharing this with us. Has the university taken measures against this disease or not? keep sharing such info as its important for every one specially for the students of university must be aware of it. &lt;a href=&quot;http://www.lowmortgageoffer.com&quot;&gt;mortgages&lt;/a&gt;...</body>
<timestamp>1246536400</timestamp>
</comment>
<comment>
<username>k411</username>
<body>京都大学さん本当に有難う御座いました。&lt;br&gt;私は京大に入ることにしますた。</body>
<timestamp>1246887153</timestamp>
</comment>
<comment>
<username>経済OB</username>
<body>ここの学生はほとんど学校には行かないんだから　休校であろうがなかろうが、同じでしょう。</body>
<timestamp>1247972596</timestamp>
</comment>
<comment>
<username>つの</username>
<body>ウイルスのほうが京大よりも賢い。&lt;br&gt;&lt;br&gt;という観点で考えると、京大の対応はもしかするとウイルスの思うツボかも知れない。&lt;br&gt;&lt;br&gt;ウイルス側にとっては、まず最初弱毒性の状態で世に現われて、広く長く人間の体を知る必要がある。&lt;br&gt;強毒性から始まったら、本気で一網打尽にされる可能性があるから。&lt;br&gt;&lt;br&gt;この夏場に、じっくり人間の体を蔓延して、来るべき秋以降に　ウイルス側が備えてる。という考えもあると思う。&lt;br&gt;&lt;br&gt;少なくとも、そういう考えから、あまり広範囲に長い期間蔓延し続けるのは良い状況ではない。という製薬会社のレポートも見ました。&lt;br&gt;&lt;br&gt;秋にどっちに転ぶか分からないけど。&lt;br&gt;感染しつづけるメリットのほうが少ない。と僕は思います。</body>
<timestamp>1249293672</timestamp>
</comment>
<comment>
<username>強毒性</username>
<body>秋を待つ前に強毒性インフルエンザになって、帰って来ましたねｗ　殺傷能力を兼ね備えて・・・　ウイルスを蔓延させる事に一役買ったこの責任、京大側はどう取るんでしょう？</body>
<timestamp>1251714124</timestamp>
</comment>
<comment>
<username>変異？</username>
<body>私たちの地域では昨日、健康だった11歳の少年が発熱から約半日で容態が急変してなくなりました。なにかとてつもないものが来ている気がします。</body>
<timestamp>1254285525</timestamp>
</comment>
<comment>
<username>進化</username>
<body>更なる進化を・・・　ウクライナでスーパーインフルエンザなる物が猛威を振るっているとか？　野放しにされた隣国の三種類のインフルが融合したものではないかと懸念されているそうです。自然治癒を謳い対策をしなかったウクライナにも問題ありですが、肺が墨の如く黒色に変化し破裂して死に至ると言うのは、究極のインフルエンザの進化の序曲に感じて恐怖を感じました。日本に来るのも時間の問題ですかね・・・　京都大学のような認識を間違えた対処をすると、国として取り返しの付かない事態に陥りそうで恐ろしい事になりそう。大学側には偏見から来る意固地に凝り固まらず、地元や政府機関との連携対策を期待したいです。</body>
<timestamp>1258785018</timestamp>
</comment>
</comments>
</day>
<day date="2009-05-28" title="">
<body>
*edushi_map*中国の町並みをドット絵で再現したE都市がすさまじい
中国の地図サイト「&lt;a href=&quot;http://www.edushi.com/&quot;&gt;E都市&lt;/a&gt;」は一昔前の RPG のようにドット絵で中国の町並みを再現しています。描き込みの量もすごいし、再現されている範囲も広くて驚きました。

たとえば &lt;a href=&quot;http://shanghai.edushi.com/&quot;&gt;上海&lt;/a&gt; はこんなの。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528090849.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
もちろんドラッグで移動できます。

少し拡大してみます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528090848.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

さらに拡大してみます。右下のビルの看板の文字が読めちゃってます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528090846.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
自分が見た範囲では全ての場所で地図がここまで拡大できました。すべてのズームレベルでしっかりと描き込んであるのが驚きです。

Google Maps の衛星地図とも比較できます。衛星写真を45度ぐらい時計回りに回転すると、上のドット絵に近くなりますね。道の形や屋根の色まで忠実に再現されています。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528090843.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**北京を旅する
&lt;a href=&quot;http://beijing.edushi.com/&quot;&gt;北京&lt;/a&gt; の天安門広場～紫禁城。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528091005.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

天安門にズームイン。もちろん毛沢東の肖像画まで再現。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528092438.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

オリンピックで話題になった鳥の巣スタジアムも再現されています。すぐ近くはビル街だったんですね。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528093823.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**香港を旅する
&lt;a href=&quot;http://hongkong.edushi.com/&quot;&gt;香港&lt;/a&gt; の大量のビル群。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090528/20090528091114.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**楽しい！
この描き込みは人力でやってるんでしょうか。ある程度はテンプレートがあるのかもしれませんが、おそるべし、中国人パワー。

無理かもしれませんが、日本版、世界版も見てみたくなります。

-&lt;a href=&quot;http://www.edushi.com/&quot;&gt;E都市&lt;/a&gt;
</body>
<comments>
<comment>
<username>orz</username>
<body>リアル・シムシティだ...&lt;br&gt;修正の手間も尋常じゃなさそう</body>
<timestamp>1243498162</timestamp>
</comment>
<comment>
<username>Falky</username>
<body>確かこのサイト、以前「あまりにショボすぎる中国の地図サイト」みたいな感じで話題になったことがあると思います。&lt;br&gt;こういうプロジェクトだったんですね。</body>
<timestamp>1243514811</timestamp>
</comment>
<comment>
<username>ドット絵じゃないでしょ</username>
<body>ローポリモデルのプリレンダーにしか見えないのは&lt;br&gt;私の眼が腐っているのでしょうか？</body>
<timestamp>1243580381</timestamp>
</comment>
<comment>
<username>てか</username>
<body>どう見てもドット絵じゃないんだけど</body>
<timestamp>1243592056</timestamp>
</comment>
<comment>
<username>　</username>
<body>ローポリモデルのプリレンダーでしょ　とか書けばいいのに、&lt;br&gt;ローポリモデルのプリレンダーにしか見えないのは&lt;br&gt;私の眼が腐っているのでしょうか？　だって</body>
<timestamp>1243605426</timestamp>
</comment>
<comment>
<username>目というか頭</username>
<body>ドット絵の地図に似てるでしょう。&lt;br&gt;ドット絵って言ってる訳じゃないし。&lt;br&gt;比喩とかしらんのか？ｗ</body>
<timestamp>1243612494</timestamp>
</comment>
<comment>
<username>　</username>
<body>ドット絵って言ってるんですけどね、ブログ主は&lt;br&gt;どこにも比喩表現なんて使われていませんしね&lt;br&gt;&lt;br&gt;まぁ勘違いは誰にでもある事ですよ</body>
<timestamp>1243616514</timestamp>
</comment>
<comment>
<username> </username>
<body>ネチネチと嫌らしい人ですねｗ</body>
<timestamp>1243660205</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>罵り合いはその辺にしとけ</body>
<timestamp>1243663179</timestamp>
</comment>
<comment>
<username>aaa</username>
<body>非常に見たいけど、どうやら繋がらないようです。&lt;br&gt;次は是非サーバーをパワーアップして欲しいです。</body>
<timestamp>1243664416</timestamp>
</comment>
<comment>
<username>2009/05/29 15:59</username>
<body>ドット絵じゃないでしょ &lt;br&gt;2009/05/29 15:59&lt;br&gt;です。&lt;br&gt;&lt;br&gt;わざわざ厭味ったらしい指摘の仕方をしたのは間違っていました。&lt;br&gt;失礼しました。&lt;br&gt;&lt;br&gt;そもそもドット絵に関心がない人にとって&lt;br&gt;ドット絵かどうかなんてのは&lt;br&gt;些末な問題で、どうでもいいことですよね。&lt;br&gt;『写真ではないグラフィックで街が緻密に再現されているかのような&lt;br&gt;雰囲気だなぁ』と。&lt;br&gt;それでいいと思います。&lt;br&gt;&lt;br&gt;目も頭も悪いので出直してきます。</body>
<timestamp>1243733137</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>中国人すげー</body>
<timestamp>1243752526</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>ドット絵じゃねーじゃん&lt;br&gt;ドット絵なめんなよ管理人</body>
<timestamp>1243782929</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>実写だとまずいモノばかり写るからCGにするとは。。。</body>
<timestamp>1243859679</timestamp>
</comment>
</comments>
</day>
<day date="2009-06-11" title="">
<body>
*data_and_art*データの次はアート
Google Earth で東京、京都、大阪、神戸の４都市の建物の 3D モデルが大幅に増加したらしい。
&gt;http://googlejapan.blogspot.com/2009/06/google-earth.html:title&gt;
2009年6月9日より Google Earth では、東京、京都、大阪、神戸の４都市における建物の3D モデルが大幅に増加しました。これによって、４都市での空中遊泳がより一層楽しくなります。
&lt;&lt;
紹介ムービーを見ると楽しそうだ。

[http://www.youtube.com/watch?v=gJXzis33gRo:movie]

けども、&lt;a href=&quot;http://www.uniqlo.com/calendar/&quot;&gt;UNIQLO CALENDAR&lt;/a&gt; に惹かれてしまう。ずっと見てしまう。

&gt;&lt;center&gt;&lt;a href=&quot;http://www.uniqlo.com/calendar/&quot;&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090611/20090611023002.png&quot; width=&quot;450&quot; height=&quot;296&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

どっちも「日本の街を空から見る」ものなんだけど、&lt;a href=&quot;http://www.uniqlo.com/calendar/&quot;&gt;UNIQLO CALENDAR&lt;/a&gt; のほうが楽しい。Google もタイミングが悪かった。

UNIQLO CALENDAR は7都市32ヶ所しかないらしいんだけど、どれも美しいし楽しい。膨大な 3D のデータを与えられて「自由にご覧ください」とされるよりも、操作はまったくできないけど製作者がとことんまでこだわり抜いて命を吹き込んだ映像のほうが魅力的だ。Google Earth のも確かにすごいんだけど、一瞬一瞬の映像が美しいとは言いがたい。

ちょっと前に紹介した &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090528/edushi_map&quot;&gt;中国の町並みをドット絵で再現したE都市&lt;/a&gt; なんかを見てもそうなんだけど、勢いよく突っ走ったものをみるのは気持ちがいい。

Web 2.0 的な膨大なデータのパワーも、美しさには敵わないのかもしれない。まったく根拠はないんだけど、これから数年間は、技術的にすごいものを美しいものが凌駕していくことが多くなってきそうな気がする。
</body>
</day>
<day date="2009-06-20" title="">
<body>
*js_flash_focus*[as]JavaScriptからFlashにフォーカスを与えられるよ
こんな記事を見つけたけどそんなことないよ。
&gt;http://less.carbonfairy.org/post/125109545/javascript-flash:title&gt;
Flash上でキー操作をするにはFlashにフォーカスが当たっていなければならない。フォーカスが当たっていない時にJavaScriptからフォーカス出来るか実験してみた。
-http://codefairy.org/etc/focus-swf.html

結果。
-Firefox 3: 一度手でフォーカスを当てる操作をした後だとフォーカス出来る
-Safari 4: 無理
-Chrome 2: 無理
-IE 8: 無理

むり！ 
&lt;&lt;

この記事ではフォーカスを得られるかどうかを MXML の Application.focusIn イベントで判別してるんだけど、ここに問題がある。

簡単にまとめると、Flash を扱う場合にはフォーカスといっても
+ブラウザが管理しているフォーカス
+Flash が管理しているフォーカス
の２つがあるわけですよ。

１つ目は上の記事のサンプルにもあるとおり、JavaScript の &lt;code&gt;focus()&lt;/code&gt; で変更することができる。サンプルでは jQuery 使って &lt;code&gt;$('object')[0].focus();&lt;/code&gt; としている。ページ内の Flash が１つだったらこれで十分。

で、今回問題となるのが２つ目。１つ目のフォーカスは Flash にあたっていても、２つ目のFlash 的なフォーカスが適切なところにないとフォーカスを持ってないように見えちゃう。結果、Application.focusIn イベントも呼ばれない。Flash 的なフォーカスを設定するには &lt;code&gt;setFocus()&lt;/code&gt; を呼んであげよう。

以下、修正版の MXML。初期化完了時に 2. の Flash 的フォーカスを得るように改造した。
&gt;|xml|
&lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;
  focusIn=&quot;bg(true)&quot; focusOut=&quot;bg(false)&quot;
  applicationComplete=&quot;init()&quot;
  backgroundColor=&quot;0xCCCCCC&quot; backgroundImage=&quot;none&quot;&gt;
  &lt;mx:Script&gt;
    &lt;![CDATA[
      private function init():void
      {
        myInput.setFocus(); // ←ココ重要
      }
      
      private function bg(focus:Boolean):void
      {
        this.setStyle('backgroundColor', focus ? '0x333333' : '0xCCCCCC');
      }
    ]]&gt;
  &lt;/mx:Script&gt;
 
  &lt;mx:TextInput/&gt;
&lt;/mx:Application&gt;
||&lt;

ブラウザの onload イベントで SWF に &lt;code&gt;focus()&lt;/code&gt; してあげれば、ページ表示時から MXML 内のテキストにフォーカスが行くことを確認した（IE7 と Firefox3 で）。

</body>
</day>
<day date="2009-07-02" title="">
<body>
*may_affiliate*はてブ受けしそうな記事を書いて、１ヶ月で約３万円を稼いだ顛末
このブログでは今年の２月ぐらいから Google AdSense の広告を貼っていました。どれぐらい儲かるんだろうとワクワクしていたのですが、普通に記事を書いていても期待はずれな収入でした。

そこで、はてなブックマークでウケそうな記事を集中的に公開して、ページビューを稼いでどれだけ広告収入が増えるか試してみることにしました。

**調査期間
2009日5月10日～5月末

**方針
海外のデザイン系ブログを少し翻訳して転載した&lt;strong&gt;だけ&lt;/strong&gt;の記事を書くことはプライドが許しません。かといって即時性では有名ブログには勝てないので、

「個人的には面白いのに世間ではあまり知られていないものを分かりやすく紹介する」

という方向で売れ線を狙って書いてみることにしました。

記事を書くに当たっては、次のようなことに気をつけてみました。
-注目を集めるためにタイトルは少し煽り気味にする
-一番伝えたいことがちゃんと伝わるよう、何度も見直す
-本題に関係ない内容は容赦なく削る
-図や箇条書きを豊富に使って最後まで読んでもらえるよう工夫する

**結果
期間中に公開した記事は次の６つです。

+[http://d.hatena.ne.jp/nitoyon/20090512/zenjido_bkm:title:bookmark]
+[http://d.hatena.ne.jp/nitoyon/20090515/genotyp_review:title:bookmark]
+[http://d.hatena.ne.jp/nitoyon/20090519/histroy_lso:title:bookmark]
+[http://d.hatena.ne.jp/nitoyon/20090521/windows_debug:title:bookmark]
+[http://d.hatena.ne.jp/nitoyon/20090523/h1n1_flu_kyoto_u:title:bookmark]
+[http://d.hatena.ne.jp/nitoyon/20090528/edushi_map:title:bookmark]

おかげさまで合計5,000ブックマークぐらい獲得しました。（ありがとうございます！）

有名ブログや GIGAZINE のヘッドラインニュースなどでも取り上げていただき、最終的に５月は &lt;strong&gt;約30万ページビュー&lt;/strong&gt; のアクセスがありました。

&gt;&lt;center&gt;&lt;a href=&quot;http://counter.hatena.ne.jp/nitoyon/report?cid=1&amp;date=2009-05-01&amp;mode=access&amp;type=monthly&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090702/20090702023326.png&quot;&gt;&lt;br/&gt;はてなカウンターの解析結果より&lt;/a&gt;&lt;/center&gt;&lt;

以上が基礎資料です。で、AdSense の収益はどれぐらいだったかというと…

====

***AdSense でどれだけ儲かったか
数日前に銀行口座に振り込まれていたのですが、日本円で &lt;strong&gt;21,499円&lt;/strong&gt; でした。Google AdSense 上でのレポートでは $225.43 でした。円高なのが悔しいです...

この金額を &lt;a href=&quot;http://counter.hatena.ne.jp/nitoyon/report?cid=1&amp;date=2009-05-01&amp;mode=access&amp;type=monthly&quot;&gt;はてなカウンター&lt;/a&gt; のページビューで割ると、&lt;strong&gt;0.072円/PV&lt;/strong&gt; です。&lt;a href=&quot;http://d.hatena.ne.jp/hejihogu/20071009/p1&quot;&gt;Google AdSenseでどれくらい収益があるのか？ - 北の大地から送る物欲日記&lt;/a&gt; によると、2007年時点では 0.2円/PV だったそうです。ここ最近の不況で広告単価が下がってるのか、このブログの記事にクリック単価の高い広告がつかなかっただけなのかはよく分かりません。

最近、&lt;a href=&quot;http://adsense-ja.blogspot.com/2009/05/adsense-analytics.html&quot;&gt;Google Analytics で AdSense の結果を細かく分析できる&lt;/a&gt; ようになったので、記事ごとの収益も分かるのですが、AdSense の利用規約で細かいデータの公開が禁止されているので、残念ながら公開できません。
&gt;https://www.google.com/adsense/localized-terms:title&gt;
ただし、お客様は Google が本プログラムに基づいてお客様に支払った合計金額については正確な金額のままであれば開示することができます
&lt;&lt;

***Amazon アフィリエイトでどれだけ儲かったか
Amazon アフィリエイトの収入狙いの記事も１つ書いてみました。[http://d.hatena.ne.jp/nitoyon/20090521/windows_debug:title] です。

この記事のページビューは 7,000弱だったのですが、Amazon 経由での紹介料は &lt;strong&gt;8,000円&lt;/strong&gt; ぐらいでした。この月に本を紹介したエントリはこれだけだったので、なんと、この記事だけで8,000円儲かったことになります。

&lt;strong&gt;1円/PV&lt;/strong&gt; です。なんという収益率！

今回紹介した本がたまたま高価だったというのもありますが、広くアクセスを集めなくても、興味がある人にピンポイントに絞ることで結果を出すことができました。

ちなみに、紹介した本の紹介料は全体の半分ぐらいで、残りは紹介リンクを踏んだあとに別の商品を買った分でした。Amazon で儲けるにはアフィリエイトリンクを多くの人に踏んでもらうことは重要のようです。

***はてなブックマーク数とページビューの関係
調査期間中の「はてなブックマーク数」とページビューを比較してみましょう。はてなブックマーク数が多ければ、ページビューも増えそうな気がしますが、必ずしもそうとはいえません。

グラフを見てみましょう。右に行くほどブックマーク数が多く、上に行くほどページビューが多くなっています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090702/20090702023327.png&quot;&gt;&lt;/center&gt;&lt;

このグラフから分かること：
-&lt;font color=&quot;#0000cc&quot;&gt;青色&lt;/font&gt;の記事は、ブックマーク数とページビューが比例している
-&lt;font color=&quot;#ff0000&quot;&gt;赤色&lt;/font&gt;の記事は、ブックマーク数がページビューに貢献していない

特に、一番ブックマークを稼いだ [http://d.hatena.ne.jp/nitoyon/20090512/zenjido_bkm:title:bookmark] は、ページビューは２万弱に留まり、全体の中では低調です。

この違いはどこにあるのでしょうか。

.

視点を変えて、&lt;font color=&quot;#0000cc&quot;&gt;青色&lt;/font&gt;の記事と &lt;font color=&quot;#ff0000&quot;&gt;赤色&lt;/font&gt;の記事の&lt;strong&gt;リファラ&lt;/strong&gt;（アクセス元のページ）を比べてみます。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090702/20090702023325.png&quot;&gt;&lt;/center&gt;&lt;

どちらの記事も、はてなブックマークのホットエントリ１位に１日ぐらい君臨していました。
そのおかげで、はてなブックマーク経由で、１万ページビューを稼ぐことができました。

違いが出てくるのはその後の広がりです。「新型インフル…」の記事は、その後、いくつもの著名ブログで取り上げてもらいました。参考までに、「新型インフル…」の記事のドメイン別リファラは次の通りです（Google Analytics 調べ）。
|*ドメイン|*リファラ|
|はてなブックマーク|9,458|
|TBN -Today's Best News-|8,747|
|Google|8,399|
|ゴルゴ31|8,262|
|はてな|6,154|
|ひろぶろ|5,451|
|Google Japan|2,872|
|(直接)|2,686|
|livedoorブログ|2,389|
|秒刊SUNDAY|2,227|
|デジログ！|1,770|

この違いがページビューにでてきたようです。

本気でアクセス数アップを狙うのならば、ホットエントリ入りを狙いつつ、でも、はてなブックマーク内の内輪受けにならないように注意して、他のサイトにも取り上げてもらいやすくするのが重要そうです。

**最後に
半月ばかり、アクセスを集めるためにがんばってみました。

その結果、3万円弱のお小遣いを手にすることができました。

これを多いと見るか、少ないと見るかは人次第でしょうが、これでも１記事につき、２～３時間はかけているので割がいいとは言いがたいです。

このペースで記事を書き続ければ、アクセス数も維持できるのでしょうが、ここ半年ぐらいで見つけたとっておきのネタを一気に放出したため、しばらくはネタ切れです。

**参考
このエントリーは以下のリンク先の記事を参考・引用・インスパイアして書かれています。
-[http://gerenuk.crazyphoto.org/2009/06/30/1021/:title]
</body>
<comments>
<comment>
<username>kbyschool</username>
<body>振り返ると、いくつか記事を拝見させていただいておりました。こういう事情があったのですね。すごいです。釣られました。記事は、どれも面白かったですよ。</body>
<timestamp>1246493082</timestamp>
</comment>
<comment>
<username>たか</username>
<body>&gt; 海外のデザイン系ブログを少し翻訳して転載しただけの記事を書くことはプライドが許しません&lt;br&gt;&lt;br&gt;すばらしいです。&lt;br&gt;百式のおっさんにも聞かせてやりたいです。</body>
<timestamp>1246502451</timestamp>
</comment>
<comment>
<username>そう</username>
<body>&gt; 百式のおっさんにも聞かせてやりたいです。&lt;br&gt;あのおっさんはひどい。</body>
<timestamp>1246562081</timestamp>
</comment>
<comment>
<username>そう</username>
<body>あ、ひどいのは、おっさん呼ばわりじゃなくてｗｗ、あのおっさんのプライドの無さがひどい。</body>
<timestamp>1246562149</timestamp>
</comment>
<comment>
<username>matane</username>
<body>これだけやっても 3万円かあ。。やりきれない。</body>
<timestamp>1246702460</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>金はおまけみたいなもんだな</body>
<timestamp>1247667278</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>＞GIGAZINE のヘッドラインニュースなどでも取り上げていただき&lt;br&gt;&lt;br&gt;で儲けといて、&lt;br&gt;広告抜きの全文配信RSS作って、酷い恩返しですよね。&lt;br&gt;そういう人なんですね、あなたは。</body>
<timestamp>1250125156</timestamp>
</comment>
<comment>
<username>nm8mn8</username>
<body>とても、参考になりました。&lt;br&gt;&lt;br&gt;ブクましときます。。</body>
<timestamp>1289286764</timestamp>
</comment>
</comments>
</day>
<day date="2009-07-20" title="">
<body>
*gigazine_fullfeed*[pipes]GIGAZINE 全文配信 RSS を作った
IKUBON さんが &lt;a href=&quot;http://blog.ikubon.com/?eid=835421&quot;&gt;作ってくれた&lt;/a&gt;、&lt;a href=&quot;http://pipes.yahoo.com/ikubon/gigazine&quot;&gt;Pipes: Gigazine 全文配信 RSS&lt;/a&gt; というのを使っていたのだけど、最近全文配信してくれなくなった。しばらく待ったけど修正される気配がないので、Clone して修正してみた。
-http://pipes.yahoo.com/nitoyon/gigazine

原因はたぶん RSS の仕様修正。

これで安心して RSS リーダーで GIGAZINE の記事を読めますね。
</body>
<comments>
<comment>
<username>なまえ</username>
<body>全文配信とかうぜええええええええええええええええ。&lt;br&gt;古代の狂信的思想だよそれ。&lt;br&gt;かつ、広告も受け取ってやらねーと、現在のネットが過疎化するぞ。</body>
<timestamp>1248060625</timestamp>
</comment>
<comment>
<username>名無しさん＠通りすがり</username>
<body>全文配信かつ広告排除て……&lt;br&gt;会社までおったてて無茶してるギガ氏ねさんのことも考えてあげれば？ｗ</body>
<timestamp>1248100317</timestamp>
</comment>
<comment>
<username>名無しさん＠通りすがり</username>
<body>全文配信かつ広告排除て……&lt;br&gt;会社までおったてて無茶してるギガ氏ねさんのことも考えてあげれば？ｗ</body>
<timestamp>1248100426</timestamp>
</comment>
<comment>
<username>IKUBON</username>
<body>Gigazineの全文配信ができなくなっていたのは気付いていたのですが、Pipeを手直しせずにごめんなさい。&lt;br&gt;&lt;br&gt;&#187; RSSフィードを全文配信で読むなら まるごとRSS&lt;br&gt;http://mrss.dokoda.jp/&lt;br&gt;&lt;br&gt;というサービスがあったので、こちらに乗り換えてしまいました。これを利用すると全文配信Pipeを作ったり、メンテナンスしなくてもよいのでおすすめです。</body>
<timestamp>1248133674</timestamp>
</comment>
<comment>
<username>c</username>
<body>これは便利ですね。使わせていただきます-</body>
<timestamp>1248355952</timestamp>
</comment>
<comment>
<username>a</username>
<body>すごい、＠ITとITMediaもお願いします</body>
<timestamp>1285571316</timestamp>
</comment>
<comment>
<username>　</username>
<body>&gt;なまえ &lt;br&gt;&gt;名無しさん＠通りすがり &lt;br&gt;&lt;br&gt;ぼくは小学生ですけど&lt;br&gt;こんなばかな大人にはなりたくないなとおもいました　まる</body>
<timestamp>1288512118</timestamp>
</comment>
</comments>
</day>
<day date="2009-08-02" title="">
<body>
*google_perspective*[GoogleMapsAPI]Google Maps API for Flash に追加された perspective map 機能と日本人テスターの存在
Flash 用の Google Maps API に「perspective map」機能が追加されました。通常、Google Maps は真上から眺めた地図しか表示できませんが、この API を使うと地図を傾けたり回転させたりできるようになりました。

試してみるにはドキュメントの [http://code.google.com/intl/en/apis/maps/documentation/flash/3d-maps.html:title=Google Maps API for Flash - 3D Maps] に掲載されているサンプル [http://gmaps-samples-flash.googlecode.com/svn/trunk/examples/Map3DSimple.html:title=Map3DSimple.html] を見るのが分かりやすいでしょう。

&gt;&lt;center&gt;&lt;a href=&quot;http://gmaps-samples-flash.googlecode.com/svn/trunk/examples/Map3DSimple.html:Map3DSimple.html&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090802/20090802200416.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

左上のアイコンを使って回転させたり、傾けたりできます。

わたしも Google Maps API for Flash が出た当初に [http://d.hatena.ne.jp/nitoyon/20080518/google_guruguru:title] というものを作ったりしましたが、これを公式に実現できるようになったわけです。

**公式ブログで発表されたサンプルアプリの半分が日本人のもの！
今回の新機能が Google 公式ブログで発表された記事（[http://googlegeodevelopers.blogspot.com/2009/07/3d-perspective-in-maps-api-for-flash.html:title]）には６つのサンプルアプリが紹介されていました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090802/20090802200418.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

このサンプルは Google が作ったものではなく API のテスターが作ったものらしいです。作者の名前をよくみてみると…６個中３つは日本人の名前でした。

１つずつ見てみましょう。
====
***[http://shiba.iis.u-tokyo.ac.jp/member/ueyama/gmap-pv-demo/:title]
&lt;a href=&quot;http://shiba.iis.u-tokyo.ac.jp/member/ueyama/gmap-pv-demo/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090802/20090802200419.png&quot; align=&quot;left&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
地図上に 3D のビルがあり、ビルの上から Google カラーのボールが絶えずあふれ出しています。perspective map 機能と Papervision3D を連携させた例となっています。

ソースつき。

id:gyuque:detail さん作。

&lt;br clear=&quot;all&quot;&gt;

***[http://googlemaps.googlermania.com/uploads/flash/kmz3DExample/kmz3DExample.html:title]
&lt;a href=&quot;http://googlemaps.googlermania.com/uploads/flash/kmz3DExample/kmz3DExample.html&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090802/20090802200420.png&quot; align=&quot;left&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
エッフェル塔の KML を表示するサンプルです。

ソースつき。

[http://googlemaps.googlermania.com/:title] の勝又さん作。

&lt;br clear=&quot;all&quot;&gt;

***[http://geoquake.jp/en/webgame/DrivingSimulatorPerspective/:title]
&lt;a href=&quot;http://geoquake.jp/en/webgame/DrivingSimulatorPerspective/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090802/20090802200422.png&quot; align=&quot;left&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
3D なドライブシミューレータ版。本当に運転しているかのような感覚になります。

[http://geoquake.jp/en/webgame/DrivingSimulatorGM/:title] の k0rin さん作。
&lt;br clear=&quot;all&quot;&gt;

**なぜ日本人開発者に声がかかったか？
すこし前の記事ですが、次の記事が答えでしょう。
&gt;http://internet.watch.impress.co.jp/cda/news/2008/06/11/19894.html:title&gt;
日本人開発者のエピソードとして、「Google Maps」機能をFlashのActionScriptで利用できるAPIツールキット「Google Maps API for Flash」の事例を挙げた。「Google Maps API for Flashを公開してから2～3日で、日本のデベロッパーサイトにサンプルアプリケーションが多く上がっていた。Google本社の者がそれを見つけたとき、かなり手の込んだものが上がっていたので、事前にAPIが出てしまったのかと騒ぎになったほど」だという。
&lt;&lt;
Google Maps API の中の人には、日本人開発者の存在が注目されているようです。

**どのように声がかかったのか？
ドライブシミューレータを作った c0rin さんのブログによると担当者から事前に連絡があったようです。
&gt;http://geoquake.jp/blog/2009/07/31/drivingsimulator3d/:title&gt;
Google Maps APIの担当者さまのご好意でAPIを公開前に触らせていただきました
&lt;&lt;

gyuque さんにも確認してみたところ、１ヶ月前ぐらいからクローズドテストが開始されたようです。

[twitter:2950284132:detail]

自分も何か作って、中の人から声がかかるぐらいになりたいものです。
</body>
<comments>
<comment>
<username>Masashi-K</username>
<body>面白いものを作っていただければ、紹介しますよ。</body>
<timestamp>1249363540</timestamp>
</comment>
</comments>
</day>
<day date="2009-08-06" title="">
<body>
*pv3d_material_texture*[as]PV3Dで画像を繰り返し敷き詰めてテクスチャにする
PV3D で画像を面に貼り付けたら一面に広がってしまった。こんな感じ。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090806/20090806014313.png&quot;&gt;&lt;/center&gt;&lt;

本当は画像を並べてテクスチャにしたかった。これが理想。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090806/20090806014312.png&quot;&gt;&lt;/center&gt;&lt;


twitter にぶつくさつぶやきながら悩んでたら、c0rin さんに &lt;a href=&quot;http://twitter.com/k0rin/status/3068226068&quot;&gt;tiled を試すべし&lt;/a&gt; と教えてもらえたので試してみた。

重要なコードはココ。敷き詰める数を5にしている。
&gt;|javascript|
// tiled を true に、maxU, maxV に敷き詰める数を渡す
m.tiled = true;
m.maxU = 5;
m.maxV = 5;
||&lt;

で、試してみた完成品がこちら。

&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FPV3DTextureTest.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=300&amp;amp;h=300&amp;amp;title=PV3D+Texture&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash 9 以上がインストールされていると、ココに Flash が表示されます)&lt;/noscript&gt;&lt;

PV3D のバージョンは 2.0.883

本当なら Cube のサイズに応じて画像を敷き詰めてほしいんだけど、そういうことを実現してくれる Material はないようだ(?)。

ソースはこれ。&lt;a href=&quot;http://wonderfl.net/code/e3208d6ab7e4cda9232a95990a58397ab8ca7f1e&quot;&gt;wonderfl にも post してる&lt;/a&gt;。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Papervision3d の BitmapMaterial の tiled 機能を利用して
// 画像をテクスチャとして敷き詰めます。
//
// 左上に表示中の画像が利用する素材です。
// これを５×５のサイズで立方体の面に貼り付けています。
// キーワードは tiled, maxU, maxV です。 package {
import flash.display.*;
import flash.events.Event;
import flash.utils.ByteArray;
import org.papervision3d.objects.primitives.*;
import org.papervision3d.view.*;
import org.papervision3d.materials.*;
import org.papervision3d.materials.utils.MaterialsList;
import mx.utils.Base64Decoder;

[SWF(backgroundColor=&quot;#000000&quot;, width=&quot;475&quot;, height=&quot;475&quot;)]
public class PV3DTextureTest extends BasicView {
    // 表示する立方体
    private var cube:Cube;

    // 画像を BASE64 エンコードしたもの
    private static var ImageBase64:String = &quot;R0lGODlhEAAQAJkAAOdfEwAAAPDQsAAAACH5BAAAAAAALAAAAAAQABAAAAI2hI4XhgYPXxBxxkqhvTJ33i0fuATm4l1TsnEt8GIymZ5uCiviqFG6ictBEDGhCmeCnZKCZbIAADs=&quot;;

    public function PV3DTextureTest(){
        // 画像をロードして BitmapData に変換する
        // 変換後、loadComplete 関数が呼ばれる
        base64ToBitmapData(ImageBase64, loadComplete);
    }

    private function loadComplete(bmd:BitmapData):void{
        // 表示するテクスチャを右上に表示
        addChild(new Bitmap(bmd));

        // BitmapMaterial に BitmapData を渡す
        var m:BitmapMaterial = new BitmapMaterial(bmd, true);

        // tiled を true に、maxU, maxV に敷き詰める数を渡す
        m.tiled = true;
        m.maxU = 5;
        m.maxV = 5;

        // Cube の面に貼り付ける
        cube = new Cube(new MaterialsList({all:m}));
        scene.addChild(cube);

        // 描画を開始する
        startRendering();
    }

    protected override function onRenderTick(e:Event = null):void{
        cube.rotationX += 1;
        cube.rotationY += .8;
        super.onRenderTick(e);
    }

    private function base64ToBitmapData(base64:String, callback:Function):void{
        var decoder:Base64Decoder = new Base64Decoder();
        decoder.decode(base64);

        var bytes:ByteArray = decoder.toByteArray();
        bytes.position = 0;
        var loader:Loader = new Loader();
        loader.loadBytes(bytes);
        var bmd:BitmapData = new BitmapData(16, 16);
        loader.contentLoaderInfo.addEventListener(&quot;complete&quot;, function(event:Event):void{
            var bmd:BitmapData = new BitmapData(loader.width, loader.height);
            bmd.draw(loader);
            callback(bmd);
        });
    }
}
} 
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-08-07" title="">
<body>
*maOio3d_test*[as]PV3Dで某ゲームを3D化する試作
PV3D でスリーディースリディーしたのを作るのも楽しいけど、2D 的なものを 3D に持ってきて表現するのも面白いかなーと思って作ってみた。

&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FMaOio3dTest.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=450&amp;amp;title=MaOio+3D+Test&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090807/20090807023922.png&quot;&gt;&lt;br&gt;(Flash 9 以上がインストールされていると、ココに Flash が表示されます)&lt;/noscript&gt;&lt;


後悔はしていない。操作は特にできなくてクリックしたら跳ねるだけ。○天堂さんに怒られたら消す。

ネタとしては未完成な感じだが、PV3D でのカメラ＋Tweener の扱いが少し分かったので実りはあった。

PV3D のバージョンは 2.0.883

ソースはこれ。&lt;a href=&quot;http://wonderfl.net/code/09fbabde39fb6abdb1543ce5ec6a3b224aa8c409&quot;&gt;wonderfl にも post してる&lt;/a&gt;。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// PV3D で某ゲームを3D化してみた
// 
// [遊び方]
// ・クリックでジャンプする
// ・それだけ
package {
import flash.events.Event;
import flash.text.TextField;
import org.papervision3d.view.*;
import caurina.transitions.Tweener;

[SWF(backgroundColor=&quot;#000000&quot;, width=&quot;475&quot;, height=&quot;475&quot;)]
public class MaOio3dTest extends BasicView {
    // character
    private var character:Character;

    // ジャンプ中の状態
    private var jump:Boolean;
    private var prevJump:Boolean;

    // アニメーションの設定
    private var animateIndex:int;
    private var animateParams:Array = [
        { x: -700, y: 120, z: -300, focus: 50, time: 6 },
        { x: -70, y: 220, z: -100, focus: 8, time: 4 },
        { x: 300, y: 40, z: -80, focus: 50, time: 5, transition: 'easeInOutSine' },
        { x: 0, y: 0, z: -300, focus: 10, time: 4, transition: 'easeInOutSine' }
    ];

    public function MaOio3dTest(){
        super(475, 475, false);
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        // 画像を変換する
        Map.base64ToBitmapData(init);
    }

    private function init():void{
        // マップとキャラクタを準備する
        Map.createMap(scene);
        scene.addChild(character = new Character());

        // カメラの初期位置を設定
        camera.focus = 1000;
        camera.z = -20000;

        var tf:TextField = new TextField();
        tf.textColor = 0xffffff;
        tf.text = &quot;CLICK TO START&quot;;
        tf.x = tf.y = 50;
        addChild(tf);

        // アニメーション
        var initialized:Boolean = false;
        stage.addEventListener(&quot;keyDown&quot;, function(event:Event):void{jump = true;});
        stage.addEventListener(&quot;click&quot;, function(event:Event):void{
            if (!initialized){
                // 初期化
                removeChild(tf);
                startRendering();
                animate();
                initialized = true;
            }

            jump = true;
        });
    }

    // Tweener を利用したアニメーションを行う
    private function animate():void{
        var param:Object = animateParams[animateIndex];
        param.onComplete = animate;
        param.delay = 2; // 必ず2秒停止する
        Tweener.addTween(camera, param);
        animateIndex = (animateIndex + 1) % animateParams.length;
    }

    // BasicView の描画処理
    protected override function onRenderTick(e:Event = null):void{
        super.onRenderTick(e);

        // キャラクターの状態を更新する
        if (prevJump &amp;&amp; jump){
            jump = false;
        }
        prevJump = jump;
        character.update(jump);
    }
}
}


import flash.display.*;
import flash.events.Event;
import flash.geom.*;
import flash.utils.ByteArray;
import org.papervision3d.objects.primitives.*;
import org.papervision3d.materials.*;
import org.papervision3d.core.proto.*;
import org.papervision3d.objects.*;
import org.papervision3d.objects.primitives.*;
import org.papervision3d.materials.utils.MaterialsList;
import mx.utils.Base64Decoder;

// キャラクタ クラス
class Character extends Plane{
    // 画像一覧
    private var characterImages:Array;

    // キャラクタ用の Sprite
    private var character:Sprite;

    // 表示情報
    private var jumping:Boolean;
    private var vy:int;

    // 主人公の実装
    public function Character(){
        super(null, 17, 16);

        // 画像を準備
        var bmd1:BitmapData = new BitmapData(16, 16, true);
        var bmd2:BitmapData = new BitmapData(17, 16, true);
        bmd1.copyPixels(Map.bmdIcons, new Rectangle(240, 0, 16, 16), new Point());
        bmd2.copyPixels(Map.bmdIcons, new Rectangle(256, 0, 17, 16), new Point());
        bmd1.threshold(bmd1, bmd1.rect, new Point(), &quot;==&quot;, 0xffffffff, 0, 0xffffffff); // 背景透過
        bmd2.threshold(bmd2, bmd2.rect, new Point(), &quot;==&quot;, 0xffffffff, 0, 0xffffffff);
        characterImages = [new Bitmap(bmd1), new Bitmap(bmd2)];

        // character に追加
        character = new Sprite();
        for each (var img:Bitmap in characterImages){
            character.addChild(img);
            img.visible = false;
        }
        setImage(0);

        // Plane の設定
        material = new MovieMaterial(character, true, true);
        x = -64;
        y = -40;
        z = -8;
    }

    // 状態を更新
    public function update(jump:Boolean):void{
        if (jump &amp;&amp; !jumping){
            vy = 9;
            jumping = true;
        }

        if (jumping){
            y += vy;
            if (vy &lt; -8){
                vy = 0;
                jumping = false;
            }
            vy--;
        }
        setImage(jumping ? 1 : 0);
    }

    // 表示する画像（静止・ジャンプ中）を更新する
    private function setImage(num:int):void{
        for (var i:int = 0; i &lt; characterImages.length; i++){
            characterImages[i].visible = (num == i);
        }
    }
}

// マップデータ
class Map{
    // マップの種類を定義
    private static var mapTypeIndex:int = 0;
    private static const SKY:int = 0;   // Sky
    private static const GRD:int = 1;   // Ground
    private static const BLQ:int = 2;   // Block question
    private static const MT0:int = 3;   // Mountain left
    private static const MT1:int = 4;   // Mountain top
    private static const MT2:int = 5;   // Mountain right
    private static const MT3:int = 6;   // Mountain with tree
    private static const MT4:int = 7;   // Mountain background
    private static const BU0:int = 8;   // Bush left
    private static const BU1:int = 9;   // Bush mid
    private static const BU2:int = 10;  // Bush right
    private static const CL0:int = 11;  // Cloud left top
    private static const CL1:int = 12;  // Cloud mid top
    private static const CL2:int = 13;  // Cloud right top
    private static const CL3:int = 14;  // Cloud left bottom

    // 画像を BASE64 化したもの
    private static const Icons:String = &quot;R0lGODlhEQEQALMLAP/////Mmf+ZM/9mAP8zAMz/AJlmAGaZ/zPM/wCZAAAAAP///wAAAAAAAAAAAAAAACH5BAEAAAsALAAAAAARARAAAAT/8MhJ6xkh66ywHtcgjuRonZOCoupaJXAsx8ps325+KHyr/0BXD0AsGo+Alm+1aDoJ0KhzSqUKroLgIVAaKbjeAXZMvi6FCW3ivLrNeu64tqIo2AvsuZ6F7CNVCkk5VFGFUlWGBAtjWmBdXyQdAgplY5R5FjVpQTCYL3GdPKA4ejx3d557e4F+rUWsqQdUBrQGV7ZVTYmFV41dIpBhYyVksTsxap06o2uizDKlp6eAqtUUrthG1ChTtAK2t1hVteC25L6/Xx3AYlfAPCKWOZowycoucaJwz8hzddKo8FhTxSObwSSCTnQzB+6bOCfeGpajhe7RgB7rsABzdxFLKnr1/zjJSJVPE0h+0aQlkGZsIJ2DMBNaWNjwW61ZDLFIrFjiywZJHCkJ2GhmxclNQGx4KsmPVJB/BWDcWYnKpRZWMbNhqlJJwDhvOskt4BnJ0cV2Zih58cjC6Y8bmJg2nXF1KsBpVq9mxeYJpwECN3M16WqgCVkvZoEOu8iDbSY39t6cmDv3R4+7mAXuKNVDL4AD2BDwdUHzLy3AtCCSM326sOEgZstGQquxozw6ckTCtUC5qQ6ome8C0gwEq0zLREADEH2E+WhuTVYXEru6Fuq/Cyg+XSd7dqXGt1OAiqz0U29m84Kr/9dyh3Ei7SWwOoCgfpH69u/72Tr4FgEBUABYk/hN5BiSnQGNBAAPYj3RxlEZSxxFl25uLHHeMzmop6Ed2xi132bIGYEffsuN2AoT/V2RSCVR/PVfgKj5wkEPsZ1VBlGOHTMKebtJcCF6LAC3YWZ1fNRKIO0NcZ9zJTKpTV8p7vKfV7e4KKV2QDiiQTDeCeWRl5fIhyEFGPFgHigt/LjjCUIOuZ4QSDgZ3w5/7AdfLIRIUUhpUsYI2yOxwdMVhDoCuc9IZh7Ajwpqjsemm256glV+y2njD1aAGGdmooOollp0gRWYCBVaMIYRBmV2kOqqGDXlDJoSVthobo9C+iYfRDh5xJwpcOqer0B4+umBN6VmYC4RAAA7&quot;;
    public static var bmdIcons:BitmapData;

    // マップ配置
    private static const map:Array = [
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT0, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT0, MT3, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT1, MT3, MT4, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT2, MT3, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT2, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, GRD, GRD],
        [SKY, SKY, SKY, CL1, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, GRD, GRD],
        [SKY, SKY, CL0, CL2, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, GRD, GRD],
        [SKY, SKY, SKY, CL3, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, BU0, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, BU1, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, BU1, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, BU2, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, BLQ, SKY, SKY, MT0, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT1, MT3, GRD, GRD],
        [SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, SKY, MT2, GRD, GRD]
    ];

    private static var materialCache:Object = {};

    // 指定したタイプのマテリアルを取得する。
    public static function getMaterial(mapType:int):MaterialObject3D{
        if (materialCache[mapType]) return materialCache[mapType];

        var bmd:BitmapData = new BitmapData(16, 16);
        bmd.copyPixels(bmdIcons, new Rectangle(mapType * 16, 0, 16, 16), new Point());
        materialCache[mapType] = new BitmapMaterial(bmd);
        return materialCache[mapType];
    }

    // scene にマップを追加する
    public static function createMap(scene:DisplayObjectContainer3D):void{
        for (var xx:int = 0; xx &lt; map.length; xx++){
            for (var yy:int = 0; yy &lt; map[yy].length; yy++){
                var material:MaterialObject3D = getMaterial(map[xx][yy]);

                var obj:DisplayObject3D;
                if (map[xx][yy] == GRD || map[xx][yy] == BLQ){
                    obj = new Cube(new MaterialsList({all: material}), 16, 16, 16);
                    obj.z = -8;
                } else {
                    obj = new Plane(material, 16, 16);
                    obj.z = 0;
                }
                obj.x = xx * 16 - 8 - 128;
                obj.y = -yy * 16 + 8 + 128;
                scene.addChild(obj);
            }
        }
    }

    // BASE64 化解除
    public static function base64ToBitmapData(callback:Function):void{
        var decoder:Base64Decoder = new Base64Decoder();
        decoder.decode(Icons);

        var bytes:ByteArray = decoder.toByteArray();
        bytes.position = 0;
        var loader:Loader = new Loader();
        loader.loadBytes(bytes);
        loader.contentLoaderInfo.addEventListener(&quot;complete&quot;, function(event:Event):void{
            bmdIcons = new BitmapData(loader.width, loader.height);
            bmdIcons.draw(loader);
            callback();
        });
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-09-03" title="">
<body>
*hatebu_nenkan200908*[はてブ年鑑]はてブ年鑑の2009年8月分をアップロードした
&gt;&lt;center&gt;&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090903/20090903001455.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

あんまり告知してなかったけど月１でちゃんと更新してますよ。
-&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt;
</body>
</day>
<day date="2009-09-07" title="">
<body>
*glowing_text*[as]AS3.0 で光るテキスト効果を作ってみた
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090906/20090906110733.png&quot; width=&quot;450&quot; height=&quot;80&quot;&gt;&lt;/center&gt;&lt;

TVCM とか映画予告編などでよく見かける「文字が左から右に光るエフェクト」を ActionScript 3.0 で作ってみた。

完成品はこんな具合。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FGlowingHelloWorld.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=100&amp;amp;title=Glowing+Hello+World&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以上がインストールされていると、ここに完成品が表示されますよ。&lt;/noscript&gt;&lt;/center&gt;&lt;

文字を編集することもできる。編集後の文字ですぐに光り始める！

**やってること
+TextField を表示
+TextField を BitmapData に表示して、GlowFitler で光らせる (&lt;code&gt;bmpGlow&lt;/code&gt;)
+円形のマスク Sprite を用意 (&lt;code&gt;msk&lt;/code&gt;)。周りに行くに従って透明になるようにしておく。
+2. で作った &lt;code&gt;bmpGlow&lt;/code&gt; に 3. のマスク &lt;code&gt;msk&lt;/code&gt; を適用する。マスクを徐々に右に移動していけば、光ってるところが移動しているように見える。

苦労したのはグラデーションのマスクを適用させるところ。マスクとマスクされる &lt;code&gt;DisplayObject&lt;/code&gt; の両方の  &lt;code&gt;cacheAsBitmap&lt;/code&gt; プロパティを &lt;code&gt;true&lt;/code&gt; に設定しておく必要がある。

当初、それに気付かずに、&lt;code&gt;copyPixel()&lt;/code&gt; を使って&lt;a href=&quot;http://wonderfl.net/code/7689123caaff96fc89a3855b76dec5022443c740&quot;&gt;泥臭く実装していた&lt;/a&gt;んだけど、cacheAsBitmap すればアルファの Sprite で透明度を利用したマスクを作れることを&lt;a href=&quot;http://wonderfl.net/code/fb15467c08b713fd630ace5fa691a13f6c6f810d&quot;&gt;教えてもらった&lt;/a&gt;。&lt;code&gt;cacheAsBitmap&lt;/code&gt; を使って &lt;a href=&quot;http://wonderfl.net/code/6478e7a910e69f15bdc14d0faf6b492c7001ca55&quot;&gt;書き直した&lt;/a&gt;ら、10行短くなって、ソースコードも素直になって万歳。

ソースコードは以下に（73行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Glowing Hellow World revised. (lines: 83 -&gt; 73) 
//------------------------------------------------------- 
// An experiment on creating a dynamic glow text effect. 
// You can edit the text!!! 

package{ 
import flash.display.*; 
import flash.events.Event; 
import flash.filters.GlowFilter; 
import flash.geom.*; 
import flash.text.*; 

[SWF(backgroundColor=&quot;#000000&quot;, width=&quot;450&quot;, height=&quot;80&quot;)] 
public class GlowingHelloWorld extends Sprite{ 
    public function GlowingHelloWorld(){ 
        stage.scaleMode = &quot;noScale&quot;; 
        var ptZero:Point = new Point(); 

        // initialize canvas. 
        var bmpGlow:Bitmap = addChild(new Bitmap()) as Bitmap; 

        // Show original text (input) 
        var text:TextField = new TextField(); 
        text.autoSize = &quot;left&quot;; 
        text.type = &quot;input&quot;; 
        text.htmlText = &lt;font size=&quot;50&quot; color=&quot;#ffffff&quot;&gt;HELLO WORLD&lt;/font&gt;.toXMLString(); 
        addChild(text); 
        text.addEventListener(&quot;change&quot;, function(event:Event):void{ updateGlow() }); 

        // Create a glow BitmapData. 
        var bmdGlow:BitmapData, bmdCanvas:BitmapData; 
        var updateGlow:Function = function():void{ 
            // dispose existing BitmapData. 
            if (bmdGlow) bmdGlow.dispose(); 

            // Glow it. 
            bmdGlow = new BitmapData(text.textWidth + 10, text.textHeight + 10, true, 0);; 
            bmdGlow.draw(text); 
            var glow:GlowFilter = new GlowFilter(0xffffff, .9, 8, 8, 4); 
            bmdGlow.applyFilter(bmdGlow, bmdGlow.rect, ptZero, glow); 

            // Update canvas BitmapData. 
            bmpGlow.bitmapData = bmdGlow; 
        } 
        updateGlow(); 

        // Create a mask sprite. 
        var msk:Sprite = new Sprite(); 
        msk.graphics.beginGradientFill(&quot;radial&quot;, [0xffffff, 0xffffff], [1, 0], [64, 255]); 
        msk.graphics.drawCircle(0, 0, 100); 
        msk.graphics.endFill(); 
        addChild(msk);

        // Set mask.
        msk.y = 50 - text.textHeight / 2;
        bmpGlow.cacheAsBitmap = msk.cacheAsBitmap = true;
        bmpGlow.mask = msk;

        // Start animation loop. 
        var counter:int = 0; 
        addEventListener(&quot;enterFrame&quot;, function(event:Event):void{ 
            // move the mask
            msk.x = counter;

            // update counter... 
            counter += 14; 
            if (counter &gt; 800){ 
                counter = -10; 
            } 
        }); 
    } 
} 
} 
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20080725/shape_of_a_dream:title]
-[http://d.hatena.ne.jp/nitoyon/20080724/embed_font_swfassist:title]
-[http://d.hatena.ne.jp/nitoyon/20071005/potras_pop:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-09-08" title="">
<body>
*easy_open_face*[as]GlowFilter で簡単袋文字
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090908/20090908025207.png&quot; width=&quot;431&quot; height=&quot;73&quot;&gt;&lt;/center&gt;&lt;

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090907/glowing_text&quot;&gt;前回&lt;/a&gt; に続くテキストシリーズ第２弾。今回は ActionScript 3.0 で簡単に袋文字を実装する方法を紹介する。

完成品はこんな具合。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FEasyOpenFaceWithGlowFilter.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=100&amp;amp;title=Easy+Open-Face&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以上がインストールされていると、ここに完成品が表示されますよ。&lt;/noscript&gt;&lt;/center&gt;&lt;

文字を編集することもできる。編集後の文字も袋文字！

**やってること
+TextField を表示
+TextField に &lt;code&gt;GlowFilter&lt;/code&gt; で縁取りを作成する

通常、&lt;code&gt;GlowFilter&lt;/code&gt; は、ぼんやりと光る効果のために利用することが多い。しかし、&lt;code&gt;strength&lt;/code&gt; を大きい値にすることで「ぼんやり」が「くっきり」になる。

&lt;code&gt;GlowFilter&lt;/code&gt; のコンストラクタは次のような定義になっている。
====
&gt;|javascript|
GlowFilter(
  color:uint = 0xFF0000,  // 光の色
  alpha:Number = 1.0,     // 光の透明度
  blurX:Number = 6.0,     // 水平方向のぼかし量
  blurY:Number = 6.0,     // 垂直方向のぼかし量
  strength:Number = 2,    // 強さ（後述）
  quality:int = 1,        // 適用回数
  inner:Boolean = false,  // 内側かどうか
  knockout:Boolean = false) // trueならグロー以外を消す
||&lt;

たとえば、幅 8px の縁取りを行うには次のように &lt;code&gt;GlowFilter&lt;/code&gt; を利用する。
&gt;|javascript|
new GlowFilter(
  0x000000,   // color (縁取りの色)
  1.0,        // alpha
  8,          // blurX (X方向の幅: 8px)
  8,          // blurY (Y方向の幅: 8px)
  16          // strength (ある程度大きい値)
)
||&lt;

&lt;code&gt;strength&lt;/code&gt; が大きいときには &lt;code&gt;blurX&lt;/code&gt; や &lt;code&gt;blurY&lt;/code&gt; でぼかした結果を塗りにする感じだ。Photoshop 的な言葉で表現すると「blur した後に &lt;code&gt;strength&lt;/code&gt; の大きさに応じてトーンカーブを下方向に移動させる」というイメージだ。

&lt;code&gt;GlowFilter&lt;/code&gt; の代わりに &lt;code&gt;GradientGlowFilter&lt;/code&gt; を使えば、複数の色での袋文字を作れそうだ。

**弱点
簡単なのはいいんだけど、あまりキレイではない。

特にとがった部分の縁取りが汚い。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090908/20090908025208.png&quot;&gt;&lt;/center&gt;&lt;

これは「HELLO」の「EL」の上部なんだけど、「L」の右上の頑張りが足りない。もっと右方向に出っ張ってほしいのだけど、blur で広げる都合上、細い部分の blur で先端が削られてしまうようだ。

**まとめ
ご利用は計画的に。

ソースコードは以下に（28行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Easy Open Face with GlowFilter
//--------------------------------------------------
// GlowFilter で簡単袋文字
package{
import flash.display.*;
import flash.filters.GlowFilter;
import flash.text.*;

[SWF(backgroundColor=&quot;#ffffff&quot;, width=&quot;450&quot;, height=&quot;80&quot;)]
public class EasyOpenFaceWithGlowFilter extends Sprite{
    public function EasyOpenFaceWithGlowFilter(){
        stage.scaleMode = &quot;noScale&quot;;

        // initialize canvas.
        var bmp:Bitmap = addChild(new Bitmap()) as Bitmap;

        // Show original text (input)
        var text:TextField = new TextField();
        text.autoSize = &quot;left&quot;;
        text.type = &quot;input&quot;;
        text.htmlText = &lt;font size=&quot;50&quot; color=&quot;#ffffff&quot;&gt;HELLO WORLD&lt;/font&gt;.toXMLString();
        addChild(text);

        // Glow it
        text.filters = [new GlowFilter(0x000000, 1, 8, 8, 16, 1)];
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090907/glowing_text:title]
-[http://d.hatena.ne.jp/nitoyon/20080725/shape_of_a_dream:title]
-[http://d.hatena.ne.jp/nitoyon/20080724/embed_font_swfassist:title]
-[http://d.hatena.ne.jp/nitoyon/20071005/potras_pop:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-09-09" title="">
<body>
*text_mask*[as]AS3.0 で TextField をマスクに使う簡単な方法
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090909/20090909004458.png&quot; width=&quot;442&quot; height=&quot;63&quot;&gt;&lt;/center&gt;&lt;

以前、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070911/mask_letter&quot;&gt;BitmapData を使って文字列でマスク&lt;/a&gt; という記事を書いたけど、&lt;code&gt;BitmapData&lt;/code&gt; を使わなくても文字列でマスクを作れることに気がついた。

キモは &lt;code&gt;cacheAsBitmap&lt;/code&gt; プロパティ。こいつを利用すれば内部的に &lt;code&gt;BitmapData&lt;/code&gt; を作成してくれるので、&lt;code&gt;TextField&lt;/code&gt; をマスクとしても利用できちゃう。

完成品はこんなの。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FEasyDynamicTextMask.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=100&amp;amp;title=Easy+Dynamic+Text+Mask&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以上がインストールされていると、ここに完成品が表示されますよ。&lt;/noscript&gt;&lt;/center&gt;&lt;

文字を編集することもできる。編集後の文字でもマスクされる！

**やってること
+&lt;code&gt;TextField&lt;/code&gt; を表示
+マスクされる &lt;code&gt;Sprite&lt;/code&gt; を作成
+&lt;code&gt;Sprite&lt;/code&gt; のマスクを &lt;code&gt;TextField&lt;/code&gt; に設定する
+&lt;code&gt;TextField&lt;/code&gt; と &lt;code&gt;Sprite&lt;/code&gt; の両方の &lt;code&gt;cacheAsBitmap&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にする

ソースコードは以下に（39行）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|javascript|
// Easy Dynamic Text Mask
package{
import flash.display.*;
import flash.events.Event;
import flash.text.*;

[SWF(backgroundColor=&quot;#ffffff&quot;, width=&quot;450&quot;, height=&quot;80&quot;)]
public class EasyDynamicTextMask extends Sprite{
    public function EasyDynamicTextMask(){
        stage.scaleMode = &quot;noScale&quot;;

        // Show original text (input)
        var text:TextField = new TextField();
        text.type = &quot;input&quot;;
        text.autoSize = &quot;left&quot;;
        text.htmlText = &lt;font size=&quot;50&quot; color=&quot;#000000&quot;&gt;HELLO WORLD&lt;/font&gt;.toXMLString();
        addChild(text);

        // Create sprite
        var sprite:Sprite = new Sprite();
        addChild(sprite);

        // Set text as mask
        sprite.mask = text;
        text.cacheAsBitmap = sprite.cacheAsBitmap = true;
        
        // Draw sprite
        addEventListener(&quot;enterFrame&quot;, function(event:Event):void{
            sprite.graphics.beginFill(Math.random() * 0xffffff);
            sprite.graphics.drawCircle(Math.random() * 450, Math.random() * 80, Math.random() * 50);
            sprite.graphics.endFill();

            if (Math.random() &lt; .02){
                sprite.graphics.clear();
            }
        });
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title]
-[http://d.hatena.ne.jp/nitoyon/20090907/glowing_text:title]
-[http://d.hatena.ne.jp/nitoyon/20080725/shape_of_a_dream:title]
-[http://d.hatena.ne.jp/nitoyon/20080724/embed_font_swfassist:title]
-[http://d.hatena.ne.jp/nitoyon/20071005/potras_pop:title]
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>立ち寄り</username>
<body>今さらでなんですが、テキストを範囲選択すると凄い事になります</body>
<timestamp>1282316163</timestamp>
</comment>
</comments>
</day>
<day date="2009-09-14" title="">
<body>
*easy_glow_drop_pop*[as]AS3 で袋文字＋影をつけてよくある POP 文字
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090914/20090914011410.png&quot;&gt;&lt;/center&gt;&lt;

電車の吊広告で影付袋文字が多用されていたようなので [http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title] を少しだけ修正して影をつけてみた。

完成品はこんな具合。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FEasyOpenFaceWithGlowFilter2.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=100&amp;amp;title=Easy+Open-Face+2&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以上がインストールされていると、ここに完成品が表示されますよ。&lt;/noscript&gt;&lt;/center&gt;&lt;

文字を編集することもできる。編集後の文字も袋文字！

**やってること
+TextField を表示
+TextField に &lt;code&gt;GlowFilter&lt;/code&gt; で縁取りを作成し、&lt;code&gt;DropShadowFilter&lt;/code&gt; で影を作成する

&lt;code&gt;DropShadowFilter&lt;/code&gt; にも &lt;code&gt;strength&lt;/code&gt; プロパティがあるので、これを大き目の値にすることで、べた塗りな影をつけることができた。

詳しくは [http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title] 参照あれ。

**まとめ
AS3 はテキスト表示に弱い印象があったが、フィルタを活用することで簡単なエフェクトなら簡単に付けられる。

以下、ソースコード（29行）。
====
&gt;|javascript|
package{
import flash.display.*;
import flash.filters.GlowFilter;
import flash.filters.DropShadowFilter;
import flash.text.*;

[SWF(backgroundColor=&quot;#ffffff&quot;, width=&quot;450&quot;, height=&quot;80&quot;)]
public class EasyOpenFaceWithGlowFilter2 extends Sprite{
    public function EasyOpenFaceWithGlowFilter2(){
        stage.scaleMode = &quot;noScale&quot;;

        // initialize canvas.
        var bmp:Bitmap = addChild(new Bitmap()) as Bitmap;

        // Show original text (input)
        var text:TextField = new TextField();
        text.autoSize = &quot;left&quot;;
        text.type = &quot;input&quot;;
        text.htmlText = &lt;font size=&quot;50&quot; color=&quot;#ffffff&quot;&gt;HELLO WORLD&lt;/font&gt;.toXMLString();
        addChild(text);

        // Glow it
        text.filters = [
            new GlowFilter(0x000000, 1, 4, 4, 16, 1),
            new DropShadowFilter(4, 45, 0x000000, 1, 4, 4, 16)
        ];
    }
}
}
||&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090909/text_mask:title]
-[http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title]
-[http://d.hatena.ne.jp/nitoyon/20090907/glowing_text:title]
-[http://d.hatena.ne.jp/nitoyon/20080725/shape_of_a_dream:title]
-[http://d.hatena.ne.jp/nitoyon/20080724/embed_font_swfassist:title]
-[http://d.hatena.ne.jp/nitoyon/20071005/potras_pop:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2009-10-31" title="">
<body>
*easy_double_open_face*[as]AS3 で簡単２重袋文字
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090914/20091031111744.png&quot; width=&quot;411&quot; height=&quot;80&quot;&gt;&lt;/center&gt;&lt;

以前、[http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title] を紹介したけど、これをほんの少しだけ修正して２重の袋文字にしてみた。

完成品はこんな具合。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FEasyOpenFaceWithGlowFilter3.swf&amp;amp;up_background=%23ffffff&amp;amp;synd=open&amp;amp;w=450&amp;amp;h=100&amp;amp;title=Easy+Open-Face+3&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;Flash Player 9 以上がインストールされていると、ここに完成品が表示されますよ。&lt;/noscript&gt;&lt;/center&gt;&lt;

文字を編集することもできる。編集後の文字も袋文字！

**やってること
+TextField を表示
+TextField に &lt;code&gt;GlowFilter&lt;/code&gt; で縁取りを作成し、&lt;code&gt;GlowFilter&lt;/code&gt; をもう１度適用して２重に縁取りする

&lt;code&gt;filters&lt;/code&gt; プロパティには複数のフィルタを配列の形で指定できる。今回は次のように &lt;code&gt;GlowFilter&lt;/code&gt; を２回適用している。
&gt;|javascript|
text.filters = [new GlowFilter(0xffffff, 1, 8, 8, 16, 1),
                new GlowFilter(0x0000ff, 1, 8, 8, 16, 1)];
||&lt;

１つ目のフィルタ（白）を適用した結果に、２つ目（青）を適用している。

詳しくは [http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title] 参照あれ。

**まとめ
&lt;code&gt;filters&lt;/code&gt; を繰り返し利用することで、さらに凝った効果を簡単に試せる。

以下、ソースコード（24行）。
====
&gt;|javascript|
// GlowFilter で２重簡単袋文字
package{
import flash.display.Sprite;
import flash.filters.GlowFilter;
import flash.text.TextField;

public class EasyOpenFaceWithGlowFilter3 extends Sprite{
    public function EasyOpenFaceWithGlowFilter3(){
        stage.align = &quot;TL&quot;;
        stage.scaleMode = &quot;noScale&quot;;

        // Show original text (input)
        var text:TextField = new TextField();
        text.autoSize = &quot;left&quot;;
        text.type = &quot;input&quot;;
        text.htmlText = &lt;font size=&quot;50&quot; color=&quot;#ff0000&quot;&gt;HELLO WORLD&lt;/font&gt;.toXMLString();
        addChild(text);

        // Glow it
        text.filters = [new GlowFilter(0xffffff, 1, 8, 8, 16, 1),
                        new GlowFilter(0x0000ff, 1, 8, 8, 16, 1)];
    }
}
}
||&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090914/easy_glow_drop_pop:title]
-[http://d.hatena.ne.jp/nitoyon/20090909/text_mask:title]
-[http://d.hatena.ne.jp/nitoyon/20090908/easy_open_face:title]
-[http://d.hatena.ne.jp/nitoyon/20090907/glowing_text:title]
-[http://d.hatena.ne.jp/nitoyon/20080725/shape_of_a_dream:title]
-[http://d.hatena.ne.jp/nitoyon/20080724/embed_font_swfassist:title]
-[http://d.hatena.ne.jp/nitoyon/20071005/potras_pop:title]
&gt;&lt;/div&gt;

</body>
</day>
<day date="2009-11-20" title="">
<body>
*extention_vs_my_code*[JavaScript]Skype Extension for Firefox と Security error&quot; code: &quot;1000
いままで動いていた自作の JavaScript が Firefox でいつの間にか動かなくなる現象が発生したので調べてみた。

エラーを見ると &lt;code&gt;Security error&quot; code: &quot;1000&lt;/code&gt; とある。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091120/20091120014333.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

ぐぐってみると、どうやら CSS の insertRule に失敗したときに発生するエラーのようだ。(参考：[http://haraita9283.blog98.fc2.com/blog-entry-288.html:title])

**HTML の構造を見てみると
Firebug で HTML の構造を見てみると、見覚えのない JavaScript と CSS が追加されている。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091120/20091120014335.jpg&quot; border=&quot;1&quot; width=&quot;458&quot; height=&quot;312&quot;&gt;&lt;/center&gt;&lt;
====
名前から判断するに、Skype と一緒にインストールされる Skype Extension for Firefox が動的に挿入するもののようだ。

**どこが悪かったのか
で、改めて自分が書いたスクリプトを見てみると CSS 関係で次のような処理があった。
&gt;|javascript|
addStyle: function(selector, property){
  // 一番最後のスタイルシートオブジェクトを取得
  var sheets = document.styleSheets;
  var sheet = sheets[sheets.length - 1];

  // CSS の最後に追加
  // IE では addRule を、Firefox では insertRule を使う
  if(sheet.addRule){
    sheet.addRule(selector, &quot;{&quot; + property + &quot;}&quot;, 
      sheet.rules.length);
  }else if(sheet.insertRule){
    sheet.insertRule(selector + &quot;{&quot; + property + &quot;}&quot;, 
      sheet.cssRules.length);
  }
},
||&lt;

最後のスタイルシートオブジェクトに対して insertRule で CSS のルールを追加しようとしてる。

ところが、Skype のプラグインが追加で CSS を突っ込んでいたため、「最後のスタイルシートオブジェクト」は Skype プラグインのものになってしまっていた。ここに insertRule しようとして、サンドボックスが異なってエラーになってたようだ。

**これも相性問題か
今まで動いていたコードが動かなくなった理由は「Skype をインストールしたこと」が原因だったようだ。

Skype Extension for Firefox はお行儀が悪いので即効で削除した。削除してみると、何事もなかったように動くようになっていた。Skpye はデフォルトでポート 80 を listen したり、いろいろとお行儀が悪くて嫌だ。

個人的に使ってるだけのスクリプトなので、対策は以上で終わりとしたが、世間に公開してるものだったらそうはいかない。今回のようなケースでは「一番最後のスタイルシートオブジェクト」を取得するのではなく、動的にルールを追加していくスタイルシートオブジェクトを事前に決めておくか、スクリプトで動的にスタイルシートオブジェクトを作成して、そこに insertRule していくべきだったのかもしれない。

Firefox のような自由に機能拡張できてしまうブラウザでは、動的に CSS や DOM ノードが追加されてもある程度は耐久性のあるように作らなきゃいけないのかもしれない。

なんともめんどくさい世の中よ。

</body>
</day>
<day date="2009-11-25" title="">
<body>
*as3_method_chain*[as]AS3 でメソッドチェーンしたくなる話
いろんな AS3 のサンプルが掲載されていて楽しい [http://actionsnippet.com/:title] で [http://actionsnippet.com/?p=2430:title] が紹介されていた。

シンプルで美しいのだけど、ソースに１箇所無駄があったので省いてみたものを紹介する。
&gt;|javascript|
// Functions Returning Functions (Revised)
// original: http://actionsnippet.com/?p=2430
//  - Removed line variable by using arguments.callee.
package {
import flash.display.Sprite;

public class FlashTest extends Sprite {
    public function FlashTest() {
        var connect:Function = function(xp:Number, yp:Number, col:uint=0):Function{
            graphics.lineStyle(0,col);
            graphics.moveTo(xp, yp);
            return function(xp:Number, yp:Number):Function{
                graphics.lineTo(xp, yp);
                return arguments.callee;
            };
        }
         
        // draw a triangle
        connect(200,100)(300,300)(100,300)(200, 100);

        // draw a box
        connect(100,100, 0xFF0000)(150,100)(150,150)(100, 150)(100,100);
    }
}
}
||&lt;
このサンプルがやってることは非常にシンプルで、&lt;code&gt;connect()&lt;/code&gt; 関数を呼び出すと、&lt;code&gt;lineTo&lt;/code&gt; するだけの関数が返ってくる。この関数を呼ぶと、さらに自分自身が返ってくるので、&lt;code&gt;connect(200,100)(300,300)(100,300)(200, 100);&lt;/code&gt; のように順番に呼び出していくと三角形が描けてしまうわけだ。

このサンプルはやり過ぎにしても、ActionScript の標準ライブラリではメソッドチェーンやりたいと思うことが度々ある。昔はあまり思わなかったんだけど、jQuery や Ruby などに慣れてくると、他の場所でもメソッドチェーンしたくなる病にかかる。

たとえば &lt;code&gt;lineTo&lt;/code&gt; は
&gt;|javascript|
// (注) 実際にはこのように書くとエラーになります
graphics.beginFill(0xff0000)
    .moveTo(200,100)
    .lineTo(300,300).lineTo(100,300).lineTo(200, 100)
    .endFill();
||&lt;
のように書けたら嬉しいし、あの憎き &lt;code&gt;Matrix&lt;/code&gt; も
&gt;|javascript|
// (注) 実際にはこのように書くとエラーになります
var mtx:Matrix = Matrix
    .identity()
    .rotate(Math.PI)
    .scale(2, 2);
||&lt;
とできると immutable になってかなり嬉しい。

かといって、このあたりを丸々ラップしなおすのは面倒なので、結局文句いいながら使い続けてる。他力本願。

</body>
<comments>
<comment>
<username>famibee</username>
<body>connect(200,100)(300,…というソースは美しいですね。&lt;br&gt;&lt;br&gt;&lt;br&gt;話の腰を折るようで申し訳ありませんが、&lt;br&gt;最後のMatrixはcreateBox()メソッド利用が推奨されるケースかと。&lt;br&gt;&lt;br&gt;http://help.adobe.com/ja_JP/AS3LCR/Flash_10.0/flash/geom/Matrix.html#createBox%28%29&lt;br&gt;&lt;br&gt;そもそもidentity()、rotate()、scale()はその順番で呼び出すべきで、間のメソッドを抜かすと三次元回転・平行移動的におかしくなっちゃいますし。&lt;br&gt;気軽にメソッドチェーンをすると間違いの元に…</body>
<timestamp>1259110911</timestamp>
</comment>
</comments>
</day>
<day date="2009-11-26" title="">
<body>
*as3_method_chain_2*[as]AS3 でメソッドチェーンしたくなる話 (2)
[http://d.hatena.ne.jp/nitoyon/20091125/as3_method_chain:title] にいくつか反応があって楽しかったので掘り下げてみた。自分で問題提起した以上は、何か作ってみなきゃいけない気になった。自分のモチベーション保つために記事にするのはいいことなんだと改めて実感した。

本題に戻る。

ActionScript でメソッドチェーンするライブラリを作ってみた。こんな風に書ける。
&gt;|actionscript|
    $(graphics)
        .beginFill(0xff0000)
        .drawCircle(80, 80, 60)
        .endFill();

    $(graphics)
        .lineStyle(3, 0x0000ff)
        .moveTo(200, 100)
        .lineTo(150, 150)
        .lineTo(200, 150)
        .lineTo(200, 100);
||&lt;
====
&lt;code&gt;$()&lt;/code&gt; にオブジェクトを渡すと、戻り値を返さないメソッドを this を返すようにしくれる。たとえば、&lt;code&gt;Graphics.lineTo(x:Number, y:Number):void&lt;/code&gt; は &lt;code&gt;Graphics.lineTo(x:Number, y:Number):Graphics&lt;/code&gt; になる。

このライブラリの肝は、&lt;code&gt;Graphics&lt;/code&gt; に限らず、どんなクラスでもメソッドチェーン化してくれるところ。

実装は [http://wonderfl.net/code/f8875289cdd6683fde9cc5bd38285d4de7bf9667/:title] にある。ライブラリ部分はわずか40行とかなりシンプルなので、興味のある人は見てみると面白いだろう。&lt;code&gt;Proxy&lt;/code&gt; と &lt;code&gt;describeType()&lt;/code&gt; の合わせ技で実装している。

もちろん弱点もあって、思いつくまま列挙してみると
-実行時エラー
--dynamic class を使ってるため、&lt;code&gt;lineTo&lt;/code&gt; を &lt;code&gt;linT&lt;/code&gt; のように typo してしまってもコンパイル時に警告してくれず、実行時エラーになっちゃう。
--実務につっこむには嫌な制限だが、勢いで書くコードなら勢いで全てのコードパスを試すのであまり気にならないかもしれない。
-パフォーマンス
--与えられたオブジェクトを毎回 describeType するため、対象のクラスごとにラッパーを作るのに比べてパフォーマンスは落ちる。キャッシュ構造を入れると改善はするだろうが限界はある。
--逆に、どんなオブジェクトでもメソッドチェーン化できてしまうので、汎用的なのは間違いない。

といったところだろうか。

続く(?)。

</body>
<comments>
<comment>
<username>匿名</username>
<body>withかと思いました…</body>
<timestamp>1259252399</timestamp>
</comment>
</comments>
</day>
<day date="2009-12-09" title="">
<body>
*google_ime_lifehack*Web 上に本名を公開するたった１つのメリット
単語登録しなくても自分の名前が Google 日本語IME で変換候補に出る。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091209/20091209010757.png&quot; width=&quot;360&quot; height=&quot;224&quot;&gt;&lt;/center&gt;&lt;

※名前により個人差があります

</body>
</day>
<day date="2009-12-11" title="">
<body>
*hotentry2009*人気エントリで見る2009年
みなさんこんにちは。拙作の「はてなブックマーク」まとめサイト、&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; が１周年を迎えました。それを記念してはてブ年鑑のデータで2009年を振り返ってみることにしました。

題して、「はてなブックマークの人気エントリで見る2009年」です。

**年間ブックマーク数ランキング
2009年の公開ブックマーク数のランキング TOP10 です。
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/keyword/Firefox%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Firefox%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot;&gt;Firefoxノベルティセット欲しい！とは - はてなキーワード&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02761.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%A1%DFFirefox%B5%AD%C7%B0%20%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%A1%DFFirefox%B5%AD%C7%B0%20%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot;&gt;はてなブックマーク×Firefox記念 ノベルティセット欲しい！とは - はてなキーワード&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02513.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://hamachiya.com/junk/cj.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://hamachiya.com/junk/cj.html&quot;&gt;クリックジャッキングってこうですか？ わかりません&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02450.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://anond.hatelabo.jp/20091026215137&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://anond.hatelabo.jp/20091026215137&quot;&gt;急がばまわれ式・堅実で一番効率的な英語の勉強法&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02382.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/kousuke-i/20081203/1228314824&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kousuke-i/20081203/1228314824&quot;&gt;知らないと損する英語の速読方法（1） - 一法律学徒の英語と読書な日々&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02210.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.digitaldj.jp/2009/05/26_210030.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.digitaldj.jp/2009/05/26_210030.html&quot;&gt;とんでもない音楽系ウェブアプリが出た - Hobnox Audiotool | DIGITAL DJ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02101.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/nightshift/20090121/1232521713&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/nightshift/20090121/1232521713&quot;&gt;「 2 」か「 9 」で割ってみる - ナイトシフト&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02089.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://mono-mono.com/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://mono-mono.com/&quot;&gt;買ってよかったものまとめサイト&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02030.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.aoky.net/articles/daniel_pink/dan_pink_on_motivation.htm&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.aoky.net/articles/daniel_pink/dan_pink_on_motivation.htm&quot;&gt;やる気に関する驚きの科学&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02019.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://anond.hatelabo.jp/20090401200113&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://anond.hatelabo.jp/20090401200113&quot;&gt;20年来のつらさがほぼ消えたことについて&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01976.gif&quot;&gt;

1位、2位はブックマークして応募のキャンペーン、3位はクリックしちゃうとブックマークしてしまうアレです。そのあとは、英語や生活に役立つ知識といった例年通りの傾向ですが、技術ネタが TOP10 に入っていないのは初めてです。

11位以下は &lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; で [年間ランキング] からご覧ください。

**人気のタグで見る2009年
&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; にはタグやドメインごとの人気度の変遷を見る機能があります。ここでは2009年に人気だったタグを振り返ります。

***政治
2009年の注目のタグは何といっても「&lt;strong&gt;政治&lt;/strong&gt;」でしょう。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091210/20091210235702.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

今まで、郵政選挙や安倍・福田辞職のタイミングで話題になっていますが、今回の政権交代以降は「政治」タグが常時上位に食い込んでいます。

***twitter
ネットの分野では「&lt;strong&gt;twitter&lt;/strong&gt;」が本格的にブレークしたのも印象的です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091210/20091210235659.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

2007年に新しいもの好きの人たちの間で話題になっていましたが、2008年は静かでした。ところが、今年になって再び広く話題になるようになりました。

有名人や政治家が twitter をやっているのも珍しくはなくなってきています。

***Google
今年に入って「&lt;strong&gt;Google&lt;/strong&gt;」がランク外になる月も出てきましたが、それでも定期的に話題にはなっています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091210/20091210235701.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

12月には Google IME、Google Public DNS などで話題を独占していますね。

***あとで読む
そして、今年も「&lt;strong&gt;あとで読む&lt;/strong&gt;」ためにブックマークするのが定番です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091210/20091210235700.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**2009年 新常連サイト
2009年に「はてなブックマーク」に新登場したホットエントリの常連サイトを４つ紹介します。&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; の月間ドメインランキングに初登場したドメインを選んでみました。

***はてなブックマークニュース
はてなブックマークが運営するニュースサイトです。2009年、彗星のように登場し、ついブックマークしたくなるような記事を量産していました。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091210/20091210235703.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

2009年「はてなブックマークニュース」の人気エントリ
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://b.hatena.ne.jp/articles/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://b.hatena.ne.jp/articles/200911/577:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://b.hatena.ne.jp/articles/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://b.hatena.ne.jp/articles/200912/619:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://b.hatena.ne.jp/articles/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://b.hatena.ne.jp/articles/200911/591:title:bookmark]

====
***ナナピ
生活の便利レシピを紹介するサイトです。幅広いジャンルの役立つ情報が盛りだくさんです。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091211/20091211000055.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

2009年「ナナピ」の人気エントリ
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://r.nanapi.jp/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://r.nanapi.jp/286/:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://r.nanapi.jp/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://r.nanapi.jp/546/:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://r.nanapi.jp/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://r.nanapi.jp/594/:title:bookmark]

***かちびと.net
Web ビジネスで勝つために役立つまとめ記事でブックマーク数を伸ばしています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091210/20091210235704.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

2009年「かちびと.net」の人気エントリ
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kachibito.net/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://kachibito.net/private/discount-shop-tips.html:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kachibito.net/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://kachibito.net/web-service/14-web-service-made-in-japan.html:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kachibito.net/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://kachibito.net/web-service/twitter/165-twitter-tools.html:title:bookmark]

***TechCrunch Japan
技術系に特化したニュースサイトです。サイト自体は2006年からありましたが、2009年に入ってからブックマークが増えてきました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091211/20091211000054.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

2009年「TechCrunch Japan」の人気エントリ
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://jp.techcrunch.com/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://jp.techcrunch.com/archives/20090604google-opens-up-internal-speed-tool-to-the-public/:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://jp.techcrunch.com/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://jp.techcrunch.com/archives/2009120511-chrome-extensions-for-starters/:title:bookmark]
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://jp.techcrunch.com/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;[http://jp.techcrunch.com/archives/20090704utterly-amazing-music-video-shot-on-a-bunch-of-webcams/:title:bookmark]

**月間ランキング
最後に、月ごとのブックマーク数ランキングを抜粋しておきます。

***1月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/nightshift/20090121/1232521713&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/nightshift/20090121/1232521713&quot;&gt;「 2 」か「 9 」で割ってみる - ナイトシフト&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01845.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.geocities.jp/syori59/sobatuyu.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.geocities.jp/syori59/sobatuyu.html&quot;&gt; 門外不出！？美味しいそばつゆの作り方&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01358.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/kousuke-i/20081203/1228314824&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kousuke-i/20081203/1228314824&quot;&gt;知らないと損する英語の速読方法（1） - 一法律学徒の英語と読書な日々&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01214.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://cookpad.com/recipe/252807&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://cookpad.com/recipe/252807&quot;&gt;簡単☆チキンカレー（中毒性あり) by スガシカコ [クックパッド] 簡単おいしいみんなのレシピが40万品&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01093.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.ideaxidea.com/archives/2009/01/www_sql_designer.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.ideaxidea.com/archives/2009/01/www_sql_designer.html&quot;&gt;ブラウザ上でさくさくデータベースの設計ができる『WWW SQL Designer』がすごすぎる - IDEA*IDEA ～ 百式管理人のライフハックブログ ～&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/00945.gif&quot;&gt;

***2月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/keyword/Firefox%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/Firefox%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot;&gt;Firefoxノベルティセット欲しい！とは - はてなキーワード&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02667.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://anond.hatelabo.jp/20090211000453&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://anond.hatelabo.jp/20090211000453&quot;&gt;なんとなく最近不調かな、と思ったら気をつけること&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01180.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.geocities.jp/tommyasu2000/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.geocities.jp/tommyasu2000/&quot;&gt;白ごはん．com：家庭料理を中心とした和食レシピサイト&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01077.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/watanabi/20090118/1232254523&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/watanabi/20090118/1232254523&quot;&gt;英語の勉強に無料でおすすめのサイト・ポッドキャスト - watanabiの日記&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/00978.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/next49/20090222/p2&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/next49/20090222/p2&quot;&gt; 価値の判断基準が自分の外にある人間は表現者になれない - 発声練習&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/00952.gif&quot;&gt;

***3月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://hamachiya.com/junk/cj.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://hamachiya.com/junk/cj.html&quot;&gt;クリックジャッキングってこうですか？ わかりません&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02345.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://gigazine.net/index.php?/news/comments/20090302_horiemon01/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://gigazine.net/index.php?/news/comments/20090302_horiemon01/&quot;&gt;新聞やテレビが絶対に書かない「ホリエモン」こと「堀江貴文」の真実～ロングインタビュー前編～ - GIGAZINE&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01735.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/kiyo560808/20090316/1237226078&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kiyo560808/20090316/1237226078&quot;&gt;人を惹きつけ人を動かす文章を書く方法　初心者にもわかるコピーライター養成講座　～言葉で世の中を動かそう - プログラマーkkの勉強/成長ブログ（@モバイル広告代理店ライブレボリュ&amp;#65533;&amp;#65533;&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01303.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://tokuna.blog40.fc2.com/blog-entry-1636.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://tokuna.blog40.fc2.com/blog-entry-1636.html&quot;&gt; 私はGoogleリーダーを使ってこんな風に情報を集めています*二十歳街道まっしぐら&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01130.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%20%A5%B1%A1%BC%A5%BF%A5%A4%A5%B9%A5%C8%A5%E9%A5%C3%A5%D7%CD%DF%A4%B7%A4%A4%A1%AA&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%20%A5%B1%A1%BC%A5%BF%A5%A4%A5%B9%A5%C8%A5%E9%A5%C3%A5%D7%CD%DF%A4%B7%A4%A4%A1%AA&quot;&gt;はてなブックマーク ケータイストラップ欲しい！とは - はてなキーワード&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01102.gif&quot;&gt;

***4月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%A1%DFFirefox%B5%AD%C7%B0%20%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AF%A1%DFFirefox%B5%AD%C7%B0%20%A5%CE%A5%D9%A5%EB%A5%C6%A5%A3%A5%BB%A5%C3%A5%C8%CD%DF%A4%B7%A4%A4%A1%AA&quot;&gt;はてなブックマーク×Firefox記念 ノベルティセット欲しい！とは - はてなキーワード&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02329.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://anond.hatelabo.jp/20090401200113&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://anond.hatelabo.jp/20090401200113&quot;&gt;20年来のつらさがほぼ消えたことについて&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01444.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://enterprisezine.jp/article/detail/1311&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://enterprisezine.jp/article/detail/1311&quot;&gt;「その発想はなかった！」と言わせる技術を身につけよう～仕事の幅を広げる19の発想技法：企業IT部門の変革を支援するエンタープライズ実践情報サイト EnterpriseZine&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01324.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kanolog.jp/2008/03/post-36b4.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://kanolog.jp/2008/03/post-36b4.html&quot;&gt;カノログ: 良質な教科書系ウェブサイト集(改訂版)&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01237.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.ideaxidea.com/archives/2009/04/photography_composition_rules.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.ideaxidea.com/archives/2009/04/photography_composition_rules.html&quot;&gt;写真がうまくなりたい？「ひとつ上の構図」を目指すための9のTips - IDEA*IDEA ～ 百式管理人のライフハックブログ ～&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01231.gif&quot;&gt;

***5月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.digitaldj.jp/2009/05/26_210030.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.digitaldj.jp/2009/05/26_210030.html&quot;&gt;とんでもない音楽系ウェブアプリが出た - Hobnox Audiotool | DIGITAL DJ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01893.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.geocities.jp/timeway/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.geocities.jp/timeway/&quot;&gt;世界史講義録&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01750.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://ascii.jp/elem/000/000/414/414418/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://ascii.jp/elem/000/000/414/414418/&quot;&gt;ASCII.jp：絶対入れたいFirefoxアドオン最強50選&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01451.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/moriguchiakira/20090520&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/moriguchiakira/20090520&quot;&gt;この「いじめ対策」はすごい！ - 森口朗公式ブログ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01327.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/nitoyon/20090512/zenjido_bkm&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090512/zenjido_bkm&quot;&gt;全自動ブックマーク棚卸しが想像以上に有意義な件 - てっく煮ブログ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01164.gif&quot;&gt;

***6月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://b.hatena.ne.jp/articles/200906/231&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://b.hatena.ne.jp/articles/200906/231&quot;&gt;ブログやメールの文章力をアップ！　執筆に役立つページ3つ - はてなブックマークニュース&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01596.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/gothedistance/20090607/1244388792&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/gothedistance/20090607/1244388792&quot;&gt;システム開発に欠かせない契約の基礎知識まとめ - GoTheDistance&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01500.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.uniqlo.com/calendar/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.uniqlo.com/calendar/&quot;&gt;UNIQLO CALENDAR&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01414.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.itmedia.co.jp/news/articles/0906/01/news045.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/0906/01/news045.html&quot;&gt;日本のWebは「残念」　梅田望夫さんに聞く（前編） (1/3) - ITmedia News&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01394.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/aureliano/20090626/1245981276&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/aureliano/20090626/1245981276&quot;&gt;パワーポイントで作る企画書のデザインを美しくみせるための7つのポイント - ハックルベリーに会いに行く&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01384.gif&quot;&gt;

***7月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://anond.hatelabo.jp/20090716175613&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://anond.hatelabo.jp/20090716175613&quot;&gt;英語コンプの馬鹿でも投資ゼロでTOEIC900に達するたったひとつの方法&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01790.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://urasoku.blog106.fc2.com/blog-entry-739.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://urasoku.blog106.fc2.com/blog-entry-739.html&quot;&gt; どんなにへたくそでも一日後には絵が上手くなる方法:ハムスター速報　２ろぐ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01591.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://mago.pepper.jp/ccil45.htm&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://mago.pepper.jp/ccil45.htm&quot;&gt;amazonのダンボール箱でつくるA4ファイルケース【マゴクラ】ダンボールインテリア生活&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01481.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.publickey.jp/blog/09/post_36.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.publickey.jp/blog/09/post_36.html&quot;&gt;グーグルの最新のデータセンターは非常識なほど進化している － Blog on Publickey&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01331.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://blog.audiofan.net/archives/759495.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://blog.audiofan.net/archives/759495.html&quot;&gt;Firefox 3.5をインストールしたらまず行う設定 : audiofan.net blog&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01072.gif&quot;&gt;

***8月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://hitoxu.com/0868&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://hitoxu.com/0868&quot;&gt;アマゾンの90%OFFなどの特価商品を簡単に探す方法 - ひとぅブログ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01551.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://blog.livedoor.jp/ld_directors/archives/51248663.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://blog.livedoor.jp/ld_directors/archives/51248663.html&quot;&gt;私はこうやってマーケティングデータを集めています。 - livedoor ディレクターブログ&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01327.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.123kobe.com/doc/writing/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.123kobe.com/doc/writing/&quot;&gt;わかりやすい技術文章の書き方&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01065.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://lifehacking.jp/2009/08/what-is-grit-and-why-you-need-it/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://lifehacking.jp/2009/08/what-is-grit-and-why-you-need-it/&quot;&gt;頭のよさがすべてではない。成功者がもっている特質「Grit」とは何か？ | Lifehacking.jp&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01059.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://b.hatena.ne.jp/articles/200908/389&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://b.hatena.ne.jp/articles/200908/389&quot;&gt;半額・アウトレット・わけあり商品も！ネットでお得に買い物する方法 - はてなブックマークニュース&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/00990.gif&quot;&gt;

***9月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.aoky.net/articles/daniel_pink/dan_pink_on_motivation.htm&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.aoky.net/articles/daniel_pink/dan_pink_on_motivation.htm&quot;&gt;やる気に関する驚きの科学&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01951.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.yukawanet.com/archives/1520240.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.yukawanet.com/archives/1520240.html&quot;&gt;| ＾＾ |秒刊SUNDAY｜ドケチなのに良質な無料漢字フォントを探している人向けフォント大全集&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01384.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://www.chem-station.com/blog/2009/09/-chempodnaturecom.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://www.chem-station.com/blog/2009/09/-chempodnaturecom.html&quot;&gt;日本に居ながら、ナマの英語に触れる工夫 - 化学者のつぶやき -Chem-Station-&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01275.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://nanapi.jp/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://nanapi.jp/&quot;&gt;nanapi[ナナピ] | 7分であなたの生活を便利にしちゃうライフレシピ共有サイト&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01205.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://r.nanapi.jp/286/&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://r.nanapi.jp/286/&quot;&gt;効率的な家の探し方（賃貸） | nanapi[ナナピ]&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01009.gif&quot;&gt;

***10月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://anond.hatelabo.jp/20091026215137&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://anond.hatelabo.jp/20091026215137&quot;&gt;急がばまわれ式・堅実で一番効率的な英語の勉強法&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/02148.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://dain.cocolog-nifty.com/myblog/2009/10/100-7590.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://dain.cocolog-nifty.com/myblog/2009/10/100-7590.html&quot;&gt;スゴ本100: わたしが知らないスゴ本は、きっとあなたが読んでいる&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01487.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kachibito.net/web-service/14-web-service-made-in-japan.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://kachibito.net/web-service/14-web-service-made-in-japan.html&quot;&gt;国産限定・Web制作時に覚えておくと便利な14のフリーのWebサービス - かちびと.net&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01278.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kachibito.net/private/discount-shop-tips.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://kachibito.net/private/discount-shop-tips.html&quot;&gt;ネットで出来るだけ物を安く買える方法やサイトを調べた - かちびと.net&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01268.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://fussy.web.fc2.com/algo/index.htm&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://fussy.web.fc2.com/algo/index.htm&quot;&gt;アルゴリズムの紹介&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01214.gif&quot;&gt;

***11月
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://kenkodieting.blog87.fc2.com/blog-entry-1447.html&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://kenkodieting.blog87.fc2.com/blog-entry-1447.html&quot;&gt;費用０円で男の顔面5歳若返りする方法 わんこと&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01390.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://getnews.jp/archives/36712&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://getnews.jp/archives/36712&quot;&gt;常識をくつがえすタモリ流の “豚生姜焼き” を実際に作ってみた！ - ガジェット通信&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01285.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/teruyastar/20091118/1258499089&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/teruyastar/20091118/1258499089&quot;&gt;なぜ新人は聞きに来ないのか? - teruyastarはかく語りき&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01267.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/green0/20091128/1259406313&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/green0/20091128/1259406313&quot;&gt;別におぼえたくないのに…Javaの方から勝手に脳に入り込んできて、気がつけばJavaを習得してしまうゲーム「Robocode」 - a_a___a_a&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01173.gif&quot;&gt;
+&lt;img src=&quot;http://favicon.hatena.ne.jp/?url=http://d.hatena.ne.jp/Hamachiya2/20091111/bookmark&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/Hamachiya2/20091111/bookmark&quot;&gt;ちょっと慣れてきた人の為のハテブの使い方 - ぼくはまちちゃん！(Hatena)&lt;/a&gt; &lt;img src=&quot;http://b.st-hatena.com/images/users/gif/normal/01166.gif&quot;&gt;

&lt;a href=&quot;http://tech.nitoyon.com/hatebu_nenkan/&quot;&gt;はてブ年鑑&lt;/a&gt; には毎月の20位までのエントリがまとまっています。あわせてご覧ください。（しつこく宣伝）
</body>
</day>
<day date="2009-12-16" title="">
<body>
*google_ime_kunni*Google IME で「○○君に」と入力したら
こんなこと言われた…。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20091216/20091216013555.png&quot; border=&quot;1&quot; width=&quot;166&quot; height=&quot;83&quot;&gt;&lt;/center&gt;&lt;

ぐーぐるせんせい…。
</body>
</day>
<day date="2009-12-28" title="">
<body>
*as3corelib_lazy_json*[as]as3corelib の JSON.decode() をいい加減な JSON に対応させる
JSON は手軽に書けていいのですが、仕様がちょっと厳密すぎるところもあるので緩い JSON で書きたくなる。

JSON の仕様で個人的に面倒だと思うのは次の３つ。
+object や array の最後に &lt;code&gt;,&lt;/code&gt; があるとエラーになる
+object のキーは文字列じゃないといけない
+&lt;code&gt;0.3&lt;/code&gt; を &lt;code&gt;.3&lt;/code&gt; と書くとエラーになる

たとえば、次のような JSON はパースエラーとなる。
&gt;|javascript|
{
    a: .3, 
    b: .4, 
    c: .9, 
}
||&lt;
本当はこうすべき。
&gt;|javascript|
{
    // a → &quot;a&quot;
    &quot;a&quot;: 0.3, // .3 → 0.3
    &quot;b&quot;: 0.4, 
    &quot;c&quot;: 0.9  // カンマを削った
}
||&lt;

オレオレなプロジェクトで JSON を手書きするときには、この３つの制限を緩和してあげたくなる。json.org の仕様には違反しちゃうけど、書きやすさを優先で GO!!!

そこで、ActionScript の定番 JSON パーサーである &lt;a href=&quot;http://code.google.com/p/as3corelib/&quot;&gt;as3corelib&lt;/a&gt; の .92.1 に手を入れてみた。

たとえば、配列末尾のカンマを許容するには &lt;code&gt;com/adobe/serialization/json/JSONDecoder.as&lt;/code&gt; の parseArray() 関数に次のように手を入れた。

&gt;|actionscript|
     } else if ( token.type == JSONTokenType.COMMA ) {
         // move past the comma and read another value
         nextToken();
+
+        // allow trailing comma.
+        if ( token.type == JSONTokenType.RIGHT_BRACKET ) {
+            return a;
+        }
     } else {
||&lt;
カンマだったときに次が &lt;code&gt;]&lt;/code&gt; だったら、配列を返すようにする。

こんな感じで、ごにょごにょといじっていく。

「2. object のキーは文字列じゃないといけない」については、そもそも JSON の仕様に identifier がないので、ECMAScript の仕様を参考にしつつ、&lt;code&gt;JSONTokenizer.as&lt;/code&gt; に手を入れていった。本当はキー名として日本語などの Unicode 文字も許可しなきゃいけないんだけど、めんどくさいので
&gt;|javascript|
/^[a-z_$][a-z_$0-9]*$/
||&lt;
を許可するキー名の条件とした。

完成品のソースはここにおいてる：
-http://tech.nitoyon.com/misc/swf/as3corelib_lazy_json.zip

ここに置いてるやつを使えば
&gt;|javascript|
{
    a: .3, 
    b: .4, 
    c: .9, 
}
||&lt;
がパースエラーにならない。やったね。

</body>
</day>
<day date="2009-12-31" title="">
<body>
*kotoshi_matome*今年まとめ（自己満足）
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20071230/kotoshi_matome&quot;&gt;2007年&lt;/a&gt;・&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20081231/kotoshi_matome&quot;&gt;2008年&lt;/a&gt; に続き、2009年も自己満足エントリで締めくくる。

**今年の人気エントリ
はてなブックマークでいっぱいブックマークしてもらった順番。
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090512/zenjido_bkm&quot;&gt;全自動ブックマーク棚卸しが想像以上に有意義な件&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01459.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot;&gt;北海道を落とすとどう跳ねるのか？&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/01121.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090523/h1n1_flu_kyoto_u&quot;&gt;新型インフルに対する京都大学の対応がかっこよすぎる&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00902.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090515/genotyp_review&quot;&gt;フォント同士を交配させて新しいフォントを作る「genoTyp」が面白い&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00872.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090702/may_affiliate&quot;&gt;はてブ受けしそうな記事を書いて、１ヶ月で約３万円を稼いだ顛末&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00633.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090519/histroy_lso&quot;&gt;履歴消去じゃ消えないエロサイトの隠れた痕跡に要注意&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00543.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise&quot;&gt;クラスタリングの定番アルゴリズム「K-means法」をビジュアライズしてみた&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00482.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090528/edushi_map&quot;&gt;中国の町並みをドット絵で再現したE都市がすさまじい&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00468.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090521/windows_debug&quot;&gt;Windows プログラマなら読んでおきたい「Windowsデバッグの極意」&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00368.png&quot;&gt;
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090702/may_affiliate&quot;&gt;濃いはてなーが大好きな濃いブログBEST50&lt;/a&gt; &lt;img src=&quot;http://b.hatena.ne.jp/images/users/normal/00328.png&quot;&gt;

今年の前半に受けのよさそうな記事を集中的に投下したやつが上位に入ってる。そのせいで、後半はかなり失速。記事を書くのすら面倒になってしまった。

**アクセス数が１番多かったのは
アクセス数が１番多かったのは、上のランキングでは2位に位置している「&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090415/hokkaido&quot;&gt;北海道を落とすとどう跳ねるのか？&lt;/a&gt;」ネタ。リンクされた数もコメント数もトラックバック数も桁違いでした。&lt;a href=&quot;http://www.forest.impress.co.jp/article/2009/04/28/okiniiri.html&quot;&gt;動ナビブログで紹介された&lt;/a&gt;り、スクリーンセーバーが窓の杜の &lt;a href=&quot;http://www.forest.impress.co.jp/article/2009/04/28/okiniiri.html&quot;&gt;今日のお気に入りで紹介された&lt;/a&gt;り、反響もすさまじかったです。

実装の裏側を公開した [http://d.hatena.ne.jp/nitoyon/20090422/hokkaido_uragawa:title] もそこそこ好評でした。

**発表資料まとめ
今年は引きこもっていたので発表は１回だけです。
+[http://d.hatena.ne.jp/nitoyon/20090303/dp:title]

**2010年抱負
原点に戻っておもろいことやりたい。
</body>
</day>
<day date="2010-01-08" title="">
<body>
*nenga*うちの年賀状2010
[http://d.hatena.ne.jp/nitoyon/20090107/nenga:title=去年]に続き、今年も年賀状を公開しておきます。

今年はパクリネタで恐縮なのですが、縁起はいい感じになりました。

[f:id:nitoyon:20100108002325p:image:w320]

&lt;a href=&quot;http://www.manekinekoduck.jp/dl/wp/WP_omamori-green_1024-768.jpg&quot;&gt;ネタ元の絵&lt;/a&gt;を Illustrator でトレースして、そのあとにトラの帽子と尻尾を追加してるので微妙に手間はかかってます。

今年もよろしくお願いいたします。
</body>
</day>
<day date="2010-01-13" title="">
<body>
*perfect_shuffle_visualize*[as]パーフェクトシャッフルは何回で元に戻るか (AS3版)
[http://d.hatena.ne.jp/nishiohirokazu/20100107/1262835414:title]が面白かったので ActionScript で再現してみた。

&gt;&lt;center&gt;&lt;a href=&quot;http://wonderfl.net/code/bb7b5c2bfec888803f118cd47e3f727b00772b62&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100113/20100113012511.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

オリジナルの記事のように丸くするところはまだ。&lt;a href=&quot;http://wonderfl.net/code/bb7b5c2bfec888803f118cd47e3f727b00772b62&quot;&gt;wonderfl にも投稿済み&lt;/a&gt;。

ソースはこんな感じ(59行)。HSV を使うところは &lt;a href=&quot;http://www.libspark.org/wiki/nutsu/Frocessing&quot;&gt;frocessing&lt;/a&gt; の ColorHSV クラスを利用してる。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|actionscript|
//------------------------------------------------------
// Perfect Shuffle Visualization
//------------------------------------------------------
package {
import flash.display.Sprite;
import flash.filters.BlurFilter;
import frocessing.color.ColorHSV;

[SWF(width=&quot;475&quot;,height=&quot;475&quot;,backgroundColor=&quot;0x000000&quot;)]
public class PerfectShuffle extends Sprite {
    private const SIZE:int = 30;
    private const W:int = 80;
    private const H:int = 10;
    
    public function PerfectShuffle() {
        stage.scaleMode = &quot;noScale&quot;;

        graphics.beginFill(0x000000);
        graphics.drawRect(0, 0, 475, 475);
        graphics.endFill();
        
        var num:int;
        var s:Sprite = new Sprite();
        s.x = 40;
        s.y = 100;
        addChild(s);
        for (var i:int = 0; i &lt; SIZE; i++) {
            num = i;

            s.graphics.lineStyle(4, new ColorHSV(i * 270 / SIZE, .7).value
            s.graphics.moveTo(0, num * H);
            for (var j:int = 0; j &lt; 5; j++) {
                num = getNext(num);
                s.graphics.lineTo(j * W + W, num * H);
            }
        }

        s.filters = [new BlurFilter(2, 2)];
    }

    private function getNext(num:int):int {
        if (num &lt; SIZE / 2) {
            return num * 2 + 1;
        } else {
            return (num - SIZE / 2) * 2;
        }
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**目次
-パーフェクトシャッフルは何回で元に戻るか (AS3版)
-[http://d.hatena.ne.jp/nitoyon/20100115/perfect_shuffle_visualize2:title]
-[http://d.hatena.ne.jp/nitoyon/20100122/perfect_shuffle_visualize3:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2010-01-15" title="">
<body>
*perfect_shuffle_visualize2*[as]続・パーフェクトシャッフルは何回で元に戻るか (AS3版)
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20100113/perfect_shuffle_visualize&quot;&gt;前回&lt;/a&gt;の続きで最初と最後がつながるところをアニメーションさせてみることにした。

**アニメーションの雛形作成
四角から円をどのように作るか悩んだのだけど、扇形を徐々に広げていく形で変換してやった。バームクーヘンの１人前から始まり、徐々にバームクーヘンの１ホールになっていく、と言ってもいいだろう。こんな感じ。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100115/20100115020339.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

この実験は &lt;a href=&quot;http://wonderfl.net/code/b2dbbb5b857c6ebd8ed4460e83338f3e5ce4abe8&quot;&gt;Square to Donut&lt;/a&gt; として Wonderfl に投稿してある。

（はてなダイアリーに wonderfl の作品を iframe で貼り付けても失敗する。title=&quot;&quot; を取り除いてもダメだけど何でだろ...）

**線の当てはめ
アニメーションの大枠ができたら、扇上に前回のシミュレーション結果を貼り付けて、変形に応じて座標を変えていけばよい。sin とか cos を駆使して座標変換を行えば終わり。

&gt;&lt;noscript&gt;Flash Player 10 以上がインストールされている必要がありますよ&lt;/noscript&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FPerfectShuffleVisualization2.swf&amp;amp;up_background=%23000000&amp;amp;synd=open&amp;amp;w=460&amp;amp;h=440&amp;amp;title=Perfect+Shuffle+Visualization+2&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;br&gt;(要 Flash Player 10 以上)&lt;/center&gt;&lt;

ソースは以下に(80行)。&lt;a href=&quot;http://wonderfl.net/code/2733fb8d3d956ad68601f145c753de4d3be8c889&quot;&gt;wonderfl にも投稿済み&lt;/a&gt;。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|actionscript|
package {
import flash.display.*;
import flash.events.Event;
import flash.geom.Point;
import flash.filters.BlurFilter;
import flash.text.TextField;
import org.libspark.betweenas3.BetweenAS3;
import org.libspark.betweenas3.tweens.ITween;
import org.libspark.betweenas3.easing.*;
import frocessing.color.ColorHSV;

[SWF(backgroundColor=&quot;0x000000&quot;)]
public class PerfectShuffleVisualization2 extends Sprite {
    public var r:Number = 800;
    public var d:Number = 80;
    public var angle:Number = 6;
    private const NUM:int = 5;
    private const SIZE:int = 30;
    private var msk:Sprite;
    
    public function PerfectShuffleVisualization2() {
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        var t:TextField = new TextField();
        t.text = &quot;Click to play!!&quot;;
        t.textColor = 0xffffff;
        addChild(t);
        x = 240; y = 240;
        draw();

        var tween:ITween = BetweenAS3.parallel(
            BetweenAS3.tween(this, { r: 30 }, null, 5, Quint.easeOut),
            BetweenAS3.tween(this, { angle: 360, d: 160 }, null, 5)
        );
        tween.onUpdate = draw;
        stage.addEventListener(&quot;click&quot;, function(event:Event):void {
            if (t.parent) t.parent.removeChild(t);
            tween.play();
           });

        filters = [new BlurFilter(2, 2)];
    }

    private function draw():void {
        var p:Point = new Point();
        var g:Graphics = graphics;
        g.clear();

        // draw lines
        for (var yy:int = 0; yy &lt; SIZE; yy++) {
            var num:int = yy;
            g.lineStyle(2, new ColorHSV(yy * 270 / SIZE, .7).value, .7);
            p.x = 0; p.y = num; getXY(p);
            g.moveTo(p.x, p.y);
            for (var xx:int = 1; xx &lt;= NUM; xx++) {
                num = getNext(num);
                p.x = xx; p.y = num; getXY(p);
                g.lineTo(p.x, p.y);
            }
        }
    }

    // get next position after perfect shuffle
    private function getNext(num:int):int {
        if (num &lt; SIZE / 2) {
            return num * 2 + 1;
        } else {
            return (num - SIZE / 2) * 2;
        }
    }

    private function getXY(pt:Point):Point {
        var rad:Number = (-angle / 2.0 + angle * pt.x / NUM) / 180.0 * Math.PI;
        pt.x =  (r + d / (SIZE - 1) * pt.y) * Math.sin(rad);
        pt.y = -(r + d / (SIZE - 1) * pt.y) * Math.cos(rad) + r * Math.cos(angle / 2 / 180 * Math.PI);
        return pt;
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**目次
-[http://d.hatena.ne.jp/nitoyon/20100113/perfect_shuffle_visualize:title]
-続・パーフェクトシャッフルは何回で元に戻るか (AS3版)
-[http://d.hatena.ne.jp/nitoyon/20100122/perfect_shuffle_visualize3:title]
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>zahir</username>
<body>http://wonderfl.net/code/51d294497666431c9e88fde05acfd9c5fec0e8d8&lt;br&gt;&lt;br&gt;はてなへの貼付けはこちらが便利です</body>
<timestamp>1263519161</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>なるほど。wonderfl.net ではなく、wonderfl.kayac.com にしなきゃいけないわけですね！</body>
<timestamp>1263637515</timestamp>
</comment>
</comments>
</day>
<day date="2010-01-20" title="">
<body>
*p1*[書籍][as]神の書 Making Things Move! の続編、詳解ActionScript3.0アニメーション
兼ねてから Flash 界隈で名著と言われ続けていた [asin:1590597915:title] の続編の日本語訳が O'REILLY から出版されています。献本いただきました。ありがとうございます。

[asin:4873114373:title]

献本してもらっておいて宣伝するのもわざとらしい感じですが、お世辞抜きにすばらしい内容です。衝突判定、キャラクタの動作（追いかけたり、逃げたり、群れたり）、等角投影(2.5D)、経路探索といった高度な内容を ActionScript でどのように実現するかが書いてあります。後半では、Flash 10 の 3D 機能や新しい API、Pixel Blender、トゥイーンライブラリなど、最近の話題にも触れてくれています。

前著よりもさらに濃いので、じっくり読みすすめていく覚悟がいります。中上級者向けにはしびれる一冊のはずです。ActionScript3.0 になって、いろんなライブラリも出てきていますが、動きや判定などはどうしても独自で作らなきゃいけないので、激しく参考になりますね。

巻末には id:ABA:detail さんによる ActionScript で箱よけゲームを作る手法が解説された付録つき。実は私にも「付録の執筆はどうですか」という話が来ていたのですが、そのころちょうど仕事が忙しくて断ってしまいました。結果的には、こんなすごい本に私のような人間が執筆するのは恐れ多いことだったので、断ってよかったのかもしれません…。

-1章 高度な衝突判定
-2章 操舵行動
-3章 等角投影
-4章 経路探索
-5章 代替入力:カメラとマイク
-6章 高度な物理演算:数値積分法
-7章 Flash 10の3D機能
-8章 Flash 10の描画API
-9章 Pixel Bender
-10章 トゥイーンエンジン
-付録A ActionScriptアニメーション技法を使って作る箱避けゲーム

Making Things Move がこれ。

[asin:1590597915:detail]

Making Things Move の日本語訳がこれ。

[asin:4862460496:detail]

今回の原著がこれ。

[asin:1430216085:detail]

で、今回出版されたやつがこれ。
[asin:4873114373:detail]

(追記)fladdict さんや trick7 さんのところでも「買い！」として紹介されてますね。
-[http://fladdict.net/blog/2010/01/keithpeters.html:title]
-[http://www.trick7.com/blog/2010/01/22-021404.php:title]
</body>
</day>
<day date="2010-01-22" title="">
<body>
*perfect_shuffle_visualize3*[as]完・パーフェクトシャッフルは何回で元に戻るか (AS3版)
前回は直線の始点と終点だけを円上に配置して直線で結んでいたが、直線の中間点の点も円上になるように変換してみた。

ついでに、表示サイズの最終調整も行って満足いく仕上がりになった。

&gt;&lt;div style=&quot;text-align:center;width:465px;&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/sGG8/js&quot;&gt;&lt;/script&gt;&lt;a href=&quot;http://wonderfl.net/code/c90ff184a40f4e4c20df21031d145447c5fcd0d4&quot; title=&quot;Perfect Shuffle Visualization 3 - wonderfl build flash online&quot;&gt;Perfect Shuffle Visualization 3 - wonderfl build flash online&lt;/a&gt;&lt;/div&gt;&lt;

長々と3回に渡ってやってきたけど、「[http://d.hatena.ne.jp/nishiohirokazu/20100107/1262835414:title] の直線が円になるところをアニメーションさせてみたい」という当初の欲望は果たせたので満足した。

以下、ソース（104行）。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|actionscript|
package {
import flash.display.*;
import flash.events.Event;
import flash.geom.Point;
import flash.filters.BlurFilter;
import org.libspark.betweenas3.BetweenAS3;
import org.libspark.betweenas3.tweens.ITween;
import org.libspark.betweenas3.easing.*;
import frocessing.color.ColorHSV;

[SWF(backgroundColor=&quot;0x000000&quot;)]
public class PerfectShuffleVisualization3 extends Sprite {
    public var r:Number = 6400;
    public var d:Number = 300;
    public var angle:Number = 3;
    private var canvas:Sprite = new Sprite();
    private const NUM:int = 5;
    private const SIZE:int = 30;
    private const POINT_PER_LINE:Number = 10;
    private const CANVAS_SIZE:Number = 475;

    public function PerfectShuffleVisualization3() {
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;

        // draw background
        graphics.beginFill(0x000000);
        graphics.drawRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);
        graphics.endFill(); 

        addChild(canvas);
        canvas.x = CANVAS_SIZE / 2;
        canvas.y = CANVAS_SIZE / 2 + d / 2;
        canvas.filters = [new BlurFilter(3, 3)];
        draw();

        var tween:ITween = BetweenAS3.parallel(
            BetweenAS3.tween(this, { r: 30 }, null, 5, Quint.easeOut),
            BetweenAS3.tween(this, { d: 160 }, null, 5, Cubic.easeOut),
            BetweenAS3.tween(this, { angle: 360 }, null, 5, Sine.easeIn),
            BetweenAS3.tween(canvas, { y: CANVAS_SIZE / 2 }, null, 5)
        );
        tween.onUpdate = draw;
        stage.addEventListener(&quot;click&quot;, function(event:Event):void { tween.gotoAndPlay(0); });
        tween.play();
    }

    private function draw():void {
        var p:Point = new Point();
        var g:Graphics = canvas.graphics;
        g.clear();

        // draw lines
        for (var yy:int = 0; yy &lt; SIZE; yy++) {
            var num:int = yy, prev_num:Number = yy;
            g.lineStyle(3, new ColorHSV(yy * 270 / SIZE, .7).value, .7);
            p.x = 0; p.y = num; getXY(p);
            g.moveTo(p.x, p.y);
            for (var xx:int = 0; xx &lt; NUM; xx++) {
                num = getNext(num);
                for (var i:int = 0; i &lt; POINT_PER_LINE; i++) {
                    var ratio:Number = (i + 1.0) / POINT_PER_LINE;
                    p.x = xx + ratio;
                    p.y = prev_num * (1 - ratio) + num * ratio;
                    getXY(p);
                    g.lineTo(p.x, p.y);
                }
                prev_num = num;
            }
        }
    }

    // get next position after perfect shuffle
    private function getNext(num:int):int {
        if (num &lt; SIZE / 2) {
            return num * 2 + 1;
        } else {
            return (num - SIZE / 2) * 2;
        }
    }

    private function getXY(pt:Point):Point {
        var rad:Number = (-angle / 2.0 + angle * pt.x / NUM) / 180.0 * Math.PI;
        pt.x =  (r + d / (SIZE - 1) * pt.y) * Math.sin(rad);
        pt.y = -(r + d / (SIZE - 1) * pt.y) * Math.cos(rad) + r * Math.cos(angle / 2 / 180 * Math.PI);
        return pt;
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**目次
-[http://d.hatena.ne.jp/nitoyon/20100113/perfect_shuffle_visualize:title]
-[http://d.hatena.ne.jp/nitoyon/20100115/perfect_shuffle_visualize2:title]
-完・パーフェクトシャッフルは何回で元に戻るか (AS3版)
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2010-01-26" title="">
<body>
*dijkstra_aster_visualize*[as]経路探索アルゴリズムの「ダイクストラ法」と「A*」をビジュアライズしてみた
&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873114373/nitoyoncom-22/&quot;&gt;詳解 ActionScript 3.0アニメーション ―衝突判定・AI・3DからピクセルシェーダまでFlash上級テクニック&lt;/a&gt; を読んでいて、経路探索のアルゴリズムで A* が取り上げられていました。

A* については、いろいろ検索して調べたりもしたのですが、やっぱり本に書いてあると理解しやすいですね。せっかくなので自分流に実装してビジュアライズしてみました。

**ダイクストラ法
まずは A* の特別なケースでもあるダイクストラ法から見ていきます。クリックすると探索のシミュレーションが開始します。

&gt;&lt;center&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/fVQE/js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(ここに Flash が表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;

スタート地点(S)からゴール(G)への探索が始まります。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012802.png&quot;&gt;&lt;/center&gt;&lt;
色がついたところが「最短経路が決定した場所」です。スタート地点から少しずつ探索が完了していきます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012803.png&quot;&gt;&lt;/center&gt;&lt;
半分ぐらい完了しました。まだまだ進みます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012804.png&quot;&gt;&lt;/center&gt;&lt;
最後まで終わりました。最短経路を黒色矢印で表示しています。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012801.png&quot;&gt;&lt;/center&gt;&lt;

ダイクストラ法は、スタート地点から近いノード(=マス目)から順番に最短経路が判明していきます。

ざっくりとした例えですが、&lt;strong&gt;スタート地点から水をたらして広がった順番に経路が決定していく&lt;/strong&gt;ようなイメージです。水は均等に広がっていくので、一番最初に到達した水滴について、たどってきた道を確認すれば経路が判明するわけです。

**A*(A-Star)
次に A* の探索過程を見てみましょう。大枠はダイクストラ法と同じなのですが、探索の道順が異なります。
====
&gt;&lt;center&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/ktk5/js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(ここに Flash が表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;

A* ではゴールへの距離が近いノードを優先的に調べていきます。右方向のノードを調べにいってますね。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012806.png&quot;&gt;&lt;/center&gt;&lt;

上半分を探索し終わったら、仕方なくゴールから遠ざかる左方向に移動していきます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012808.png&quot;&gt;&lt;/center&gt;&lt;

そのあとはゴールに向かって一直線です。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100126/20100126012805.png&quot;&gt;&lt;/center&gt;&lt;
A* ではゴールへの経路が判明した段階で処理は終了です。

A* はダイクストラ法に比べてゴールに到達するまでに調べるマス目が少ないのが印象的です。

ダイクストラ法と同じように水で例えると、&lt;strong&gt;A* では水が少し意思を持っていて、なるべくゴールに近いほうに流れようとする&lt;/strong&gt;ようなイメージです。ここがまさに A* のキモです。ゴールへの近さを加味して、探索するノードの数をなるべく減らそうとします。

A* では、スコアとして &lt;code&gt;f* = g* + h*&lt;/code&gt; を用います。各ノードの f* を調べて、f* の値が小さいノードから先に探索していきます。g* はスタート地点からの距離であり、ダイクストラ法で用いるスコアと同じです。h* がゴールへの距離なのですが、実際の最短距離は途中の段階では分からないので、ゴールへの直線距離やマンハッタン距離を利用して計算します。

この、h* の部分がゴールへの近さを加味する部分です。スタートからの距離が同じノードが複数ある場合には、h*(=ゴールへの距離)が近いものから調べていこう、という作戦です。

もし、h* が 0 ならダイクストラ法と同じ処理になります。h* が実際の最短距離より小さい値である限りは、選んだノードが最短距離であることが保証されているようです。直線距離やマンハッタン距離を使ってる限りは、それよりも最短距離が小さくなることはありませんね。

**まとめ
ダイクストラ法と A* の探索途中の様子をビジュアライズしてみました。

ソースコードは wonderfl に投稿しています（&lt;a href=&quot;http://wonderfl.net/code/6faaab5234abf034417a8e753f6309de0b9560f0&quot;&gt;ダイクストラ法&lt;/a&gt;・&lt;a href=&quot;http://wonderfl.net/code/8f7c11caf4939ef77ee0ee8f2db427c92b5a5bab&quot;&gt;A*&lt;/a&gt;）。それぞれ200行ほどですがコメントはしっかり書いたつもりですし、ソースの diff は40行ほどなので共通点も多いです。よければ参考にしてください。

ちなみに、私が参考にした &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873114373/nitoyoncom-22/&quot;&gt;詳解 ActionScript 3.0アニメーション&lt;/a&gt; のデモは、&lt;a href=&quot;http://www.oreilly.co.jp/pub/9784873114378/&quot;&gt;O'REILLY のサイト&lt;/a&gt; から閲覧できますし、ソースコードも &lt;a href=&quot;http://www.oreilly.co.jp/books/9784873114378/#files&quot;&gt;ダウンロードできます&lt;/a&gt;。太っ腹！

[asin:4873114373:detail]

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090409/kmeans_visualise:title]
-[http://d.hatena.ne.jp/nitoyon/20090413/kmeans_visualize_3d:title]
-[http://d.hatena.ne.jp/nitoyon/20090316/postal_map:title]
-[http://d.hatena.ne.jp/nitoyon/20090303/dp:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>laclefdor</username>
<body>学生のころ勉強してからすっかり忘れてましたが、面白かったです。</body>
<timestamp>1264536374</timestamp>
</comment>
<comment>
<username>とおりすがり</username>
<body>&gt;h* が実際の最短距離より小さい値である限りは、選ん&lt;br&gt;&gt;だノードが最短距離であることが保証されているようです。&lt;br&gt;&lt;br&gt;&gt;直線距離やマンハッタン距離を使ってる限りは、それよ&lt;br&gt;&gt;りも最短距離が小さくなることはありませんね。&lt;br&gt;&lt;br&gt;ということは、直線距離やマンハッタン距離を使用すると&lt;br&gt;そりよりも最短距離が小さくなることはないので、&lt;br&gt;「h* が実際の最短距離より小さい値である限り」が成立&lt;br&gt;しなくなりダメなんじゃないのでしょうか？</body>
<timestamp>1325853956</timestamp>
</comment>
</comments>
</day>
<day date="2010-02-01" title="">
<body>
*eratosthenes_short_coding*[as]ActionScript3 で素数列挙を short coding
ActionScript3 で素数列挙の short coding にチャレンジしてみる。ネタ元はこれ。

[twitter:8367943818:detail]

元々のコードは JavaScript で「&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&quot;&gt;エラトステネスのふるい&lt;/a&gt;」を短く書いたもの。JavaScript のコードがあるんだから、ActionScript でも同じぐらいで書けるはずと信じてやってみた。

**strict 版
まずは、warning が出ないもの。227文字。
&gt;|actionscript|
package{import flash.display.*;public class C extends Sprite{public function C(){graphics.beginFill(0);for(var a:Array=[],c:int=1,d:int;c++&lt;1E3;)if(!a[c]){for(d=c;d&lt;1E3;)a[d+=c]=1;graphics.drawRect((c%10)*5,int(c/10)*5,5,5)}}}}
||&lt;

出力はこんな感じ。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100201/20100201021757.png&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
10個ごとに素数の数字を黒い点で表している。左上が 0 で、右にいくと 2, 3 が連続して素数として現れて、そのあと、5,7 と続く。2段目からは 11, 13, 17, 19 が現れる。

少し考えたら当たり前だと分かるのだけど下一桁が 0,4,6,9の列は素数が１つも現れないし、2,5の列は一番上にしか素数が登場しない。10以上の素数の下一桁は 1,3,7,9 のいずれかなのだ。こうやって図にしてみると、改めて気づかされて面白い。

で、肝心のソースコードのインデントを復元するとこんな感じ。
====
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
    public function C(){
        graphics.beginFill(0);

        // 1から1E3(=1000)までループを回す
        for(var a:Array=[],c:int=1,d:int;c++&lt;1E3;)
            // 素数かどうか判定
            if(!a[c]){
                // 素数のとき：
                // c*2,c*3,c*4... で a のフラグを立てる
                for(d=c;d&lt;1E3;)
                    a[d+=c]=1;

                // 該当する位置に四角を描画する
                graphics.drawRect((c%10)*5,int(c/10)*5,5,5)
            }
    }
}
}
||&lt;

短くするための工夫は色々してある。思いつく範囲で列挙するだけでも
-コンストラクタでは戻り値 &lt;code&gt;:void&lt;/code&gt; を書かなくても warning は出ない
-graphics.endFill() がなくても動くのでやらない
-Math.floor() は int() で代用
-変数宣言は１箇所にまとめる。しかも for の中でやっちゃうことで、var 文の ; を節約できる
-; を省略できるところは省略しちゃう
といったあたり。

これより短くできるのか気になる。ルールは
-ライブラリは使用せず、Flash がネイティブに提供する API を利用すること
-素数の表示方法は問わない
といったあたりか。ただ、TextField 使ったら &lt;code&gt;import flash.text.*;&lt;/code&gt; だけでかなりの文字数になるし、BitmapData は初期化と表示に文字数食われるし、Graphicsを使うのが最短な気がしている。

**strict じゃない版
warning が出てもいいならもう少し短くできる。210文字。
&gt;|actionscript|
package{import flash.display.*;public class C extends Sprite{public function C(){for(var g=graphics,a=[],c=1,d;c++&lt;1E3;)if(!a[c]){for(d=c;d&lt;1E3;)a[d+=c]=1;g.beginFill(0);g.drawRect((c%10)*5,int(c/10)*5,5,5)}}}}
||&lt;
いちおう、整形したソースコードを掲載しておく。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
    public function C(){
        for(var g=graphics,a=[],c=1,d;c++&lt;1E3;)
            if(!a[c]){
                for(d=c;d&lt;1E3;)
                    a[d+=c]=1;
                g.beginFill(0);
                g.drawRect((c%10)*5,int(c/10)*5,5,5)
            }
    }
}
}
||&lt;

型宣言しなくてもいい分だけ短くなった。

また、今までは &lt;code&gt;graphics&lt;/code&gt; と２回入力していたが、&lt;code&gt;g=graphics,&lt;/code&gt; の11文字を追加することで、&lt;code&gt;graphics&lt;/code&gt;(8文字) が g の1文字で済むようになった。graphics は2回登場していたので、16文字が13文字に減ったので3文字の節約だ。ただ、そのせいで beginFill() する位置が変化したが、これでも動いてるので問題はないこととする。


**まとめ
これ以上短くできるのかな。挑戦者求む。ソースは wonderfl に投稿してある。
-[http://wonderfl.net/code/06d5fe4b3f3b9813205a5e1840bb73af656ee47c:title=strict版 (227文字)]
-[http://wonderfl.net/code/73bee2d0ed3291b6b7e18c1a7bd4f1f0e8b76ed6:title=strictじゃない版 (210文字)] 

isbn:4839925232:detail

</body>
</day>
<day date="2010-02-02" title="">
<body>
*eratosthenes_short_coding2*[as]ActionScript3 で素数列挙を short coding (2)
[http://d.hatena.ne.jp/nitoyon/20100201/eratosthenes_short_coding:title] にいくつか反応があって嬉しい。わたしが書いた 210文字のコードは最終的に184文字にまで縮まった。

大変興味深いので、変遷の過程を紹介する。

**たたき台 (210文字)
昨日の最後に紹介したのがこのコード。実際にはインデントと改行はないが、読みやすくするためにインデントしたもので紹介していく。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  public function C(){
    for(var g=graphics,a=[],c=1,d;c++&lt;1E3;)
      if(!a[c]){
        for(d=c;d&lt;1E3;)
          a[d+=c]=1;
        g.beginFill(0);
        g.drawRect((c%10)*5,int(c/10)*5,5,5)
      }
  }
}
}
||&lt;

**反則編 (172文字)
&lt;a href=&quot;http://wonderfl.net/user/sph62&quot;&gt;sph62 さん&lt;/a&gt;によるコード。
-[http://wonderfl.net/code/ee8d62a5ad3c13b35be28c5685124ac3cbb376c9:title]

完成後の画像を Loader でロードしている。さすがに反則技なのでノーカウントだけど、発想が素敵なので敬意をもって紹介する。

**with編 (189文字)
&lt;a href=&quot;http://wonderfl.net/user/psyark&quot;&gt;psyark さん&lt;/a&gt;による with を活用したコード。
-[http://wonderfl.net/code/33f9086c0a897fe19bc502e784f7d2e8e48c83ee:title]

インデントするとこうなる。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(){
    with(graphics)
      for(beginFill(0),a=[],c=1;c++&lt;1E3;)
        if(!a[c])
          for(drawRect(c%10&lt;&lt;3,c/10&lt;&lt;3,8,8),d=c;d&lt;1E3;)
            a[d+=c]=1
  }
}
||&lt;
使ってるテクニック
-&lt;code&gt;with(graphics)&lt;/code&gt; を使うことで &lt;code&gt;graphics.&lt;/code&gt; が不要になった
-&lt;code&gt;with&lt;/code&gt; の中では &lt;code&gt;var&lt;/code&gt; を使った変数宣言はいらない (ただし、代入せずに参照すると、実行時エラーとなる)
-&lt;code&gt;for&lt;/code&gt; や &lt;code&gt;if&lt;/code&gt; のあとを複数行としないことで、&lt;code&gt;{}&lt;/code&gt; を節約
-&lt;code&gt;(c%10)*5&lt;/code&gt; の変わりにシフト演算子を利用して &lt;code&gt;c%10&lt;&lt;3&lt;/code&gt; とする

すばらしすぎる!!
====

**デフォルト引数を活用 (185行)
&lt;a href=&quot;http://wonderfl.net/user/o8que&quot;&gt;o8que さん&lt;/a&gt;による小技連発により、さらに4文字短くなった。
-[http://wonderfl.net/code/66e5f3d883443f55940976363be08a1730e6a1a7:title]
インデントするとこうなる。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(c=1){
    with(graphics)
      for(beginFill(0),a=[];c++&lt;1E3;)
        if(!a[d=c])
          for(drawRect(c%10*4,c/10&lt;&lt;2,4,4);d&lt;1E3;)
            a[d+=c]=1
  }
}
}
||&lt;
使ってるテクニック
-コンストラクタのデフォルト引数で変数宣言してしまう (カンマ演算子が不要になるので1文字の節約)
-&lt;code&gt;a[c]&lt;/code&gt; と &lt;code&gt;d=c&lt;/code&gt; を統合して &lt;code&gt;a[d=c]&lt;/code&gt; と書く
-&lt;code&gt;c%10&lt;&lt;3&lt;/code&gt; は &lt;code&gt;c%10*4&lt;/code&gt; と書くと1文字節約

**苦心で1文字減らす (184文字)
皆様のアイデアに感心しつつ、わたしもがんばってみた。試行錯誤の結果、1文字だけ減らせた。
-[http://wonderfl.net/code/d3aaf2e0bfdfbd559262232871c556f5ef2d9eb3:title]
インデントするとこうなる。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(){
    with(graphics)
      for(beginFill(c=1),a=[];c++&lt;1E3;)
        if(!a[d=c])
          for(drawRect(c%10*4,c/10&lt;&lt;2,4,4);d&lt;1E3;)
            a[d+=c]=1
  }
}
}
||&lt;
使ったテクニック
-&lt;code&gt;c=1&lt;/code&gt; と &lt;code&gt;beginFill(0)&lt;/code&gt; が冗長に見えたので、&lt;code&gt;beginFill(c=1)&lt;/code&gt; としてみた。#000000 と #000001 は区別つかないよね。

**まとめ
みなさんの更なる挑戦をお待ちしています!!!　何かに気づけばもっと短くなる気がしている…。

</body>
</day>
<day date="2010-02-04" title="">
<body>
*eratosthenes_short_coding3*[as]ActionScript3 で素数列挙を short coding (3)
[http://d.hatena.ne.jp/nitoyon/20100202/eratosthenes_short_coding2:title] のあと、さらに進化は続いていた。前回は184文字まで縮まっていたが、現在のところ175文字にまでなった。

「もう無理だろう」というようなところから、さらに10文字近くも縮まるなんて驚きである。例によって変遷の過程を紹介する。

**たたき台 (184文字)
前回の最後に紹介したのがこのコード。実際にはインデントと改行はないが、読みやすくするためにインデントしたもので紹介していく。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(){
    with(graphics)
      for(beginFill(c=1),a=[];c++&lt;1E3;)
        if(!a[d=c])
          for(drawRect(c%10*4,c/10&lt;&lt;2,4,4);d&lt;1E3;)
            a[d+=c]=1
  }
}
}
||&lt;

**if 文を消す (182文字)
&lt;a href=&quot;http://wonderfl.net/user/psyark&quot;&gt;psyark さん&lt;/a&gt;による &amp;&amp; を活用したコード。このあたりから、解読が一層難しくなってくる。
-[http://wonderfl.net/code/9bbad625c7cfdd2d2c9ae4f839e31892ff2413a1:title]

インデントするとこうなる。
&gt;|actionscript|
package{
  import flash.display.*;
  public class C extends Sprite{
    function C(c=1){
      with(graphics)
        for(a=[];c++&lt;1E3;)
          for(d=c;!a[c]&amp;&amp;d&lt;1E3;drawRect(c%10*4,c/10&lt;&lt;2,4,4))
            beginFill(a[d+=c]=1)
    }
  }
}
||&lt;
使ってるテクニック
-&lt;code&gt;if&lt;/code&gt; の条件を２つ目の &lt;code&gt;for&lt;/code&gt; 文の条件判定に &lt;code&gt;&amp;&amp;&lt;/code&gt; で突っ込むことで、&lt;code&gt;if&lt;/code&gt; を不要にした
-&lt;code&gt;beginFill&lt;/code&gt; を &lt;code&gt;for&lt;/code&gt; 文の中にもっていくことで、&lt;code&gt;,&lt;/code&gt; を省けた。&lt;code&gt;c=1&lt;/code&gt; は前回登場したデフォルト引数にするテクニックでコンストラクタに移動した。
-&lt;code&gt;drawRect&lt;/code&gt; が何度も呼ばれることをいとわない


**1重の for 文になった (181文字)
&lt;a href=&quot;http://wonderfl.net/user/o8que&quot;&gt;o8que さん&lt;/a&gt;による for が２重から１重になってしまったコード。もはや解読は不能に近い。
-[http://wonderfl.net/code/2905d587a4ff3324e6c433cb7a868369a933e801:title]

インデントするとこうなる。
====
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(){
    with(graphics)
      for(d=c=2, a=[];
        a[c] || d&gt;2E3 ?
          (d=++c)&lt;1E3 :
          !drawRect(c%10*4,c/10&lt;&lt;2,4,4);
        )
        beginFill(a[d+=c]=1)
  }
}
}
||&lt;
&lt;s&gt;使ってるテクニック&lt;/s&gt;アルゴリズム解読
-２つの &lt;code&gt;for&lt;/code&gt; を２通りに使うために、三項演算子を使って分岐している
--c が素数で d が 2E3((1E3でいいと思うが…))より小さいとき
---&lt;code&gt;beginFill&lt;/code&gt; を呼ぶ
---d を c だけ増やす
---a[d] にフラグを立る
---&lt;code&gt;drawRect&lt;/code&gt; する。
--c が素数で d 2E3 を超えたとき、または、c が素数ではないとき
---&lt;code&gt;d=++c&lt;/code&gt; で c をインクリメントして d に代入する

**ケチくさく1文字減らす (180文字)
&lt;a href=&quot;http://wonderfl.net/user/nitoyon&quot;&gt;わたし&lt;/a&gt; がo8queさんのコードに驚嘆しつつ、分からないなりに１文字減らすことに成功したヤツ。
-[http://wonderfl.net/code/777ef768bf7781a93556479947b6e78324759b04:title]

インデントするとこうなる。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(){
    with(graphics)
      for(a=[d=c=2];
          a[c] || d&gt;2E3 ?
              (d=++c)&lt;1E3 :
              !drawRect(c%10*4,c/10&lt;&lt;2,4,4);
          )
        beginFill(a[d+=c]=1)
  }
}
}
||&lt;
使ってるテクニック
-&lt;code&gt;d=c=2,a=[]&lt;/code&gt; を &lt;code&gt;a=[d=c=2]&lt;/code&gt; にした。実は配列 a はインデックス 2 以降しか利用しないので、インデックス 0 の場所に何が入っていようが関係ない。

**括弧を不要に (178文字)
&lt;a href=&quot;http://wonderfl.net/user/9re&quot;&gt;9re&lt;/a&gt; さんによる、三項演算子を for の外に出したコード。少し読みやすくなった気がする。
-[http://wonderfl.net/code/0edf7e236cea087e38b2b3fe031df1cd675f5806:title]

インデントするとこうなる。
&gt;|actionscript|
package{
import flash.display.*;
public class C extends Sprite{
  function C(){
    with(graphics)
      for(a=[d=c=2];c&lt;1E3;beginFill(a[d+=c]=1))
        a[c]||d&gt;2E3?
            d=++c:
            drawRect(c%10*4,c/10&lt;&lt;2,4,4)
  }
}
}
||&lt;
使ってるテクニック
-&lt;code&gt;(d=++c)&lt;1E3&lt;/code&gt; の括弧が無駄だったので、&lt;code&gt;d=++c&lt;/code&gt; を &lt;code&gt;for&lt;/code&gt; から出して、三項演算子の中に突っ込んだ。

**FlexSprite!! (176文字)
このあたりから、コードの改造ではなく別の観点からのショートコード化の研究が行われる。今後、ActionScript でのショートコーディングするときには定型として使えそうである。

口火を切ったのは &lt;a href=&quot;http://wonderfl.net/user/uwi&quot;&gt;uwi&lt;/a&gt; さん。
-[http://wonderfl.net/code/54528ed6e9b8300b3a69de1772d214b5a6a158a5:title]

インデントするとこうなる。
&gt;|actionscript|
package{
import mx.core.*;
public class C extends FlexSprite{
  function C(){
    with(graphics)
      for(a=[d=c=2];c&lt;1E3;beginFill(a[d+=c]=1))
        a[c]||d&gt;2E3?d=++c:drawRect(c%10*4,c/10&lt;&lt;2,4,4)
  }
}
}
||&lt;
使ってるテクニック
-&lt;code&gt;Sprite&lt;/code&gt; ではなく &lt;code&gt;FlexSprite&lt;/code&gt; を用いている。クラス名は長くなったが、名前空間が &lt;code&gt;flash.display&lt;/code&gt; から &lt;code&gt;mx.core&lt;/code&gt; になったので、トータルでは2文字減っている。

**import の位置を変える (175文字)
言われてみればなんで気づかなかったんだろう、という修正で1文字短縮。&lt;a href=&quot;http://wonderfl.net/user/Nicolas&quot;&gt;Nicolas&lt;/a&gt; さんによる import の位置を変更する修正。
-[http://wonderfl.net/code/54528ed6e9b8300b3a69de1772d214b5a6a158a5:title]

インデントするとこうなる。
&gt;|actionscript|
package{
public class C extends FlexSprite{
  function C(){
    with(graphics)
      for(a=[d=c=2];c&lt;1E3;beginFill(a[d+=c]=1))
        a[c]||d&gt;2E3?d=++c:drawRect(c%10*4,c/10&lt;&lt;2,4,4)
  }
}
import mx.core.*
}
||&lt;
使ってるテクニック
-&lt;code&gt;import&lt;/code&gt; 文を &lt;code&gt;public class C&lt;/code&gt; の手前ではなく、最後に持ってくることで、&lt;code&gt;import&lt;/code&gt; 文の末尾 &lt;code&gt;;&lt;/code&gt; を省略できる…!

**まとめ
さすがにそろそろ限界か。それとも常識を覆す何かが出てくるのか…。

一昔前に、ブログなどでショートコーディングの話を見たときには「難しそう」と思ったのだけど、当事者になってみると無駄な努力に全力で取り組むのは楽しいものである。また、wonderfl という共通のプラットフォーム上で記録が塗り替えられていく様子を見れるのがよかった。

今回の企画が始まって、改めて [isbn:4839925232:title] を読み直してみてるが、前にざっと見たときよりも楽しく読めている。

isbn:4839925232:detail

</body>
<comments>
<comment>
<username>o8que</username>
<body>ここ数日のショートコーディング合戦、非常に楽しませて頂きました。&lt;br&gt;以下は私がdの判定を2E3にした理由です。&lt;br&gt;&lt;br&gt;psyarkさんが使ったdrawRectを何度も呼ぶテクニックを利用すれば、&lt;br&gt;[beginFill→drawRect→分岐判定→] を、&lt;br&gt;[drawRect→beginFill→分岐判定→(drawRect→)] &lt;br&gt;の順にしても、分岐判定を挟んで素数を表示することが可能になります。&lt;br&gt;しかし後者の方法だと、cの値が500を超えたあたりで、&lt;br&gt;[dにc(=503(素数))を代入→&lt;br&gt;(beginFillの中で)dにcを足して1006になる→&lt;br&gt;cは素数だが、dが1E3を超えたので次のcへ]&lt;br&gt;となって、一度も分岐判定でdrawRectする方に飛ばなくなる問題が発生します。&lt;br&gt;(実際dの判定が1E3だと500までの素数しか表示されないはずです)&lt;br&gt;そのためcの値が500以上でも、最低でも一回は分岐判定からdrawRectに飛ぶように、&lt;br&gt;dの判定を2E3にする必要がありました。</body>
<timestamp>1265284280</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。&lt;br&gt;なるほど。2E3 の理由がやっと分かりました。深すぎます…！</body>
<timestamp>1265640688</timestamp>
</comment>
</comments>
</day>
<day date="2010-02-16" title="">
<body>
*teraco29_hige5*大阪てら子29 HIGE5 に参加したよ
大阪でほぼ月１開催されている Flash/ActionScript 勉強会の &lt;a href=&quot;http://atnd.org/events/2939&quot;&gt;大阪てら子29 HIGE5&lt;/a&gt; に行ってきました。たぶん2年数ヶ月ぶり。継続的にやっててすごいなぁ。

しばらく勉強会からは遠ざかっていたのですが、久しぶりに参加してみると楽しいものですね。今回はなぜか遠方からのゲストも多く、最近有名なアノ人や前々から気になってた人、wonderfl で名前をよく見る人、ヒゲの人などとお会いできてよかったです。

最後の最後にぶっつけで発表したのですが、しばらくやってないとグダグダな感じになっちゃいますね。BetweenAS3 と JSON を使って長い動画を作るぜ、というお話でした。

詳細なレポートは他の人に任せた！
-[http://www.shift-style.org/blog/?p=520:title]
-[http://ra66it.net/blog/studylog/entry-1295.html:title]
-[http://clockmaker.jp/blog/2010/02/teraco-cross3d/:title]

最近は他の人がまとめてくれるから楽やわー。すばらしい。

せっかくなので自分は過去の「大阪てら子」参加記録をまとめてみた。
&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
-[http://d.hatena.ne.jp/nitoyon/20071022/takeshi_max:title] (てら子 FxUG 共同)
-[http://d.hatena.ne.jp/nitoyon/20070828/p1:title] (てら子 FxUG 共同)
-[http://d.hatena.ne.jp/nitoyon/20070617/teraco4_10tips:title] (てら子 第4回)
-[http://d.hatena.ne.jp/nitoyon/20070520/terakoya3:title] (てら子 第3回)
-[http://d.hatena.ne.jp/nitoyon/20070416/p1:title] (てら子 第2回)
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2010-02-23" title="">
<body>
*perl_exif*[perl]Image::ExifTool で写真の EXIF 時刻をまとめてずらす
カメラの時刻を間違えて設定してしまったり、海外旅行に行ったのに時差を変更し忘れたり、アリバイを作りたくなったり、などなど、現代人にとって写真の時刻をまとめて変更したくなることはよくあるものだ。

便利なフリーソフトもあるんだろけど、スクリプトでまとめて処理したくなるのがプログラマ魂。今回は perl を使ってやってみた。

**EXIF の時間を書き換える
perl で EXIF を扱うには Image::ExifTool が定番なようだ。CPAN から拾ってきて、簡単なワンライナーを書いてみた。
&gt;|perl|
perl -MImage::ExifTool -e &quot;for $f(glob('*.jpg')){$e = new Image::ExifTool; $e-&gt;ImageInfo($f); $e-&gt;SetNewValue($_=&gt;240, Shift=&gt;1) for('ModifyDate','DateTimeOriginal','CreateDate'); $e-&gt;WriteInfo($f,'out/'.$f)}&quot;
||&lt;
MS-DOS 用。UNIX shell のときは、&quot; と ' を入れ替えるべきだろう。１行を展開してみるとこうなる。
&gt;|perl|
# カレントフォルダの *.jpg を列挙
for $f(glob('*.jpg')){
    # ファイルの Exif 情報を読み取る
    $e = new Image::ExifTool;
    $e-&gt;ImageInfo($f);

    # 時刻をずらす
    $e-&gt;SetNewValue($_=&gt;9, Shift=&gt;-1)
      for('ModifyDate','DateTimeOriginal','CreateDate');

    # out フォルダに出力する
    $e-&gt;WriteInfo($f,'out/'.$f)
}
||&lt;

ただ、こんな凝ったことしなくても Image::ExifTool と一緒に導入される exiftool を使えば、もっと手軽にできたようだ。
&gt;|bash|
exiftool &quot;-AllDates-=0:0:0 9:0:0&quot; ./
||&lt;
バックアップファイルまで作ってくれるので安心。

**タイムスタンプを修正する
この方法で EXIF を書き換えることには成功したのだけど、ファイルのタイムスタンプが現在時刻になってしまう。
====
そこで、タイムスタンプを EXIF のものに置き換えるスクリプトを書いた。
&gt;|perl|
perl -MImage::ExifTool -MTime::Local -e &quot;for $f(glob('*.jpg')){$e = new Image::ExifTool; $e-&gt;ImageInfo($f); @t=reverse split(/[: ]/,$e-&gt;GetValue('ModifyDate')); $t[4]--; $t=timelocal @t; utime $t,$t,$f }&quot;
||&lt;

インデントしてみた。
&gt;|perl|
# カレントフォルダの *.jpg を列挙
for $f(glob('*.jpg')){
    # ファイルの Exif 情報を読み取る
    $e = new Image::ExifTool;
    $e-&gt;ImageInfo($f);

    # 時間を取得する
    @t=reverse split(/[: ]/,$e-&gt;GetValue('ModifyDate'));
    $t[4]--; # month を1減らす

    # epoch に変換する
    $t=timelocal @t;

    # ファイルのタイムスタンプを変更する
    utime $t,$t,$f
}
||&lt;

Image::ExifTool で時刻を DateTime で取得するような方法を探してみたんだけど見つからず。諦めて、このようなかっこ悪い方法で変換している（1月には動かない!!）。

**参考URL
-[http://hippos-lab.com/blog/node/251:title]
-[http://www.perlmonks.org/?node_id=767176:title]

</body>
</day>
<day date="2010-03-01" title="">
<body>
*tsunami_tbs*津波テロップでTBSが１人勝ちしていた件
チリで発生したマグニチュード8.8の地震の影響で17年ぶりに大津波警報が発令されました。

その影響もあって、2010年2月28日(日)のテレビ放送は NHK・民放各局で番組を中断して津波速報が流されました。

**津波警報地図
番組の中断以外の時間は、津波警報の範囲を示す地図が常時表示されています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100301/20100301000839.jpg&quot; width=&quot;400&quot; height=&quot;162&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

上の図のように、地図のせいで番組のテロップが隠れてしまって読み取れません。中には、飲食店を紹介するコーナーで、お店の場所が津波警報地図に隠れて全く分からない、というケースもあり、店主にとっては宣伝効果ほぼゼロという悲しすぎるものもありました。

もちろん、番組を編集したときはこんなところに津波情報が表示されるなんて思ってもいないわけで仕方のないことですが…。また、この津波情報は CM 中も表示されていたので、CM の種類によっては広告が意味をなさなくなってしまうものもありました。

**ところが TBS は…
そんな中、各局の津波情報を見ていて気がついたのですが、TBS だけが表示位置が他の局とは異なっていたのです。
====
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100301/20100301000838.jpg&quot;&gt;&lt;/center&gt;&lt;

他局はアナログ放送の 4:3 の右下に津波情報が表示されていますが、TBS は地上デジタル 16:9 の右端中央に表示しています。この表示位置のおかげで、キム・ヨナ選手が何をしゃべっているかも読み取れます。

それに対し、NHK 教育では日曜美術館で肝心な美術作品のタイトルが分からず、テレビ朝日にいたってはビフォアーアフターの AFTER の字が隠れかけており、危うく BEFORE と AFTER の区別がつかないところでした。

しばらく色々な番組を見比べましたが、TBS の地図の位置は、他局に比べて遥かに見やすかったです。また、CM を阻害することも少なかったので、スポンサーからの評判も良かったはずです。

**なぜ TBS だけこの位置なのか
じゃあ、なんで TBS 以外の局は TBS の位置に表示しなかったのでしょうか。

ここからは想像ですが、TBS 以外の局は、アナログと地上デジタルの両方で共通の位置にテロップを上乗せする仕組みだったのでしょう。

それに対し、TBS はアナログと地上デジタルのそれぞれでテロップの位置を変えられるシステムを導入していました。実際に TBS のアナログ放送は4:3の右中央に津波警報地図が表示されています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100301/20100301000840.jpg&quot;&gt;&lt;br&gt;TBS もアナログ放送では 4:3 の右側に地図が表示されていた&lt;/center&gt;&lt;

もし、完全に地デジ化して 16:9 を前提に番組制作するようになっていれば、各社とも津波情報地図を TBS と同じ位置に表示していたかもしれませんね。

**表示位置はよかったのだが…
TBS は日本地図の表示位置はとてもよかったのですが、&lt;a href=&quot;http://blog.livedoor.jp/dqnplus/archives/1430411.html&quot;&gt;地図に対馬を除外して&lt;/a&gt;しまっており、一部で話題になってしまっています。こういう話題性でも１人勝ちでしょうか…。

**なぜ津波情報を流さなきゃいけないか
最後にオマケ。何で各社そろって津波情報を流し続けていたのか気になりますが、放送法で災害時の放送が義務付けられているそうです。
&gt;http://www.houko.com/00/01/S25/132.HTM#s1-2:title&gt;
（災害の場合の放送）
第６条の２　放送事業者は、国内放送を行うに当たり、暴風、豪雨、洪水、地震、大規模な火事その他による災害が発生し、又は発生するおそれがある場合には、その発生を予防し、又はその被害を軽減するために役立つ放送をするようにしなければならない。
&lt;&lt;
義務だったんですね。

先々週ぐらいのスピリッツに載ってた &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4091824501/nitoyoncom-22/&quot;&gt;チャンネルはそのまま!&lt;/a&gt; で知りました。

asin:4091824501:detail


テレビ東京系列は受信できないので確認できなかったのですが twitter 情報によると、テレビ東京にも津波情報は表示されていました。BS 各チャンネルも表示されていました。KBS 京都と WOWOW は表示してませんでした。
</body>
<comments>
<comment>
<username>dekijp</username>
<body>ＷＯＷＯＷは不明ですが、日本海側や内陸では表示されない地方もあったようです。</body>
<timestamp>1267376279</timestamp>
</comment>
<comment>
<username>ハガレン</username>
<body>位置は随時調整していたのでしょうか。&lt;br&gt;こういう例もあります。&lt;br&gt;http://blog.livedoor.jp/insidears/archives/52227010.html</body>
<timestamp>1267377652</timestamp>
</comment>
<comment>
<username>ほだりん</username>
<body>ほーっ　おもろいなー。</body>
<timestamp>1267462424</timestamp>
</comment>
</comments>
</day>
<day date="2010-03-03" title="">
<body>
*p1*箕面にアバターを見に行った
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100303/20100303013843.jpg&quot;&gt;&lt;/center&gt;&lt;
日本で４館しか上映してないという IMAX 版の Avatar を見に片道１時間半ぐらいかけて箕面まで行ってきた。

MOVIX 京都で Avatar を見たときは、近めの物体がぶれたように見えて若干気持ち悪かったんだけど、IMAX 版は全く問題なし。ネット上の評判どおり、とても自然な 3D の見え方だった。音響も全然違う。

ネットのどこかで「映画はソフトだけでは売れなくなってる。3D というハードがセットになってるから映画館に足を運ぶ」といった趣旨の発言があったが、まさか２回も見てしまうとは…。3D という付加価値だけでなく、映像・ストーリー・世界観、どれもすばらしい映画だと思いました。

-[http://109cinemas.net/imax/:title]: IMAX 3D のサイト。事前予約できるよ。
-[http://itsa.blog.so-net.ne.jp/2010-01-15:title]: 3D の4方式を全部見比べた記事。
</body>
</day>
<day date="2010-03-10" title="">
<body>
*bloggie_convert*[as]bloggie のドーナッツ状パノラマ画像を ActionScript で変換してみた
360度パノラマ動画を撮影できるという SONY の &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;bloggie&lt;/a&gt; を入手したので試しに撮影してみた。動画だとハードルが高いのでまずは静止画から。

&gt;&lt;center&gt;[f:id:nitoyon:20100305103114j:image]&lt;/center&gt;&lt;

付属のパノラマレンズをつけると、こんな感じでドーナッツ状の画像が撮影できる。(上の写真をクリック後、[オリジナルサイズを表示] をクリックすると、フルサイズで表示できます)

これをパノラマ画像に変換しようということで、ちょっとした ActionScript を書いて変換してみた。ちょっとしたデモを作ってみたのでご覧あれ。

&gt;&lt;center&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/b7Ia/js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player が有効だとここにデモが表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;

とまあ、こんな具合に変換したら、左右につながった360度眺められる写真の出来上がり。Web で見る分にはギリギリ許容範囲(?)ぐらいの画質にはなっている気がする。なってない気もするが、晴れた日ならもう少しまっしな画質になりそうではある。

パノラマ動画は MotionVR と呼ばれる分野で今年注目されているとかされていないとか。既存のハードでは &lt;a href=&quot;http://www.steves-digicams.com/2002_reviews/360one.html&quot;&gt;Kaidan 360 One VR&lt;/a&gt; や &lt;a href=&quot;http://www.home360.co.jp/eggphoto360.htm&quot;&gt;EGG Photo 360°&lt;/a&gt; のような専用レンズ（約10万円!!）でないと実現できなかったのだけど、bloggie のように2万円そこそこの製品で手軽に試せるのは楽しいと思いました。

ちなみに、bloggie の360°レンズはお手軽なものなので画質はあまり期待できませんが…普通に撮影したときの HD 動画は値段相応な感じなので、普通に普段使いもできそう。私は amazon より楽天のほうが安かったし、ポイントも溜まってたので楽天で購入した。

&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;&lt;img src=&quot;http://thumbnail.image.rakuten.co.jp/@0_mall/kaden-sakura/cabinet/01260387/mhspm5kl.jpg?_ex=128x128&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&quot; title=&quot;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ジャンル:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz211742%2F&quot; target=&quot;_blank&quot;&gt;家電・AV・カメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz204199%2F&quot; target=&quot;_blank&quot;&gt;ビデオカメラ・デッキ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz110238%2F&quot; target=&quot;_blank&quot;&gt;ビデオカメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz509456%2F&quot; target=&quot;_blank&quot;&gt;SDカードビデオカメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz213056%2F&quot; target=&quot;_blank&quot;&gt;その他&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ショップ:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fkaden-sakura%2F&quot; target=&quot;_blank&quot;&gt;家電のSAKURA　楽天市場店&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;価格:&lt;/span&gt; 22,200円&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;

asin:B003479I0Y:detail

ネタ元：[http://clockmaker.jp/blog/2010/02/bloggie-motionvr/:title]
</body>
</day>
<day date="2010-03-14" title="">
<body>
*donut_converter*[as]ドーナッツ状パノラマ画像のコンバーターを作った
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20100310/bloggie_convert&quot;&gt;前回&lt;/a&gt;、静止画のパノラマ変形を変換したので、いよいよ動画に取り掛かりたかったのだけど、解像度の違いや中心位置のずれに悩まされたくなかったので事前準備としてコンバーターを作ってみた。

&gt;&lt;center&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/jIEr/js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash Player が有効だとここにコンバーターが表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;

機能説明：
-Center X と CenterY で中心点を微調整する
-R1 と R2 で内側の円、外側の円のサイズを調整する
-PREVIEW でドーナッツを展開する
-SAVE で保存する
-LOAD で画像をロードする

&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;bloggie&lt;/a&gt; だけでなく、他のカメラやレンズを使ったドーナッツ状のパノラマ画像にも対応できてるのではないかと思います。

ソースは http://wonderfl.net/code/8a357833b658d18cc0988fa241585079bbe3d97f でご確認を。

&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;&lt;img src=&quot;http://thumbnail.image.rakuten.co.jp/@0_mall/kaden-sakura/cabinet/01260387/mhspm5kl.jpg?_ex=128x128&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&quot; title=&quot;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ジャンル:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz211742%2F&quot; target=&quot;_blank&quot;&gt;家電・AV・カメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz204199%2F&quot; target=&quot;_blank&quot;&gt;ビデオカメラ・デッキ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz110238%2F&quot; target=&quot;_blank&quot;&gt;ビデオカメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz509456%2F&quot; target=&quot;_blank&quot;&gt;SDカードビデオカメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz213056%2F&quot; target=&quot;_blank&quot;&gt;その他&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ショップ:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fkaden-sakura%2F&quot; target=&quot;_blank&quot;&gt;家電のSAKURA　楽天市場店&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;価格:&lt;/span&gt; 22,200円&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;

asin:B003479I0Y:detail
</body>
</day>
<day date="2010-03-23" title="">
<body>
*bloggie_movie*[as]Bloggie のドーナッツ状パノラマ動画を変換してみた
&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;bloggie&lt;/a&gt; という手軽にパノラマ動画を撮れるオモチャで遊ぶシリーズの第３回。前回、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20100314/donut_converter&quot;&gt;静止画のコンバーター&lt;/a&gt; ができたので、いよいよ動画にチャレンジする。

bloggie の動画は MPEG4(H.264/AVC) なのでそのまま Flash で読み込める。つまり、オリジナルの動画を再生しながら毎フレームごとに変換していけば、やや CPU は食うが展開して表示することはできる。実際、[http://clockmaker.jp/blog/2010/02/bloggie-motionvr/:title] ではそのようにやってる。

同じ方法を試しても面白くないので、ここではドーナッツ状の動画を展開した動画を作ってみることにする。

**できあがり
完成品がこちら。

[http://www.youtube.com/watch?v=YJZCdltEnYo:movie]

製品付属の変換ツールを使わずに変換してみた。自転車で &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;bloggie&lt;/a&gt; を手持ちしつつ鴨川沿いを走った動画でございます。

**手順
動画といっても、コマごとに変換してやればいいだけ。フリーの定番動画変換ツール、ffmpeg を活用してみた。

+ffmpeg を利用して撮影画像をコマごとに画像として分解する (参考: [http://opensourceaki.blogspot.com/2007/10/ffmpeg.html:title])
+&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20100314/donut_converter&quot;&gt;静止画のコンバーター&lt;/a&gt; のソースを流用して、各画像を変換するツールを AIR で作成する
+ffmpeg を利用して変換後の画像から動画を再構成する (参考: [http://opensourceaki.blogspot.com/2007/10/ffmpeg_19.html:title])

**もう１つサンプル
動画にできたのなら、あとは左端と右端を繋げればループしてくれる。ということで作ってみたのがコレ。
====
動画の上でマウスを移動させて位置調整できます。マウス動かしても反応ないなら、動画をクリックしてみる必要があるかも。
&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://tech.nitoyon.com/misc/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FBloggie360Test.swf&amp;amp;up_background=%23ffffff&amp;amp;up_cache=1&amp;amp;up_swfver=9&amp;amp;synd=open&amp;amp;w=400&amp;amp;h=248&amp;amp;title=Bloggie+360+degree+movie+test&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(ここにFlashが表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;

ソースはこんな感じ。ソース中に出てくる out.swf は YouTube にアップロードした動画を ffmpeg で swf として出力したもの。
&gt;|actionscript|
package{
import flash.display.*;
import flash.geom.Matrix;
import flash.events.Event;

[SWF(backgroundColor=&quot;#ffffff&quot;)]
public class Bloggie360Test extends Sprite{
    [Embed(source=&quot;out.swf&quot;)]
    private var movie:Class;

    public function Bloggie360Test() {
        var mc:MovieClip = new movie();

        var bmd:BitmapData = new BitmapData(400, 248);
        var bmp:Bitmap = addChild(new Bitmap(bmd)) as Bitmap;

        var mtx:Matrix = new Matrix();
        var mtx2:Matrix = new Matrix();

        addEventListener(&quot;enterFrame&quot;, function(event:Event):void {
            mtx.tx += (200 - stage.mouseX) / 10;
            mtx.tx %= mc.width;

            bmd.draw(mc, mtx);
            if (mtx.tx &gt; 0) {
                mtx2.tx = mtx.tx - mc.width;
                bmd.draw(mc, mtx2);
            }
            if (mtx.tx &lt; mc.width - 400) {
                mtx2.tx = mtx.tx + mc.width;
                bmd.draw(mc, mtx2);
            }
            
        });
    }
}
}
||&lt;

商品情報はこちら。自分が購入したお店で値下がりしていて税抜2万円切っていた。

&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;
&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;&lt;img src=&quot;http://thumbnail.image.rakuten.co.jp/@0_mall/kaden-sakura/cabinet/01260387/mhspm5kl.jpg?_ex=128x128&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&quot; title=&quot;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;
&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fitem.rakuten.co.jp%2Fkaden-sakura%2F10015963%2F&amp;m=http%3A%2F%2Fm.rakuten.co.jp%2Fkaden-sakura%2Fi%2F10015963%2F&quot;&gt;■ソニー【☆bloggie】モバイルHDスナップカメラ MHS-PM5K-L（ブルー）★送料無料【MHSPM5K】&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ジャンル:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz211742%2F&quot; target=&quot;_blank&quot;&gt;家電・AV・カメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz204199%2F&quot; target=&quot;_blank&quot;&gt;ビデオカメラ・デッキ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz110238%2F&quot; target=&quot;_blank&quot;&gt;ビデオカメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz509456%2F&quot; target=&quot;_blank&quot;&gt;SDカードビデオカメラ&lt;/a&gt; &amp;gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fbeta.directory.rakuten.co.jp%2Frms%2Fsd%2Fdirectory%2Fvc%2Fs1tz213056%2F&quot; target=&quot;_blank&quot;&gt;その他&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;ショップ:&lt;/span&gt; &lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/04049a54.f60ead88.04049a55.f27bbb04/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fkaden-sakura%2F&quot; target=&quot;_blank&quot;&gt;家電のSAKURA　楽天市場店&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;価格:&lt;/span&gt; 19,400円&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;

asin:B003479I0Y:detail

</body>
<comments>
<comment>
<username>reimi</username>
<body>趣味でデザインって、すごいですね。&lt;br&gt;記事を拝見いたしました。&lt;br&gt;私が使いやすい変換君と思うのは：&lt;br&gt;4Videosoft 動画変換（windows）http://www.4videosoft.jp/video-converter-platinum.html&lt;br&gt;（4Videosoft 動画変換 for Mac http://www.4videosoft.jp/video-converter-for-mac.html）</body>
<timestamp>1290757491</timestamp>
</comment>
</comments>
</day>
<day date="2010-04-08" title="">
<body>
*hokkaido_niconico*「北海道を落とすとどう跳ねるのか？」がニコニコ動画で再ブレイク中!?
ちょうど１年前ぐらいに公開した [http://d.hatena.ne.jp/nitoyon/20090415/hokkaido:title] が、なぜだか今になってニコニコ動画で人気が出ている。

[niconico:sm6757741]

この動画は私がアップロードしたものではないが、どこかの誰かが Flash をキャプチャしてアップロードしてくれたようだ。説明文にオリジナル記事へのリンクもあるので、このブログへのアクセス数も少し増えている。ありがたい。

**どれぐらい話題になってるのか
ニコニコ本家の&lt;a href=&quot;http://www.nicovideo.jp/ranking&quot;&gt;ランキング&lt;/a&gt;に見つからなかったので、ニコ厨な友人に教えてもらったところ、
-&lt;a href=&quot;http://www.nicovideo.jp/ranking/view/daily/all&quot;&gt;デイリー&lt;/a&gt;と&lt;a href=&quot;http://www.nicovideo.jp/ranking/view/hourly/all&quot;&gt;毎時&lt;/a&gt;のランキングに載ってるよ
-来週の週刊ニコランが楽しみですね
-ラマーズPにまで&lt;a href=&quot;http://twitter.com/lamazeP/status/11686385188&quot;&gt;捕捉されてるよ&lt;/a&gt;
などと、さらによく分からない言葉が返ってきたが、そこそこ話題になってることは判明した。

実際、ここ２日の動画再生数が10万回を超えており、これはオリジナルが２ヶ月かけて達成したページビューに相当する。

恐るべし、ニコニコ動画。

**自分でもアップロードしたかったが…
この作品は、当初からニコニコ動画で人気が出る可能性を秘めていると思っていて、動画の作成までしていたのだが、
-BGM がなくて寂しい
-改めて見るとダラダラ長いので再構成したい
-どうせなら BGM に合わせて落とすと楽しいはず
などとと思ってしまい、そこで作業が止まっていた。

が、オリジナルのものでも人気が出てしまうところをみると、元もとの作品の力を信じてあげられなかったのが申し訳ない気分だ。

このままでは少し悔しい(?)のでオリジナル作品を高画質でキャプチャしたものをアップロード中。が、リサイズでボケた動画になったので停止…。動画公開は難しい…。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20090422/hokkaido_uragawa:title]
-[http://d.hatena.ne.jp/nitoyon/20081003/meltdown_niconico:title]
-[http://d.hatena.ne.jp/nitoyon/20071101/max1_niconico:title]
-[http://d.hatena.ne.jp/nitoyon/20070501/p1:title]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2010-04-30" title="">
<body>
*thoughts_on_flash_jp*[Flash][HTML5]なぜ iPhone に Flash が搭載されないのか（Appleの弁）
Apple のスティーブジョブズ CEO が公開した [http://www.apple.com/hotnews/thoughts-on-flash/:title] を和訳してみた。

この文章では、「なぜ iPhone、iPod、iPad に Flash が搭載されないのか」について Apple の立場から６つの理由を説明している。細切れにジョブズの口から理由が語られたことはあったが、まとまって文章化されたことはなかった。

**目次
+Flash はオープンじゃない
+全ての Web を見るために本当に Flash は必要か？
+セキュリティとパフォーマンスを犠牲にしたくない
+Flash を使うとバッテリーが持たない
+Flash はタッチを前提としていない
+一番重要な理由

&gt;&gt;
Apple は Adobe と長い期間、関わり合ってきた。実際、我々が Adobe の設立者に会ったのは、彼らがガレージで起業したばかりのころだった。Apple はレーザープリンタに Adobe の Postscript を採用し、Adobe の最初の大きな顧客となった。Apple は Adobe に投資し、長らく Adobe の 20% の株を保有していた。2つの会社は密接に協力して DTP 分野を開拓して黄金時代となったのだが、その後2つの会社は疎遠になった。Apple は瀕死の状態を経験し、Adobe は Acrobat 製品を利用して法人向けマーケットを強化した。今日、2つの会社は共通する顧客を満足させるために協力している。Mac ユーザーの約半数は Adboe Creative Suite を購入しているのだ。だが、共通する利益はほとんどないのが現状だ。

なぜ Flash を iPhone OS に採用しないのか。顧客と批評家に理解してもらうために、我々の Adobe Flash 製品に対する考えを書き留めておこう。「Apple はビジネス上の判断で Flash を搭載していない」「Apple は App Store を守りたいのだ」と Adobe は主張している。しかし、実際には、技術的な問題が理由である。「Apple はクローズドであり、Flash はオープンである」と Adobe は主張する。しかし、実際には逆である。説明していこう。

**1. Flash はオープンじゃない
Adobe の Flash は 100% プロプライエタリな製品である。Flash は Adobe のみが提供し、Adobe のみが将来的な機能拡張や値段付けなどを決定できる。Flash は多くの環境で利用可能ではあるが、だからといってオープンとは言えない。なぜなら、Flash は Adobe によって完全に制御されているし、Adobe のみが提供しているものだからだ。どのように定義しようと、Flash はクローズドなシステムである。

Apple の製品もプロプライエタリである。iPhone OS はプロプライエタリであるが、我々は Web に関連する標準は全てオープンでなければならないと強く信じている。Apple は Flash を捨て、オープンな標準である HTML5・CSS・JavaScript を選択した。Apple のモバイル端末はこれらの標準の高性能・低電力な実装を搭載している。HTML5 は新しい Web 標準であり、Apple や Google などの多くの会社が採用している。HTML5 を利用すれば、Flash のようなサードパーティーのプラグインなしに、グラフィックやタイポグラフィ・アニメーション・トランジッションを実現できる。HTML5 は完全にオープンであり、Apple も参加している標準化委員会によって管理されている。

Apple はまさにオープンな Web 標準を作っているところなのだ。例えば、Apple は WebKit を開発した。WebKit は完全にオープンソースな HTML5 のレンダリングエンジンであり、Apple の全ての製品に含まれるブラウザ Safari の心臓部分である。WebKit は広く採用されている。Google が Android のブラウザとして利用し、Palm も利用し、Nokia も利用し、RIM (Blackberry) は将来利用すると発表している。Microsoft 以外のほぼ全てのスマートフォンのブラウザが WebKit を採用している。WebKit の技術をオープンにすることで、Apple はモバイル端末のブラウザの標準となった。

**2. 全ての Web を見るために本当に Flash は必要か？
Adobe は「75% の Web 上のビデオは Flash ベースであり、Apple のモバイル端末は『全ての Web』にアクセスできない」と繰り返し主張してきた。しかし実際には、ほとんどのビデオは、よりモダンなフォーマットである H.264 でも提供されており、iPhone OS 閲覧できるのだ。Web 上の 40% のビデオを占める YouTube は Apple の全てのモバイル端末で再生できるし、iPad は YouTube の優れたユーザー体験を提供している。さらに、Vimeo, Netflix, Facebook を加え、ABC, CBS, CNN, MSNBC, Fox News, ESPN, NPR, Time, The New York Times, The Wall Street Journal, Sports Illustrated, People, National Geographic を加えると、iPhone OS のユーザーはほとんどのビデオを閲覧できているのだ。

Adobe は「Apple の端末では Flash ゲームができない」とも主張する。これは事実である。ただ、幸運にも App Store には5万以上のゲームやエンターテイメントのタイトルがあり、この多くは無料である。iPhone OS は世界中の他のどのプラットフォームよりも、ゲームやンターテイメントのタイトルが多いのだ。

**3. セキュリティとパフォーマンスを犠牲にしたくない
シマンテックは2009年、最もセキュリティが低い製品の１つとして Flash を取り上げた。我々は Mac がクラッシュする原因の１位が Flash であることを身をもって知っている。我々は Adobe と協力して修正に努めてきたが、現在も解決しないまま歳月が流れている。我々は iPhone OS の信頼性やセキュリティを確保するために、Flash を搭載していないのだ。

さらに、モバイル端末では Flash のパフォーマンスがよくない。我々は継続的に Adobe に対して「Flash がモバイル端末で正しく動作するところを見せてくれ」と要求してきたが、いまだに見れていないのである。Adobe の広報は次のように言っていた。「Flash は 2009年初期にはスマートフォンに搭載される」「2009年下半期には搭載される」「2010年前半には搭載される」…。そして今、「2010年後半には搭載される」と言っている。最終的には搭載されるとは考えているが、我々がそれを待っていなくてよかった、と安心している。そのような状況なのだから、Flash の性能がどうなるかなんて、誰が分かるんだろうか？

**4. Flash を使うとバッテリーが持たない
ビデオ再生中にもバッテリーを長持ちさせるためには、ハードウェアデコードすることが重要となる。ソフトウェアデコードを行ってしまうと、バッテリーの消費が激しくなる。最近のモバイル端末で利用される多くのチップは H.264 のデコーダを搭載している。H.264 は全ての Blu-ray DVD プレーヤで利用され、Apple や Google(YouTube)、Vimeo・Netflix など多くの会社によって採用されている業界標準である。

Flash も最近になって H.264 に対応した。しかし、Flash サイト上にあるほとんどのビデオを再生するには、モバイルチップが対応していない旧世代のデコーダが必要であり、それはソフトウェアデコードしなければならないことを意味する。これは致命的なことだ。例えば、iPhone では H.264 ビデオなら10時間再生できるのに、ソフトウェアデコードを行うと5時間ももたずにバッテリーを使いきってしまう。

Web サイトが H.264 を利用してビデオを再エンコードしてくれれば、Flash は必要なくなる。Safari や Google Chrome のようなブラウザではプラグインなしにビデオを再生できるし、iPhone OS でも再生できる。

**5. Flash はタッチを前提としていない
Flash は PC 上でマウスを利用することを前提として設計された。そのため、タッチスクリーン上での指を使った操作に対応していない。例えば、多くの Flash サイトは「ロールオーバー」に頼っており、特定の場所にマウスを持っていくとポップアップメニューなどが表示される。Apple の革新的なマルチタッチインターフェースにはロールオーバーの概念は存在しない。そのため、Flash サイトの多くは、iPhone OS で閲覧するためには、タッチ対応に再構築しなければならない。もし、開発者が Flash サイトを再構築するなら、HTML5/CSS/JavaScript のようなモダンな技術を使えばよい。

もし、iPhone OS で Flash が動いたとしても、多くの Flash サイトをタッチに対応させるために再構築しなおさなければならない、という問題は残っているのだ。

**6. 一番重要な理由
ここまで、Flash がクローズドでプロプライエタリであり、技術的な欠点があり、タッチに対応していない、と述べてきた。それ以上に、我々が iPhone OS に Flash を搭載しない重要な理由がある。Adobe は Flash を利用して我々のモバイル端末上でアプリケーションを開発するよう開発者に望んでいる。

プラットフォームと開発者の間に、Adobeのようなサードパーティーの中間層が挟まると、低水準のアプリケーションが生まれ、プラットフォームの進化が止まってしまうのだ。例えば、ある開発者がサードパーティーのライブラリやツールを利用して開発したとする。そうすると中間層のライブラリやツールでプラットフォームの新機能がサポートされるまでは、その開発者はプラットフォームの新機能を使えない。新機能を使えるかどうかや、いつ使えるようになるかをサードパーティーの手に任せたくないのだ。(訳注: Packager for iPhone を利用したアプリは、Adobe が対応しない限りは iPhone OS のマルチタスク機能を利用できないことになる)

サードパーティーがクロスプラットフォームな開発環境を提供していると、状況はさらに悪化する。サードパーティーはクロスプラットフォーム環境の全てで利用可能な機能のみを提供するため、１つの環境にしか存在しない機能には対応しないだろう。そのため、開発者は全てのプラットフォームに共通する最低限の機能しか利用できないことになる。他のプラットフォームには提供されていない機能である、という理由だけで、Apple のイノベーションや進化から開発者が遠ざけられることは許しがたい。

Flash はクロスプラットフォームな開発ツールである。Adobe の目的は「優れた iPhone OS 用アプリケーションを生み出すこと」ではない。Adobe の本当の目標は「開発者がクロスプラットフォームでアプリケーションを開発する手助けをする」ことである。また、Adobe は Apple のプラットフォームの進化への対応が著しく遅い。たとえば、Mac OS X は約10年前に公開されたにも関わらず、Adobe は 2週間前に発表した CS5 でやっと Mac OS X (Cocoa) に完全に対応した。メジャーなサードパーティーの中では Adobe が Mac OS X への対応が一番遅かった。

我々のモチベーションは単純だ。世界一進化した革新的なプラットフォームを開発者が直接利用することで、世界一素晴らしいアプリを作成してもらいたい。素晴らしいアプリケーションを開発してもらうために、我々は継続的にプラットフォームを進化させていく。Apple は素晴らしいアプリケーションを利用して多くの端末を売ることができるし、開発者はより多くのユーザーにリーチできるし、ユーザーは素晴らしいアプリケーションで喜ぶことができる。Apple も開発者も顧客の誰もが喜ぶ。

**結論
Flash は PC 時代にマウスのために作られたものだ。Adobe が Flash の成功を PC の外に広げたい気持ちは理解できる。しかし、モバイルの時代には、低消費電力、タッチ、オープンな Web 標準が求められており、Flash では実現できないのだ。

多くのメディア企業が Apple のモバイル端末にコンテンツを提供しており、Flash はもはやビデオや Web コンテンツの閲覧には不要である。20万ものアプリケーションが App Store には存在しており、何万人もの開発者が Flash を利用せずともアプリケーションやゲームを作成している。

HTML5 のような新しい標準はモバイル端末(とPC)で成功を収めるだろう。できれば Adobe には HTML5 に対応した優れたツールを作成していただき、Apple の進化を批判するのは控えてもらいたいものだ。

スティーブ ジョブズ

2010年4月
&lt;&lt;

個人的には「5. Flash はタッチを前提としていない」は確かにその通りだと思うし、Flash に致命的なセキュリティーホールが多いのも事実なので、iPhone に Flash が載ってないのは理解できる。

ただ、「中間層があるとプラットフォームの進化が止まる」という主張には賛同しかねる。Apple は中間層を無視してプラットフォームを進化させたらいい。本当に革新的な進化に自信があるのならば、Apple は全ての中間層を許可した上で、iPhone SDK を直接使った革新的なアプリケーションのほうが App Store で人気になることを証明すればいい。そうじゃなく最初から締め出そうとするのは、プラットフォームの機能をフルに利用しないアプリケーションでもヒットしてしまうことを知っているからではないのだろうか。

誤字脱字、誤訳などの突っ込みはコメント欄または [twitter:@nitoyon] まで。

**関連記事
和訳に当たっては、次の２つの記事を参考にさせていただきました。
-[http://japanese.engadget.com/2010/04/29/flash/:title]
-[http://applembp.blogspot.com/2010/04/appleflash.html:title]
</body>
<comments>
<comment>
<username>高峰 裕</username>
<body>和訳文、読ませて頂きました。&lt;br&gt;当方、英語文を読むのが苦手なので、和訳文はすごく有り難く感じました。&lt;br&gt;&lt;br&gt;誤字、と言うのかどうか分かりませんが&lt;br&gt;文章的に気になったところがあったので、ご報告させて頂きます。&lt;br&gt;&lt;br&gt;『6. 一番重要な理由』の４段落目&lt;br&gt;「Flash はクロスプラットフォームは開発ツールである。」とありますが&lt;br&gt;「クロスプラットフォームな開発ツール」の打ち間違いなのでしょうか？</body>
<timestamp>1272597667</timestamp>
</comment>
<comment>
<username>sumio</username>
<body>adobe は、Windows/MacOSX のアプリを同じように開発するための開発環境（ライブラリ）を持っていて、アプリは殆どそのAdobeのライブラリをコールする形で作られています。MacOSX 版の CS の64bit 対応が遅れたのは、その開発環境がCarbon という古いAPIを使っており、Adobeは、64bit 対応の遅れなどに関して、開発環境が新しいApple のAPIに対応していない事を遅れの理由にしていたのは有名な話です。&lt;br&gt;Jobs の指摘はまさにこの事を指しており、Adobeはこの件について反論できないのではないかと思います。</body>
<timestamp>1272614920</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>&gt; プラットフォームと開発者の間に、Adobeのようなサードパーティーの中間層が挟まると、低水準のアプリケーションが生まれ、プラットフォームの進化が止まってしまうのだ&lt;br&gt;&lt;br&gt;&lt;br&gt;すごいなぁｗ&lt;br&gt;システム屋の自分は唖然としてしまいましたｗ&lt;br&gt;&lt;br&gt;OSとサードパーティーってのは、競争し合って、互いに挫折し合って伸びていくものだと思っていたけど・・&lt;br&gt;&lt;br&gt;macに対するflashの対応についても、flash開発側にとって、macの機能に対応する事に対して、メリットが少ないと判断したから対応が遅れたんでしょうに。&lt;br&gt;&lt;br&gt;で、あればmac側はflash側が「対応したくなる」ように進化すべきでしょうに。&lt;br&gt;&lt;br&gt;apple、今はいいけど、そんな上から目線では、世の中の進歩から遅れをとってしまうのでは・・・</body>
<timestamp>1272620193</timestamp>
</comment>
<comment>
<username>k</username>
<body>&gt;ただ、「中間層があるとプラットフォームの進化が止まる」という主張には賛同しかねる。Apple は中間層を無視してプラットフォームを進化させたらいい。本当に革新的な進化に自信があるのならば、Apple は全ての中間層を許可した上で、iPhone SDK を直接使った革新的なアプリケーションのほうが App Store で人気になることを証明すればいい。そうじゃなく最初から締め出そうとするのは、プラットフォームの機能をフルに利用しないアプリケーションでもヒットしてしまうことを知っているからではないのだろうか。&lt;br&gt;&lt;br&gt;　これはジョブスの弁を「ヒットする、しない」の問題にすり替えてしまっていますよ。ジョブスはこの文章において人気が出るアプリのためにとかは書いてません。&lt;br&gt;　そもそもどの開発環境でアプリを作ればヒットするのかなんてわかりません。特定の開発環境で作ればヒットするならみんなそれを支持しますけど、そんなものはないでしょう？（それともあるのかな？）iPhone SDKを直接使おうと、中間層を使おうと『人気が出るかどうかには全く関係ない（ジョブスもそんなこと書いてない）』。&lt;br&gt;　ジョブスの書いているのは中間層がボトルネックになるってことです。確かに「中間層があるとプラットフォームの進化が止まる」というのは言い過ぎです（停滞するとか煩わしい位）が、いきなりアプリの人気の話にすり替えるのはおかしいですね。</body>
<timestamp>1272636235</timestamp>
</comment>
<comment>
<username>まさひろ</username>
<body>6.一番重要な理由について、訳注でPackage for iPhoneのことを指していると書かれていますが、Flash(Flash Builder)そのもののことではないでしょうか。Package fo iPhone は最近発売されたばかりで、それが最重要理由というのは、辻褄が合わないように思います。</body>
<timestamp>1272650430</timestamp>
</comment>
<comment>
<username>三田皓司</username>
<body>「なぜAppleはiPadに Flashを載せるべきではない」のか&lt;br&gt;というブログもあります。http://satoshi.blogs.com/life/page/3/&lt;br&gt;参考にしてはいかがです。</body>
<timestamp>1272670679</timestamp>
</comment>
<comment>
<username>yutakarlson104</username>
<body>■AppleのJobs CEO、モバイル端末におけるFlash拒否の理由を公開書簡で説明―アップルやGoogleの長期戦略の中に&quot;Flash&quot;はない?&lt;br&gt;ブログ名:Funny Restaurant 犬とレストランとイタリア料理&lt;br&gt;こんにちは。ジョブスがFlash拒否の理由を公開書簡で説明しました。これは、いろいな憶測や論争を生み出しているようですが、ビジネスや利益という側面から考えてみれば、当然のことだと思います。特に私が「水道の蛇口戦略」などと呼んでいる、AppleやGoogleの長期戦略においては、Adbeに中核的技術が握られているということは不味いことなのだと思います。だからこそ、これを排して新たな道を模索しているのだと思います。これからも、このような合従連合などが繰り返されて、新たなより便利で、低廉なサービスが開発されていくのだと思います。詳細は是非私のブログを御覧になってください。</body>
<timestamp>1272677104</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; 高峰 裕さま&lt;br&gt;ありがとうございます。修正しました。&lt;br&gt;&lt;br&gt;&gt; k さま&lt;br&gt;確かにその通りですね。&lt;br&gt;&lt;br&gt;&gt; まさひろ さま&lt;br&gt;たしかに、Flash のことも含めているとも解釈できますね。&lt;br&gt;限定しすぎていたので、この部分の訳注を削除しました。&lt;br&gt;ありがとうございます。</body>
<timestamp>1272703773</timestamp>
</comment>
<comment>
<username>よっちゃん</username>
<body>要するプラットホーム非依存のものはHTML5+Javascriptで&lt;br&gt;iPhoneのハードウェアを直接叩くものはObjective-C/C,C++で&lt;br&gt;書いて欲しいといっているだけでは&lt;br&gt;Web標準を考えれば極めてまっとうな話と思うのですが</body>
<timestamp>1272719438</timestamp>
</comment>
<comment>
<username>Ippei</username>
<body>非常にまっとうな話で、賛同ですね。&lt;br&gt;&lt;br&gt;＞プラットフォームの機能をフルに利用しないアプリケーションでもヒットしてしまうこと&lt;br&gt;&lt;br&gt;これはまさに恐ろしいことだと思いますね。&lt;br&gt;&lt;br&gt;これを懸念するのは、わかる気がします。&lt;br&gt;&lt;br&gt;その結果、最新の技術に追いつく必要性が低下し（だって追いつかなくても売れるから）、技術の革新が遅くなることは、明確だと思いますし、Appleのこの姿勢（過去の時代遅れの資産をある意味ふりきろうとしている）は、英断とされる日がくるような気がします。</body>
<timestamp>1273804421</timestamp>
</comment>
<comment>
<username>WM6持ち</username>
<body>プラットフォームの機能を使わないでそれ以外のリソースを無駄に食われてしまうのも怖いんですよねきっと</body>
<timestamp>1277767011</timestamp>
</comment>
<comment>
<username>はじめまして</username>
<body>はじめまして、流離う大阪人と申します。&lt;br&gt;貴兄の書かれておられるジョブスの文章が分かりやすく感服いたしました。&lt;br&gt;事後のご連絡とはなりますが、拙ブログの参考リンクとさせて頂きました。&lt;br&gt;ご了解の程、宜しくお願い申し上げます。</body>
<timestamp>1322797733</timestamp>
</comment>
</comments>
</day>
<day date="2010-06-07" title="">
<body>
*thoughts_on_html5*[HTML5]HTML5 雑感
twitter にちょぼちょぼ書いてたけど改めてまとめてみた。

**HTML5 の捕らえ方
twitter:8541064589:detail
twitter:8541041008:detail
twitter:8929377961:detail

**Apple の Adobe CS5 ブロックに思う
twitter:11882980225:detail
twitter:11855236489:detail

**少し落ち着いて
twitter:13728169907:detail

**私がまだあまり HTML5 に積極的ではない理由
(追記 2010/06/09)
twitter:15720331113:detail

**まとめ
最近、はてなダイアリーに実装された &lt;a href=&quot;http://hatenadiary.g.hatena.ne.jp/keyword/Twitter%E3%81%AE%E3%81%A4%E3%81%B6%E3%82%84%E3%81%8D%E3%81%AB%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%99%E3%82%8B%EF%BC%88twitter%E8%A8%98%E6%B3%95%EF%BC%89&quot;&gt;twitter 記法&lt;/a&gt; を試してみたかっただけ。
</body>
<comments>
<comment>
<username>シロウ</username>
<body>HTML5で初めて可能になった事というは少ないですからね。&lt;br&gt;&lt;br&gt;FlashとHTML5が機能面で対決したら、Flashのコールド勝ちでしょう。&lt;br&gt;&lt;br&gt;canvasも多少嗜みましたが、どう好意的に解釈しても『劣化Flash』でしかありませんでした。&lt;br&gt;&lt;br&gt;それにHTML5はセキュリティ面でも大いに問題があるようです。&lt;br&gt;&lt;br&gt;http://www.publickey1.jp/blog/10/html5javascriptdouglas_crockford.html&lt;br&gt;&lt;br&gt;JSONの発明者がセキュリティの弱さから『現在のHTML5』は放棄すべきと指摘しています。&lt;br&gt;&lt;br&gt;個人的には今回のエントリーに全面的に同意で、今すぐHTML5を学ぶ必要性はないかと思います。</body>
<timestamp>1277232913</timestamp>
</comment>
</comments>
</day>
<day date="2010-07-26" title="">
<body>
*p1*東山三十六峰のマイマップを作った
京都東山の山々のことを東山三十六峰と呼ぶことがあるが、具体的に36個の山が何であるかは諸説あるようだ。

そんな中、小林利臣さんという方が &lt;a href=&quot;http://www.toshiomi.net/h36/h36hikaku.htm&quot;&gt;各種文献を比較&lt;/a&gt;しつつ、&lt;a href=&quot;http://www.toshiomi.net/h36/h36main.htm&quot;&gt;東山三十六峰の位置を特定&lt;/a&gt; されている。この資料は大変興味深いのだけど経度緯度をみただけでは位置を直感的には把握しづらい。

そこで、経度緯度の位置を Google Maps のマイマップ機能を利用して表示してみた。

&gt;&lt;center&gt;&lt;a href=&quot;http://maps.google.com/maps/ms?msa=0&amp;msid=111937657041255095102.000482df07994fceca0ac&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100726/20100726011107.png&quot; width=&quot;450&quot; height=&quot;266&quot;&gt;&lt;br&gt;東山三十六峰&lt;/a&gt;&lt;/center&gt;&lt;

これでそれぞれの山の位置が分かりやすくなった。Google Maps なので拡大して場所の特定もしやすい。

また、Google Earth がインストールされていれば、&lt;a href=&quot;http://maps.google.com/maps/ms?msa=0&amp;msid=111937657041255095102.000482df07994fceca0ac&amp;output=kml&quot;&gt;KML 版&lt;/a&gt; を開くことで、立体感のある表示ができる。Google Earth と連携した使用例は次のキャプチャだ。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100726/20100726011106.jpg&quot; width=&quot;400&quot; height=&quot;259&quot;&gt;&lt;/center&gt;&lt;

私が以前、京都一周トレイルの東山コースを&lt;a href=&quot;http://kyotolife.g.hatena.ne.jp/nitoyon/20100328/1269911725&quot;&gt;七条～三条まで歩いた&lt;/a&gt;ときの GPS データを重ねている。自分が歩いたコースとその近辺の山を見比べてニヤニヤできて非常に楽しい振り返り(＝自己満足)ができた。

ちなみに、マイマップに登録するための経度緯度情報の算出には意外に苦労していて、オリジナルの情報は 34.59580 のように書いてあって 34.59580°なのかと思いきや実は 34°59′58.0″だったり、日本測地系を世界測地系に直さなきゃいけなかったり、36個もあるので手作業で変換するのは大変なのだが、完全に自動化するのは馬鹿馬鹿しくて勢いで簡単なスクリプトを書いてみたりした。
</body>
</day>
<day date="2010-08-26" title="">
<body>
*catlservicemodule*ATL の CAtlServiceModuleT を使ってサービスを作る
Win32 でサービス開発すると、&lt;code&gt;ServiceMain&lt;/code&gt; や &lt;code&gt;Handler&lt;/code&gt; の登録処理などが煩雑で、毎回サンプルコードを探して検索して時間を無駄に浪費してしまう。そこで、ATL に定義されている &lt;code&gt;CAtlServiceModuleT&lt;/code&gt; クラスを使って簡単にサービスを作る方法を確立してみた。

今回のコードは atlbase.h 内の &lt;code&gt;CAtlServiceModuleT&lt;/code&gt; 周辺のソースコードを追いつつ、Visual C++ 2005 と Visual C++ 2008 で動作することを確認している。ただし、Microsoft の意図とは違う使い方をしているので、実戦投入する場合は十分に注意してほしい。

**ソースコード
さっそくソースコード。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|cpp|
#define _ATL_NO_COM_SUPPORT
#include &lt;atlbase.h&gt;
#include &lt;tchar.h&gt;
#define SERVICE_NAME TEXT(&quot;ServiceName&quot;)

class CMyServiceModule : public CAtlServiceModuleT&lt;CMyServiceModule&gt;
{
public:
    HANDLE m_hStopEvent;

    CMyServiceModule()
    {
        m_hStopEvent = NULL;
        _tcscpy_s(m_szServiceName, _countof(m_szServiceName), SERVICE_NAME);
    }

    bool ParseCommandLine(LPCTSTR lpCmdLine, HRESULT* pnRetCode) throw()
    {
        *pnRetCode = S_OK;
        return true;
    }

    HRESULT Start(int nShowCmd) throw()
    {
        SERVICE_TABLE_ENTRY st[] =
        {
            { m_szServiceName, _ServiceMain },
            { NULL, NULL }
        };
        if (::StartServiceCtrlDispatcher(st) == 0)
            m_status.dwWin32ExitCode = GetLastError();
        return m_status.dwWin32ExitCode;
    }

    HRESULT Run(int nShowCmd = SW_HIDE) throw()
    {
        m_hStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
        if (m_hStopEvent == NULL)
        {
            return AtlHresultFromLastError();
        }

        LogEvent(_T(&quot;Service started&quot;));
        SetServiceStatus(SERVICE_RUNNING);

        // ここでワーカー スレッドを作るなり、何らかの処理を実装する

        WaitForSingleObject(m_hStopEvent, INFINITE);
        CloseHandle(m_hStopEvent);

        return S_OK;
    }

    void OnStop() throw()
    {
        SetServiceStatus(SERVICE_STOP_PENDING);
        SetEvent(m_hStopEvent);
    }
};

int WINAPI _tWinMain(HINSTANCE, HINSTANCE, LPTSTR, int nShowCmd)
{
    CMyServiceModule module;

    //if (!module.IsInstalled())
    //    module.Install();

    return module.WinMain(nShowCmd);
}
||&lt;
&gt;&lt;/div&gt;&lt;

**使い方
サービス登録するには、&lt;code&gt;sc create&lt;/code&gt; コマンドを使うか、&lt;code&gt;_tWinMain()&lt;/code&gt; のコメントアウトしてある部分を消して一度実行するとよい。

登録したサービスを [開始] すると、サービスが開始する。現在の実装では何もせずに停止されるのを待機するだけのものとなっている。[停止] を実行すると無事に停止することを確認できる。

**解説
軽く解説していく。&lt;code&gt;atlbase.h&lt;/code&gt; で定義されている &lt;code&gt;CAtlServiceModuleT&lt;/code&gt; のソースと、上に掲載している &lt;code&gt;CMyServiceModule&lt;/code&gt; のソースを見比べると理解できるはず…。

***#include 処理
まずは、&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; が定義されている &lt;code&gt;atlbase.h&lt;/code&gt; を include する。

&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; は ATL で定義される &lt;code&gt;CAtlExeModuleT&lt;/code&gt; を継承したクラスだ。

ATL の XXXXModule クラスは COM に必要な初期化などをやってくれるが、今回は COM は使わないので &lt;code&gt;_ATL_NO_COM_SUPPORT&lt;/code&gt; を事前に define しておく。
====
&gt;|cpp|
#define _ATL_NO_COM_SUPPORT
#include &lt;atlbase.h&gt;
#include &lt;tchar.h&gt;
||&lt;

***クラス定義
&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; は ATL の &lt;code&gt;CComObject&lt;/code&gt; クラスなどと同じように、クラス名をテンプレート引数に渡して継承してやる。

&gt;|cpp|
class CMyServiceModule : public CAtlServiceModuleT&lt;CMyServiceModule&gt;
{
public:
    // 停止用のイベント
    HANDLE m_hStopEvent;

// ...
};
||&lt;

&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; には &lt;code&gt;WinMain&lt;/code&gt; メソッドや、その他のサービス実装に便利なメソッドが定義されている。

ここでは、追加でサービス停止時にシグナル化される &lt;code&gt;m_hStopEvent&lt;/code&gt; を追加で定義してあげた。public なのは気持ち悪いが、&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; クラスの他のフィールドも public なのでそれに合わせる形とした。

***コンストラクタ
&gt;|cpp|
    CMyServiceModule()
    {
        // 停止用のイベントを初期化
        m_hStopEvent = NULL;

        // サービス名を設定
        _tcscpy_s(m_szServiceName, _countof(m_szServiceName), SERVICE_NAME);
    }
||&lt;
&lt;code&gt;m_szServiceName&lt;/code&gt; にサービス名を設定している。

&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; のコンストラクタには、リソースからサービス名を取得する実装があるのだが、リソースに依存するのは不便だったので、自力でサービス名を設定するようにしておいた。これでリソースがなくても、&lt;code&gt;m_szServiceName&lt;/code&gt; にサービス名が設定される。&lt;code&gt;ServiceName&lt;/code&gt; のところは自分で作るサービス名に適宜置き換えるべし。

***エントリポイント
ここでアプリケーションのエントリポイントを見ておく。
&gt;|cpp|
int WINAPI _tWinMain(HINSTANCE, HINSTANCE, LPTSTR, int nShowCmd)
{
    // サービス モジュールのインスタンスを作成
    CMyServiceModule module;

    // サービスをインストールするには次のようにする
    //if (!module.IsInstalled())
    //    module.Install();

    // モジュールの WinMain に処理を委譲すうｒ
    return module.WinMain(nShowCmd);
}
||&lt;

単純に処理を &lt;code&gt;CAtlServiceModuleT::WinMain&lt;/code&gt; に委譲している。呼ばれた &lt;code&gt;CAtlServiceModuleT::WinMain()&lt;/code&gt; は、「&lt;code&gt;CAtlServiceModuleT::GetCommandLine()&lt;/code&gt; を実行し、成功すれば &lt;code&gt;CAtlServiceModuleT::Start()&lt;/code&gt; を呼ぶ」という実装になっている。

コメントアウトされてる部分はサービスの登録処理だ。必要に応じて活用してもよいだろう。

***ParseCommandLine メソッド
&lt;code&gt;CAtlServiceModuleT::GetCommandLine()&lt;/code&gt; は COM サーバーとして登録するための処理を実装しているので、次のように何もしない処理でオーバーライドした。

&gt;|cpp|
    bool ParseCommandLine(LPCTSTR lpCmdLine, HRESULT* pnRetCode) throw()
    {
        *pnRetCode = S_OK;
        return true;
    }
||&lt;

***Start メソッド
&lt;code&gt;CAtlServiceModuleT::Start()&lt;/code&gt; は、「サービスの登録を行う」以外にも、「レジストリの &lt;code&gt;HKCR\AppID&lt;/code&gt; から COM サーバーの情報を読み出してサービスかどうか判定する」という処理が入っている。

そこで、「サービスを登録を行う」部分だけを抜き出してオーバーライドしている。
&gt;|cpp|
    HRESULT Start(int nShowCmd) throw()
    {
        SERVICE_TABLE_ENTRY st[] =
        {
            { m_szServiceName, _ServiceMain },
            { NULL, NULL }
        };
        if (::StartServiceCtrlDispatcher(st) == 0)
            m_status.dwWin32ExitCode = GetLastError();
        return m_status.dwWin32ExitCode;
    }
||&lt;

この部分で StartServiceCtrlDispatcher() API を使って _ServiceMain を登録する。

CAtlServiceModuleT::_ServiceMain() は Handler を登録して、成功すれば Run() を呼び出すようになっている。次は Run() の実装を見ていく。

***Run メソッド
CAtlServiceModuleT::Run() ではメッセージ ループを使った実装があるが、ここではシンプルな独自定義を行うことにした。

&gt;|cpp|
    HRESULT Run(int nShowCmd = SW_HIDE) throw()
    {
        // イベントを作成
        m_hStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
        if (m_hStopEvent == NULL)
        {
            return AtlHresultFromLastError();
        }

        // サービス起動成功
        LogEvent(_T(&quot;Service started&quot;));
        SetServiceStatus(SERVICE_RUNNING);

        // ここでワーカー スレッドを作るなり、何らかの処理を実装する

        // イベントがシグナル化するまで待機する
        WaitForSingleObject(m_hStopEvent, INFINITE);
        CloseHandle(m_hStopEvent);

        return S_OK;
    }
||&lt;

***OnStop メソッド
サービス停止が要求されると、&lt;code&gt;OnStop()&lt;/code&gt; メソッドが呼ばれる。このあたりの流れは、&lt;code&gt;CAtlServiceModuleT::Handler()&lt;/code&gt; の実装を確認するとよい。

ここでは &lt;code&gt;OnStop()&lt;/code&gt; のデフォルト実装をオーバーライドし、停止通知用のイベントをシグナル化している。
&gt;|cpp|
    void OnStop() throw()
    {
        SetServiceStatus(SERVICE_STOP_PENDING);
        SetEvent(m_hStopEvent);
    }
||&lt;

***その他
&lt;code&gt;LogEvent()&lt;/code&gt; ではデフォルトでイベントログに出力するが、これもオーバーライドしてもよいかもしれない。

**まとめ
繰り返しになるが、&lt;code&gt;CAtlServiceModuleT&lt;/code&gt; クラスの内部実装に依存した形で活用しているので注意してもらいたい。メンテナンス性を考えると独自ラッパーを作ったほうが安心かもしれない。その場合にも &lt;code&gt;CAtlServiceModuleT&lt;/code&gt; の実装はかなり参考になるはずだ。

**追記
この記事を書いたあとに知ったのですが、Microsoft が公開するサンプルコード集、&lt;a href=&quot;http://1code.codeplex.com/&quot;&gt;All-In-One Code Framework&lt;/a&gt; に C++ で実装するサービスのサンプル「&lt;code&gt;CppWindowsService&lt;/code&gt;」が含まれています。ATL と似た &lt;code&gt;CServiceBase&lt;/code&gt; クラスと、それを継承した &lt;code&gt;CSampleService&lt;/code&gt; クラスのコードがあるので参照してみるとよいでしょう。
-&lt;a href=&quot;http://1code.codeplex.com/SourceControl/changeset/view/54555#986932&quot;&gt;ServiceBase.cpp (Change Set 54555)&lt;/a&gt;

</body>
</day>
<day date="2010-09-24" title="">
<body>
*wikipedia_db_table*Wikipedia が記事の履歴をどのように DB に格納してるか調べてみた
Wikipedia は過去の編集履歴もサイト上から確認できるようになっているのだが、どのようなデータ構造で情報を保存しているのか気になって調べてみた。

**MediaWiki を見ればいい
Wikipedia のソースコードは &lt;a href=&quot;http://www.mediawiki.org/wiki/MediaWiki/ja&quot;&gt;MediaWiki&lt;/a&gt; として公開されているので、これのソースコードを見たり、試しに動かしたりして把握していった。

MediaWiki は PHP で開発されている。今回は調査時点での最新バージョン 1.16.0 を利用して調査した。

**と思ったら MediaWiki に DB 構造が書いてある
記事のデータやユーザー情報は全て DB(PostgreSQL or MySQL or SQLite) に保存されるようだ。手っ取り早く SQLite を使ってローカル環境で動かしてみて DB を覗いてみた。
DB を眺めつつ、いろいろ調べてたら MediaWiki のサイト上にテーブル構造を示したドキュメントがあったので、実はこれで十分だった。
-[http://www.mediawiki.org/wiki/Page_table/ja:title=Pageテーブル]
-[http://www.mediawiki.org/wiki/Revision_table/ja:title=Revisionテーブル]
-[http://www.mediawiki.org/wiki/Text_table/ja:title=Textテーブル]

が、それだけではつまらないので、念のため理解した内容をメモしておく。

**ページ名から最新のテキストを取得するときの流れ
ページ名から最新のテキストを取得するときには、DB を
&gt;|
  page テーブル
   (ページ一覧)
       ↓
revision テーブル
(ページの変更履歴)
       ↓
  text テーブル
(過去のテキストを含めた
 全てのページのテキスト)
|&lt;
の順に引いていく。
+ページ名から page テーブルのレコードを取得する。レコードには page_id, page_latest(最終更新リビジョンID) が含まれている。
+page_latest から revision テーブルのレコードを取得する。レコードには rev_text_id が含まれている。
+rev_text_id が分かれば、あとは text テーブルから文字列を取得する

過去のテキストを取得するなら、ページ ID をキーにして revision テーブルから履歴一覧を取得し、それに対応する rev_text_id から文字列を取得できる。text テーブルには過去のテキストも含めて全てごっちゃ混ぜに格納されている。

いずれにしてもページ名からテキストを取得するには３回のクエリが必要になる。Wikipedia のページを見るたびに３回もクエリしてたら DB の負荷が大変そうなので、MediaWiki には未ログインの人が見るデータをキャッシュする仕組みが用意されていた。
</body>
</day>
<day date="2010-09-28" title="">
<body>
*html5_shodo*[HTML5]HTML5 で書道が楽しめる The Shodo の完成度がすごい
ちまたでは HTML5 が話題ですね。

「HTML5 ではこんなこともできます」といった紹介はいろんなところでみかけますが、「じゃあ、ぶっちゃけ、どんなサイトが作れるのよ」のイメージが沸きにくい人も多いのではないでしょうか。そんな中、HTML5 の機能を活用した完成度の高いサイトが登場していました。

その名も &lt;a href=&quot;http://www.theshodo.com/&quot;&gt;The Shodo&lt;/a&gt;。

&gt;&lt;center&gt;&lt;a href=&quot;http://www.theshodo.com/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100928/20100928013926.png&quot;&gt;&lt;br&gt;The Shodo (http://www.theshodo.com/)&lt;/a&gt;&lt;/center&gt;&lt;

**ブラウザ上で書道体験
The Shodo ではこんな感じにブラウザ上で書道を楽しむことができます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100928/20100928013928.jpg&quot;&gt;&lt;/center&gt;&lt;

書くときにカーソルの位置に手が大きめに表示されるのが本当に書道している気分にさせてくれます。

硯をクリックして色の濃さを選んだり、筆をクリックして筆の太さを選んだりもできます。
====
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100928/20100928013929.jpg&quot;&gt;&lt;/center&gt;&lt;

**ちょっとした動画や BGM が雰囲気を盛り立てる
&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20100928/20100928014028.jpg&quot; width=&quot;180&quot; height=&quot;367&quot; align=&quot;right&quot;&gt;&lt;

トップページで [Write] を選ぶと書き始められるのですが、最初に動画で墨を擦って筆に浸す様子が表示されます。書く前に気持ちを落ち着かせて精神を統一させろ、ということなのでしょうか。

他にも、サイトのトップページを表示した瞬間、白いキャンバスに墨でバサッ、バサッと描かれるような一瞬のアニメーションが表示されたりと、このサイトでは動画が効果的に使われています。

このようなページに溶け込むように動画を埋め込む表現は、今まで Flash の専売特許だったのですが、HTML5 の &lt;code&gt;video&lt;/code&gt; タグのおかげで Flash を使わなくても可能になってきています。

ちょっとしたアクセントに動画をうまく使っていて、Flash を使わなくてもここまでできるのか…と感心してしまいました。

また、一部のブラウザでは &lt;code&gt;audio&lt;/code&gt; タグで BGM が再生されるので、これもまた雰囲気を盛り立てています。
&gt;&lt;br clear=&quot;all&quot;&gt;&lt;

**twitter 連携やリプレイ機能も
作った作品を twitter に投稿したり、ギャラリーに掲載したり、ギャラリーで他人の作品をリプレイしたり…。機能豊富です。

**実は IE9 beta のキャンペーン サイト
実はこのサイト、IE9 の可能性を伝えるために日本の &lt;a href=&quot;http://www.b-architects.com/&quot;&gt;Business Architects&lt;/a&gt; 社が作ったサイトのようです。

手元の PC は Windows XP だったので IE9 beta はインストールできなかったのですが、Firefox や Google Chrome でも問題なく動いています。IE9 でも同様に表示できるようになると思うとワクワクしてきます。

ITmedia の記事によると
&gt;http://plusd.itmedia.co.jp/pcuser/articles/1009/17/news043_5.html:title&gt;
ライバルの“主要Webブラウザ”では、遅くてまともに使えない
&lt;&lt;
だそうなので、IE9 ではかなり高速に動くようです。といっても IE9 に向けて最適化してるはずで、一概に IE9 がマンセーとは言い切れないですが、あの悪名が高かった IE でここまで動くというのは素晴らしいことです。

IE9 の他のサンプルは &lt;a href=&quot;http://www.beautyoftheweb.com/&quot;&gt;Beauty of the Web&lt;/a&gt; という特設サイトに掲示されているようです。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
-&lt;a href=&quot;http://www.theshodo.com/&quot;&gt;The Shodo&lt;/a&gt;
-&lt;a href=&quot;http://twitter.com/#search?q=%23theshodo&quot;&gt;twitter の #theshodo ハッシュタグ&lt;/a&gt;
-[http://bakera.jp/ebi/topic/4246:title]
-[http://plusd.itmedia.co.jp/pcuser/articles/1009/17/news043.html:title]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2010-12-20" title="">
<body>
*gae_datastore_interactive_shell*Google App Engine で Datastore を Python 対話シェルから参照する
いまさらながらに Google App Engine をちょろちょろと触っている。

Datastore を対話シェルから使えると便利そうなので、やり方を確立してみた。

結論としては次のコードを対話シェル上で実行すれば使えるようになった。(Google App Engine SDK for Python Windows 版 1.4.0 にて確認)
&gt;|python|
import os
import sys
import tempfile

DIR_PATH = r&quot;C:\Program Files\Google\google_appengine&quot;
APP_ID = &quot;helloworld&quot;

sys.path += [
  DIR_PATH,
  os.path.join(DIR_PATH, 'lib', 'antlr3'),
  os.path.join(DIR_PATH, 'lib', 'django'),
  os.path.join(DIR_PATH, 'lib', 'fancy_urllib'),
  os.path.join(DIR_PATH, 'lib', 'ipaddr'),
  os.path.join(DIR_PATH, 'lib', 'webob'),
  os.path.join(DIR_PATH, 'lib', 'yaml', 'lib'),
]
from google.appengine.api import apiproxy_stub_map,datastore_file_stub

os.environ['APPLICATION_ID'] = APP_ID

datastore_path = os.path.join(tempfile.gettempdir(), 'dev_appserver.datastore')
apiproxy_stub_map.apiproxy = apiproxy_stub_map.APIProxyStubMap()
datastore = datastore_file_stub.DatastoreFileStub(APP_ID, datastore_path)
apiproxy_stub_map.apiproxy.RegisterStub('datastore_v3', datastore)
||&lt;
Windows 版以外でも、&lt;code&gt;DIR_PATH&lt;/code&gt; のところをインストール先のパスに変更すれば動くと思う。&lt;code&gt;APP_ID&lt;/code&gt; は &lt;code&gt;helloworld&lt;/code&gt; にしているが、自分のアプリケーションの ID に変えると、ローカルでテスト中のデータを読み取れる。

こんな感じに試せて嬉しい。
&gt;|python|
&gt;&gt;&gt; from google.appengine.ext import db
&gt;&gt;&gt; class A(db.Model):
...     t = db.StringProperty()
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.t = 'test'
&gt;&gt;&gt; a.put()
datastore_types.Key.from_path(u'A', 1L, _app=u'helloworld')
&gt;&gt;&gt; a.key().id()
1L
&gt;&gt;&gt; a.t
'test'
&gt;&gt;&gt; A.all().count()
1
||&lt;
Web から使う DB と同じものを参照しているので、Web で設定した内容をインタラクティブ シェル上で確認することもできて嬉しい。

**スクリプトを作るまで
====
何も考えずにスクリプト パスを通して DataStore の API を叩いてみると次の例外が発生した。
&gt;|
google.appengine.api.datastore_errors.BadArgumentError: app must not be empty.
|&lt;

datastore_types.py にて次のようにして APPLICATION_ID を参照していたので、
&gt;|python|
def ResolveAppId(app):
  &quot;&quot;&quot;Validate app id, providing a default.
  (snip)
  &quot;&quot;&quot;
  if app is None:
    app = os.environ.get('APPLICATION_ID', '')
  ValidateString(app, 'app', datastore_errors.BadArgumentError)
  return app
||&lt;
MS-DOS 上で環境変数 APPLICATION_ID を設定してやった。
&gt;|
set APPLICATION_ID=test
|&lt;

すると、次のようなエラーが。
&gt;|
AssertionError: No api proxy found for service &quot;datastore_v3&quot;
|&lt;
このへんで諦めつつ検索したら、[http://tech.einaregilsson.com/2010/10/11/unit-testing-model-classes-in-google-app-engine/:title] に単体テストの手順があったのでソースを奪ってきた。

ここのソースでは DatastoreFileStub に &lt;code&gt;'/dev/null'&lt;/code&gt; を渡していて、一時的な DataStore を作成していた。(&lt;code&gt;'/dev/null'&lt;/code&gt; と聞くと Windows では動かなさそうに見えたが、App Engine SDK で &lt;code&gt;'/dev/null'&lt;/code&gt; のときは特別扱いしていたので関係ない)

今回は Web 側のデータを読み込みたかったので、SDK のソースを辿っていたら、&lt;code&gt;tools\dev_appserver_main.py&lt;/code&gt; に DataStore として
&gt;|python|
os.path.join(tempfile.gettempdir(),
             'dev_appserver.datastore'),
||&lt;
が利用されてることが分かったので、この値を利用するようにしてみた。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**関連エントリ
-[http://d.hatena.ne.jp/nitoyon/20101230/gae_interactive_console_shortcut:title=Google App Engine の Interactive Console で Ctrl-Enter で実行させる]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2010-12-22" title="">
<body>
*regsetvalueex_cbdata_size*[win32]レジストリに RegSetValueEx で REG_SZ を設定するときのバイト数
Windows でレジストリにデータを格納するときに使う &lt;code&gt;RegSetValueEx()&lt;/code&gt; 関数を掘り下げてみた。RegSetValueEx() の定義は次のようになってる。
&gt;|cpp|
LONG RegSetValueEx(
  HKEY    hKey,        // キーのハンドル
  LPCTSTR lpValueName, // 値の名前
  DWORD   Reserved,    // NULL
  DWORD   dwType,      // 種類
  LPCBYTE lpData,      // 値のデータ
  DWORD   cbData       // 値のデータのサイズ
);
||&lt;

MSDN によると、&lt;code&gt;cbData&lt;/code&gt; については、
&gt;http://msdn.microsoft.com/en-us/library/aa916717.aspx:title&gt;
If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, cbData must include the size of the terminating null character or characters.
&gt;http://msdn.microsoft.com/ja-jp/library/cc429936.aspx:title&gt;
データの種類が REG_SZ、REG_EXPAND_SZ、REG_MULTI_SZ のいずれかである場合、cbData パラメータで終端の NULL のサイズも含めなければなりません。 
&lt;&lt;
&lt;&lt;
とあるだけで、&lt;code&gt;NULL&lt;/code&gt; のサイズを含めない場合にどうなるのかが分からなかった。

そこで、&lt;code&gt;dwType&lt;/code&gt;(種類)が REG_SZ のときに &lt;code&gt;lpData&lt;/code&gt;(値のデータ) と &lt;code&gt;cbData&lt;/code&gt;(値のデータのサイズ) を変化させたときの挙動を調べてみた。
====
**正常なケース
REG_SZ を格納するときには &lt;code&gt;cbData&lt;/code&gt; には NULL 文字を含めたバイト数を渡してあげる必要がある。

&lt;code&gt;test&lt;/code&gt; を書き込むにはそれぞれ次のようなパラメータを与えると、ANSI の場合には5バイト分、Unicode の場合には10バイト分がレジストリに書き込まれる。
|*変数名|*パラメータ|
|&lt;code&gt;lpData&lt;/code&gt;|&lt;code&gt;TEXT(&quot;test&quot;)&lt;/code&gt;|
|&lt;code&gt;cbData&lt;/code&gt;|&lt;code&gt;5 * sizeof(TCHAR)&lt;/code&gt;|

書き込みに成功したあと、&lt;code&gt;RegQueryValueEx&lt;/code&gt; を利用すると、実際に何バイト書き込まれたかどうかを調べることができる。上記の呼び出しでは、ANSI で5バイト、Unicode で10バイトが格納されており、NULL 文字も含めてレジストリ上に書き込まれたことが分かる。

以下、自作テストツールの出力(ANSI の場合)。NULL 文字は _ で表現した。
&gt;|
 set 5 bytes = test_ (74 65 73 74 00) -&gt; wrote 5 bytes
|&lt;
5バイト(&lt;code&gt;&quot;test&quot;&lt;/code&gt;書き込んだら、ちゃんと5バイト分書き込めていた、という出力になっている。

**NULL 文字のサイズを含めるのを忘れた場合
&lt;code&gt;test&lt;/code&gt; を書き込むには &lt;code&gt;cbData&lt;/code&gt; に5文字分のバイト数を渡さなきゃいけないのだけど、忘れちゃうケースはよくあるだろう。

この点に配慮してか、&lt;code&gt;RegSetValueEx()&lt;/code&gt; 関数は &lt;code&gt;cbData&lt;/code&gt; バイト目に NULL 文字がなく、その次が NULL 文字の場合に限り、レジストリに書き込む文字数をこっそり１増やすようだ。

次のような値で書き込むと、
|*変数名|*パラメータ|
|&lt;code&gt;lpData&lt;/code&gt;|&lt;code&gt;TEXT(&quot;test&quot;)&lt;/code&gt;|
|&lt;code&gt;cbData&lt;/code&gt;|&lt;code&gt;4 * sizeof(TCHAR)&lt;/code&gt;|
4バイトだけ書き込んだはずなのに、&lt;code&gt;RegQueryValueEx()&lt;/code&gt; を呼び出すと NULL 文字を含んだバイト数が書き込まれていたことが分かった。
&gt;|
 set 4 bytes = test_ (74 65 73 74 00) -&gt; wrote 5 bytes
|&lt;
4バイト(&lt;code&gt;&quot;test&quot;&lt;/code&gt;書き込んだら、なぜか5バイト分書き込めていた、という状態。

余計なおせっかいと言ってしまえばそれまで。

**さらに小さいサイズを指定した場合
さらに１バイト減らしてみた。&lt;code&gt;test&lt;/code&gt; を書き込むのに &lt;code&gt;cbData&lt;/code&gt; に3文字分のバイト数を渡すとどうなるか。
|*変数名|*パラメータ|
|&lt;code&gt;lpData&lt;/code&gt;|&lt;code&gt;TEXT(&quot;test&quot;)&lt;/code&gt;|
|&lt;code&gt;cbData&lt;/code&gt;|&lt;code&gt;3 * sizeof(TCHAR)&lt;/code&gt;|
この場合は NULL 文字を含まない形でレジストリに格納される。
&gt;|
  set 3 bytes = test_ (74 65 73 74 00) -&gt; wrote 3 bytes
|&lt;

このとき、レジストリ上には test のうちの何文字が格納されているのだろうか。末尾に NULL は付加されているのだろうか。

3文字分のバッファを渡して &lt;code&gt;RegQueryValueEx()&lt;/code&gt; で取得すると NULL を含まない形で &lt;code&gt;tes&lt;/code&gt; の3文字が返ってきた。
&gt;|
query 3 bytes = tesﾌﾌ (74 65 73 cc cc) (lpcbData=3)
|&lt;

一方、NULL 文字を格納する余地を含んだバッファを &lt;code&gt;RegQueryValueEx()&lt;/code&gt; に渡してあげると、NULL 文字が追加された &lt;code&gt;tes\0&lt;/code&gt; が返ってきた。
&gt;|
query 5 bytes = tes_ﾌ (74 65 73 00 cc) (lpcbData=3)
|&lt;
ただ、このときの &lt;code&gt;lpcbData&lt;/code&gt; には「NULL 文字を含んだバイト数」(=4バイト)ではなく「レジストリに保存されたバイト数」(=3バイト)が入っているので注意が必要だ。

Microsoft さんの余計なおせっかいにも似た優しさに惑わされてバグを生まないように注意したい。

**NULL 文字を途中に含んだ文字列を書き込んだ場合
試しに途中に NULL 文字を含んだ文字列を書き込んでみるとどうなるだろう。
|*変数名|*パラメータ|
|&lt;code&gt;lpData&lt;/code&gt;|&lt;code&gt;TEXT(&quot;t\0st&quot;)&lt;/code&gt;|
|&lt;code&gt;cbData&lt;/code&gt;|&lt;code&gt;5 * sizeof(TCHAR)&lt;/code&gt;|
5バイト分書き込むことができる。
&gt;|
  set 5 bytes = t_st_ (74 00 73 74 00) -&gt; wrote 5 bytes
|&lt;
取得すると、NULL 文字を含んだ形で取得できた。
&gt;|
query 5 bytes = t_st_ (74 00 73 74 00) (size=5)
|&lt;
ただし、レジストリエディタで値を確認する限りは、最初の NULL 文字までしか表示されない。C# の &lt;code&gt;Microsoft.Win32.RegistryKey.GetValue()&lt;/code&gt; を使って取得しても、NULL 文字以降は取得できなかった。こっそりと秘密の情報を格納するのに使えるかもしれない。

また、何も考えずにバッファサイズ分の文字をレジストリに格納していると、NULL 文字以降の情報もレジストリに保存されてしまうので、秘密のデータがこっそり漏れてしまうかもしれないので注意が必要だ。

**RegSetValue と RegQueryValue
&lt;code&gt;RegSetValue&lt;/code&gt; は現在は利用を推奨されていないが、データの型に REG_SZ しか指定できない時代の関数である分、REG_SZ を書き込む場合には簡単に使える。
&gt;|cpp|
RegSetValue(
  HKEY    hKey,       // キーのハンドル
  LPCTSTR lpSubKey,   // 値の名前
  DWORD   dwType,     // REG_SZ でなければならない
  LPCTSTR lpData,     // NULL 終端文字列
  DWORD   cbData      // 無視される
);
||&lt;
&lt;code&gt;RegSetValue&lt;/code&gt; の内部で文字列の長さからバイト数も決定してくれるので非常に楽だ。

&lt;code&gt;RegQueryValue&lt;/code&gt; も現在は利用を推奨されていないが、途中に NULL 文字を含む文字列も取得できることが確認できた。

**ソース
今回の実験に使ったソースを掲載しておく。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|cpp|
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;

void dump5(LPCTSTR buf);
void testRegSetValueEx(LPCTSTR buf, DWORD size);

int main(){
    // RegSetValueEx でサイズに正しい値を与えたとき
    testRegSetValueEx(TEXT(&quot;test&quot;), 5 * sizeof(TCHAR));

    // RegSetValueEx でサイズに NULL 文字を含めるのを忘れたとき
    testRegSetValueEx(TEXT(&quot;test&quot;), 4 * sizeof(TCHAR));

    // RegSetValueEx でサイズに小さい値を与えたとき
    testRegSetValueEx(TEXT(&quot;test&quot;), 3 * sizeof(TCHAR));
    testRegSetValueEx(TEXT(&quot;test&quot;), 2 * sizeof(TCHAR));
    testRegSetValueEx(TEXT(&quot;test&quot;), 1 * sizeof(TCHAR));

    // RegSetValueEx でサイズに 0 を与えたとき
    testRegSetValueEx(TEXT(&quot;test&quot;), 0);

    // RegSetValueEx で NULL 文字を含む値を与えたとき
    testRegSetValueEx(TEXT(&quot;t\0st&quot;), 5 * sizeof(TCHAR));

}

void testRegSetValueEx(LPCTSTR buf, DWORD size) {
    DWORD dwType;

    _tprintf(_T(&quot;  set %d bytes = &quot;), size);
    dump5(buf);

    // exec
    RegSetValueEx(HKEY_LOCAL_MACHINE, NULL, NULL, REG_SZ, (LPCBYTE)buf, size);
    //RegSetValue(HKEY_LOCAL_MACHINE, NULL, REG_SZ, (LPTSTR)buf, size);
    RegQueryValueEx(HKEY_LOCAL_MACHINE, NULL, NULL, &amp;dwType, NULL, &amp;size);
    _tprintf(_T(&quot; -&gt; wrote %d bytes\n&quot;), size);

    // query value 1
    TCHAR result1[5];
    _tprintf(_T(&quot;query %d bytes = &quot;), size);
    RegQueryValueEx(HKEY_LOCAL_MACHINE, NULL, NULL, &amp;dwType, (LPBYTE)result1, &amp;size);

    dump5(result1);
    _tprintf(_T(&quot; (lpcbData=%d)\n&quot;), size);

    // query value 2
    TCHAR result2[5];
    size = 5 * sizeof(TCHAR);
    _tprintf(_T(&quot;query %d bytes = &quot;), size);
    RegQueryValueEx(HKEY_LOCAL_MACHINE, NULL, NULL, &amp;dwType, (LPBYTE)result2, &amp;size);

    dump5(result2);
    _tprintf(_T(&quot; (lpcbData=%d)\n&quot;), size);

    _tprintf(_T(&quot;\n&quot;));
}

void dump5(LPCTSTR buf) {
    for (int i = 0; i &lt; 5; i++) {
        _tprintf(TEXT(&quot;%c&quot;), buf[i] == _T('\0') ? _T('_') : buf[i]);
    }
    _tprintf(_T(&quot; (&quot;));
    for (int i = 0; i &lt; 5; i++) {
        if (i != 0) _tprintf(_T(&quot; &quot;));
        _tprintf(_T(&quot;%02x&quot;), (UINT)buf[i] &amp; 0xff);
    }
    _tprintf(_T(&quot;)&quot;));
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2010-12-30" title="">
<body>
*gae_interactive_console_shortcut*Google App Engine の Interactive Console で Ctrl-Enter で実行させる
先日、[http://d.hatena.ne.jp/nitoyon/20101220/gae_datastore_interactive_shell:title=Google App Engine で DataStore を Python 対話シェルから参照する] という記事を書いたけど、そのあと Google App Engine のヘルプを眺めていたら「開発用コンソール」というのがあることを知った。

&gt;http://code.google.com/intl/ja/appengine/docs/python/tools/devserver.html:title&gt;
**開発用コンソール

開発用 Web サーバーには、コンソール ウェブ アプリケーションが含まれます。コンソールを使用すると、ローカル データストアを参照したり、Web フォームに Python コードを送信してアプリケーションと通信できます。

コンソールにアクセスするには、自分のサーバーの URL + /_ah/admin にアクセスします。例: http://localhost:8080/_ah/admin
&lt;&lt;

この管理コンソールの Interactive Console を使えば手軽に試験できる。
====
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20101230/20101230230713.png&quot;&gt;&lt;/center&gt;&lt;

左側に入力して、[Run Program] ボタンを押すと、結果を右側でプレビューできる。実行環境の全てのモジュールにアクセスできるので、Datastore だけでなく、その他の機能の簡単な確認も確実に行える。

ただ、[Run Program] ボタンを押すためにマウスを触るか Tab キーを押す必要あって不便だったので、[Ctrl]+[Enter] で実行できるようにしてみた。

次の JavaScript を実行すればよい。
&gt;|javascript|
document.onkeydown = function(e){e=e||window.event;if(e.ctrlKey&amp;&amp;e.keyCode==13){document.getElementById(&quot;code&quot;).form.submit()}};
||&lt;

毎回実行するのは面倒なので SDK のソースコードを直接書き換えてみる。&lt;code&gt;google_appengine\google\appengine\ext\admin\templates\interactive.html&lt;/code&gt; の最後の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 部分に上のスクリプトを突っ込んでおけばよい。
&gt;|javascript|
document.getElementById('code').focus();

document.onkeydown = function(e){
  e=e||window.event;
  if(e.ctrlKey &amp;&amp; e.keyCode==13){
    document.getElementById(&quot;code&quot;).form.submit()
  }
};
//]]&gt;
&lt;/script&gt;
{% endblock %}
||&lt;
これで簡単に試験できて幸せ。IE, Firefox, Google Chrome で動くようになったことを確認した。

</body>
</day>
<day date="2011-01-11" title="">
<body>
*nenga*うちの年賀状2011
今年もよろしくおねがいします。今年最初のエントリはうちの年賀状です。

&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110104/20110104221936_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110104/20110104221936.png&quot; width=&quot;450&quot; height=&quot;450&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

せっかくなので製作の裏側も大公開！

**下絵を描く
忘年会で帰ったあとに酔っ払って描いた絵がこれ。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110111/20110111234331.png&quot; width=&quot;250&quot; height=&quot;216&quot;&gt;

**Illustrator でトレース
線の個性を残しつつ、Illustrator で線をトレースして色を塗ってみた。年に１回ぐらいしか使わない Illustrator に苦戦するひととき。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110111/20110111234330.png&quot; width=&quot;250&quot; height=&quot;223&quot;&gt;

**背景を描く
めでたくなるように背景をそれっぽく作っていく。バランスを考えて文字は上側に移動してみた。
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110104/20110104221936.png&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;

**おわり
おわり。あとは印刷するだけ。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20100108/nenga:title=うちの年賀状2010]
-[http://d.hatena.ne.jp/nitoyon/20090107/nenga:title=うちの年賀状2009]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2011-01-31" title="">
<body>
*bing_daily_image*Bing の日替わり背景画像の集客効果がすごいかもしれない件
Microsoft が運営する検索エンジン「&lt;a href=&quot;http://www.bing.com/&quot;&gt;Bing&lt;/a&gt;」は、トップページの背景画像が日替わりで変わる。

例えば、2011年1月29日の背景画像はこんな画像になっていた。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110129/20110129234148.jpg&quot; border=&quot;1&quot; width=&quot;450&quot; height=&quot;327&quot;&gt;&lt;/center&gt;&lt;

この動物はなんだろう、と思ってマウスを動かしてみると説明が登場。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110129/20110129234147.jpg&quot; border=&quot;1&quot; width=&quot;400&quot; height=&quot;247&quot;&gt;&lt;/center&gt;&lt;

「なるほど、ウンピョウというのか。なになに、日本の動物園にもいるの？」と思ってクリックすると、[http://www.bing.com/search?q=%E3%82%A6%E3%83%B3%E3%83%94%E3%83%A7%E3%82%A6%E3%80%80%E5%8B%95%E7%89%A9%E5%9C%92&amp;form=hphot3:title] へ移動する。

&gt;&lt;center&gt;&lt;img src=&quot;http://cdn.f.st-hatena.com/images/fotolife/n/nitoyon/20110130/20110130001130.jpg?1296315088&quot; width=&quot;350&quot; height=&quot;264&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

検索結果を見ると、よこはま動物園や天王寺動物園、旭山動物園などにウンピョウがいることが分かった。

クリックすれば答えにたどり着けるので、手軽に&lt;strong&gt;検索の楽しさを体験&lt;/strong&gt;できるようになっている。

**画像ごとに隠された４つの説明
画像には毎日４つの説明が隠されていて、それぞれに違ったリンク先が設定されている。
ウンピョウの日はこんな感じだった。
====
+ウンピョウはインドから中国南部にわたって、生息しています&lt;br&gt;日本でウンピョウを見ることができる場所は？ → &lt;a href=&quot;http://www.bing.com/search?q=%E3%82%A6%E3%83%B3%E3%83%94%E3%83%A7%E3%82%A6%E3%80%80%E5%8B%95%E7%89%A9%E5%9C%92&amp;form=hphot3&quot;&gt;ウェブ検索: ウンピョウ　動物園&lt;/a&gt;
+この動物はウンピョウ。ネコとヒョウの間に位置する動物と言われています。&lt;br&gt;長い犬歯を持つため、サーベルタイガーの子孫との説も... → &lt;a href=&quot;http://www.bing.com/images/search?q=%E3%82%A6%E3%83%B3%E3%83%94%E3%83%A7%E3%82%A6&amp;form=hphot1&quot;&gt;画像検索: ウンピョウ&lt;/a&gt;
+昨年、ボルネオに生息するウンピョウの新種の撮影に成功しました。&lt;br&gt;夜行性のため、撮影はとても大変だとか → &lt;a href=&quot;http://www.bing.com/search?q=%E3%82%B9%E3%83%B3%E3%83%80%E3%83%A9%E3%83%B3%E3%83%89%E3%83%BB%E3%82%A6%E3%83%B3%E3%83%94%E3%83%A7%E3%82%A6%E3%80%80%E6%92%AE%E5%BD%B1%E3%81%AB%E6%88%90%E5%8A%9F&amp;form=hphot4&quot;&gt;ウェブ検索: スンダランド・ウンピョウ　撮影に成功&lt;/a&gt;
+絶滅の危惧にあるこの動物ですが、世界中の動物園で赤ちゃんが生まれています。&lt;br&gt;愛くるしい姿を動画で見てみよう → &lt;a href=&quot;http://www.bing.com/videos/search?q=clouded+leopard+cubs+zoo&amp;form=hphot2&quot;&gt;動画検索: clouded leopard cubs zoof&lt;/a&gt;

Google ではたまにロゴが &lt;a href=&quot;http://www.google.co.jp/logos/&quot;&gt;ホリデーロゴ&lt;/a&gt; に変わることがある。何の日なのか知りたくなってロゴをクリックする人も多いはず。Bing の日替わり背景画像はそれが毎日あるような楽しさだ。知的好奇心をくすぐるメッセージが出てくるのがうまい。

**この仕掛けのポイント
この仕掛け、ただの「背景画像＋知的好奇心刺激メッセージ」なんだけど、次のような流れを生み出す可能性があるように思える。
+Bing を訪れる
+何の画像なのか知りたくなってメッセージをクリックする
+いつの間にか ウェブ検索・画像検索・動画検索・地図…など、&lt;strong&gt;Bing の主要機能を体験している&lt;/strong&gt;
+次の日もきれいな画像を見たくて Bing を訪れる
+日替わり写真を見たくて Bing をブラウザのホームページにしている
+Bing を使って検索するようになる

ここまで成功することはほとんどないかもしれないけど、&lt;strong&gt;チュートリアルとリピーター確保&lt;/strong&gt;を兼ねたうまい仕組みだと思う。

実際、2010年6月時点の統計では、Bing は公開から1年で 12.7% にまでシェアを伸ばしているらしい。([http://ascii.jp/elem/000/000/538/538581/:title])

**過去の背景画像
過去の画像が NAVER にまとめられていた。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110130/20110130004608.jpg&quot; border=&quot;1&quot; width=&quot;300&quot; height=&quot;640&quot;&gt;&lt;/center&gt;&lt;

どの日もきれいだ。
-[http://matome.naver.jp/odai/2129407320328407601:title]
-[http://matome.naver.jp/odai/2125385862728854149:title]
-[http://matome.naver.jp/odai/2126261203927299301:title]

Windows 7 用に Bing の画像を日替わり壁紙にする [http://www.forest.impress.co.jp/docs/review/20100823_388809.html:title] というものもあった。
</body>
<comments>
<comment>
<username>なお</username>
<body>これ、Googleのパクリなんだよね。</body>
<timestamp>1296557906</timestamp>
</comment>
</comments>
</day>
<day date="2011-02-28" title="">
<body>
*diorama_google_maps*[GoogleMapsAPI][as]Google Maps をジオラマ風にしてみた
Google Maps をジオラマ写真風にすると印象が変わる、というアイディアが &lt;a href=&quot;http://reinit.info/blog/archive/2011/02/23/tiltshift_2/&quot;&gt;チルトシフトの新しい使い方 その2&lt;/a&gt; に書いてあった。

おもしろそうなので&lt;strong&gt;リアルタイムに Google Maps をジオラマ風に表示&lt;/strong&gt;するものを作ってみた。

&gt;&lt;center&gt;&lt;script src=&quot;http://www.gmodules.com/ig/ifr?url=http://nitoyon.googlepages.com/embed_flash.xml&amp;amp;up_url=http%3A%2F%2Ftech.nitoyon.com%2Fmisc%2Fswf%2FDioramaGoogleMaps.swf&amp;amp;up_background=%23ffffff&amp;amp;up_cache=1&amp;amp;up_swfver=9&amp;amp;synd=open&amp;amp;w=475&amp;amp;h=475&amp;amp;title=Diorama+Google+Maps&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(Flash が有効である場合にはここに Flash が表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;

好きな場所を表示できるので、&lt;strong&gt;地球全体がジオラマ&lt;/strong&gt;になってしまった。

簡単な使い方：
-上部の検索欄に英語で入力して移動
-左のコントロールは Google Maps と同じ
-Shift+ドラッグで視点移動

**日本各地を巡ってみた
***東京駅前
車がミニチュア風でかわいい。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110227/20110227140336.jpg&quot;width=&quot;472&quot; height=&quot;472&quot;&gt;&lt;/center&gt;&lt;

***京都御所
箱庭になりました。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110227/20110227140917.jpg&quot;width=&quot;474&quot; height=&quot;473&quot;&gt;&lt;/center&gt;&lt;

***大阪駅上空
線路と高速道路とビル群。鉄道模型みたい。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110227/20110227140624.jpg&quot; width=&quot;474&quot; height=&quot;474&quot;&gt;&lt;/center&gt;&lt;


**どうぞご利用ください
あなたの街をジオラマ風に！

**ソースコード
チルトシフトのエフェクトは「彩度をあげる」「周りをぼかす」「周りを暗くする」ことで実現している。

ソースコードは以下に（map_1_20.swc、minimalcomps、Tweener を利用）。
====
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|actionscript|
// Diorama Google Maps
//-------------------------------------------------------------------
// This flash changes google maps to tilt-shift photography.
// inspired by http://reinit.info/blog/archive/2011/02/23/tiltshift_2/
package {
import flash.events.*;
import flash.display.*;
import flash.geom.*;
import flash.filters.*;
import com.google.maps.*;
import com.google.maps.geom.*;
import com.google.maps.controls.*;
import com.google.maps.services.*;
import com.bit101.components.*;
import caurina.transitions.Tweener;

public class DioramaGoogleMaps extends Sprite {
    private static var WIDTH:Number = 475;
    private static var HEIGHT:Number = 475;
    private static var BLUR_PARAM:Number = 160;
    private static var CONTROL_ALPHA:Number = 0.3;

    private var maps:Array = [];
    private var controls:Sprite;

    public function DioramaGoogleMaps():void {
        stage.scaleMode = &quot;noScale&quot;;
        stage.align = &quot;TL&quot;;
        stage.stageFocusRect = false;

        // blurred map
        var map1:Map3D = createMap(true);
        map1.filters = [new BlurFilter(6, 6), getSaturationFilter(2.8)];
        addChild(map1);

        // normal map
        var map2:Map3D = createMap(false);
        map2.filters = [getSaturationFilter(1.8)];
        map2.cacheAsBitmap = true;
        addChild(map2);

        var msk:Sprite = new Sprite();
        msk.graphics.beginFill(0);
        msk.graphics.drawEllipse(-WIDTH * 0.5, -HEIGHT * 0.3, WIDTH * 1.0, HEIGHT * 0.6);
        msk.graphics.endFill();
        msk.x = WIDTH * 0.5
        msk.y = HEIGHT * 0.5
        msk.filters = [new BlurFilter(BLUR_PARAM, BLUR_PARAM)];
        msk.cacheAsBitmap = true;
        addChild(msk);
        map2.mask = msk;

        maps = [map1, map2];

        // limb darkening
        filters = [new GlowFilter(0, 0.3, BLUR_PARAM, BLUR_PARAM, 1, 1, true)];

        // add control
        initControl();
    }

    private function initControl():void{
        controls = new Sprite();
        var search:Sprite = new Sprite();
        search.x = 240; search.y = 10;
        search.scaleX = search.scaleY = 1.5;

        // text
        var txt:InputText = new InputText(controls, 0, 0);
        txt.width = 100;
        txt.addEventListener(&quot;keyDown&quot;, function(event:KeyboardEvent):void{
            if (event.keyCode == 13) { btn.dispatchEvent(new Event(&quot;click&quot;)); }
        });
        search.addChild(txt);

        // button
        var btn:PushButton = new PushButton(search, 100, 0, &quot;Search&quot;, function(event:Event):void{
            var geo:ClientGeocoder = new ClientGeocoder();
            geo.geocode(txt.text);
            geo.addEventListener(&quot;geocodingsuccess&quot;, function(event:GeocodingEvent):void{
                var marks:Array = event.response.placemarks;
                var map:Map3D = maps[0] as Map3D;
                if (marks.length &gt; 0){
                    map.flyTo(marks[0].point, 15, new Attitude(20, 30, 0), 1);
                }
            });
            geo.addEventListener(&quot;geocodingfailure&quot;, function(event:GeocodingEvent):void{
                txt.text = &quot;NOT FOUND&quot;;
            });
        });
        btn.width = 50; btn.height = txt.height;
        controls.addChild(search);
        addChild(controls);

        controls.alpha = CONTROL_ALPHA;
        controls.addEventListener(&quot;mouseOver&quot;, function(event:Event):void { Tweener.addTween(controls, {alpha: 0.9, time: 0.5 }); });
        controls.addEventListener(&quot;mouseOut&quot;,  function(event:Event):void { Tweener.addTween(controls, {alpha: CONTROL_ALPHA, time: 0.5 }); })
    }

    // create a map
    private function createMap(isBlur:Boolean):Map3D{
        var map:Map3D = new Map3D();
        map.key = &quot;ABQIAAAA6de2NwhEAYfH7t7oAYcX3xRWPxFShKMZYAUclLzloAj2mNQgoRQZnk8BRyG0g_m2di3bWaT-Ji54Lg&quot;;
        map.sensor = &quot;false&quot;;
        map.setSize(new Point(WIDTH, HEIGHT));
        map.addEventListener(MapEvent.MAP_PREINITIALIZE, function(event:Event):void{
            map.setInitOptions(new MapOptions({
                zoom: 16.6,
                center: new LatLng(48.873847, 2.29502),
                mapType: MapType.SATELLITE_MAP_TYPE,
                viewMode: View.VIEWMODE_ORTHOGONAL,
                attitude: new Attitude(20, 30, 0),
                doubleClickMode: MapAction.ACTION_PAN_ZOOM_IN,
                mouseClickRange: 2
            }));
        });

        map.addEventListener(MapEvent.MAP_READY, function(event:Event):void{
            if (!isBlur){
                var control:NavigationControl = new NavigationControl(new NavigationControlOptions({
                    position: new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT, 5)
                }));
                map.addControl(control);

                // move to control sprite
                var obj:DisplayObject = control.getDisplayObject();
                if (obj.parent){
                    obj.parent.removeChild(obj);
                    controls.addChild(obj);
                }
            }
        });

        map.addEventListener(&quot;mapevent_movestep&quot;, changeHandler);
        map.addEventListener(&quot;mapevent_moveend&quot;, changeHandler);
        map.addEventListener(&quot;mapevent_zoomend&quot;, changeHandler);
        map.addEventListener(&quot;mapevent_attitudechangeend&quot;, changeHandler);
        map.addEventListener(&quot;mapevent_attitudechangestep&quot;, changeHandler);

        return map;
    }

    // sync two map
    private function changeHandler(event:Event):void{
        if(maps.length != 2) return;

        var me:Map3D = event.target as Map3D;
        var other:Map3D = (me == maps[0] ? maps[1] : maps[0]) as Map3D;

        var c1:LatLng = me.getCenter();
        var z1:Number = me.getZoom();
        var a1:Attitude = me.getAttitude();

        if(!c1.equals(other.getCenter())){
            other.setCenter(c1);
        }
        if(z1 != other.getZoom()){
            other.setZoom(z1);
        }
        if(!a1.equals(other.getAttitude())){
            other.setAttitude(a1)
        }
    }

    private static var LUMINANCE_R:Number = 0.212671;
    private static var LUMINANCE_G:Number = 0.715160;
    private static var LUMINANCE_B:Number = 0.072169;

    private function getSaturationFilter(saturation:Number):BitmapFilter{
        var sf:Number = saturation;
        var nf:Number = 1-sf;
        var nr:Number = LUMINANCE_R * nf;
        var ng:Number = LUMINANCE_G * nf;
        var nb:Number = LUMINANCE_B * nf;
        return new ColorMatrixFilter([
            nr+sf,  ng,     nb,     0,  0,
            nr,     ng+sf,  nb,     0,  0,
            nr,     ng,     nb+sf,  0,  0,
            0,      0,      0,      1,  0
        ]);
    }
}
}
||&lt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2011-03-03" title="">
<body>
*jquery_modal_dialog*[JavaScript]jQuery UI モーダルダイアログの仕組み
jQuery UI の Dialog 機能はダイアログをモーダル表示することができる。

&lt;a href=&quot;http://jqueryui.com/demos/dialog/#modal&quot;&gt;サンプル&lt;/a&gt;を見ると、
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110303/20110303015432.jpg&quot; width=&quot;400&quot; height=&quot;307&quot;&gt;&lt;/center&gt;&lt;

-背景がグレーアウトされて、手前のダイアログしか操作できない
-Tab キーを動かしてもダイアログからフォーカスを移せない
といった動作になっている。

いままでいろんなライブラリの擬似モーダル実装を見てきたが、Tab キーを押したらこっそり裏側の部分にフォーカスを移せるものばかりだったので、Tab キーにちゃんと対処していたところに驚いた。

どうやって実装してるんだろうと思って &lt;code&gt;jquery.ui.dialog.js&lt;/code&gt; を見てみたら、次のように泥臭く実装していた。
&gt;|javascript|
    // prevent tabbing out of modal dialogs
    if (options.modal) {
        uiDialog.bind('keypress.ui-dialog', function(event) {
            if (event.keyCode !== $.ui.keyCode.TAB) {
                return;
            }

            var tabbables = $(':tabbable', this),
                first = tabbables.filter(':first'),
                last  = tabbables.filter(':last');

            if (event.target === last[0] &amp;&amp; !event.shiftKey) {
                first.focus(1);
                return false;
            } else if (event.target === first[0] &amp;&amp; event.shiftKey) {
                last.focus(1);
                return false;
            }
        });
    }
||&lt;
Tab キーが押されたら、ダイアログ外にフォーカスが移らないよう、無理やりダイアログ内にフォーカスを設定している。

ちなみに、ソース中に &lt;code&gt;:tabbable&lt;/code&gt; という CSS 擬似クラスが登場しているが、これは &lt;code&gt;jquery.ui.core.js&lt;/code&gt; で独自定義されているもので、標準の CSS や生の jQuery では利用できないので注意が必要だ。

フォーカスを無理やりなんとかするようなブラウザ拡張がインストールされていたら対処しきれないが、多くの場合ではこの実装で問題なさそうだ。

</body>
</day>
<day date="2011-03-18" title="">
<body>
*console_log_twitter*[javascript][twitter]twitter の console.log() エラーよけ
Firebug が導入した &lt;code&gt;console.log()&lt;/code&gt; は最近のブラウザで標準的に実装されつつあります。

しかし、万が一、リリースコードに &lt;code&gt;console.log&lt;/code&gt; が混じり込んでしまうと、古いブラウザや開発ツールが導入されていないブラウザで JavaScript エラーになってしまってとても悲しくなります。

ということで、そういう場合にエラーを出さないようにするために、お手製の偽者 console オブジェクトを実装するテクニックがあります。ちょっと検索するといろいろ見つかります。
&gt;|javascript|
if (!window.console){
    window.console = {
        log: function(){}
    };
}
||&lt;

確かに小さなプロジェクトでは、こういうおまじないを書いておくと安心だろうなー…と思っていたら、twitter のソースコードに次のようなコードを発見。
&gt;|javascript|
if (!window.console) {
  (function() {
      var names = [&quot;log&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, &quot;assert&quot;, &quot;dir&quot;, &quot;dirxml&quot;,
        &quot;group&quot;, &quot;groupEnd&quot;, &quot;time&quot;, &quot;timeEnd&quot;, &quot;count&quot;, &quot;trace&quot;, &quot;profile&quot;, &quot;profileEnd&quot;];
      window.console = {};
      for (var i = 0; i &lt; names.length; ++i)
        window.console[names[i]] = function() {}
  })();
}
||&lt;
新 UI になってからは、JavaScript の役割が大きくて、&lt;code&gt;console.log&lt;/code&gt; を残して JavaScript エラーを出してしまうと致命的だからでしょうか。念には念を押して、ということなのかもしれませんが、少しびっくりしました。

本題から外れますが、日本赤十字に10万円寄付してみました。さらに、はてなのポイントを450ほど寄付してみました。何もできないもどかしさが少しだけ軽くなったような気がします。被災された方々には、心からお見舞い申し上げます。一刻も早い復旧を心よりお祈り申し上げます。

</body>
</day>
<day date="2011-03-24" title="">
<body>
*jQuery_extend_mania*[JavaScript]jQuery.extend マニアックス
jQuery の extend メソッドは便利なんだが複雑で忘れてしまいがちなのでメモしておく。

&lt;code&gt;jQuery.extend&lt;/code&gt; の呼び出しパターンは次の４通り。
+&lt;code&gt;$.extend([deep,] target, obj1, [obj2, [obj3, ...]])&lt;/code&gt;
+&lt;code&gt;$.extend([deep,] obj)&lt;/code&gt;
+&lt;code&gt;$.fn.extend([deep,] obj)&lt;/code&gt;
+&lt;code&gt;$(...).extend([deep,] obj)&lt;/code&gt;

全てのパターンで第一引数に &lt;code&gt;[deep,]&lt;/code&gt; がある。これはオプションの引数で &lt;code&gt;true&lt;/code&gt; を指定するとディープコピーしてくれる。

以下では分かりやすくするために &lt;code&gt;deep&lt;/code&gt; オプションは省略した一覧を掲載する。
+&lt;code&gt;$.extend(target, obj1, [obj2, ...]])&lt;/code&gt;
+&lt;code&gt;$.extend(obj)&lt;/code&gt;
+&lt;code&gt;$.fn.extend(obj)&lt;/code&gt;
+&lt;code&gt;$(...).extend(obj)&lt;/code&gt;

だいぶシンプルになった。各パターンを見ていく。

**&lt;code&gt;$.extend(target, obj1, [obj2, ...]])&lt;/code&gt;
まずは１つ目のパターン。

&gt;|javascript|
$.extend(target, obj1, [obj2, ...]])
||&lt;

&lt;code&gt;target&lt;/code&gt; に &lt;code&gt;obj1&lt;/code&gt; を上書きコピーし、書き換えられた &lt;code&gt;target&lt;/code&gt; を返す。

以下は簡単な使用例。
&gt;|javascript|
&gt;&gt;&gt; a = {a: 3, b: 4}
Object { a=3, b=4}
&gt;&gt;&gt; $.extend(a, {c: 99})
Object { a=3, b=4, c=99}
&gt;&gt;&gt; a
Object { a=3, b=4, c=99}
||&lt;

&lt;code&gt;obj1&lt;/code&gt; は複数個指定できる。複数個が必要あるのかと思うかもしれないが、継承もどきを実現するときのが楽になる。
&gt;|javascript|
// 継承元クラス
function B() { }
B.prototype = {
    a: function() { }.
    b: function() { }
}

// 派生クラス
function D() { }
D.prototype = $.extend({}, B.prototype, {
    c: function() { }.
    d: function() { }
});
||&lt;

もし、ここで
&gt;|javascript|
D.prototype = $.extend(B.prototype, {
    //....
);
||&lt;
とやってしまうと、&lt;code&gt;B.prototype&lt;/code&gt; が書き換えられてしまう。

そこで、一旦、空オブジェクトに &lt;code&gt;B.prototype&lt;/code&gt; をコピーしておいて、&lt;code&gt;D&lt;/code&gt; に実装したいメソッドを上書きコピーしてあげている。

ちなみに
&gt;|javascript|
D.prototype = $.extend({}, B.prototype, { ... });
||&lt;
は、次のように&lt;s&gt;書いてもよい&lt;/s&gt;書くと同じように動くように見えるが
&gt;|javascript|
D.prototype = $.extend({ ... }, B.prototype);
||&lt;
こうすると、B と D に同じメソッド名を作成しようとしたときに、B のものが優先されてしまうので注意が必要だ。

**target を省略した extend
次は、target を省略した extend の呼び出しパターン３つを見る。
+&lt;code&gt;$.extend(obj)&lt;/code&gt;
+&lt;code&gt;$.fn.extend(obj)&lt;/code&gt;
+&lt;code&gt;$(...).extend(obj)&lt;/code&gt;

target を省略して obj が１つしかない場合には、&lt;code&gt;extend&lt;/code&gt; を呼び出したときの this が target として解釈される。

====

***&lt;code&gt;$.extend(obj)&lt;/code&gt;
&lt;code&gt;$.extend(obj)&lt;/code&gt; は jQuery 自身を &lt;code&gt;obj&lt;/code&gt; で拡張する。

例えば、
&gt;|javascript|
$.extend({
    min: function(a, b) { return a &lt; b ? a : b; }
});
||&lt;
とすると、&lt;code&gt;$.min(3, 5);&lt;/code&gt; で小さいほうの値を取得できる（引用元：[http://semooh.jp/jquery/api/core/jQuery.extend/object/:title]）。

jQuery クラスに static メソッドを追加するようなイメージだ。

***&lt;code&gt;$.fn.extend(obj)&lt;/code&gt;
&lt;code&gt;$.fn&lt;/code&gt; は &lt;code&gt;jQuery.prototype&lt;/code&gt; のこと。つまり、&lt;code&gt;$.fn.extend(obj)&lt;/code&gt; を利用すると jQuery オブジェクトにメソッドを追加できる。

たとえば、
&gt;|javascript|
$.fn.extend({
    log: function() { console.log(this); return this; }
});
||&lt;
とすることで、&lt;code&gt;log&lt;/code&gt; メソッドを追加できる。

例えばこんな風にして使う。
&gt;|javascript|
$(&quot;div&quot;)
    .log()
    .each(function(){
        // ...
    })
||&lt;
メソッドチェーンの途中に突っ込んでログ出力できて便利！

&lt;code&gt;$.fn.extend&lt;/code&gt; は各種 jQuery プラグインの実装時で利用されている。

***&lt;code&gt;$(...).extend(obj)&lt;/code&gt;
実際に利用されてるのは見たことないし、公式ドキュメントにも書いていないんだけど、これが意外に便利なんじゃないかというのが今回の本題。本題までが長かった…。

&lt;code&gt;$(...).extend(obj)&lt;/code&gt; を使うと、&lt;code&gt;extend&lt;/code&gt; されるのは jQuery オブジェクト自身。jQuery オブジェクトにメソッドを追加できる。

例えば「フォームの要素を enable/disable する」という処理がソースのあちらこちらに存在しているする。
&gt;|javascript|
$(&quot;&lt;form&gt;&quot;).submit(function(){
    // form 配下のコントロールを disable にする
    $(this).find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);

    var self = this;
    $.post('url', { ... }, function(){
        // POST が完了すると、コントロールを enable にする
        $(self).find(&quot;:disabled&quot;).attr(&quot;disabled&quot;, &quot;&quot;);

        // ...
    }, &quot;json&quot;);
    return false;
});
||&lt;

この例ではまだ一箇所だが、&lt;code&gt;find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;)&lt;/code&gt; のようなコードが色んな場所にあると、ソースが煩雑になる。

そこで、次のようにしてみよう。
&gt;|javascript|
var enable_mixin = {
    enableAll: function(){
        this.find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;&quot;);
        return this;
    },
    disableAll: function(){
        this.find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);
        return this;
    }
};

$(&quot;&lt;form&gt;&quot;).submit(function(){
    // form 配下のコントロールを disable にする
    $(this).extend(enable_mixin).disableAll();

    var self = this;
    $.post('url', { ... }, function(){
        // POST が完了すると、コントロールを enable にする
        $(self).extend(enable_mixin).enableAll();

        // ...
    }, &quot;json&quot;);
    return false;
});
||&lt;

ちょっとしたメソッド集 &lt;code&gt;enable_mixin&lt;/code&gt; を作成しておく。そして、メソッドチェーンの中で、&lt;code&gt;extend&lt;/code&gt; を使って動的にメソッドを追加し、そのメソッドをすぐさま呼び出している。

もちろん、&lt;code&gt;$.fn.extend&lt;/code&gt; を使えば全ての jQuery オブジェクトにメソッドを追加できるのだが、全体で利用するほどの汎用性はないようなちょっとした処理を、その場で気楽にミックスインして使えるのがうれしい。

**おわり
&lt;code&gt;jQuery.extend&lt;/code&gt; は複雑である。

</body>
<comments>
<comment>
<username>cyokodog</username>
<body>最後の例は、メソッド名の衝突が気になる場合は、カスタムイベントでもいいですね&lt;br&gt;var enable_mixin = {&lt;br&gt;    enableAll: function(){&lt;br&gt;        $(this).find(&quot;:disabled&quot;).attr(&quot;disabled&quot;, &quot;&quot;);&lt;br&gt;        return this;&lt;br&gt;    },&lt;br&gt;    disableAll: function(){&lt;br&gt;        $(this).find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);&lt;br&gt;        return this;&lt;br&gt;    }&lt;br&gt;};&lt;br&gt;&lt;br&gt;$(&quot;&lt;form&gt;&quot;).submit(function(){&lt;br&gt;    var self = $(this).bind(enable_mixin).trigger(&#39;disableAll&#39;);&lt;br&gt;    $.post(&#39;url&#39;, {}, function(){&lt;br&gt;        self.trigger(&#39;enableAll&#39;);&lt;br&gt;    });&lt;br&gt;    return false;&lt;br&gt;})</body>
<timestamp>1300952664</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おお、ありがとうございます。&lt;br&gt;カスタムイベント、知りませんでした。勉強しておきます…。</body>
<timestamp>1300982311</timestamp>
</comment>
<comment>
<username>hana</username>
<body>$.extendの解説の中で一番お世話になりました、ありがとうございまし</body>
<timestamp>1302204924</timestamp>
</comment>
<comment>
<username>t</username>
<body>お世話になっております。&lt;br&gt;var enable_mixin = {&lt;br&gt;    enableAll: function(){&lt;br&gt;        this.find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;&quot;);&lt;br&gt;        return this;&lt;br&gt;    },&lt;br&gt;    disableAll: function(){&lt;br&gt;        this.find(&quot;:enabled&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;);&lt;br&gt;        return this;&lt;br&gt;    }&lt;br&gt;};&lt;br&gt;の部分なのですが、(Xでない)HTMLだとdesabledは存在するだけで効果を発揮したような気がします。なので、&lt;br&gt;var enable_mixin = {&lt;br&gt;    enableAll: function(){&lt;br&gt;        this.find(&quot;:disabled&quot;).removeAttr(&quot;disabled&quot;);&lt;br&gt;        return this;&lt;br&gt;    },&lt;br&gt;    disableAll: function(){ ... }&lt;br&gt;};&lt;br&gt;が良いと思います。$( ... ).removeAttr(&quot;disabled&quot;)がポイントです。</body>
<timestamp>1328696042</timestamp>
</comment>
</comments>
</day>
<day date="2011-03-26" title="">
<body>
*firefox4_ctrl_e*Firefox 4 で Ctrl+E で検索バーにフォーカスしたい
Firefox 4 が出たので試しに使ってみたらだいぶ高速になっていていい感じです。

ただ、いままでは &lt;code&gt;Ctrl+E&lt;/code&gt; で検索バーにフォーカスできたのですが、Firefox 4 になってから &lt;code&gt;Ctrl+E&lt;/code&gt; が使えなくなってしまいました。

&lt;code&gt;Ctrl+K&lt;/code&gt; を使えばフォーカスできるのですが、いままで &lt;code&gt;Ctrl+E&lt;/code&gt; に慣れていたのでいきなり違うキーを使えといわれても困ってしまいます。

**解決するアドオンが既に存在している！
そこで軽く調べてみると &lt;code&gt;Ctrl+E&lt;/code&gt; で検索バーにフォーカスできるようにするアドオンがありました。
====
-[https://addons.mozilla.org/ja/firefox/addon/change-search-shortcut/:title]

試しにインストールして再起動すると、&lt;code&gt;Ctrl+E&lt;/code&gt; で検索バーにフォーカスできるようになりました。

めでたしめでたし。

**なぜ Ctrl+E が使えなくなったのか
Firefox 4 の目玉新機能「Panorama」でタブのグループ化ができるようになりました。この [タブグループ] を表示する機能が、beta 7 の段階で &lt;code&gt;Ctrl+E&lt;/code&gt; に割り当てられたようです。
-[http://techdows.com/2010/09/firefox-panorama-keyboard-shortcut-changednew-one-is-ctrlcmde.html:title]
-[https://bugzilla.mozilla.org/show_bug.cgi?id=592183:title]

ところが、その後、リリース直前に [タブグループ] の表示は &lt;code&gt;Ctrl+Shift+E&lt;/code&gt; に変更されたようです。
-[http://techdows.com/2011/01/panorama-shortcut-changed-yet-again-it-is-ctrlshifte-now.html:title]
-[https://bugzilla.mozilla.org/show_bug.cgi?id=624588:title]
この時に、&lt;code&gt;Ctrl+E&lt;/code&gt; に [検索バーのフォーカス] 機能を割り当てなおしてくれたらよかったのだけど、なぜか戻されないまま Firefox 4 のリリースに至ったようです。

えーーーーー。

</body>
<comments>
<comment>
<username>na</username>
<body>ありがとうございます。私も不自由に感じていたので、助かりました。</body>
<timestamp>1301278289</timestamp>
</comment>
<comment>
<username>ongaeshi</username>
<body>面白かったです、それはえーって感じですね。絶対直すのを忘れて、、、略。&lt;br&gt;FireFoxは長く使っていて愛着があるので、4も頑張って欲しいです。</body>
<timestamp>1301583729</timestamp>
</comment>
<comment>
<username>榎本</username>
<body>たしゅかりました！</body>
<timestamp>1303556065</timestamp>
</comment>
<comment>
<username>thx</username>
<body>Ctrl+Eを何回も入力していたので、検索してみると…やっぱり…&lt;br&gt;とりあえず、悩んでいた種が解消されました。&lt;br&gt;仕様ならば仕方がないですね、ありがとうございます。</body>
<timestamp>1305049141</timestamp>
</comment>
</comments>
</day>
<day date="2011-04-19" title="">
<body>
*cygwin17_home_problem*Cygwin 1.7 をインストールしたら home が変な場所になった話
Cygwin 1.7 をインストールして、Cygwin Bash Shell を起動したら次のようなエラーが表示されて困ってしまった。

&gt;|
mkdir: cannot create directory `/home': Not a directory
/home/my_account could not be created.
Setting HOME to /tmp.
|&lt;

管理者アカウントで Cygwin Bash Shell を起動したら上記のエラーは出なくなったが、&lt;code&gt;/home&lt;/code&gt; が &lt;code&gt;C:\cygwin\home&lt;/code&gt; ではなくどこか別の場所にリダイレクトされていた。

**リダイレクトの正体は fstab
少し調べてみると、Cygwin 1.7 からは &lt;code&gt;/etc/fstab&lt;/code&gt; にマウント情報が記載されるようになったらしい。

&gt;http://cygwin.com/cygwin-ug-net/ov-new1.7.html:title=What&amp;apos;s new and what changed in Cygwin 1.7&gt;
Mount points are no longer stored in the registry. Use /etc/fstab and /etc/fstab.d/$USER instead.
&gt;&gt;
1.7 からはマウント ポイントがレジストリに記録されなくなりました。その代わりに、&lt;code&gt;/etc/fstab&lt;/code&gt; と &lt;code&gt;/etc/fstab.d/$USER&lt;/code&gt; を利用します。
&lt;&lt;
&lt;&lt;

実際、&lt;code&gt;C:\cygwin\etc\fstab&lt;/code&gt; を見てみると次のような記載があった。

&gt;|
C:/Users/foo/AppData/Roaming/Microsoft /home some_fs binary 0 0
|&lt;

**setup.exe と過去インストールした別ユーザーの存在
なぜか別のユーザー foo さんの &lt;code&gt;AppData&lt;/code&gt; の下にリダイレクトされているようだ。

どうやら、1.5 の設定を引き継ぐために setup.exe がレジストリから読み取っているようだ。

&gt;http://www.cygwin.com/cygwin-ug-net/using.html:title=Chapter 3. Using Cygwin&gt;
When you upgrade an existing older Cygwin installation to Cygwin 1.7, your old system mount points (stored in the HKEY_LOCAL_MACHINE branch of your registry) are read by a script and the /etc/fstab file is generated from these entries. 
&gt;&gt;
過去のバージョン から 1.7 にアップグレードすると、過去のマウントポイントの情報（レジストリの &lt;code&gt;HKEY_LOCAL_MACHINE&lt;/code&gt; に記録されています）がスクリプトによって読み出され、これらの情報を元に &lt;code&gt;/etc/fstab&lt;/code&gt; ファイルが生成されます。
&lt;&lt;
&lt;&lt;

なるほど！と思ってレジストリを見てみると、&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Cygnus Solutions\Cygwin\mounts v2\/home&lt;/code&gt; キーの &lt;code&gt;native&lt;/code&gt; に問題の設定があった。どうやら、foo さんが以前、この端末で過去の Cygwin をインストールしたときの設定が残っていたようだ。

**そして...
改めてレジストリを削除したあとで新規インストールしたらうまく行った。新規インストールと同等になったので、&lt;code&gt;/etc/fstab&lt;/code&gt; はコメントだけになっていた。とほほ。
</body>
</day>
<day date="2011-04-26" title="">
<body>
*messages_for_japan_design*[HTML5][GoogleMapsAPI]Messages for Japan に見る Google UI デザインの変化
ちょっと前になるが、Google が [http://www.messagesforjapan.com/:title] というサイトを公開した。世界中の人が日本への応援メッセージを投稿する Web サービスだ。

&gt;&lt;center&gt;&lt;a href=&quot;http://www.messagesforjapan.com/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110426/20110426015622.png&quot; border=&quot;2&quot; width=&quot;450&quot; height=&quot;294&quot;&gt;&lt;br&gt;Messages for Japan&lt;/a&gt;&lt;/center&gt;&lt;

メッセージは全て、日本語に自動翻訳されており、世界中からのメッセージに勇気付けられる。

**HTML5 バリバリではない
一見 Flash を使ってるかのように見えるぐらいに派手な見た目なんだけど、Google の HTML5 押しの流れの延長で、JavaScript で組んである。Flash は一切使われていない。iPhone でも閲覧できるようなので、Flash は最初から選択肢に入らない。

かといって HTML5 バリバリかと思いきや、実はそれほどでもない。
====
たとえば、トップページの hover すると色が変わって大きくなるアイコン。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110426/20110426015624.png&quot; width=&quot;300&quot; height=&quot;164&quot;&gt;&lt;/center&gt;&lt;

いかにも canvas を使ってそうなんだけど、色を変える部分では「2種類の背景画像を切り替える」という古式ゆかしいテクニックを使っている。アニメーションで CSS3 の CSS Transform を使っているので、広義には HTML5 を使ってはいるのだが、激しく駆使しているわけではない。

互換性を気にしつつ、見た目がよくなるところは HTML5 の新機能を使っていこう、という意図になっている。

**Google のデザイン体制が変わった？
Google 検索や Gmail の例を出すまでもなく、いままで Google は機能的なデザインを作るのを得意としてきた。

思い出すのは２年前の記事。「Google ではデザインを決めるにもデータを重視して、デザイナの感性は優先されない」として、元 Google のデザイナさんが恨み節を炸裂させていた。
&gt;http://japan.cnet.com/news/biz/20390324/:title&gt;
　そう、Googleでは2種類の青色のいずれかで決めかねたら41の中間色をテストして最もパフォーマンスのよいものを選ぶというのは事実なのだ。先日、境界線の幅を3ピクセル、4ピクセル、5ピクセルのいずれにするかが問題になったとき、自分の意見を証明するよう求められた。このような環境で仕事をすることはできない。そうした些細なデザインの決定を論じるのにはもううんざりだ。
&lt;&lt;

今でも主力サービスでは上の発言のようなデザイン体制を敷いているのだろうが、今回紹介した Messages for Japan をはじめとして、いくつかのサイト製作ではデザイナーさん主体でくみ上げるようなパターンが出てきている。

+&lt;a href=&quot;http://www.google.com/weddings/&quot;&gt;Simplify wedding planning&lt;br&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110426/20110426023929.png&quot; border=&quot;1&quot; width=&quot;180&quot; height=&quot;121&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.googleartproject.com/&quot;&gt;Art Project, powered by Google&lt;br&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110426/20110426023927.png&quot; border=&quot;1&quot; width=&quot;180&quot; height=&quot;119&quot;&gt;&lt;/a&gt;
+&lt;a href=&quot;http://www.boutiques.com/&quot;&gt;Boutiques.com&lt;br&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110426/20110426023928.png&quot; border=&quot;1&quot; width=&quot;180&quot; height=&quot;116&quot;&gt;&lt;/a&gt;

一見、Google が作ったとは思えないようなデザインのものが並んでいる。

ちなみに、Messages for Japan で利用しているライブラリは jQuery, jQuery UI , modernizr だったりと、一般的な Web 開発者が使いそうなライブラリが用いられているのも印象的だ。

**Google API デモとしての側面
Messages for Japan では2つの Google のサービスを活用して構築されている。

:Google 翻訳:世界各国からのメッセージが日本語に機械翻訳されて表示される。
:Google マップ:Google マップ上に世界中からのメッセージが表示される。

このうち、Google マップの見た目がかっこいい。

&gt;&lt;center&gt;&lt;a href=&quot;http://www.messagesforjapan.com/messages/map/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110426/20110426015623.png&quot; width=&quot;450&quot; height=&quot;299&quot; border=&quot;2&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

色あいが素敵だし、マーカーがアニメーションで登場する。どちらも Google Maps API v3 から導入された「地図の色を変更する Styled Map 機能」と「マーカーのアニメーション機能」で実現している。

なるほど。Messages for Japan は「Google のサービスをうまく組み合わせれば、こんなサービスを作れるんだよ」というデモにもなってるわけだ。

**まとめ
Google 先生自身が小粋なサイトを作るようになってしまったら、我々一般庶民は何を作ればよいのだろうか。
</body>
</day>
<day date="2011-05-09" title="">
<body>
*box2d_lite_in_as3*[as3][box2d]Box2D Lite を Flash 化してみた
これまで Box2D を使っていろいろ作ったのだけど、Box2D をはじめとする物理エンジンがどのような仕組みで動いているのか、理解していなかった。まとまった時間がある GW の間に Box2dFlashAS3 のソースを読もうとしたのだけど意味不明すぎる。

**Box2D Lite があるじゃないか
諦めかけたころに、Box2D の &lt;a href=&quot;http://code.google.com/p/box2d/downloads/list&quot;&gt;ダウンロード ページ&lt;/a&gt;を眺めていたら Box2D Lite なるものが存在していた。どうやら、Box2D Lite は Box2D の初期リリースのようだ。ちょっと見てみたところ、ソースの分量も少なくてシンプル。機能が増えて複雑になる手前なら全体構造も把握しやすい！

気分よくソースを読んで Box2D Lite の全体構造は把握できたものの、衝突判定のところはやっぱり意味不明。

**挫折して Flash 化
悶々として楽しくなかったので、C++ のソースを ActionScript 3 に移植してみた。ソースを機械的に変換していくだけの簡単なお仕事。

&gt;&lt;center&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/w1f7/js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(要 Flash Player 10 以上)&lt;/noscript&gt;&lt;p class=&quot;ttlBpWonderfl&quot; style=&quot;width: 465px; margin: 0; text-align: right; font-size: 11px;&quot;&gt;&lt;a href=&quot;http://wonderfl.net/c/w1f7&quot; title=&quot;Box2d Lite in ActionScript 3&quot;&gt;Box2d Lite in ActionScript 3 - wonderfl build flash online&lt;/a&gt;&lt;/p&gt;&lt;/center&gt;&lt;

:1～9:デモを切り替え
:←、→:デモを切り替え
:スペース キー:爆弾(?)を投下

**機能は少ないけどそれなりに動く
Box2D Lite は円も多角形もなく、跳ね返り係数もない、ドラッグもできない。

機能は「四角とジョイント」ぐらい。ただ、四角とジョイントを組み合わせるだけでも、ドミノや橋のデモがあって、比較的それっぽい。

ソースも ActionScript で 1,500 行ほどと短い。しかも、そのうち400行ほどはデモデータだ。ActionScript には演算子のオーバーロードがないので、ベクトルや行列の演算をいちいちメソッドで実装している。C++ が読める人にとっては、オリジナルの C++ のソースのほうが読みやすいとは思う。

現在、衝突判定のところを解読中で、少しずつ謎は解けてきている。が、先は長い…。理解できたらブログにまとめるかもしれない。
</body>
<comments>
<comment>
<username>よろしくメガドッグ</username>
<body>これは興味深いです。&lt;br&gt;C++ソースをAS3に移植したという試みが面白いですね。&lt;br&gt;今のFlashはできる事が非常に多いので、今後、他言語で作られたライブラリをFlashに移植する事とか出てくるかもしれませんね。&lt;br&gt;凄く夢が広がります。</body>
<timestamp>1305007415</timestamp>
</comment>
</comments>
</day>
<day date="2011-06-06" title="">
<body>
*beatifl_code_review*[as3]ActionScript Beautifl Code で ActionScript の技を学ぼう
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110606/20110606234546.jpg&quot; width=&quot;450&quot; height=&quot;160&quot; alt=&quot;Beautifl Code&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
自分が書いたコードが &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4862671098/nitoyoncom-22/&quot;&gt;ActionScript Beautifl Code～Beautifl: Flash Gallery of wonderfl～&lt;/a&gt; という本に掲載された関係で献本が届きました。

この本は ActionScript 投稿サイトの &lt;a href=&quot;http://wonderfl.net/&quot;&gt;wonderfl&lt;/a&gt; に投稿された 97 作品をオールカラーで解説してくれているステキな本です。

本に掲載されている作品は [http://beautifl.net/book/:title=Beautifl 本特設サイト] にまとめられています。ここから本家の wonderfl に飛べばソースコードが見れるのですが、仕組みを知るためにソースコードを全てチェックするのは大変…。

その点、この本は、ソースコードのエッセンスを抽出してくれていたり、背後でどういう描画が行われているかを図解たっぷりで説明してくれたりするので、パラパラっとページをめくってるだけでも「あー、裏側はこんな風になってるんだー」というのが分かって楽しい！

また、HTML5 が盛んになってくると、ActionScript で利用されていたテクニックを CANVAS などで生かす機会も増えてくるでしょう。そんなときにもネタ帳として、この本を持っておくといいかもしれません。（ちゃっかり、巻末には JavaScript への移植方法の一例まで解説されています）

**掲載３作品
ちなみにわたしの作品は次の３点が掲載されています。
====
***1. Hello World!!!
&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/nCFQ/js&quot;&gt;&lt;/script&gt;&lt;p class=&quot;ttlBpWonderfl&quot; style=&quot;width: 465px; margin: 0; text-align: right; font-size: 11px;&quot;&gt;&lt;a href=&quot;http://wonderfl.net/c/nCFQ&quot; title=&quot;Hello World!!!&quot;&gt;Hello World!!! - wonderfl build flash online&lt;/a&gt;&lt;/p&gt;

wonderfl がリリースされた当初に、wonderfl 上のエディタで作った作品です。懐かしいなー。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
-(関連) [http://d.hatena.ne.jp/nitoyon/20081218/wonderfl_review:title]
&gt;&lt;/div&gt;&lt;

**2. Rainbow Glow Effect
&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/vM5c/js&quot;&gt;&lt;/script&gt;&lt;p class=&quot;ttlBpWonderfl&quot; style=&quot;width: 465px; margin: 0; text-align: right; font-size: 11px;&quot;&gt;&lt;a href=&quot;http://wonderfl.net/c/vM5c&quot; title=&quot;Rainbow Glow Effect&quot;&gt;Rainbow Glow Effect - wonderfl build flash online&lt;/a&gt;&lt;/p&gt;

Fork 元の作品が単色でキラキラ光っていたのを虹色にしたもの。オリジナルを20行ぐらいしか手を入れていないのに採用されてしまって少し申し訳ない気分…。

**3. キラキラ3D Typography
&lt;script type=&quot;text/javascript&quot; src=&quot;http://wonderfl.net/blogparts/mnwo/js&quot;&gt;&lt;/script&gt;&lt;p class=&quot;ttlBpWonderfl&quot; style=&quot;width: 465px; margin: 0; text-align: right; font-size: 11px;&quot;&gt;&lt;a href=&quot;http://wonderfl.net/c/mnwo&quot; title=&quot;キラキラ3D Typography&quot;&gt;キラキラ3D Typography - wonderfl build flash online&lt;/a&gt;&lt;/p&gt;

Flash 10 のネイティブ 3D API の勉強ついでに投稿したコード。このブログには書いてなかったなぁ…。

**残念なところ
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110606/20110606234547.jpg&quot; width=&quot;450&quot; height=&quot;355&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

自分のアイコンが去年作成した「&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20100108/nenga&quot;&gt;まねきトラダック&lt;/a&gt;」のままにしていたのが少し失敗だったと思いました。

興味のある人はぜひお買い求めくださいませ。
asin:4862671098:detail
</body>
</day>
<day date="2011-06-14" title="">
<body>
*fox_searchlight_movie*20世紀 FOX オープニング風のパロディ動画を作る方法
いわずと知れたアレのパロディーを作ってみた。サンプルはこれ。

&gt;&lt;center&gt;[http://www.youtube.com/watch?v=jmXERuWGno8:movie]&lt;/center&gt;&lt;noscript&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110614/20110614002748.jpg&quot; width=&quot;450&quot; height=&quot;212&quot; border=&quot;1&quot;&gt;&lt;/noscript&gt;&lt;

かなり再現度が高い。イベントのオープニングとか結婚式に流すビデオなんかにオリジナルの文字を表示すると盛り上がるかもしれない。

一見作るのが大変そうに見えるが、どこかのえらい人が Blender のファイルを作ってくれているので、これをちょっと修正するだけで作れてしまった。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110614/20110614003618.png&quot; width=&quot;450&quot; height=&quot;325&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;
====
以下に作成までの簡単な手順を紹介しておく。

**作成手順
+Blender と blend ファイルを入手する
--Blender
---http://www.blender.org/
--blend ファイル
---http://blender.sixmonkeys.geek.nz/albums/album41/FOX_Logo_by_Matt_Hoecker.blend (リンク先が切れていたら、同じファイル名で検索すると、他の誰かがアップロードしたものが見つかるはず)
+Blender をインストールして blend ファイルを開く
+文字を右クリックして Tab キーを押すと編集モードになる。文字を適切に変更する
+文字をリサイズしたり、移動したりする
+Render でレンダリングの設定を行ってから、[Animation] ボタンをクリックしてレンダリングを開始する (Blender 2.5 の場合)
+600 枚の画像ファイルが出力されるので、適切な動画ソフトで 30 fps の動画に変換する

ちなみに、手元の Core 2 の 2GHz のノートで、NTSC 16:9(720×480) で出力すると、1枚あたり1分程度かかった。続きからレンダリングするには Output オプションで Overwrite のチェックを外すと、前回の続きからレンダリングしてくれる。上の動画をみれば分かるとおり、T の字がチカチカしてしまっているのだけど、この原因はよく分からない。Blender には詳しくないので諦めた。

600 枚の連番画像の動画化は、TMPGEnc で MPEG1 に変換した。TMPGEnc じゃなくても、ほとんどの動画ソフトが連番画像の動画化には対応しているだろう。

このままでは無音のままなので、音声を &lt;a href=&quot;http://www.youtube.com/watch?v=c-8V16SjvlI&quot;&gt;本物の動画&lt;/a&gt; から何らかの方法で抜き出して、映像と一緒にエンコードすれば、内輪で上映する分には事足りるだろう。

**参考リンク
-[http://h0llyw00dy.angelfire.com/:title=CREATE YOUR OWN 20TH CENTURY FOX LOGO]

</body>
<comments>
<comment>
<username>リュージ</username>
<body>すばらしい解説をありがとうございます！！！&lt;br&gt;1点だけご質問が・・・&lt;br&gt;、[Animation] ボタンをクリックしてレンダリングを開始する&lt;br&gt;→この後、600 枚の画像ファイルはいったいどこへ出力＆保存されたのでしょうか？？？&lt;br&gt;&lt;br&gt;恐縮ですが、ご回答いただけると助かります。</body>
<timestamp>1318017712</timestamp>
</comment>
</comments>
</day>
<day date="2011-06-17" title="">
<body>
*lightroom_license*2万6千円でシールを買った話
&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110617/20110617003208.jpg&quot; width=&quot;210&quot; height=&quot;333&quot; border=&quot;1&quot; align=&quot;right&quot; style=&quot;margin-left:.5em&quot;&gt;
ちょっと前から Adobe Lightroom 3 を試していて写真の整理や RAW 現像が便利だった。１ヶ月の試用期限が切れたので、ライセンスを手に入れるために kakaku.com で最安の Amazon からパッケージを購入してみた(2万6千円)。

数日後、届いたパッケージには CD-ROM のケースが入っていたんだけど、CD-ROM の中身には用はない。既に試用版はインストール済みである。

重要なのは CD-ROM ケースに貼ってあるライセンス番号のシール。シールの番号を Lightroom の起動画面に入力すれば、再び最初の１ヶ月のように利用できるようになった。

Lightroom 3 を2万6千円で買ったつもりだったのに、利用したのは CD-ROM ケースに貼ってあるシールだけ。シールを2万6千円で買ったような錯覚に陥ってしまった…。&lt;br clear=&quot;all&quot;&gt;

(追記) 領収書を見直したら、自分は2万9千円で購入していた。数日の間に3千円値引かれていた。ショック…！

asin:B003PPAB9W:detail
</body>
<comments>
<comment>
<username>n36kasai</username>
<body>はじめまして。&lt;br&gt;Lightroom購入おめでとうございます。&lt;br&gt;僕も最近シール買いました！&lt;br&gt;現像楽しいですねー</body>
<timestamp>1308782720</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。&lt;br&gt;楽しいですよねー。</body>
<timestamp>1309191351</timestamp>
</comment>
</comments>
</day>
<day date="2011-06-28" title="">
<body>
*lightroom_lua_console*Lightroom で Lua を eval するプラグインを作った
せっかく [http://d.hatena.ne.jp/nitoyon/20110617/lightroom_license:title=Lightroom を買った] ので、Lightroom に詳しくなろう、と思って Lightroom SDK を触ってみました。

Lightroom では Lua でプラグインを書くことができます。Lua は C 言語に組み込んで使うのが簡単なようで、Wireshark やいくつかのオンラインゲームなどに組み込まれているようです。また、Lightroom はプラグインだけでなく、本体の開発も Lua で行われているようです。興味深いですね。
&gt;http://thinkit.co.jp/free/article/0711/4/2/:title&gt;
例えばAdobeの画像処理ソフトウェア「Lightroom」では、40%に相当する部分がLuaで記述されているという。
&lt;&lt;

**さっそくプラグインを作ってみた
さて、その Lua を使ったらどんなことができるのか調べるために、簡単にコードを eval できるプラグインを作ってみました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110628/20110628012707.jpg&quot; width=&quot;450&quot; height=&quot;340&quot;&gt;&lt;/center&gt;&lt;
====
例えば初期状態では、次のようなコードが入っています。
&gt;|lua|
local LrApplication = import 'LrApplication'
local catalog = LrApplication.activeCatalog()

local s = &quot;&quot;
for i  = 0, 5 do
    local photos = catalog:findPhotos {
        searchDesc = {
             criteria = &quot;rating&quot;,
             operation = &quot;==&quot;,
             value = i,
        }
    }
    s = s .. string.format(&quot;Rate %d: %05d photo(s)\\n&quot;, i, #photos)
end

return s
||&lt;
これを実行すると、カタログ中のレーティング別の写真の数を表示できます。
&gt;|
Rate 0: 17920 photo(s)
Rate 1: 00033 photo(s)
Rate 2: 00023 photo(s)
Rate 3: 00013 photo(s)
Rate 4: 00004 photo(s)
Rate 5: 00010 photo(s)
|&lt;

ただ、標準の &lt;code&gt;edit_field&lt;/code&gt; でソースを編集するのはあまりに大変なので、外部エディタで編集して、自動的に更新するような仕組みを導入するよう改善したいと思っています。

**github で入手してね！
github で公開してます。
-[https://github.com/nitoyon/lua-console-lightroom-plugin:title]

**binding がおもしろい
Lightroom SDK はだいたい想像通りの構造になってるのですが、GUI を公開するポリシーが割り切っていて興味深いです。

よくあるフレームワーク設計では、UI のパーツを表現するクラスが公開されていて、そのクラスを組み合わせて &lt;code&gt;addChild&lt;/code&gt; なり &lt;code&gt;setText&lt;/code&gt; なりするのが普通だと思います。

けど、Lightroom は違います。UI 作成後、Lua から UI を直接触ることはできません。

そのかわり、あとから変更・参照したいプロパティには UI 作成時に、binding を渡しておきます。UI 作成後は、binding 経由で UI のプロパティを設定・取得します。

たとえば、ボタンが押されたときのコールバックでは、ユーザーの入力した値を binding を利用して知ることができます。visible や enable の変更も binding 経由で行います。さらに、binding には変更時のコールバックを登録できるので、例えば、テキストボックスの値を利用者が変更したら通知を受け取る、といったことも可能です。

このような割り切った設計は、UI のツリー構造を動的に組み替える必要がなく、また、UI 側のフレームワークを自前で提供するならありなのかもしれません。また、Lua では&lt;code&gt;__index&lt;/code&gt; でテーブルが変更されることを検知できる言語だ、というのも重要な要素だといえます。

**Debugging Toolkit for Lightroom 3 SDK が便利
Lightroom プラグインの作り方を探してるときに [http://www.johnrellis.com/lightroom/debugging-toolkit.htm:title=Debugging Toolkit for Lightroom 3 SDK] というものを見つけたんだけど、これがなかなか便利。Lua ファイルを再読み込みせずに実行できる。って、あれ？　これがあるなら今回つくったプラグインも不要だったのでは…。

asin:B003PPAB9W:detail
asin:B004WA7E94:detail

</body>
</day>
<day date="2011-08-31" title="">
<body>
*programmable_launcher_clnch3*[CraftLaunch3]プログラマブルなコマンドライン ランチャー CraftLaunch 3 が楽しい
自分はキーボード派なので、コマンドライン ランチャーを愛用している。歴史的には Moonlight → CraftLauch 2 という順に推移してきたのだけど、端末が変わったのをきっかけに CraftLaunch のサイトを見てみたら、いつのまにかメジャーバージョンアップして CraftLaunch 3 ができていた。

この CraftLaunch 3 がなかなかプログラマ魂を刺激するもので、「設定ファイルは config.py」というアグレッシブなものになっている。ソースも公開されていて、コードのほとんど全てが Python で実装されている。ソースを参照しつつ config.py に拡張機能を書くことで、いろいろとカスタマイズできる。

**スクリプト言語でソフトウェアを作るということ
ちょっと前に、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20110628/lightroom_lua_console&quot;&gt;「Lightroom は 40% のコードが Lua で、プラグインも Lua で書く」という話を紹介した&lt;/a&gt;けど、CraftLaunch 3 はこれの Python 版。

どちらも、アプリケーションのコア部分をネイティブ言語で API として実装して、残りの本体をスクリプト言語で実装している。この方法のメリットは、コアとそれ以外が分離されるし、コアが提供する API を使って本体を開発するわけだから、自然と利用者に見せる「カスタマイズ可能な部分」の API も洗練されてくる。

カスタマイズ可能なソフトウェアを作るときには参考になるプログラミングモデルだと思った。

**せっかくなのでカスタマイズ
前置きが長くなったけど、さっそく自作の拡張を書いてみた。

同じアプリケーションを何個も立ち上げていたとき、同じアプリケーションのウインドウをまとめて最小化したり閉じたりしたくなることがある。

そんな要望に対応するために、&lt;strong&gt;指定した exe のウインドウを「最前面・最大化・最小化・元のサイズに戻す・閉じる」コマンド&lt;/strong&gt;を作ってみた。
====
ソースコードは https://github.com/nitoyon/clnch3_extensions/blob/master/window_command.py にある。

***インストール方法
+CraftLaunch のインストールフォルダの extension フォルダに window_command.py を置く
+window_command.py 中の「定義例」のソースを config.py に書く。
+CraftLaunch を再起動するか、Reload を実行する。

***ざっと使い方
-&lt;code&gt;foreground;notepad&lt;/code&gt; と入力すれば、メモ帳を最前面にできる。
-&lt;code&gt;minimize;notepad&lt;/code&gt; と入力すれば、メモ帳を全て最小化できる。
-&lt;code&gt;close;notepad&lt;/code&gt; の代わりに &lt;code&gt;notepad&lt;/code&gt; と入力して &lt;code&gt;Ctrl + [-]&lt;/code&gt; でもよい。

対象の実行ファイルは実行ファイル名、もしくは、登録しているコマンドで指定することができる。

***内部的なこと
ウインドウ操作の部分は CraftLaunch 3 に同梱されている同じ作者が作った Python でウインドウを扱うライブラリ、pyauto を利用している。Win32 API を知っていれば素直に扱えた。

今回作ったコマンドでは、登録済みのコマンドを取得するために &lt;code&gt;loadCommandListFromIniFile&lt;/code&gt; という関数を定義している。この実装は CraftLaunch 本体の&lt;code&gt;clnch_mainwindow.MainWindow.loadCommandFromIniFile()&lt;/code&gt; 関数の真似をして実装している。そのまま流用できればよかったんだけれども、&lt;code&gt;clnch_mainwindow.MainWindow.loadCommandFromIniFile()&lt;/code&gt;関数が破壊的だったので流用が難しかったのが残念だ。ぜひとも、設定ファイルから一覧を取得するメソッドとして実装しなおしてほしいと思った。こんな風に…。

&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|diff|
@@ -850,7 +850,7 @@
             ( u&quot;Quit&quot;,      self.command_Quit ),
         ]

-        self.loadCommandFromIniFile()
+        self.launcher.command_list += self.loadCommandFromIniFile()

         try:
             fd = file( self.config_filename, 'r' )
@@ -899,6 +899,7 @@
     def loadCommandFromIniFile(self):

         i=0
+        ret = []
         while True:
             try:
                 command_string = unicode( clnch_ini.get( &quot;COMMANDLIST&quot;, &quot;comman
d_%d&quot;%(i,) ), &quot;utf8&quot; )
@@ -909,9 +910,10 @@
             command_name, command_args = command_tuple[0], command_tuple[1:]

             command = self.command_ShellExecute( None, *command_args )
-            self.launcher.command_list.append( ( command_name, command ) )
+            ret.append( ( command_name, command ) )

             i+=1
+        return ret
||&lt;
&gt;&lt;/div&gt;&lt;

**まとめ
普段つかうソフトウェアが拡張可能になってると楽しい。Windows 文化では結構珍しいことだからなおさら楽しい。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-プログラマブルなコマンドライン ランチャー CraftLaunch 3 が楽しい
-[http://d.hatena.ne.jp/nitoyon/20110902/clnch3_open_folder:title]
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2011-09-02" title="">
<body>
*clnch3_open_folder*[CraftLaunch3]CraftLaunch 3 自作拡張 open_folder
[http://d.hatena.ne.jp/nitoyon/20110831/programmable_launcher_clnch3:title=プログラマブルなコマンドライン ランチャー CraftLaunch 3 が楽しい]ので、さらに自作拡張を作ってみた。

**今回は open_folder 拡張を紹介します!!!
たまにアプリケーションのインストールフォルダを開きたくなることがある。幸い、CraftLaunch にはアプリケーションをコマンドとしてたくさん登録している。そこで、コマンド名を入力して、&lt;code&gt;Shift-Enter&lt;/code&gt; を押したら、インストールフォルダーをエクスプローラーで開くようにしてみた。

さらに、&lt;code&gt;Ctrl-Enter&lt;/code&gt; でインストールフォルダーをコマンド プロンプト&lt;/code&gt; で開くようにしてみた。
====
たとえば、&lt;code&gt;PuTTY&lt;/code&gt; をコマンドとして登録していたとして、
+&lt;code&gt;PuTTY&lt;/code&gt; と入力して &lt;code&gt;Shift-Enter&lt;/code&gt; を押す
+エクスプローラーで &lt;code&gt;PuTTY.exe&lt;/code&gt; があるフォルダーが開く
+そこから &lt;code&gt;README.txt&lt;/code&gt; を読んだり &lt;code&gt;puttygen.exe&lt;/code&gt; を起動したりできる
といううれしさがあったり、
+&lt;code&gt;PuTTY&lt;/code&gt; と入力して &lt;code&gt;Ctrl-Enter&lt;/code&gt; を押す
+コマンドプロンプトで &lt;code&gt;PuTTY.exe&lt;/code&gt; が入っているフォルダが開く
+そこから &lt;code&gt;plink.exe&lt;/code&gt; を起動して ssh 接続したり、&lt;code&gt;pscp.exe&lt;/code&gt; を起動して scp したりできる
とできる。

コマンドプロンプトで特定のフォルダーを開くことが多い人は、そのフォルダーをコマンドとして登録しておけば、&lt;code&gt;Ctrl-Enter&lt;/code&gt; でコマンド プロンプトで開けて、&lt;code&gt;(Shift-)Enter&lt;/code&gt; でエクスプローラーで開けるので便利だろう。

お気に入りのファイラーがある人は、適当にソースコードを修正して、それを使うようにしてみるとよいだろう。

**Alt-Enter も!!!
ここまで作って &lt;code&gt;Alt-Enter&lt;/code&gt; を作りたくなった。

CraftLaunch 3 では &lt;code&gt;Command&lt;/code&gt; と入力して、一覧からコマンドを選択して &lt;code&gt;Enter&lt;/code&gt; か &lt;code&gt;E&lt;/code&gt; を押さないと編集できないのが面倒だった。

そこで、コマンド名を入力して、&lt;code&gt;Alt-Enter&lt;/code&gt; を押すと、コマンドの設定を変更できるようにしてみた。

便利便利。

**インストール方法
ソースコードは https://github.com/nitoyon/clnch3_extensions/blob/master/open_folder.py にある。

+CraftLaunch のインストールフォルダの &lt;code&gt;extension&lt;/code&gt; フォルダに &lt;code&gt;open_folder.py&lt;/code&gt; を置く
+&lt;code&gt;open_folder.py&lt;/code&gt; 中の「定義例」のソースを &lt;code&gt;config.py&lt;/code&gt; に書く。
+CraftLaunch を再起動するか、Reload を実行する。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20110831/programmable_launcher_clnch3:title=プログラマブルなコマンドライン ランチャー CraftLaunch 3 が楽しい]
-CraftLaunch 3 自作拡張 open_folder
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2011-09-07" title="">
<body>
*end_of_maps_api_for_flash*[GoogleMapsAPI][as3]Google Maps API for Flash が廃止、3年でサポート打ち切り
Google Desktop や Google Note などと同時に Google Maps API for Flash が廃止されることが発表されました。

&gt;http://ascii.jp/elem/000/000/632/632086/:title&gt;
米Googleは2011年9月2日、数ヶ月内に終了する10サービスを公式ブログで発表した。(中略)

終了するサービスは次の通り。

-Google Maps API for Flash：Google MapsをFlashアプリに埋め込むためのActionScript API。今後はJavaScript Maps API v3に。
&lt;&lt;

また、Google-Maps-API-Japan の Google グループ上に &lt;a href=&quot;href=&quot;http://googlegeodevelopers.blogspot.com/2011/09/maps-api-for-flash-deprecation.html&quot;&gt;Google Geo Developper ブログの公式発表&lt;/a&gt; の日本語訳が掲載されています。

&gt;https://groups.google.com/group/google-maps-api-japan/browse_thread/thread/47a0dc239be6bbe7?pli=1:title&gt;
2008年5月 Google Maps API for Flashは、Google MapsでFlashアプリケーションを利用したい、Flashの性能とクロスプラットフォームで利用したいというActionScriptディベロッパー達からの需要に応えて開始しました。
しかしMaps API for Flashの使用量はMaps API 全体の通信量の少ない割合でしかなく、いくつかの数のアプリケーションしか Maps API for Flashの便利でユニークな機能を使っていませんでした。
さらには、ブラウザのJavaScriptの実装のパフォーマンスと一貫性が進化し、JavaScript Maps APIによる開発は代替手段としてだんだんなってきました。
結果としてGoogle MapsチームはMaps API for Flashを廃止し、JavaScript Maps API v3を発展させていくことに集中することにしました。Maps API for Flashアプリケーションは機能はMaps API利用規約の廃止ポリシーに従って機能が提供されます。深刻なバグ、リグレッション(前のバージョンにはなかったバグの再発)、セキュリティーの問題などは修正されます。
&lt;&lt;
「Maps API利用規約の廃止ポリシー」によると3年間は深刻なバグやセキュリティーの問題は修正されるようです。しかし、3年後にはメンテナンスされなくなるなり、何かの拍子に動かなくなることもありえるでしょう。

新規に Google Maps API を使ったサイトを作成する場合には、JavaScript の Google Maps API v3 を利用することが推奨されています。

**そもそも v2 をベースにしていた Google Maps API for Flash
Google Maps API for Flash がリリースされたのは 2008年5月。そのときには、JavaScript の API も v2 でした。

その後、いくつかの Flash サイトでは、Google Maps API for Flash を活用したものが登場してきました。たとえば、[http://projects.nytimes.com/crime/homicides/map:title] では、地図を &lt;code&gt;ColorMatrixFilter&lt;/code&gt; でモノクロ可して、サイトの雰囲気に合わせているのが印象的で、Flash ならではだなーと思ったりしました。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20110907/20110907023144.jpg&quot; width=&quot;450&quot; height=&quot;347&quot;&gt;&lt;/center&gt;&lt;
====
その１年後、2009年5月に JavaScript の API は v3 にバージョンアップされました。API キーが不要になり、iPhone がサポートされ、MVC を利用した構造で再構築されました。2010年5月には、Styled Map 機能もサポートされ、「独自の色の地図」も JavaScript API で実現できるようになりました。

JavaScript API の進化に置いていかれた Flash API ですが、2009年7月、Flash API 独自の機能として「perspective map」が追加されたのが印象的でした。この機能を使うと、Google Maps の地図を 3D 風に傾けて表示できたのです。 
&gt;&lt;center&gt;&lt;a href=&quot;http://gmaps-samples-flash.googlecode.com/svn/trunk/examples/Map3DSimple.html:Map3DSimple.html&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20090802/20090802200416.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

しかし、その後、JavaScript v3 の API が進化していく一方で、Flash の API は v2 をベースにしたまま進化は止まっていました…。いつしか、Flash API を使った Flash サイトを見る機会も減ってきた気がします。

今回、Flash の API を v3 にするコストと、それによって得られるメリット・デメリットを比較して、今回の廃止に至ったのでしょう。

**今後作るなら JavaScript v3 で
JavaScript v3 API ではストリートビュー、Places検索、モバイル(Android, iPhone)のサポートなどもあるため、今後は JavaScript v3 API を使いましょう。駆け込みで Flash を使いたい人は、3年以上長持ちするようなサイトでないなら、実験するなら今のうちです。

(追記 2012/02/21) API キーの取得ができなくなっていたようです。今後の新規利用はますます現実的ではなくなりました。
&gt;http://code.google.com/intl/ja/apis/maps/signup.html:title&gt;
New keys are no longer available for the Maps API for Flash.
&lt;&lt;

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20110228/diorama_google_maps:title]
-[http://d.hatena.ne.jp/nitoyon/20090802/google_perspective:title]
-[http://d.hatena.ne.jp/nitoyon/20080625/googlemaps_kmz:title]
-[http://d.hatena.ne.jp/nitoyon/20080523/google_maps_earth2:title]
-[http://d.hatena.ne.jp/nitoyon/20080522/googlemaps_layer:title]
-[http://d.hatena.ne.jp/nitoyon/20080516/flash_news:title]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2011-09-17" title="">
<body>
*win8_dev_preview_on_virtualbox_win7*[ms][win8]Windows 8 開発者プレビューを Win7 上の VirtualBox で動かしてみた
&lt;strong&gt;(2012/03/01 追記) &lt;a href=&quot;http://windows.microsoft.com/en-US/windows-8/iso&quot;&gt;Windows 8 Consumer Preview&lt;/a&gt; も同じ手順で導入できました&lt;/strong&gt;。

Windows 8 の開発者プレビューが&lt;a href=&quot;http://msdn.microsoft.com/en-us/windows/home/&quot;&gt;一般公開された&lt;/a&gt;ので試しに触ってみた。

最初、ESXi 4.1 にインストールしようとしたけど途中で再起動してしまってうまくいかない。検索しても成功したという報告が見つけられなかった((ただし、VMware 8 なら動くという報告はあり http://itknowledgeexchange.techtarget.com/information-technology/windows-8-developer-preview-and-esxivmware-workstation/))。

Hyper V や VirtualBox なら簡単にインストールできるらしいので、無料で入手できる VirtualBox にインストールしてみた。

試した手順をまとめておく。

**環境
-Windows 7 Professional SP1 (64bit)
-VirtualBox 4.1.2 for Windows

**1. ISO ファイルをダウンロード
http://msdn.microsoft.com/en-us/windows/apps/br229516 から ISO ファイルをダウンロードする。

**2. VirtualBox をダウンロード
VirtualBox 4.1.2 for Windows をダウンロードしてインストール。

**3. 仮想マシンを作成
VirtualBox を起動して、&lt;code&gt;[新規]&lt;/code&gt; ボタンをおして仮想マシンを作成する。

OS のバージョンは &lt;code&gt;[Windows 2008]&lt;/code&gt; としておいた。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917160743.png&quot; width=&quot;450&quot; height=&quot;302&quot;&gt;&lt;/center&gt;&lt;
残りのオプションはデフォルトで作成。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917160744.png&quot; width=&quot;450&quot; height=&quot;302&quot;&gt;&lt;/center&gt;&lt;
====
**4. ISO ファイルを DVD として認識させる
ダウンロードした ISO ファイルが DVD ドライブに入っているように見せかける。

+[設定] ボタンを押して、左から [ストレージ] を選択。
+&lt;code&gt;[IDE コントローラ]&lt;/code&gt; の下の &lt;code&gt;[空]&lt;/code&gt; を選択。
+ディスクのアイコンをクリックして、&lt;code&gt;[仮想CD/DVDディスクファイルの選択...]&lt;/code&gt; をクリック。&lt;br&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917160745.png&quot; width=&quot;450&quot; height=&quot;216&quot;&gt;
+ダウンロードした ISO ファイルを選択。
+&lt;code&gt;[OK]&lt;/code&gt; を押して設定を保存。

**5. 仮想マシンを起動
&lt;code&gt;[起動]&lt;/code&gt; ボタンを押して仮想マシンを起動する。

各種設定はデフォルトでインストールする。

ただし、&lt;code&gt;[Which type of installation do you want?]&lt;/code&gt; では &lt;code&gt;[Custom (advanced)]&lt;/code&gt; を選ぶのを忘れずに。&lt;code&gt;[Upgrade]&lt;/code&gt; を選んでも HDD 上に OS は入っていないので意味なし。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917162900.png&quot; width=&quot;450&quot; height=&quot;388&quot;&gt;&lt;/center&gt;&lt;

途中、ゲスト OS が再起動するが気にせず続行。

**6. 初期アカウントの作成
アカウントは &lt;code&gt;Windows Live ID&lt;/code&gt; を使うか、ローカルアカウントを作るか選択できる。&lt;code&gt;Windows Live ID&lt;/code&gt; を使うといくつかの設定やお気に入りなどを同期できるようだ。

&lt;code&gt;Don't want to log on with a Windows Live ID?&lt;/code&gt; をクリックすると、ローカルアカウントを作成できる。

インストール時の設定画面もバリバリ Metro。チェックボックスが今時のスマートフォン風になっている。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917162901.png&quot; width=&quot;450&quot; height=&quot;338&quot;&gt;&lt;/center&gt;&lt;

**7. 起動完了！
しばらく待つと Metro な UI が表示される。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917162902.png&quot; width=&quot;450&quot; height=&quot;348&quot;&gt;&lt;/center&gt;&lt;

ただし、このままでは Metro なアプリケーションが起動しない。

次のようにすると起動するようになった。

+&lt;code&gt;Desktop&lt;/code&gt; ボタンを押して、従来の Windows デスクトップに移動
+デスクトップを右クリックして、メニューから &lt;code&gt;Screen Resolution&lt;/code&gt; を選択
+1024×768 以上に設定

何か困ったら、スタートボタンを押せば最初の画面に戻るようになっている。

**ちょっと触った感想
Metro UI かっこいい。

ただ、普通の PC で Metro UI は使いにくい。いままで Office を使って仕事していたような人は、いままで通りのデスクトップを使うことになるだろう。

ただ、Web みたり、メールみたり、写真取り込んだり…といった人には Metro で十分かもしれない。そういう層に、どれだけ Metro が受け入れられるか、そのまま Windows Phone を使ってもらえるようになるかが Microsoft の勝負所かもしれない。

</body>
</day>
<day date="2011-09-18" title="">
<body>
*no_flash_on_metro_ie10*[win8][as3][ms]IE10 Metro 版では Flash が動かないので、いよいよ Flash 終わった感
Windows 8 の情報がいろいろ出てきています。この中で気になるのが「&lt;strong&gt;Windows 8 の IE では Flash が動かない&lt;/strong&gt;」という話です。

ちょっと煽りすぎたかもしれないので、もう少し正確に説明してみます。

**２つの IE10
Windows 8 には２つの Internet Explorer 10 が搭載されます。
-Metro 版 IE10
-従来版 IE10

**利用イメージ: Metro 版 IE10
Metro というのは iOS や Android のようにタッチ端末でも使いやすいよう設計されており、Windows 8 の標準 UI に採用されています。

Windows 8 を起動すると、タイル上のメニューが Metro で表示されます。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917162902.png&quot; width=&quot;450&quot; height=&quot;348&quot;&gt;&lt;/center&gt;&lt;

タイルメニューの左上にある Internet Explorer を選択すると Metro 版 IE10 が回転しながら起動します。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917223701.png&quot; width=&quot;450&quot; height=&quot;338&quot;&gt;&lt;/center&gt;&lt;

Metro 版 IE はスマートフォンのブラウザっぽいインターフェースになります。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917210551.png&quot; width=&quot;450&quot; height=&quot;335&quot;&gt;&lt;/center&gt;&lt;

&lt;strong&gt;この Metro 版 IE で、Flash を始めとするプラグインがサポートされていません&lt;/strong&gt;。
====
ためしに Flash Player をインストール後、YouTube の動画ページを開いてみたところ「Flash Player をダウンロードしてください」の警告が表示されます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917210552.png&quot; width=&quot;450&quot; height=&quot;326&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

右下のメニューから &lt;code&gt;[Use Desktop View]&lt;/code&gt; を選択すれば、通常版 IE10 で同じページを開いてくれます。Flash プラグインがインストールされていれば、Flash コンテンツを再生することもできます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917210553.png&quot; width=&quot;450&quot; height=&quot;338&quot;&gt;&lt;/center&gt;&lt;

**利用イメージ: 通常版 IE10
一方、Metro のメニュー一覧から、&lt;code&gt;Desktop&lt;/code&gt; を選択すると、従来の Windows のデスクトップが表示されます。

このデスクトップでブラウザを起動すると、従来版 IE10 を利用できます。UI も今までの IE と同じです。Flash プラグインをインストールすれば、Flash を閲覧することもできます。

&gt;&lt;center&gt;&lt;img src=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20110917/20110917210553.png&quot; width=&quot;450&quot; height=&quot;338&quot;&gt;&lt;/center&gt;&lt;

**どっちの IE が利用されるんだろう
Windows 8 がリリースされたあと、どちらの IE が一般的に広く利用されることになるのでしょうか。

会社で Office や会計ソフトを使って仕事しているいるような人は、Metro ではなく、従来のデスクトップで作業するはずです。つまり、Web を見るときは従来版 IE を使うのが自然な流れでしょう。

しかし、&lt;strong&gt;普段から Web やメールにしかパソコンを使わない人や、スマートフォンに慣れている人は、Metro 版 IE で満足するかもしれません&lt;/strong&gt;。むしろ、Metro のほうがシンプルで分かりやすいし、便利だと思うかもしれません。

そうなると、Flash の未来はなくなります。よほど魅力的なコンテンツであれば「従来版 IE で見てください」でもなんとかなるかもしれません。

しかし、普通の Flash コンテンツ、特にバナー広告で Flash が使われる機会は減ってくるのではないでしょうか。バナー広告を見るために従来版 IE に切り替える人なんていません。

個人的に、「いまの Flash 広告が HTML5 で作られるようになって初めて、HTML5 は普及したといえる」と思っていたのですが、Windows 8 の今回の動きで、いよいよその動きが加速するのではないでしょうか。

**Adobe の声
今回の動きに対して Adobe の Flash Platform Blog に次のようなエントリーが出ていました。
&gt;http://blogs.adobe.com/flashplatform/2011/09/flash-support-on-windows-8-and-metro.html:title&gt;
We expect Windows desktop to be extremely popular for years to come (including Windows 8 desktop) and that it will support Flash just fine, including rich web based games and premium videos that require Flash. In addition, we expect Flash based apps will come to Metro via Adobe AIR, much the way they are on Android, iOS and BlackBerry Tablet OS today (後略).
&gt;&gt;
我々は Windows 8 を始めとした Windows がこの先ずっと人気であることを期待しているし、Flash を必要とする Web ベースのゲームや高品質の動画が Windows でサポートされ続けることを期待している。さらに、Android・iOS・BlackBerry と同じような方法で、Metro アプリケーションを Adobe AIR で作成できるようにしたいと考えている。（※日本語訳: nitoyon）
&lt;&lt;
&lt;&lt;

おそらく Metro 版 IE の件についてのコメントなのでしょう。

AIR を使えば Metro アプリを作れるようにする点をアピールしつつも、Metro 版 IE で Flash を表示できない点については苦しいコメントになっています。

**Microsoft の思惑
今回の措置の理由を Building Windows 8 ブログでは次のように説明しています。
&gt;http://blogs.msdn.com/b/b8/archive/2011/09/14/metro-style-browsing-and-plug-in-free-html5.aspx:title&gt;
Metro スタイルのプラグインフリーな IE を稼働すると、バッテリ持続時間が長くなり、消費者のセキュリティ、信頼性、およびプライバシーも高くなる。プラグインは、ウェブの歴史における初期の時代には重要だった。しかしウェブはそれ以来、HTML5 によって大きく発展した。旧式のプラグイン技術との互換性を維持していたのでは、Metro スタイルの UI を使った閲覧における消費者体験が、向上するどころか低下してしまう。

(※日本語訳は [http://japan.cnet.com/news/service/35007628/:title] より)
&lt;&lt;

Metro アプリでは従来のダイアログなどの Windows 的な UI がサポートされなくなります。Microsoft が公式にプラグインをサポートしなくなるまでもなく、既存のほとんどの ActiveX コントロールは Metro 版 IE では動かないんじゃないかと推測しています。それならばいっそ、プラグインを全て禁止にしてしまったほうが潔いのかもしれません。

また、Windows 8 ではモバイル向け CPU の ARM がサポートされます。ARM 版の Windows 8 上で、従来のデスクトップや従来版 IE が動作するのかは現時点では不明です。ただ、ARM 端末では Metro を中心とした利用になるのは間違いありません。そのときに iPad や Android に負けないパフォーマンスを出すため、Metro 版 IE から無駄な機能を取り去っておきたかったのかもしれません。

今回の措置は、Microsoft にもダメージはあります。Flash 対抗といわれていた Silverlight が Metro 版 IE では動きません。その点については、
&gt;http://japan.cnet.com/news/service/35007628/:title&gt;
SilverlightアプリケーションはMetroアプリケーションに変換することができる。
&lt;&lt;
として開発者にアピールしています。

(追記 2012/06/05) &lt;a href=&quot;http://www.publickey1.jp/blog/12/ie10flash_playermetroflashsilverlight.html&quot;&gt;マイクロソフト、IE10にFlash Playerを統合。MetroスタイルでもFlashコンテンツが利用可能に。Silverlightは含まず － Publickey&lt;/a&gt; によると、Metro 版 IE10 にも Flash プレイヤーは同梱されるようです。ただし、Flash を利用できるのは Compatibility View リストに登録されたものだけであることから、一般向けのサイトで Flash を利用するのが厳しい状況には変わりありません。


&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**参考 URL
-[http://japan.cnet.com/news/service/35007628/:title]
-[http://plusd.itmedia.co.jp/pcuser/articles/1109/16/news030.html:title]
-[http://plusd.itmedia.co.jp/pcuser/articles/1109/15/news088.html:title]
-[http://plusd.itmedia.co.jp/pcuser/articles/1109/14/news016.html:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>Cディベロッパー</username>
<body>むしろ、IE Metro終わった感が凄い。&lt;br&gt;&lt;br&gt;FlashもSilverlightにもたいした思い入れはないが、このMetroは使わないかな。&lt;br&gt;&lt;br&gt;微妙なコンセプトと微妙な見栄えの上にプラグイン使えないとか使う理由が一ミクロンもみえん。&lt;br&gt;&lt;br&gt;IEのシェアが現在進行形で落ちまくりな時に、このアホ開発者ではIEがブラウザの一番から落ちる日も近そう。&lt;br&gt;&lt;br&gt;Metroはイロモノなりに楽しみにしてたのに残念。</body>
<timestamp>1318001346</timestamp>
</comment>
<comment>
<username>兵藤</username>
<body>メトロゴミ過ぎワロタww&lt;br&gt;いやこのブラウザはつかえんでしょうw常識で考えて</body>
<timestamp>1318551378</timestamp>
</comment>
<comment>
<username>n</username>
<body>どんなユーザーだってようつべぐらい見るだろ。</body>
<timestamp>1326101817</timestamp>
</comment>
<comment>
<username>a</username>
<body>Win8が出る頃にゃYoutubeもHTML5になってるでしょう。</body>
<timestamp>1331601179</timestamp>
</comment>
</comments>
</day>
<day date="2011-09-29" title="">
<body>
*async_await_in_js*[JavaScript][win8]WinRT の async/await コーディングがおもしろい(のでJavaScriptで真似してみた)
Windows 8 開発者プレビューでの開発を試していたところ、非同期プログラミングを簡単に書ける &lt;code&gt;await&lt;/code&gt; キーワードが面白かったので紹介します。

Windows 8 用に Metro アプリを開発する場合、WinRT(Windows Runtime)というフレームワークを使ってプログラミングします。

WinRT では、UI 応答速度を上げるための工夫として、少しでも時間がかかる可能性のある処理は、非同期の API のみが提供されています。

なんかめんどくさそうですよね。

いえいえ、そんなことはありません。.NET 5 から導入される &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; キーワードでとても簡単に書けてしまいます。

**HelloWorld アプリケーションのサンプル
たとえば、&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/apps/br211380%28v=vs.85%29.aspx&quot;&gt;HelloWorld アプリケーション&lt;/a&gt;では次のようなサンプルが紹介されています。

&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|cs|
// UI を表示するページのコンストラクタ
// UI スレッドで実行される
public MainPage()
{
    InitializeComponent();

    // RSS/Atom を読み取る
    GetFeedAsync(&quot;http://windowsteamblog.com/windows/b/developers/atom.aspx&quot;);
}

// 非同期に RSS/Atom を読み取るメソッド
// async キーワードがついているので、非同期で
// 実行される可能性がある 
// (メソッドの完了を待たずに、呼び出し元に
//  処理を返すことがある)
private async Task GetFeedAsync(string feedUriString)
{
    SyndicationClient client = new SyndicationClient();
    Uri feedUri = new Uri(feedUriString);

    try
    {
        // 非同期で RSS/Atom を読み取る
        // await キーワードがあるので、GetFeedAsync()
        // メソッドは処理の完了を待たずに、いったん
        // 呼び出し元に return する
        SyndicationFeed feed = 
            await client.RetrieveFeedAsync(feedUri);

        // ここから先は、非同期で RSS/Atom を
        // 読み取り完了時の処理
        FeedData feedData = new FeedData();
        feedData.Title = feed.Title.Text;

        foreach (SyndicationItem item in feed.Items)
        {
            // RSS の各要素の処理を行う
        }
    }
    catch (Exception ex)
    {
        // 非同期での RSS/Atom の読み取りに
        // 失敗したときの処理
        TitleText.Text = ex.Message;
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

コメントで説明してしまいましたが、詳しく見ていきましょう。
====
**&lt;code&gt;await&lt;/code&gt; でいったん呼び出し元に戻る
&lt;code&gt;await&lt;/code&gt; の部分の処理の構造は次のようになっています。

&gt;|cs|
try
{
    // 非同期で RSS/Atom を読み取る
    SyndicationFeed feed = 
        await client.RetrieveFeedAsync(feedUri);

    // 成功時の処理
}
catch (Exception ex)
{
    // 失敗時の処理
}
||&lt;

同期処理のようなコードになっていますね。

しかし、実際には &lt;code&gt;await&lt;/code&gt; キーワードの場所で、メソッドは呼び出し元に処理を返します。その結果、非同期処理の実行中に UI をブロックすることはありません。
その後、RSS/Atom の読み取りが成功または失敗した段階で、メソッドの続きが実行されます。

成功時には、読み取り結果があたかも同期で実行したかのように戻り値として返され、成功時の処理を実行します。失敗時には例外が投げられるので、異常系の処理も簡単に書けます。

イメージ的には次のようなコードを書いているのと同じになります。

&gt;|cs|
    /* !!!! 実際には動かない擬似的なコード !!!! */
    client.RetrieveFeedSuccess += (sender, e) =&gt;
    {
        // 成功時の処理
    }
    client.RetrieveFeedError += (sender, e) =&gt;
    {
        // 失敗時の処理
    }

    // 非同期で RSS/Atom を読み取る
    client.RetrieveFeedAsync(feedUri);
||&lt;


**すばらしい！
非同期を同期的に書けるなんてすばらしい。

コールバックやイベントハンドラ地獄から抜け出せそうな予感！

**ところで、どういう仕組みなのか？
ところで、&lt;code&gt;await&lt;/code&gt; キーワードはどのような仕組みで動いているのでしょうか。

WinRT の非同期メソッドは全て、&lt;code&gt;Task&lt;/code&gt; オブジェクト、&lt;code&gt;Task&amp;lt;TResult&amp;gt;&lt;/code&gt; オブジェクトを返すように実装されています。&lt;code&gt;Task&lt;/code&gt; クラス、&lt;code&gt;Task&amp;lt;TResult&amp;gt;&lt;/code&gt; クラスは、非同期処理を表現するクラスです。

自前のメソッドでも、&lt;code&gt;async&lt;/code&gt; キーワードをつけることで、&lt;code&gt;void&lt;/code&gt; を返すメソッドは戻り値 &lt;code&gt;Task&lt;/code&gt; として、型 &lt;code&gt;T&lt;/code&gt; を返すメソッドは戻り値 &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; として扱われます。

.NET 5 では継続の仕組みが導入されたので、メソッドの処理の途中で、処理をぶった切ったり、再開したりすることができるようになっています。

&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; キーワードは、&lt;code&gt;Task&lt;/code&gt; クラス、&lt;code&gt;Task&amp;lt;TResult&amp;gt;&lt;/code&gt; クラスを利用しつつ、継続を利用してメソッドの処理を途中で中断したり、中断したところから続きをやり直したりするためのシンタックス シュガーになっているそうです。

**JavaScript でも実現できるんじゃね？
ところで、JavaScript 1.7 からは &lt;code&gt;yield&lt;/code&gt; が使えるようになっています（ただし、現時点で動くのは Firefox のみ）。

そこで、&lt;code&gt;yield&lt;/code&gt; を使っても同じような仕組みを実現できるんじゃないかと思って作ってみました。

ほぼ形は似ていますが、XHR を使った Ajax 処理を &lt;code&gt;await&lt;/code&gt; 風に書けるようにしてみました。

&lt;code&gt;await&lt;/code&gt; や &lt;code&gt;return&lt;/code&gt; の変わりに &lt;code&gt;yield&lt;/code&gt; を使っています。また、XHR を &lt;code&gt;await&lt;/code&gt; できるように変換する &lt;code&gt;awaitable&lt;/code&gt; 関数を作っています。
&gt;|javascript|
var doXhrTwice = async(function(){
    var xhr = awaitable(new XMLHttpRequest());
    xhr.open('GET', location.href, true);
    var result = yield xhr.send(null);
    log(&quot;finished: &quot; + result +  &quot;, 
        status: &quot; + xhr.status);

    xhr = awaitable(new XMLHttpRequest());
    xhr.open('GET', &quot;not_found.png&quot;, true);
    result = yield xhr.send(null);
    log(&quot;finished: &quot; + result +  &quot;, 
        status: &quot; + xhr.status);

    yield 3;
});
||&lt;

これの関数を普通に呼び出すと、ログ出力は次のようになります。
&gt;|javascript|
/*   doXhr start
 *   doXhr end
 *   finished: true, status: 200
 *   finished: false, status: 404
 */
function init1(){
    log(&quot;doXhr start&quot;);
    doXhrTwice();
    log(&quot;doXhr end&quot;);
}
||&lt;
&lt;code&gt;init1&lt;/code&gt; から &lt;code&gt;doXhrTwice&lt;/code&gt; を呼んでもすぐに処理が返ってくるので、関数呼び出し直後に `doXhr end` が出力されます。ただ、&lt;code&gt;doXhrTwice&lt;/code&gt; の中では同期的に処理を書けています。

次に、&lt;code&gt;doXhrTwice&lt;/code&gt; を同期的に呼んでみます。

&gt;|javascript|
/*   doXhr start
 *   finished: true, status: 200
 *   finished: false, status: 404
 *   doXhr end: 3
var init2 = async(function(){
    log(&quot;doXhr start&quot;);
    var ret = yield doXhrTwice();
    log(&quot;doXhr end: &quot; + ret);
});
||&lt;
&lt;code&gt;doXhrTwice&lt;/code&gt; の戻り値 &lt;code&gt;3&lt;/code&gt; を &lt;code&gt;init2&lt;/code&gt; で取得できています。&lt;code&gt;doXhrTwice&lt;/code&gt; が終わったあと、`doXhr end` が出力されています。

もちろん、処理は同期的に書いていますが、この間、&lt;code&gt;init2&lt;/code&gt; 関数は &lt;code&gt;yield&lt;/code&gt; で処理をシステムに返しているので、UI はブロックされません。&lt;code&gt;async&lt;/code&gt; の実装の中で、&lt;code&gt;doXhrTwice&lt;/code&gt; 完了時に &lt;code&gt;yield&lt;/code&gt; された処理を再開しています。

&lt;code&gt;async&lt;/code&gt; や &lt;code&gt;awaitable&lt;/code&gt; の実装も含めたソースは https://gist.github.com/1232433 に置いています。

**なんか楽しい
JavaScript ではクロスブラウザ的な意味で実用的ではないけれど、何か楽しくコードが書けそうです。

Python には yield が実装されているので、同じ仕組みをそのまま流用できそうです。

</body>
<comments>
<comment>
<username>chaperatta</username>
<body>ECMAScript Harmonyではまさにawait式というのが提案されているようです&lt;br&gt;http://wiki.ecmascript.org/doku.php?id=strawman:deferred_functions&lt;br&gt;そしてtraceur-compilerを使えばawait式ではなくawait文になってしまいますがこれが使えます&lt;br&gt;http://code.google.com/p/traceur-compiler/&lt;br&gt;&lt;br&gt;でJS1.7のyieldを使ってそれを真似してみるっていうのは僕もやってみたので宣伝してみます&lt;br&gt;https://github.com/fujidig/deferred-generator</body>
<timestamp>1317257363</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>おお、ほんとうですね。ありがとうございます。&lt;br&gt;ECMASCript Harmony もいろいろと提案されていって、リッチになってるんですね。。。ES4 と同じ運命をたどらないといいですが・・・。</body>
<timestamp>1317308104</timestamp>
</comment>
</comments>
</day>
<day date="2011-10-04" title="">
<body>
*craft_launch3_my_plugins*[CraftLaunch3]CraftLaunch 3 を便利にする自作プラグイン６つ
[http://d.hatena.ne.jp/nitoyon/20110831/programmable_launcher_clnch3:title=プログラマブルなコマンドライン ランチャー CraftLaunch 3 が楽しい] で CraftLaunch 3.Xを紹介しました。

いままで自作プラグインとして、
-[http://d.hatena.ne.jp/nitoyon/20110831/programmable_launcher_clnch3#seemore:title=window_command] プラグイン
-[http://d.hatena.ne.jp/nitoyon/20110902/clnch3_open_folder:title=open_folder] プラグイン
を公開しましたが、そのあと、さらに６つ作って便利に使っているので紹介しておきます。

ソースは全て https://github.com/nitoyon/clnch3_extensions に置いています。

**url_alias - URL を開きやすくするプラグイン
CraftLaunch から特定の URL を開くのが便利になります。本体の機能でも特定の URL を開く機能はありますが、「コマンド名;パラメータ」の形で入力する必要があって不便なので、&lt;code&gt;;&lt;/code&gt; を不要にしてみました。

入力例：
-&lt;code&gt;@nitoyon&lt;/code&gt; と入力して Enter を押すと http://twitter.com/nitoyon を開く
-&lt;code&gt;rfc822&lt;/code&gt; と入力して Enter を押すと http://www.ietf.org/rfc/rfc822.txt を開く

登録は、&lt;code&gt;config.py&lt;/code&gt; に次のようにして正規表現で定義します。
&gt;|python|
# config.py の configure() 関数に次のように記載します

import url_alias
#reload(url_alias)
url_alias.register(window, 
                   { 'regex': re.compile('^rfc(\d+)$', re.IGNORECASE), 
                     'url': 'http://www.ietf.org/rfc/rfc%param%.txt' },
                   { 'regex': re.compile('^@(\w+)$'), 
                     'url': 'http://twitter.com/%param%' },
                  )
||&lt;

BTS やメーリングリストの番号をブラウザで開けるようにするとお仕事でも便利！

**control_panel - コントロールパネルや管理ツールをコマンド化する プラグイン
コントロールパネルや管理ツールのアイテムを開けます。
-[ネットワーク接続] を開くには &lt;code&gt;cpl:Network&lt;/code&gt; と入力
-[イベント ビューワー] を開くには &lt;code&gt;cpl:EventViewer&lt;/code&gt; と入力

コントロールパネルや管理ツールの各アイテムは日本語版 Windows ではキーボードでアクセスしにくいので、キーボード派の人には便利じゃないでしょうか。
====
どういうコマンドが登録されるかは、&lt;code&gt;&lt;a href=&quot;https://github.com/nitoyon/clnch3_extensions/blob/master/control_panel.py#L45&quot;&gt;ControlCommandList.__init__()&lt;/a&gt;&lt;/code&gt; を見るとだいたい分かると思います。

&lt;code&gt;cpl:&lt;/code&gt; を入力するのが面倒な人は、&lt;code&gt;prefix=''&lt;/code&gt; とすればプレフィックスなしで登録できますが、不要なものまで登録されて名前空間が汚染されるので嫌な人も多いでしょう。そんな人は、後述の &lt;code&gt;misc.py&lt;/code&gt; の &lt;code&gt;addAlias&lt;/code&gt; 関数で別名を登録するほうがお勧めです。

&gt;|python|
import misc
misc.addAlias( window, u'cpl:Date/Time', u'ClockSet' )
||&lt;

**path_plus - 相対パス・フォルダエイリアスを可能にするプラグイン
登録したコマンドからサブフォルダに移動しやすくなります。

たとえば、マイ ドキュメントを &lt;code&gt;~&lt;/code&gt; コマンドとして登録しておけば、
-&lt;code&gt;~\&lt;/code&gt; でマイドキュメント以下のファイルが補完で現れる
-&lt;code&gt;~\memo.txt&lt;/code&gt; でマイドキュメント直下の &lt;code&gt;memo.txt&lt;/code&gt; を開ける
のように使えます。同じように、デスクトップやダウンロードフォルダを登録しておけば便利です。

また、実行ファイルを登録したコマンドについても、コマンド名のあとに &lt;code&gt;\&lt;/code&gt; をつけることで、実行ファイルのフォルダ内のファイルを補完してくれます。たとえば、&lt;code&gt;CraftLaunch&lt;/code&gt; コマンドを登録していたとすると、
-&lt;code&gt;CraftLaunch\&lt;/code&gt; で CraftLaunch インストールフォルダ以下のファイルが補完で現れる
-&lt;code&gt;CraftLaunch\readme.txt&lt;/code&gt; で CraftLaunch の readme を表示できる
といった使い方ができます。

相対パス対応としては、&lt;code&gt;.\hoge\foo&lt;/code&gt; のようにしてファイルを開けるようにしています。デフォルトの CraftLaunch では、&lt;code&gt;.\&lt;/code&gt; でカレントフォルダ直下のファイルは開けるものの、１階層以上深いファイルは開けないバグがあります。これは、&lt;code&gt;ShellExecute&lt;/code&gt; をするとき、実行するファイルがあるフォルダをカレントディレクトリに設定するのが原因です。この挙動自体は絶対パスで指定するときにはうまくいくのですが、相対パスのときは二重に相対化してしまうので、勝手に修正してみました。

ところで、CraftLaunch のカレントフォルダは、CraftLaunch のショートカットの [初期フォルダー] で指定できます。これは Windows の Tips ですね…。

実装面では、&lt;code&gt;commandline_Launcher&lt;/code&gt; と &lt;code&gt;commandline_ExecuteFile&lt;/code&gt; をラップして置き換えるというアグレッシブなことをしています。何か予想外の問題を引き起こす可能性があるかもしれませんが、私が日常的に使っている限りは問題は起きていません。

**python_console - Python のインタラクティブシェルが使えるプラグイン
Python が使えるんなら、Python のコードの評価も CraftLaunch 上でできるようにしてしまおうというプラグインです。

&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt; を先頭に入力することで、Python のインタラクティブ シェルと同等の動作をしてくれます。
&gt;|python|
&gt;&gt;&gt; a = [1,3,5]
&gt;&gt;&gt; a
[1, 3, 5]
&gt;&gt;&gt; for i in a:
...     print i
... 
1
3
5
||&lt;

すごいことをしてそうですが、標準ライブラリの &lt;code&gt;code.InteractiveConsole&lt;/code&gt; の機能にほとんどの処理を任せています。ただ、CraftLaunch ではスペースキーが入力できないようになっているので、これを迂回するためのハックを施しています。

**run_as_administrator - 管理者として実行できるプラグイン
管理者として実行させたいコマンドを Ctrl-Shift-Enter で実行すると、管理者権限で実行してくれます。Vista 以降で UAC を有効のまま使っている人には便利です。

この挙動は、Windows Vista 以降のスタートメニュー中の [プログラムとファイルの検索] で Ctrl-Shift-Enter を押すと、管理者として実行してくれる動作と合わせています。

実装上は、&lt;code&gt;ShellExecuteW&lt;/code&gt; の処理を置き換えていて、Ctrl-Shift-Enter が押されていたときに、&lt;code&gt;lpVerb&lt;/code&gt; に &lt;code&gt;runas&lt;/code&gt; を指定するようにしています。そのため、コマンドだけではなく、直接パスを入力した場合にも、Ctrl-Shift-Enter が押されていれば管理者として実行してくれます。


**misc - 雑多な拡張
独立して作るほどではない雑多な機能を実装しています。

次の２つの機能が入っています。
:&lt;code&gt;command_ClearConsole&lt;/code&gt; コマンド:コンソールをクリアします。&lt;code&gt;python_console&lt;/code&gt; プラグインの出力を消したいときや、プラグイン開発していて例外メッセージに満ち溢れてきたときに便利。
:&lt;code&gt;addAlias&lt;/code&gt; 関数:コマンドに別名を設定する関数です。&lt;code&gt;control_panel&lt;/code&gt; プラグインで便利。

**まとめ
工夫次第で自分好みにできる CraftLaunch 3 はやっぱり楽しい！

</body>
</day>
<day date="2011-10-11" title="">
<body>
*boost_component_ranking*[C++][Boost]Boost の定番機能はこれだ
C++ の定番ライブラリ Boost はいまや不動の地位を得ていますが、機能が多岐にわたりすぎていて、何から使い始めていいのか分からずにとっつきにくい印象がありました。

Boost 関連の情報を探していて、[https://sites.google.com/site/boostjp/used_project:title] というページを見つけました。このページでは、Boost 公式ページ上の
-[http://www.boost.org/users/uses_shrink.html:title=製品情報]
-[http://www.boost.org/users/uses_open.html:title=オープンソースプロジェクト]
-[http://www.boost.org/users/uses_inhouse.html:title=会社]
にリンクしています。この３ページでは、様々な製品やプロジェクトで利用されている Boost のコンポーネントが紹介されています。

せっかくなので、利用数ランキングを集計してみました。&lt;strong&gt;多くのプロジェクトで利用されているコンポーネント＝定番機能&lt;/strong&gt;、という単純な発想です。

**ランキング1～10位
早速1位から10位を紹介！！
|*順位|*コンポーネント名|*利用数|
|1|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/smart_ptr/index.html&quot;&gt;Boost.SmartPointers&lt;/a&gt;|24|
|1|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/bind/index.html&quot;&gt;Boost.Bind&lt;/a&gt;|24|
|3|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/regex/index.html&quot;&gt;Boost.Regex&lt;/a&gt;|20|
|4|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/function/index.html&quot;&gt;Boost.Function&lt;/a&gt;|17|
|5|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/algorithm/string/index.html&quot;&gt;Boost.StringAlgorithms&lt;/a&gt;|14|
|5|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/thread/index.html&quot;&gt;Boost.Thread&lt;/a&gt;|14|
|7|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/type_traits/index.html&quot;&gt;Boost.TypeTraits&lt;/a&gt;|12|
|7|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/date_time/index.html&quot;&gt;Boost.DateTime&lt;/a&gt;|12|
|7|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/tuple/index.html&quot;&gt;Boost.Tuple&lt;/a&gt;|12|
|7|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/filesystem/index.html&quot;&gt;Boost.FileSystem&lt;/a&gt;|12|
|7|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/iterator/index.html&quot;&gt;Boost.Iterator&lt;/a&gt;|12|

上位に入っている多くの機能が、C++0x では標準ライブラリに取り込まれるようです。

**10位以下はこんな感じ
ちなみに10位以下は次のようになっています。
====
|*順位|*コンポーネント名|*利用数|
|12|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/any/index.html&quot;&gt;Boost.Any&lt;/a&gt;|11|
|12|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/conversion/lexical_cast.htm&quot;&gt;Boost.LexicalCast&lt;/a&gt;|11|
|12|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/mpl/index.html&quot;&gt;Boost.MPL&lt;/a&gt;|11|
|15|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/spirit/index.html&quot;&gt;Boost.Spirit&lt;/a&gt;|10|
|16|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/optional/index.html&quot;&gt;Boost.Optional&lt;/a&gt;|8|
|16|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/smart_ptr/index.html&quot;&gt;Boost.SharedPointer&lt;/a&gt;|8|
|16|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/utility/operators.htm&quot;&gt;Boost.Operators&lt;/a&gt;|8|
|16|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/format/index.html&quot;&gt;Boost.Format&lt;/a&gt;|8|
|20|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/utility/index.html&quot;&gt;Boost.Utility&lt;/a&gt;|7|
|20|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/program_options/index.html&quot;&gt;Boost.ProgramOptions&lt;/a&gt;|7|
|20|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/bind/ref.html&quot;&gt;Boost.Ref&lt;/a&gt;|7|
|20|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/signals/index.html&quot;&gt;Boost.Signals&lt;/a&gt;|7|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/lambda/index.html&quot;&gt;Boost.Lambda&lt;/a&gt;|6|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/tokenizer/index.html&quot;&gt;Boost.Tokenizer&lt;/a&gt;|6|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/variant/index.html&quot;&gt;Boost.Variant&lt;/a&gt;|6|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/serialization/index.html&quot;&gt;Boost.Serialization&lt;/a&gt;|6|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/functional/index.html&quot;&gt;Boost.Functional&lt;/a&gt;|6|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/random/index.html&quot;&gt;Boost.Random&lt;/a&gt;|6|
|24|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/multi_index/index.html&quot;&gt;Boost.MultiIndex&lt;/a&gt;|6|
|31|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;|5|
|31|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/static_assert/index.html&quot;&gt;Boost.StaticAssert&lt;/a&gt;|5|
|31|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/preprocessor/index.html&quot;&gt;Boost.Preprocessor&lt;/a&gt;|5|
|34|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/utility/enable_if.html&quot;&gt;Boost.EnableIf&lt;/a&gt;|4|
|35|&lt;a href=&quot;http://www.boost.org/doc/libs/release/doc/html/tribool.html&quot;&gt;Boost.Tribool&lt;/a&gt;|3|
|35|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/asio/index.html&quot;&gt;Boost.Asio&lt;/a&gt;|3|
|35|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/test/index.html&quot;&gt;Boost.Test&lt;/a&gt;|3|
|35|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/timer/index.html&quot;&gt;Boost.Timer&lt;/a&gt;|3|
|35|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/dynamic_bitset/index.html&quot;&gt;Boost.DynamicBitset&lt;/a&gt;|3|
|35|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/assign/index.html&quot;&gt;Boost.Assign&lt;/a&gt;|3|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/spirit/phoenix/index.html&quot;&gt;Boost.Phoenix&lt;/a&gt;|2|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/gil/doc/index.html&quot;&gt;Boost.GIL&lt;/a&gt;|2|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/numeric/ublas/index.html&quot;&gt;Boost.Ublas&lt;/a&gt;|2|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/crc/index.html&quot;&gt;Boost.CRC&lt;/a&gt;|2|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/ptr_container/index.html&quot;&gt;Boost.PointerContainer&lt;/a&gt;|2|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/graph/index.html&quot;&gt;Boost.Graph&lt;/a&gt;|2|
|41|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/conversion/index.html&quot;&gt;Boost.Conversion&lt;/a&gt;|2|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/concept_check/index.html&quot;&gt;Boost.ConceptCheck&lt;/a&gt;|1|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/conversion/cast.htm#numeric_cast&quot;&gt;Boost.NumericCast&lt;/a&gt;|1|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/integer/index.html&quot;&gt;Boost.Integer&lt;/a&gt;|1|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/range/index.html&quot;&gt;Boost.Range&lt;/a&gt;|1|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/rational/index.html&quot;&gt;Boost.Rational&lt;/a&gt;|1|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/bind/mem_fn.html&quot;&gt;Boost.MemFn&lt;/a&gt;|1|
|48|&lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/property_map/index.html&quot;&gt;Boost.PropertyMap&lt;/a&gt;|1|

**集計方法
3つのページをダウンロードして、次のようなワンライナーで処理しました。
&gt;|sh|
$ cat *.html | perl -e '$c={};while(&lt;&gt;){s/&gt;Boost\.([\w-]+)/{$c-&gt;{$1}++}/ge;} print &quot;$_ $c-&gt;{$_}\n&quot; for sort {$c-&gt;{$b}&lt;=&gt;$c-&gt;{$a}} keys %$c;'
||&lt;
Perl じゃなく、Boost つかって集計しろよ、という声が聞こえてきそうですね…。

</body>
</day>
<day date="2012-01-10" title="">
<body>
*nenga*うちの年賀状2012
今年もよろしくおねがいします。今年最初のエントリはうちの年賀状です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120110/20120110212306.jpg&quot; width=&quot;450&quot; height=&quot;301&quot; alt=&quot;2012&quot; border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

昨年、9月に子どもが生まれて、生活が一変しました。

龍で子どもといえば、まんが日本昔ばなし以外には考えられなくなったので、原作をベースに作成しました。

自分が龍に扮装し、妻子を背中に乗せております。実生活でも同じように家族を支えられるよう希望を込めて…。

**子がいる生活
昔、１年前の自分を知りたくて &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090512/zenjido_bkm&quot;&gt;全自動ブックマーク棚卸し&lt;/a&gt; というものを作りました。最近だと、1年前の twitter や facebook の書き込みがメールで送られてくる &lt;a href=&quot;http://www.techdoll.jp/2011/12/21/timehop/&quot;&gt;timehop&lt;/a&gt; というサービスもあるようです。

娘が生まれて、自分の親との会話も増えてきました。そんな中、「自分が子どもの頃はどうだったのか」を聞く機会も多く、娘の成長と一緒に自分の人生を最初から振り返っているような感覚があります。

以上、1年前を振り返るだけでは物足りなくなっていたら、いつのまにか30年前を振り返るツールができあがっていた、という話でした。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20110111/nenga:title=うちの年賀状2010]
-[http://d.hatena.ne.jp/nitoyon/20100108/nenga:title=うちの年賀状2010]
-[http://d.hatena.ne.jp/nitoyon/20090107/nenga:title=うちの年賀状2009]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2012-01-18" title="">
<body>
*million_follower_power*[twitter]もし100万人のフォロワーを持つ有名人にサイトを紹介されたら
twitter を眺めてたら、昔自分が作った &lt;a href=&quot;http://tech.nitoyon.com/illusion1/&quot;&gt;Color Illusion Generator&lt;/a&gt; を外国の人が取り上げてくれていた。

発信源をたどってみると、110 万人ものフォロワーを持つ認証済みアカウントの有名人さんが紹介してくれていたようだった。

[twitter:157226183342301184:detail]

この [twitter:@peeweeherman] さんはアメリカのコメディアン「&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%9D%E3%83%BC%E3%83%AB%E3%83%BB%E3%83%AB%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B9&quot;&gt;ポール・ルーベンス&lt;/a&gt;」氏のようだ。Wikipedia によると、1990 年ごろに子ども向けテレビ番組で「ピーウィー・ハーマン」というキャラクターで人気になったらしい。日本でも和光証券(現みずほ証券)の CM にも出演していたようだ。

日本だと、ガチャピンさん([twitter:@GachapinBlog])が子ども向け番組で人気だったし、フォロワーも 114 万人いるので、立ち位置がかなり近い。

つまり、今回の件は日本人に分かりやすくいうと

「ガチャピンが twitter で自分のサイトを紹介してくれたらどうなるか」

という話なのである。

**100万人に紹介されるとどうなるか
さて、100万人のフォロワーを持つアカウントからリンクされるとどうなるんだろう。

アクセスログを分析して 5 分ごとのアクセス数をグラフにしてみた。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120118/20120118013922.jpg&quot;&gt;&lt;/center&gt;&lt;

紹介直前まではアクセス数 0 だったのに、紹介後約10分でいきなり 1,000 アクセスを達成。そこをピークに一気にアクセス数は下がり始め、1時間後には 5分あたり 100アクセス弱に落ち着いた。

その後、第２の山がくることはなく、順調にアクセスは減り続けた。その日の終わりには 1 時間に 60 アクセスほどに落ち込んでいた(といっても、いままでは 1 日に 10 アクセスもないようなコンテンツだったので、それでも異常事態には変わりない)。

結局この日の総アクセス数は 6,300 件。うち twitter 経由は 2,200件、facebook 経由は 3,000 件だった。twitter 経由でのアクセスよりも、&lt;strong&gt;facebook からのアクセスが多い&lt;/strong&gt;のが興味深い。twitter で紹介されたこともあり、初動は twitter が大きかったものの、そこから先は facebook 経由でのアクセスのほうが 1.2～2.0 倍で推移していった。

そして、twitter、facebook のいずれも、&lt;strong&gt;潮が引くのが早い&lt;/strong&gt;。著名なブログなどで取り上げられたときなどは、少なくとも半日ぐらいはアクセス数を維持してくれた記憶があるが、twitter や facebook ではそうはいかない。真の意味でバズるには、単発の爆発だけでは全く役に立たない。多くの人がリツイートしたくなるような魅力的なコンテンツでなければならない。

紹介してもらった日からの日別アクセス数は、6,300 → 536 → 187 → 96 → 63。いまでは元通りの平穏なアクセス数に落ち着いてしまった。

**せっかくなのでフォロワー数ランキングを調べてみた
日本のフォロワー数ランキングは
-1位: 孫正義さん (150万人 [twitter:@masason])
-2位: ガチャピンさん (114万人 [twitter:@GachapinBlog])
-3位: 有吉弘行さん (94万人 [twitter:@ariyoshihiroiki])
-4位: AKB48 篠田麻里子さん (89万人 [twitter:@mariko_dayo])
となっており、100万人を超えるのは2人のみだった。

世界1位はレディーガガさん([twitter:@ladygaga])。フォロワーはなんと 1,800 万人。格が違いすぎる。100 万人のフォロワーがいる人は、世界に 600 人ぐらいいる。世界は広い。

ちなみに自分(@nitoyon)のフォロワーさんは 2,300 人。100万人と比べるとゴミのようである。。。

(参考)
- &lt;a href=&quot;http://meyou.jp/ranking/follower_allcat&quot;&gt;Twitter日本 総合ランキング 1-50&lt;/a&gt;
- &lt;a href=&quot;http://twitaholic.com/&quot;&gt;Top Twitter User Rankings &amp; Stats | Twitaholic.com&lt;/a&gt;

**まとめ
今回の件を３行でまとめる。
- アメリカのガチャピン的な人にサイトを紹介してもらった。
- twitter と facebook は大拡散しないかぎりは波は一瞬で消えていく。
- 英語向けにサイトを作っておくと、予期せぬタイミングで予期せぬ人から紹介してもらえておもしろい。

</body>
<comments>
<comment>
<username>satokuni73</username>
<body>なかなか、こういうの面白いですね。</body>
<timestamp>1326852567</timestamp>
</comment>
</comments>
</day>
<day date="2012-02-14" title="">
<body>
*original_shachihata*シヤチハタ印鑑をカスタマイズ注文してみた
ずっとスタンプ式の印鑑（ネーム印）に憧れていた。

多くの人にとっては、ネーム印は量販店で買えるのだろうが、自分の苗字は全国に 30 世帯程度しかないので市販されていない。

**印鑑との終わりなき戦い
これまでは銀行印にも使えるような印鑑を認印として使っていたのだが、これがとても面倒。

当たり前だが、朱肉がないと押印できない。

宅配便が来たときには、印鑑と朱肉を準備して、朱肉に印鑑のせて、不安定な中で小包を下敷きにして配達員さんに支えてもらいながら押印する手順を繰り返す必要がある。さらには配達員さんが帰ったあとには、印鑑についた朱肉をふき取らなければならない。

結局、毎回サイン。サインはサインで、ペンを受け取って、ドアを下敷きにして…。そういやあるとき、ドアに自分の字が転写されていて恥ずかしかったこともあった。

つまり、いい思い出がない。

**そんな日々ともさようなら
ある日、ネーム印は市販していないものでも、特注できることを知った。

期待に胸膨らませながらネーム印を見比べ、選んだのはキャップが不要なシヤチハタの「キャップレス 9」。

&lt;a href=&quot;http://hb.afl.rakuten.co.jp/hgc/03dc3250.fca9e043.03dc3251.3135e3f9/?pc=http%3A%2F%2Fwww.rakuten.co.jp%2Fhankoya%2F&quot;&gt;ハンコヤドットコム&lt;/a&gt;で 870 円送料無料だったので、このお店で購入することにした（ただし楽天でレビューを書く必要あり）。

[rakuten:hankoya:10067590:detail]

Amazon なら 918 円の色と 982 円の色があった。

[asin:B001AFYXLG:detail]

**家に届いた！
注文から数日で発送の連絡があり、さらに数日待つと家のポストに入っていた。

開封ドーン。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120110/20120110172101.jpg&quot;&gt;&lt;/center&gt;&lt;

この時点では &lt;strong&gt;印面はないので、別途注文しなきゃいけない&lt;/strong&gt;。

印面注文のハガキとパスワードが同封入っていて、ハガキに「印面の名前」や「インクの色」を記入して送ると後日、印面が送られてくる仕組みになっている。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120110/20120110172320.jpg&quot;&gt;&lt;/center&gt;&lt;

インターネットでも注文できるので、今回は&lt;strong&gt;インターネットで注文&lt;/strong&gt;してみた。

**インターネット注文するとプレビューが楽しい
同封されていたパスワードを入れると、注文フォームが表示される。&lt;strong&gt;１～５文字、書体は8通り、配置は計33通り、色は６色の中から選べる&lt;/strong&gt;。
====
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120214/20120214004659_original.jpg&quot;&gt;&lt;/center&gt;&lt;

名前と書体、色を選ぶと、&lt;strong&gt;その場でプレビュー表示できる&lt;/strong&gt;のが面白い。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120214/20120214004702.png&quot;&gt;&lt;/center&gt;&lt;

↑のように本名ではない別の印鑑を作ってみるのも面白そうだ。


**印面到着！
さらにしばらく待つと、忘れたころに印面がやってきた。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120118/20120118131706.jpg&quot;&gt;&lt;/center&gt;&lt;

印面とともに、取り付け方法の説明書も入っている。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120118/20120118131812.jpg&quot;&gt;&lt;/center&gt;&lt;

説明書が苦手な人でも YouTube の動画を見れば分かりやすいだろう。

[http://www.youtube.com/watch?v=xAEkWm9oKog:movie]

これで完成。インクを注ぎ足すことも可能なので、紛失しない限りは永遠に押し続けることができる。

**まとめ
印面の注文がやや面倒ではあるが、千円かからずに自分好みのネーム印を作れるのがとても楽しい。

一般的な苗字の人でも、書体や色に凝れるので、個性をアピールしてみるのもいいんじゃないでしょうか。

外国の方へのお土産にも珍しがられるかもしれません。(日本国内であらかじめ印面を注文しておく必要はありますが…)

そんなこんなで、印鑑恐怖症から脱却できて、宅配便も怖くなくなり、毎回軽やかに押印してやっております。
</body>
</day>
<day date="2012-02-21" title="">
<body>
*msysgit_utf8*[git]msysGit（Git for Windows）がいよいよ公式に UTF-8 をサポート！
最近、Git について勉強しています。Windows で Git をやるなら Cygwin と msysGit（Git for Windows） がメジャーなようです。

**Cygwin Git のいいとこ悪いとこ
Cygwin は UTF-8 な日本語ファイル名にも対応しており、Cygwin の中で閉じて Git を使っている分には何不自由なく使えるのでお勧めです。

ただし、次のような悲しいポイントがあります。
- Cygwin 版 Git は、Windows 向けの GUI な Git ソフト(TortoiseGit や Git Extensions)との相性が悪い
- Windows のエディタやマージツールと連携しようとするとパスのポリシーが違うのでうまくいかない
- nkf を噛ませようとしても、Cygwin 用の nkf バイナリは公式配布されておらず、わざわざ Cygwin 上で make する必要がある
- チェックアウトしたフォルダーをエクスプローラーから丸ごと削除すると、「このフォルダーはほかの人と共有されています」という警告が表示されまくる。Cygwin bash で &lt;code&gt;rm -rf&lt;/code&gt; しないと消せない(回避方法を探したが見つからず)。

**それに比べて msysGit は...
msysGit は Cygwin ほど硬派ではないので、Windows の他のツールと相性もいいです。

しかし、UTF-8 対応していないので&lt;strong&gt;日本語ファイル名を扱えません&lt;/strong&gt;でした。日本語ファイル名を含むレポジトリをチェックアウトすると、豪快に文字化けしていました。

UTF-8 に対応していない問題は msysGit の &lt;a href=&quot;http://code.google.com/p/msysgit/issues/detail?id=80&quot;&gt;Issue 80&lt;/a&gt; に 2008 年ごろから挙がってはいましたが、長らく放置されてきました。&lt;a href=&quot;http://tmurakam.org/git/&quot;&gt;UTF-8ファイル名対応版 Git for Windows&lt;/a&gt; という派生物を作っている方もいるのですが、全部 ANSI で扱ってる TortoiseGit のダメ挙動に合わせているため、正しい解法ではありません。何よりも公式ではないのが悲しいところです。

**そんな msysGit がついに UTF-8 サポート!!!
Windows で Git するなら Cygwin 一択だった悲しい状況でしたが、昨年末あたりから &lt;a href=&quot;http://code.google.com/p/msysgit/issues/detail?id=80&quot;&gt;Issue 80&lt;/a&gt; に新たな動きがあり、Karsten さんという方が積極的に UTF-8 対応に向けて動いてくれていました。
====
そして、2月に入って msysGit の devel ブランチに &lt;strong&gt;UTF-8 対応のコードがコミットされました&lt;/strong&gt;(msysGit に同梱される &lt;code&gt;less&lt;/code&gt; や &lt;code&gt;vim&lt;/code&gt; も同時に UTF-8 対応しているようです)。

現在の最新版 1.7.9 は UTF-8 対応する前のものです。そのため、UTF-8 対応したリリースは次のバージョン（たぶん 1.7.10）を待たねばなりません。

&lt;strong&gt;(追記 2012/4/12) msysGit 1.7.10 がリリースされました。試してみた記事も書いたのでよければご覧ください（&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120412/msysgit_utf8_2&quot;&gt;UTF-8 対応の msysGit 1.7.10 リリース！ いよいよ Windows で git できるよ!!!&lt;/a&gt;）。以下は、1.7.10 がリリースされる前の情報です。&lt;/strong&gt;

次のバージョンを待ちきれない人は、Karsten さんが msysGit 1.7.8 をベースにパッチを適用して作成した &lt;a href=&quot;http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.8-preview20111229-unicode.exe&quot;&gt;Git-1.7.8-preview20111229-unicode.exe&lt;/a&gt; が公開されているので、こちらを試してみるとよいでしょう。

**Git-1.7.8-preview20111229-unicode を試してみた
ということで、早速 &lt;a href=&quot;http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.8-preview20111229-unicode.exe&quot;&gt;Git-1.7.8-preview20111229-unicode.exe&lt;/a&gt; を導入してみました。

日本語ファイル名を含むレポジトリをチェックアウトしたところ、ファイル名は化けませんでした。チェックアウトしたレポジトリを &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensnions&lt;/a&gt; で表示してみたところ、ご覧のようにコミットログもファイル名も完璧に日本語を表示できています!!!!

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120221/20120221024334.png&quot;&gt;&lt;/center&gt;&lt;

(Github の &lt;a href=&quot;https://github.com/toooooooby/japanese_test&quot;&gt;toooooooby / japanese_test&lt;/a&gt; を検証に利用)

diff のファイル名が化けていたのですが、これは FAQ。次の設定を実施して解決しました。
&gt;|sh|
git config [--global] core.quotepath off
||&lt;

日本語ファイル名の add やコミットログの日本語を自分でも試してみたが、全く問題なく使えています。

また、msysGit に付属する bash 上で、&lt;code&gt;git log&lt;/code&gt; してみましたが、同じようにファイル名やコミットログの日本語が正常に表示できていました。

...

一方、TortoiseGit は、日本語ファイル名のファイルに対してコミットしようとするとエラーを吐きます。日本語ファイル名のオーバーレイ アイコンも表示されていません。悲しいですね。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120221/20120221024335.png&quot;&gt;&lt;/center&gt;&lt;

ただし、TortoiseGit 派の人に朗報です。Karsten さんが TortoiseGit V1.7.5.0 をベースに &lt;code&gt;CP_ACP&lt;/code&gt; を &lt;code&gt;CP_UTF8&lt;/code&gt; にしてビルドしたパッケージが msysGit のメーリングリストに流れています(&lt;a href=&quot;http://groups.google.com/group/msysgit/browse_thread/thread/408f7613d096f2c0/b5ebf2a57c8676d2?lnk=gst&amp;q=v15#b5ebf2a57c8676d2&quot;&gt;Issue 80: Unicode support on Windows&lt;/a&gt; 参照)。

わたしは試していませんが、こちらを使うと快適に使えるという情報はあります。

[twitter:167601042610061312:detail]

**TortoiseGit vs Git Extensions
Windows の GUI な Git クライアントは TortoiseGit と Git Extensions のどちらがよいでしょうか。

最近、TortoiseGit と Git Extensions の開発状況をウォッチしてるのですが、
-TortoiseGit
--UI は小奇麗 (TortoiseSVN から派生しているだけに)
--中身は悲惨 (&lt;a href=&quot;http://groups.google.com/group/tortoisegit-dev/browse_thread/thread/e8d1effa21a66a27&quot;&gt;Issue 867 in tortoisegit: Add should not run a new Git process for each file&lt;/a&gt; ってどうなのよ…。(和訳) add すると 1 ファイルにつき 1 プロセス実行されちゃって重いよー)
--Tortoise 系の知名度ゆえに利用者は多いが開発者は少ない
-Git Extensions
--UI はひどい
--中身はそこそこまとも (UTF-8 対応してるし！)
--知名度は低いが、Github 上で pull リクエストが結構飛び交っている (自分も pull リクエスト出してみたら取り込まれた。後日書きます！)
という印象です。

また、日本語化事情に関しても、TortoiseGit は過去には日本語化プロジェクトがあったものの更新は止まっており((（追記 2012/4/15）新たな日本語化プロジェクト「&lt;a href=&quot;http://tortoisegitjapan.com/&quot;&gt;TortoiseGit Japan&lt;/a&gt;」が開始したようです。日本語化パッチが配布されています。インストール手順も日本語で解説してあります。))、それに対して Git Extensions はそこそこの UI が日本語化されています。

そういった事情からも、Git Extensions を押していきたいところです。

ただ、GUI があったとしても、Git のコマンドライン版の知識は必要なのが Git のつらいところでしょうか…。

わたしの場合は [asin:4798023809:title]で概要を押さえておいて、細かいところは [asin:4873114403:title] を読んで理解していっています。[asin:4798023809:title] は読み物のようにさっと読め、Git のメンテナさんの著書なので Git の思想も分かって面白かったです。一方、[asin:4873114403:title] はかなり詳しいので一気に読むのはしんどいですが、気になるところをじっくり読んで、理解を深めることができました。
[asin:4798023809:detail]
[asin:4873114403:detail]

**まとめ
- msysGit 1.7.10 からは UTF-8 対応が入り、日本語ファイルを扱えるようになる (Cygwin 以外の選択肢が増える!!)
- msysGit 1.7.10 を待てない人は &lt;a href=&quot;http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.8-preview20111229-unicode.exe&quot;&gt;Git-1.7.8-preview20111229-unicode.exe&lt;/a&gt; を試してみるとよい
- TortoiseGit より &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensions&lt;/a&gt; がオススメ

</body>
<comments>
<comment>
<username>cpw</username>
<body>msysGitのBashで日本語が文字化けしませんか？私の環境では日本語が豆腐になってしまいます。&lt;br&gt;なにか設定してるのですか？</body>
<timestamp>1329954075</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; cpw 様&lt;br&gt;わたしの環境では、UTF-8 対応版 msysGit の bash で日本語表示できています(記事で紹介した japanese_test で git log して確認)。&lt;br&gt;&lt;br&gt;日本語をちゃんと表示できるのは&lt;br&gt;・レポジトリが利用する文字コードが UTF-8&lt;br&gt;・msysGit の UTF-8 対応版を使っている&lt;br&gt;ときだけです。</body>
<timestamp>1329974871</timestamp>
</comment>
<comment>
<username>hogelog</username>
<body>ようやっと1.7.10がリリースされて、Windowsユーザの人にgitを勧めやすくなりましたね</body>
<timestamp>1334062750</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; hogelog 様&lt;br&gt;教えてくれてありがとうございます！&lt;br&gt;さっそく新しい記事を書いてみました。&lt;br&gt;http://d.hatena.ne.jp/nitoyon/20120412/msysgit_utf8_2</body>
<timestamp>1334165141</timestamp>
</comment>
</comments>
</day>
<day date="2012-02-23" title="">
<body>
*regex_encoding*[C#]文字コードによっては正規表現がエラーになる話
Git Extensions のソースコードを取ってきて自前でビルドしたところ、スペルチェック機能の正規表現でエラーが出てしまった。

エラーの場所を確認したところ、正規表現の「&lt;strong&gt;&lt;code&gt;&amp;#192;-&amp;#255;&lt;/code&gt;&lt;/strong&gt;」が不正な範囲だとなっていた。

**&amp;#192;-&amp;#255; がエラーになる理由
&amp;#192; と &amp;#255; の文字は iso-8859-1（Latin-1) では次の範囲になる。
- &amp;#192; (0xC0)
- &amp;#255; (0xFF)

しかし、自分のコードページは 932(Japanese Shift-JIS)なので、
- 0xC0 → ﾀ
- 0xFF → &lt;なし&gt;
となる。

C# の内部では文字列を Unicode で扱っているので、それぞれ次のように変換される。
- Shift-JIS 0xC0 → U+FF80 (HALFWIDTH KATAKANA LETTER TA)
- Shift-JIS 0xFF → U+F8F3 (Unassigned)

結果として、「&amp;#192;-&amp;#255;」は「U+FF80～U+F8F3」の範囲を表してしまうため、範囲として不正となる。

**どのように改善したか
元のソースが ANSI だから、コードページによっては変な文字に変換されてしまっていた。

それならばと、BOM 付きで UTF-8 に変換してやった。

そもそも、C# で内部表現が Unicode なのに「0xC0～0xFF」という正規表現に意味があるのか怪しいところだが、そこは見てみぬふりをしておいた。

**pull リクエストして取り込まれた!!
さっそく修正を GitHub へ push して、pull リクエストを出してみたところ、無事に本家に取り込まれた。
- [https://github.com/spdr870/gitextensions/pull/800:title=#800: Fixed Spelling.cs ArgumentException problem by nitoyon for spdr870/gitextensions - Pull Request - GitHub]

めでたし。
</body>
</day>
<day date="2012-02-24" title="">
<body>
*is_flash_heavy*[Flash][HTML5]Flash 重いという人たち
ここ最近、
-[http://hakadoru-sokuho.com/archives/2936:title]
-[http://b.hatena.ne.jp/entry/clockmaker.jp/blog/2012/02/html5-flash-draw_performance/:title]
あたりボーっと見ていると、「Flash が重い」→「Flash なくなれ」といった話が出てくる。

けども、叩くべきはそこじゃないような気がして twitter につぶやいていたのをこちらにも転載しつつ補足しておく。

**クソ重い Flash サイトについて
[twitter:172339417338478595:detail]
[twitter:172340274977185793:detail]
[twitter:172341132964012032:detail]

スマフォを使う人が増えてきて、スマフォで Flash が動かないわけだから、（ブラウザで動く）Flash の先細りはもはや確定事項。となれば、いままで Flash で作っていたような「重いウザい」サイトが HTML5 で作られだすのは目に見えている。

Flash 倒しても、実は世界は平和にならない。その裏にいる「かっこよければ重くてもいい」という姿勢でサイトを世に出す人たちが本当の大ボスなんだということに気づいてほしい。大ボスさんは Flash を倒すために使った夢の武器「HTML5」を使ってあなたを苦しめてくるんだぜ。

**かっこよければ重くてもいいわけがない
[twitter:172492345353314304:detail]
====
このツイートでは、すこしぼかしてるけど、[http://maka-veli.com/flash-geneki2012.html:title] のことを言っている。

このページで 1 つ目に紹介されているのが [http://www.johnwrightphoto.com/:title] というサイト。これが Flash サイトの恥ずかしいところを凝縮したようなひどい出来。

トップページは無意味、メニューは小さくて分かりにくい、何かクリックするたびに待たされる。

作り手のエゴで満ち溢れている。こんなサイトを「かっこいいから、まだ Flash 捨てたもんじゃない」と言ってしまうようでは、作り手と受け手のギャップが大きすぎて悲しくなる。

そして皆さんお気づきでしょうか。昨今の HTML5 の発展状況をみると、これぐらいのサイトなら HTML5 でも作れてしまう。

怖いですね…！　ホラーですね…！

ちなみに、同じようなポートフォリオ サイトだけど、同じ記事で紹介されている [http://alanlimstudio.com/:title] は自分の中では許容範囲。ナビゲーションは目立ってるし、待ち時間を短く感じる工夫がしてある。1度なら待つが、2度は待てない。

**「Flash＝重い」論の真の理由に気づいた
なんでそんなに「Flash 重い」という人が多いのか考えてみたら気づいた。
[twitter:172700280125800448:detail]

たしかにそりゃー、死活問題だわ。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20120228/why_google_still_uses_flash:title]
-[http://d.hatena.ne.jp/nitoyon/20110918/no_flash_on_metro_ie10:title]
-[http://d.hatena.ne.jp/nitoyon/20110426/messages_for_japan_design:title]
-[http://d.hatena.ne.jp/nitoyon/20100928/html5_shodo:title]
-[http://d.hatena.ne.jp/nitoyon/20100430/thoughts_on_flash_jp:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>詠み人知らず</username>
<body>ていうか、テキストしかないのに全部Flashで作ってるサイトとかみたいな意味不明な使い方をする人が結構いるからでは？&lt;br&gt;あと、ページにたくさんFlashのプレーヤーが埋めこんであったりとか</body>
<timestamp>1330018760</timestamp>
</comment>
<comment>
<username>maka-veli.com</username>
<body>「まだまだFLASHの可能性もあるんじゃないっすか？」&lt;br&gt;あぁ、それ僕が書いた記事です（笑）&lt;br&gt;&lt;br&gt;そうですね、評価としては僕も一応Web屋なので&lt;br&gt;問題が多いと思います。エゴの塊でしょうね。&lt;br&gt;HTML5でも再現できると思います。&lt;br&gt;&lt;br&gt;でもカッコイイので紹介しちゃいました。お恥ずかしい。</body>
<timestamp>1330046650</timestamp>
</comment>
<comment>
<username>なか</username>
<body>テキストなのにFlashってのはクライアントがフォント指定かレイアウト指定、もしくはその両方が厳密過ぎるからとかじゃないかなぁ？こっちはクライアントのエゴかな？</body>
<timestamp>1330047067</timestamp>
</comment>
<comment>
<username>たかひろ</username>
<body>ページ全体がFlashのコンテンツなのはまあいい。でもFlash広告があちこちにあるページは嫌いだ。あと、Flashは32bit限定だったりするのも嫌。Flashのせいでマウスジェスチャがおかしくなるのも嫌。</body>
<timestamp>1330092921</timestamp>
</comment>
<comment>
<username>Raph</username>
<body>例え垂れ流しSWFであっても依頼主から厳密に仕様を指定され仕方なく作るのなら分かる（つまり受動的な制作）。　しかし制作サイドが自発的に垂れ流し激重SWFをあちらこちらで提案しておきながら、「世間でFlashの評価が下がってる」と嘆くのは自業自得だと思う。&lt;br&gt;&lt;br&gt;結局、Flashの社会的地位を下げている原因の半分は、垂れ流しSWFしか提案出来ないクリエーター。　米作農家が意図的に放射能汚染土（水）で米を作ったのなら消費者に嫌われるのは当たり前と同じこと。</body>
<timestamp>1330225030</timestamp>
</comment>
<comment>
<username>Flash派</username>
<body>Flexで作ったフラッシュや全画面Flashは確かに遅い</body>
<timestamp>1330408101</timestamp>
</comment>
</comments>
</day>
<day date="2012-02-28" title="">
<body>
*why_google_still_uses_flash*[Flash][HTML5]Google がまだ Flash を使っているサービスでみる脱 Flash の難しさ
スマートフォンの普及が進む中、iPhone には Flash が搭載されず、Android 版 Flash は開発停止になるなど、遅かれ早かれ Web 上から Flash が消えていき、リッチな表現は HTML5 に置き換わっていくことは確実となりました。

「これからは HTML5 だ」という印象を世間に強く与えたのが、2009 年の Google I/O でした。
- &lt;a href=&quot;http://www.atmarkit.co.jp/news/200905/28/html5.html&quot;&gt;Google I/O 2009 レポート  グーグルが賭けるHTML 5の未来 － ＠IT&lt;/a&gt;

Google はそれ以降、多くのサービスに HTML5 を取り入れてきました。しかし、いまだに Flash を利用しているサービスがいくつかあります。

この記事では、HTML5 化していない、または、できていない Google の 5 つのサービスについて、
-どこで Flash が使われているのか
-なぜ Flash が使われているのか
-今後、HTML5 に移行するのか
を考察していきたいと思います。

それでは、さっそく 1 つ目から見ていきましょう。

**その 1: YouTube
Flash を使っている Google のサービスといえば、まず YouTube を思い浮かべる方も多いでしょう。

パソコン上では &lt;strong&gt;Flash がインストールされていないと YouTube で動画をみることができません&lt;/strong&gt;。Google Chrome で Flash を無効にして動画ページを開くと、「この動画を開くには Flash Player をアップグレードする必要があります」という警告が表示されます。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002659.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

***なぜ Flash が使われているか
YouTube のリリース当時、Windows Media Player・RealPlayer・QuickTime などの動画プレーヤーが存在していましたが、利用できる OS が限られていたり、普及率が低かったり、多くの人に見てもらうには中途半端でした。

その点、Flash プラグインは多くの端末にインストールされていたため、Flash Video フォーマットを採用することで、多くの人にビデオを見てもらうことが可能になりました。

***HTML5 化に向けての動き
HTML5 では動画を見るための &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグが定義されています。しかし、&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグで再生できる動画フォーマットはブラウザーによって異なります。

たとえば
- H.264 フォーマットの動画は Firefox・Opera で再生できない
- WebM フォーマットの動画は IE・Safari で再生できない
のように決め手に欠けている状況です。各ブラウザー ベンダーの利害関係が絡まりあって、大人のドロドロした世界が繰り広げられています。

そんな中、YouTube は HTML5 版 YouTube の試用版を公開しています。次の手順で HTML5 を使った YouTube 再生を試すことができます(2012年2月現在)。
====
+http://www.youtube.com/html5 を開く。
+[HTML5 試用版を有効にする] をクリックする。
+ブラウザーによって手順が変わります：
--H.264 に対応したブラウザー (IE9・Safari)&lt;br&gt;全ての動画が &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグで再生されるようになる。
--WebM にのみ対応のブラウザー(Firefox・Chrome・Opera)&lt;br&gt;WebM フォーマットに変換済みなら &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグで再生される。&lt;br&gt;未変換の場合は Flash で再生される。&lt;br&gt;検索結果の URL の末尾に &lt;code&gt;&amp;amp;webm=1&lt;/code&gt; と追加すると、WebM に変換された動画のみが検索結果に登場する。

広告付きの動画は再生できなかったり、ブラウザーによっては全画面再生が無理だったりと、課題は多いようです。

Google の &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; と YouTube 関連の最近の動きを時系列でまとめておきます。
- 2010年02月
--Google が VP8 コーデックを公開する On2 買収を完了 (&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/1002/22/news037.html&quot;&gt;参考&lt;/a&gt;)。
- 2010年05月
--Google が VP8 コーデックをベースにした WebM フォーマットを公開 (&lt;a href=&quot;http://internet.watch.impress.co.jp/docs/news/20100520_368218.html&quot;&gt;参考&lt;/a&gt;)。
-- YouTube に WebM 形式の動画アップロードが可能になる。また、過去の動画を順次 WebM に変換していることを表明(&lt;a href=&quot;http://internet.watch.impress.co.jp/docs/news/20100525_369300.html&quot;&gt;参考&lt;/a&gt;)。
- 2010年07月
-- YouTube モバイル版が H.264 フォーマットでいち早く HTML5 化完了(&lt;a href=&quot;http://jp.techcrunch.com/archives/20100707youtube-iphone-mobile-html5/&quot;&gt;参考&lt;/a&gt;)。
- 2011年01月
-- Google Chrome の H.264 のサポート終了を表明 (&lt;a href=&quot;http://www.itmedia.co.jp/enterprise/articles/1101/12/news034.html&quot;&gt;参考&lt;/a&gt;)。しかし、表明はしたものの、実際には削除されていない。
- 2011年04月
-- YouTube への新規アップロード動画はすべて WebM フォーマットに変換されるようになった。既存動画の 3 割が WebM フォーマットに変換された (&lt;a href=&quot;http://internet.watch.impress.co.jp/docs/news/20110420_441067.html&quot;&gt;参考&lt;/a&gt;)

***今後の流れを予想
YouTube の完全 HTML5 化はいつになるでしょうか。

現時点で、各ブラウザーがサポートする &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグのフォーマットは次のようになっています。
|*ブラウザー|*H.264|*WebM|
|IE9|○|×|
|Chrome|△|○|
|Firefox|△|○|
|Safari|○|×|
|Opera|×|○|

- Google Chrome は H.264 のサポート終了を表明したものの、Chrome 17 の時点でいまだに再生可能。((2012/3/22 修正。記事公開当初は未サポートとしていた。))
- Firefox は 2011年3月、H.264 のサポートを表明 (&lt;a href=&quot;http://japanese.engadget.com/2012/03/20/mozilla-h-264-webm/&quot;&gt;参考&lt;/a&gt;)。((2012/3/22 追記。ただし、Firefox の H.264 はモバイル版だけだという指摘もあり(参考) http://d.hatena.ne.jp/teramako/20120321/p1))

YouTube は H.264 と WebM に対応しているので、&lt;strong&gt;すべてのブラウザーの最新版で &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグを使える&lt;/strong&gt;状況にはあります。デフォルトが Flash から &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグに変わる日も近いかもしれません。

ただ、Google Chrome では YouTube の H.264 動画は再生できないようになっていて、YouTube には WebM 化できていない動画が残っています。「HTML5 化しました！」と大々的に発表しておきながら、「昔の動画を見たら Flash Player が動きました」では悲しすぎます。

2010年4月～2011年4月の 1 年間で全体の 3 割の動画の変換が完了したようなので、それ以後に変換のペースが上がっていることを期待します。

**その2: ストリート ビュー
Google Maps のストリートビューでも Flash が使われています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002700.png&quot;border=&quot;1&quot;&gt;&lt;br&gt;(Google Chrome でストリートビュー表示中に右クリックして確認)&lt;/center&gt;&lt;

iPhone や Android に関しては、ストリートビューは Flash ではなくネイティブ アプリで提供されているようです。

***なぜ Flash が使われているか
ストリートビューのリリース時、ブラウザー上でパノラマ表示を行うためには、Flash が現実的でした。

独自にプラグインを作成することも可能ではあったでしょうが、多くの利用者に使ってもらうためには敷居が高い上に、ブラウザーごとにプラグインを作成するのは大変です。

***HTML5 化に向けての動き
2011年10月、&lt;a href=&quot;http://googlejapan.blogspot.com/2011/10/2011-10-14-posted-by-google-google.html&quot;&gt;MapGL ベータ版が公開されました&lt;/a&gt;。

MapGL は &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; の 3D 版ともいえる &lt;strong&gt;WebGL 技術を利用&lt;/strong&gt;しています。その結果、MapGL 版の Google Maps では
-地図のスムーズなズーム
-&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/1007/12/news067.html&quot;&gt;45° Imagery&lt;/a&gt; のスムーズな回転
-地図とストリートビューへのシームレスな遷移
-ストリートビューの表示
が実現されています。

詳しくは次の動画の 40 秒あたりからを見ると分かりやすいでしょう。
&gt;&lt;center&gt;[http://www.youtube.com/watch?v=X3EO_zehMkM#t=38s:movie]&lt;noscript&gt;(ここに YouTube の動画が表示されています)&lt;/noscript&gt;&lt;/center&gt;&lt;

このように、脱 Flash に向けての動きが進んでいます。しかし、Internet Explorer が WebGL に対応しないことを明言しており（&lt;a href=&quot;http://internet.watch.impress.co.jp/docs/news/20110617_453916.html&quot;&gt;参考&lt;/a&gt;）、こちらも当分は PC 上では Flash がデフォルトになりそうです。

**その 3: グラフ表示
Google アナリティクスではグラフの表示 Flash が利用されています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002701.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

また、Google ファイナンスでも、グラフの表示に Flash が利用されています。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002702.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

***なぜ Flash が使われているか
Google アナリティクスや Google ファイナンスのリリース時、&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; はまだ未成熟でした。IE が &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; をサポートしていなかったため、ブラウザー シェアの点からも、Flash が現実的でした。

***HTML5 化に向けての動き
Google アナリティクスは 2011年3月にリニューアルしていますが、リニューアル後もグラフ表示には Flash が使われています。Google アナリティクスや Google ファイナンスは PC からの利用がほとんどなので、HTML5 化してもメリットやインパクトは小さいのかもしれません。

&lt;strong&gt;(追記 2012/03/01) Google アナリティクスのグラフが HTML5 化されたようです&lt;/strong&gt;。Flash ではなく SVG を使って描画しています。公式発表では &lt;a href=&quot;http://analytics.blogspot.com/2012/02/making-google-analytics-even-speedier.html&quot;&gt;アナリティクスの高速化&lt;/a&gt; として表明されています。クライアント側にデータをキャッシュして高速になったようです。

一方、2010 年 3 月、Google は HTML5 でグラフを描画する &lt;a href=&quot;http://www.google.com/publicdata/&quot;&gt;Google Public Data&lt;/a&gt; をリリースしています。このサービスのグラフ描画には &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; や SVG などの HTML5 技術がフル活用されています。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002703.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

**その 4: アップロード機能
Gmail の [ファイルを添付] リンクは実は Flash です。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002704.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

***なぜ Flash が使われているか
Flash の機能を使うと
- 複数ファイルの同時アップロード
- アップロードの進行状況をリアルタイムに表示
を実現できます。

この両方の機能を活用するために、Gmail では Flash をこっそり埋め込んでいます。[添付] ボタンが Flash になっているおかげで、アップロードの進捗状況をリアルタイムに表示できるのです。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002705.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

気づいている人は少ないかもしれませんが、Gmail の設定画面の [高度な添付機能] には「メールにファイルを添付するときに進行状況を表示します。また、一度に複数のファイルを添付できます。Flash が必要です。」と書いてあります。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002706.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

***HTML5 化に向けての動き
HTML5 では &lt;code&gt;&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&lt;/code&gt; タグの &lt;code&gt;multiple&lt;/code&gt; 属性を使えば、複数ファイルのアップロードが可能になりました。しかし、IE9 ではサポートされていません。

アップロードの進行状況表示については、XMLHttpRequest の新仕様（XMLHttpRequest Level 2 から 2011年12月にマージ）では &lt;code&gt;upload.onprogress&lt;/code&gt; で進行状況を取得できます。((2012/02/29 指摘を受けて次の記述から修正: HTML5 では不可能です。裏技として、サーバーに定期的に進行状況をポーリングすれば実現できなくはないのですが、Flash ではクライアント側だけで分かっていたものをわざわざ作り直すのは非現実的です。))

Google ドキュメントのトップページでは、&lt;code&gt;&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;&lt;/code&gt; の &lt;code&gt;multiple&lt;/code&gt; 属性を利用して複数ファイルのアップロードが実現されています。IE9 では Flash を利用する親切実装になっています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002708.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

このように、最近のプロダクトでは積極的に HTML5 の機能を利用しているようです。

**その 5: 広告
Google アドセンスでは、テキスト・画像・Flash の３種類の広告がサポートされています。

そして、Google 自身の広告も Flash を使って作られています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120228/20120228002709.png&quot;border=&quot;1&quot;&gt;&lt;/center&gt;&lt;

***なぜ Flash が使われているか
広告でリッチな表現を実現するためには、Flash が一番の選択肢です。一部、アニメーション GIF も利用されてはいますが、単純なアニメーションになりがちです。

Flash が好まれる理由は次の 3 つが挙げられます。
-凝ったアニメーションをしても端末への負荷・ファイル容量が小さい
-Flash のオーサリング ソフトが充実している
-Flash 広告を製作できる人材がたくさんいる

***HTML5 化に向けての動き
Google は 2011 年 6 月、Flash を HTML5 に変換する &lt;a href=&quot;http://www.google.com/doubleclick/studio/swiffy/&quot;&gt;Google swiffy&lt;/a&gt; を公開しています。このツールは、既存の Flash を SVG や CSS、JavaScript に変換してくれます。

Swiffy が公開されている URL の“&lt;a href=&quot;http://www.google.com/doubleclick/studio/swiffy/&quot;&gt;http://www.google.com/&lt;strong&gt;doubleclick&lt;/strong&gt;/studio/swiffy/&lt;/a&gt;” には DoubleClick という文字が含まれています。DoubleClick は Google が 2007 年 4 月に買収したオンライン広告会社であることから、&lt;strong&gt;Swiffy は「広告 Flash の HTML5 化」を狙ったもの&lt;/strong&gt;であることは間違いありません。

DoubleClick は「HTML5 Challenge」と題した HTML5 広告コンテストを開催するなど、HTML5 広告普及に向けて努力しているようです。コンテストの受賞作品は &lt;a href=&quot;http://goo.gl/N6srF&quot;&gt;DoubleClick Rich Media Gallery&lt;/a&gt; から確認できます。

しかし、現在、HTML5 広告は皆無に近く、多くのアニメーション広告が Flash で作成されているのが現実です。仮に広告配信システムが HTML5 に対応したとしても、
- HTML5 アニメーションに対応したオーサリングソフトが出揃う
- オーサリング ソフトを使いこなすデザイナーの人口が増える
といった条件が揃わない限りは HTML5 広告が一般的にはならないでしょう。

一方、Apple は広告でも攻めています。2010 年末、iTunes でビートルズの楽曲が配信される際、asahi.com・毎日.jp・YOMIURI ONLINE のトップページに 935ピクセル×250ピクセルの巨大動画広告を掲載していました（&lt;a href=&quot;http://d.hatena.ne.jp/edgefirst/20101214/1292283275&quot;&gt;参考&lt;/a&gt;）。この動画は &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; タグを使って埋め込まれており、当時最新の IE8 では表示できませんでした。ビートルズ世代の IE 利用率は高いと思うのですが、意地でも Flash は使わない姿勢には感心してしまいます。

**まとめ
長くなってしまいましたが「ビデオ」「3D」「グラフ」「アップロード」「広告」の 5 つについて、Flash が使われている場所を紹介しつつ、いまでも Flash が使われている理由を考察しました。

このうちの「グラフ」はすぐにでも HTML5 化できそうなのですが、それ以外の 4 つは今すぐには厳しいのが現実です。特に、YouTube に関しては WebM を推した結果、YouTube の HTML5 化が遅れているという自己矛盾な状態になってしまっているのが興味深いです。

Adobe は Flash の先細りを指をくわえてみているわけではなく、次のような方向性を打ち出しています。
-HTML5 オーサリング ソフト「Adobe Edge」を開発中 (&lt;a href=&quot;http://labs.adobe.com/technologies/edge/&quot;&gt;参照&lt;/a&gt;)
-Flash は「ゲームやビデオ再生」を重点的に機能拡張していく (&lt;a href=&quot;&quot;http://cuaoar.jp/2012/02/flash-player-2012.html&gt;参照&lt;/a&gt;)

次回は、この記事では触れていなかった「ゲームと Flash、HTML5」についてまとめてみたいと思います。→ &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120301/flash_html5_games&quot;&gt;まとめました&lt;/a&gt;。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20120224/is_flash_heavy:title]
-[http://d.hatena.ne.jp/nitoyon/20110918/no_flash_on_metro_ie10:title]
-[http://d.hatena.ne.jp/nitoyon/20110426/messages_for_japan_design:title]
-[http://d.hatena.ne.jp/nitoyon/20100928/html5_shodo:title]
-[http://d.hatena.ne.jp/nitoyon/20100430/thoughts_on_flash_jp:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>akkey</username>
<body>ゲームに関してはほとんどがFlashですが、その辺の考察もお聞きしたいです。特に3Dゲームに関しては3D開発エンジンからのFlash書き出しが実現していますが、html5ではまだまだ難しいのではないでしょうか？</body>
<timestamp>1330387027</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; akkey 様&lt;br&gt;コメントありがとうございます。Google がゲームを作ることはないので、今回の記事では外していました。&lt;br&gt;ゲームについてもまとめてみると面白いかもしれませんね。&lt;br&gt;近々記事にしてみます！</body>
<timestamp>1330391057</timestamp>
</comment>
<comment>
<username>Flashとかやってない人</username>
<body>あの上記のFlashの3Dエンジンとやらは無理やりなものなのでHTML5への移植はされているので論外という突っ込みとgoogleはパックマン等のhtml5ミニゲーム(音声部分はFlash併用)をしばしば作るというつっこみ、&amp;グラフはgooglechartで処理するとかSVGでもできるとかpicasaのアップロードはhtml5だけで進捗も表示できるなどという前提はおいておいて、&lt;br&gt;&lt;br&gt;youtubeの動画について保護コンテンツの配信にはwmvかFlash media互換サーバー使わないとダメなんで全然成立しません。この記事&lt;br&gt;&lt;br&gt;取り敢えずイラッと来たならAndroid端末でUAをデスクップにしてyoutube東映で仮面ライダーでも見てください。&lt;br&gt;html5ではあと2年は仮面ライダーみられないけれど「今」見られるのはFlash playerだけって現実&lt;br&gt;&lt;br&gt;あとFlashって「ファイル」なんで「開発」とか新規に必要にはありません。&lt;br&gt;再生用プレーヤーもadobe製である必要も無く&lt;br&gt;Flash9-10位のスプリクトエンジンはfirefoxに寄贈されてビルド可能だし&lt;br&gt;そもそも現状のAndroid版adobe製Flash playerは動画サイトが表示できる程度の模造品でPC版とはかなり違います &lt;br&gt;&lt;br&gt;というかまともなオーサリングツールの有無が最大のポイントなんじゃないですか。&lt;br&gt;帯域とCPU負荷の問題もありますFlashはgzipでJavaScriptも内包できちゃいますからね、html5のサイトもswfで作った方がコンパクトです。&lt;br&gt;&lt;br&gt;まぁFlashも7-8位で外部サイトへのリンクすらできなくなっちゃったから&lt;br&gt;JavaScriptと連携しないと使い物にならないので&lt;br&gt;プログラマブルなgifアニメ的フォーマットとしてhtml5から使えるようにすればいいと思うんですよね、最終的には&lt;br&gt;chromeは使わない方向で</body>
<timestamp>1330393727</timestamp>
</comment>
<comment>
<username>あ</username>
<body>コメントは日本語でお願いします。</body>
<timestamp>1330400094</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>&gt;3D開発エンジンからのFlash書き出し&lt;br&gt;Unityのことですね&lt;br&gt;Unityは（３Dモデルやアニメーションの用意が）難しくて試してないんですけどあれって使えるんですか？&lt;br&gt;ぜひ試して記事書いてください</body>
<timestamp>1330407978</timestamp>
</comment>
<comment>
<username>脱力した人</username>
<body>&gt;Flashとかやってない人&lt;br&gt;&gt;パックマン等のhtml5ミニゲーム(音声部分はFlash併用)&lt;br&gt;ここまで読んだ。&lt;br&gt;パックマン・・・html5じゃないし・・・いろいろともういいよ・・・</body>
<timestamp>1330429530</timestamp>
</comment>
<comment>
<username>loopring</username>
<body>着眼点が素晴らしいですね！&lt;br&gt;&lt;br&gt;確か、html5でアップロードのprogressはあったような気がします&lt;br&gt;使ったことはないですが…&lt;br&gt;&lt;br&gt;http://www.html5rocks.com/en/tutorials/file/xhr2/</body>
<timestamp>1330466188</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; loopring 様&lt;br&gt;ご指摘ありがとうございます。修正しました。</body>
<timestamp>1330492535</timestamp>
</comment>
</comments>
</day>
<day date="2012-02-29" title="">
<body>
*win8_customer_preview*[win8][ms]Windows 8 コンシューマープレビューを早速インストールしてみた
[http://windows.microsoft.com/en-US/windows-8/iso:title] が公開されたので、早速試してみた。

なんと日本語版が公開されていたので、そっちをダウンロード。導入手順は [http://d.hatena.ne.jp/nitoyon/20110917/win8_dev_preview_on_virtualbox_win7:title] と同じでいけた。

Windows Live! サービスが統合されまくっていて、一昔前なら独禁法に抵触して実現できなかったことを、新興勢力に押されている今、さらっと実現してしまった感があります。

**キャプチャーいっぱい張っていきます
日本語 Metro…。ちょっとマヌケに見えます。
&gt;&lt;center&gt;&lt;a href=&quot;http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301021132_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301021132.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

.

メールは Hotmail
====
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301023625_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301023625.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

.

カレンダーは Windows Live カレンダー
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301023626_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301023626.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

.

写真は SkyDrive だけでなく、facebook や Flickr にも対応してる模様
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301023914_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301023914.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

.

デスクトップの壁紙には謎の魚
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301021756_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301021756.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

.

IE10 のバージョンは 10.0.8250.0
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301022113_original.png&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301022113.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

.

Alt-Tab すると Metro アプリと Windows アプリが全部出てきた
&gt;&lt;center&gt;&lt;a href=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301024807_original.jpg&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301024807.jpg&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;


**Windows 8 コンシューマー プレビュー ニュース記事一覧
※以下、明日になったら色んなニュースサイトに記事がでるだろうから、リンク集建設予定地。
</body>
</day>
<day date="2012-03-01" title="">
<body>
*flash_html5_games*[Flash][HTML5]Flash 11、AIR、HTML5、Unity のド派手なゲーム事例を紹介するよ
&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120228/why_google_still_uses_flash&quot;&gt;Google がまだ Flash を使っているサービスでみる脱 Flash の難しさ&lt;/a&gt; という記事を書いたところ、&lt;strong&gt;「Flash・HTML5 のゲームは実際どうなのよ」&lt;/strong&gt;というツッコミが入ったので、「Flash 11」「AIR」「HTML5」「Unity」など、気になる技術別にゲーム事例を紹介していきます。

**Flash 11 の Stage3D
Flash 11 の目玉機能として &lt;code&gt;Stage3D&lt;/code&gt; が導入されました。&lt;code&gt;Stage3D&lt;/code&gt; では &lt;strong&gt;GPU を使用した 2D/3D 描画&lt;/strong&gt;ができるため、まさにゲームをターゲットにした機能といえます。

&lt;a href=&quot;http://cuaoar.jp/2012/02/flash-player-2012.html&quot;&gt;Flash Player 2012 年以降のロードマップ&lt;/a&gt; でも
&gt;http://cuaoar.jp/2012/02/flash-player-2012.html:title&gt;
Flash 実行環境は、ゲームやビデオ再生に必要な機能にフォーカスして開発を行う　（他をまったく無視するわけではない）
&lt;&lt;
とあるので、今後も Flash はゲーム方面で進化していきそうです。

***事例1: 日産 JUKE の海外サイト
[http://www.nissan-stagejuk3d.com/:title] はインパクトあるでしょう。

3D で車が表示されます。なめらかに回転します。
&lt;center&gt;&lt;a href=&quot;http://www.nissan-stagejuk3d.com/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301031555.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;

車に乗り込んで、幻想的な景色の中をドライブできます。&lt;code&gt;Stage3D&lt;/code&gt; すごいです。
&lt;center&gt;&lt;a href=&quot;http://www.nissan-stagejuk3d.com/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301031556.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;
====
ローディングでそこそこ待つので、せっかちな人は動画をどうぞ。
&gt;&lt;center&gt;[http://www.youtube.com/watch?v=fnwsCiEKy-0:movie]&lt;noscript&gt;(ここに YouTube 動画が表示されています)&lt;/noscript&gt;&lt;/center&gt;&lt;

***事例2: 「FINAL FANTASY XII」などのデータを用いたゲームデモ「BARTS」
先日の ADC MEETUP Round 04 Social Gaming で発表されたスクエニ テクノロジーが導入されたゲーム画面です。高画質で見ると、ぬめぬめ動く様子に驚きます。
&gt;&lt;center&gt;[http://www.youtube.com/watch?v=XX3gjoz6TsY:movie]&lt;noscript&gt;(ここに YouTube 動画が表示されています)&lt;/noscript&gt;&lt;/center&gt;&lt;

[http://www.gamebusiness.jp/article.php?id=5542:title] に詳しい解説記事があります。

**AIR
AIR を使えば &lt;strong&gt;Flash を使って iPhone や Android 向けのアプリを開発&lt;/strong&gt;できます。

通常のアプリ開発であれば iPhone/Android それぞれの SDK で用意された UI 部品を使ったほうが自然な使い勝手になるとは思います。ただ、ゲームに関しては、全画面になってしまえばゲームの世界です。iPhone 風、Android 風のインターフェースである必要はありません。AIR を選択すれば、iPhone/Android 向けに共通のコードを使えるのは大きなメリットです。

AIR が実用レベルに達しているのは、モバゲー・GREE それぞれが AIR 対応の動きをしているところからも読み取れます。
&gt;http://www.4gamer.net/games/032/G003263/20120229016/:title&gt;
ディー・エヌ・エーでは，まもなくリリース予定の&lt;strong&gt;Mobage SDK for Adobe AIR&lt;/strong&gt;の紹介が行われた。(中略)これは平たく言うと，Flashで作ったゲームにMobageで必要になるさざまざな機能を提供するというもので，ログイン機能やソーシャルグラフ管理，課金機能などをサポートしている。
&lt;&lt;
&gt;http://www.4gamer.net/games/032/G003263/20120229016/:title&gt;
グリーでも&lt;strong&gt;AIRベースのFlashの開発環境を用意している&lt;/strong&gt;。（中略）どうしてAIRを選んだのかというと，（中略）Flashのパフォーマンスが高いこと，Flashの開発者が非常に多いこと，これまで作ったアセットや経験を生かしたゲームができるということなどが要因となったとのこと。
&lt;&lt;

**HTML5 とゲーム
スマートフォンで有名なゲーム「Angry Birds」と「Cut the Rope」はいずれも HTML5 化されています。ありふれた表現をすれば「&lt;strong&gt;Flash じゃないとは思えない&lt;/strong&gt;」仕上がりになっています。

***事例1: Angry Birds Chrome
[http://chrome.angrybirds.com/:title] は鳥を投げて、目標にぶつけるというシンプルなゲームです（昔、紹介した &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20080209/box2d_example&quot;&gt;引越奉行&lt;/a&gt; に似ています…）。 Chrome という名前の通り、Google Chrome に向けて最適化されているようです。

&gt;&lt;center&gt;&lt;a href=&quot;http://chrome.angrybirds.com/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301031552.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

このHTML5 版は、Google I/O 2011 で Chrome Web Store と同時に公開されました（&lt;a href=&quot;http://jp.techcrunch.com/archives/20110511chrome-web-store-goes-international-gains-5-flat-fee-and-yes-angry-birds/&quot;&gt;参照&lt;/a&gt;）。自分の環境だと少し重い印象でしたが、[SD Version] にすると少し軽くなりました。

***事例2: Cut the Rope
一方の [http://www.cuttherope.ie/:title] はロープを切って、カエル(?)にボールを食べさせるアクション パズルゲームです。

&gt;&lt;center&gt;&lt;a href=&quot;http://www.cuttherope.ie/&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301031554.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

こちらは IE9 のプロモーション用として作成されました。他のブラウザーでも遊べますが、しばらく遊んでいると IE9 じゃないと先のステージに進めないようになっています。

[http://www.cuttherope.ie/dev/:title]（英語）には開発の裏側が書いてあります。こちらは一部 IE ヨイショの記事になっていますが、HTML5 でゲームを作成するときに気をつけることが書いてあるので参考になると思います。

***プロモーションで HTML5 化？
2 つのゲームが HTML5 化された経緯を見ると、両方とも、ブラウザー ベンダーが PR のためにスマホで有名なゲームを HTML5 化させたものになっています。

「速くなりました」とか「すごいです」と説明するよりも、実際にゲームが動いているところを見るほうがインパクトあるのは確かですね。

他にもHTML5 を利用したゲームはたくさん登場しています。海外のまとめ記事ですが、HTML5 で作られたゲームが紹介されています。いずれの記事もキャプチャー画面付きなので、英語が苦手な人でも気になるものを試せるでしょう。
-[http://www.netmagazine.com/features/top-20-html5-games:title]
-[http://www.casualgirlgamer.com/articles/entry/28/The-Best-30-HTML-5-games/:title]

**Unity での Flash 書き出し
最近注目のゲームエンジン Unitfy にも触れておかねばならないでしょう。

Unity は 3D や物理エンジンがデフォルトで用意されていて、リッチな GUI で空間上にオブジェクトを配置したり、スクリプト（JavaScript，C#，Boo Script）で処理を書くことができます。独自のプレーヤーも配布していますが、&lt;strong&gt;Flash での書き出し&lt;/strong&gt;をサポートしている点に注目でしょう。

Flash の形式で公開されている Unity 製のゲームで面白いと思ったのが &lt;a href=&quot;http://dl.dropbox.com/u/129457/Unity/TailDrift.html&quot;&gt;Trail Drift&lt;/a&gt; です。

&gt;&lt;center&gt;&lt;a href=&quot;http://dl.dropbox.com/u/129457/Unity/TailDrift.html&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120301/20120301031559.png&quot;&gt;&lt;/a&gt;&lt;/center&gt;&lt;

3D でさくさく遊べて、浮遊感も楽しいです。

ただし、URL を twitter に張ったところ、「Flash Player がクラッシュする」という人もいたようなので、Flash 書き出しは若干不安ではあります（純粋な Flash でもクラッシュする、という声が聞こえてきそうですが…）。

Unity を使ってみたい人は [http://www.4gamer.net/games/032/G003263/20111210004/:title] が分かりやすい入門記事でした。Page2 のスクリプト「；」が全角、Cube に関連付ける処理が抜けている(Page3 には記述あり)、Quatanion.EnlerAngles→Quaternion.EulerAngles などの誤植がありますが、非常に丁寧にまとまっています。

**あとがき
ちょうど、&lt;a href=&quot;http://www.adobe.com/jp/joc/adc/meetup/round04/&quot;&gt;ADC MEETUP Round 04 Social Gaming&lt;/a&gt; という「Flash とソーシャルゲームについてのイベント」が開かれたところで、そちらのニュース記事も面白いと思います（だいぶ Flash ヨイショですが…）。
-[http://www.4gamer.net/games/032/G003263/20120229016/:title]
-[http://www.gamebusiness.jp/article.php?id=5542:title]
-[http://game.watch.impress.co.jp/docs/news/20120228_515224.html:title]

私は自身、あまりゲームやらならないし、作れないし、モバゲーや GREE できるケータイを持ってないし…と、まったく自信がない分野なのですが、知ってる範囲でまとめてみました。何か抜けていることや、「こんな HTML5 ゲームがあるんだぜ」といった情報があればコメント欄や twitter などで教えていただけるとうれしいです。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20120228/why_google_still_uses_flash:title]
-[http://d.hatena.ne.jp/nitoyon/20120224/is_flash_heavy:title]
-[http://d.hatena.ne.jp/nitoyon/20110918/no_flash_on_metro_ie10:title]
-[http://d.hatena.ne.jp/nitoyon/20110426/messages_for_japan_design:title]
-[http://d.hatena.ne.jp/nitoyon/20100928/html5_shodo:title]
-[http://d.hatena.ne.jp/nitoyon/20100430/thoughts_on_flash_jp:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>通りすがり</username>
<body>Unity軽いし面白い&lt;br&gt;１０分ぐらい遊んだけれど自分はクラッシュしなかった</body>
<timestamp>1330785380</timestamp>
</comment>
</comments>
</day>
<day date="2012-03-06" title="">
<body>
*inexpensive_moving*[生活]段ボール15箱の引っ越し（東京→京都）が2万円以内になった節約術
引っ越しシーズンの3月です。過去に何度か引っ越ししたことがありますが、7年前に東京から京都への引っ越しが印象に残っています。

このときの、自分の荷物は&lt;strong&gt;段ボール15箱&lt;/strong&gt;でした。東京から京都は長距離でしたが、&lt;strong&gt;2万円以内&lt;/strong&gt;で引っ越しできました。

軽トラ借りて運転したわけではありません。長距離運転は大変だし、時間がかかります。

ちゃんと、荷物を取りにきてくれて、新居で荷物を受け取りました。


どういう方法を使ったと思いますか？
====


答えは簡単。「ゆうパック」を利用しました。

ゆうパックは頼めば集荷してくれますし、なんといっても 10 箱以上なら「数量割引」を受けることができます。

引っ越し手順はこんな感じでした。
+近くのコンビニで段ボールをもらってくる
+荷物を箱詰めする
+ゆうパックの集荷センターに電話して、取りにきてもらう日程を決める
+集荷に来てもらう
+新幹線で移動する
+翌日か翌々日に新居で受け取る

簡単ですね。

**ゆうパック引っ越しの良いところ
メリットは、なんといっても&lt;strong&gt;安い！&lt;/strong&gt;

そして、&lt;strong&gt;見積もりが簡単&lt;/strong&gt;。&lt;a href=&quot;http://www.post.japanpost.jp/cgi-simulator/youpack_choice.php&quot;&gt;ゆうパックのホームページ&lt;/a&gt;で簡単に値段の目安を調べることができます。

&gt;&lt;center&gt;&lt;a href=&quot;http://www.post.japanpost.jp/cgi-simulator/youpack_choice.php&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120306/20120306011816.png&quot; border=&quot;1&quot;&gt;&lt;br&gt;ゆうパックの運賃・料金計算&lt;/a&gt;&lt;/center&gt;&lt;

.

試しに、「&lt;strong&gt;北海道から沖縄まで、段ボール20箱&lt;/strong&gt;」の引っ越しをシミュレーションしてみましょう。段ボールの大きさによって値段が違うのですが、120 サイズ（縦横高さの合計が 120cm 以内）だと仮定します。10 箱以上なので、[数量割引を適用する] のチェックをお忘れなく…。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120306/20120306011817.png&quot;&gt;&lt;/center&gt;&lt;

出ました、&lt;strong&gt;北海道から沖縄の引っ越しが驚愕の 29,600 円&lt;/strong&gt;。引っ越しシーズンだからといって割り増しになったりしません。自分が移動する費用よりも安いかもしれない。段ボールの中に入って移動できたらいいのに。

ちなみに、「数量割引」のチェックを外して見積もると 50,000 円になりました。「数量割引」すごすぎます。

**ゆうパック引っ越しの弱点
魅力的なゆうパック引っ越しですが、いくつかデメリットがあります。

:サイズ制限（１箱の縦・横・高さの合計が 170 cm 以内）:段ボールに入るものしか送れません。冷蔵庫や洗濯機は絶対無理です。大型テレビも難しいでしょう。タンスや机やソファーも厳しいです。&lt;br&gt;利用できるケースは「実家から1人暮らしのために引っ越す」「大物家電を処分してから引っ越す」といったものに限られてしまいます。&lt;br&gt;私の場合は、引っ越し元が独身寮で自炊禁止、洗濯機共同だったので最初から大物家電はありませんでした。一番大きな荷物がデスクトップ パソコンやアンプ類で、プチプチや衣類を敷き詰めて段ボールに入れました。机や布団は友人に譲りました。
:重さ制限（1 箱 30kg まで）:書籍ばかりを一面に敷き詰めてしまうと、すぐに 30kg を超えてしまいます。書籍を半分ぐらいにして、残りは緩衝材として衣類を詰める、といった工夫が必要です。
:当日に荷物を受け取れない:日時指定はできますが、当日に届くとは限りません。速達もありますが、割り増しになりますし、当日に受け取れる保証はありません。その日のうちに荷物を受け取り、新居での暮らしを始めたい人には不向きです。

**まとめ
以上、「ゆうパック引っ越し」のメリットとデメリットをまとめてみました。条件にあてはまる人にとっては十分に魅力的ではないでしょうか。引っ越し業者に頼む場合でも段ボールで運べる荷物は「ゆうパック」で運んでおけば節約できるかもしれません。

「ゆうパック」と同じようなサービスに、ヤマト運輸の「宅急便」があります。しかし、宅急便は大きさが 160cm まで、重さが 25kg までと、ゆうパックより制約が厳しいのがネックだったのでパスしました。ちなみに、「ヤマト便」を使えば重量やサイズの制限はないようなので、組み合わせて使うのもよいかもしれません。
</body>
<comments>
<comment>
<username>とおりがかり</username>
<body>「ヤマト便」は160超えも25kg超えもいけますよー。&lt;br&gt;160cmと25kg制限があるのは「宅急便」です。(紛らわしいですけど)&lt;br&gt;http://www.kuronekoyamato.co.jp/yamatobin/yamatobin.html</body>
<timestamp>1331007279</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt; とおりがかり様&lt;br&gt;ご指摘ありがとうございます。記述を修正しました！</body>
<timestamp>1331010294</timestamp>
</comment>
<comment>
<username>ほまらら</username>
<body>Amazonが集配サービスやってくれないかな。&lt;br&gt;あそこが一番、ノウハウやインフラを押さえてそうだ。</body>
<timestamp>1331074728</timestamp>
</comment>
<comment>
<username>通行人</username>
<body>家具や冷蔵庫などの大物は一切無いということですか。</body>
<timestamp>1331215327</timestamp>
</comment>
<comment>
<username>だい</username>
<body>ちょうど似たような距離と個数の引っ越しなので参考になりました。1万5千円以内におさめる予定です。</body>
<timestamp>1338391157</timestamp>
</comment>
</comments>
</day>
<day date="2012-03-07" title="">
<body>
*detectinputcodepage_in_cs*C# から IMultiLanguage2::DetectInputCodepage() を使う方法
C# で文字コード判定を実現したかったので調べてみた。

**DOBON.NET のコードが動かない…
検索して引っかかったのが [http://dobon.net/vb/dotnet/string/detectcode.html:title]。

.NET 界隈でよくお世話になる DOBON さんだったので従ってみることにする。このページでは
+Jcode.pm を参考にした方法
+第三者の作成したクラス、コードを使う方法
+mlang.dllを使う方法
の 3 つが紹介されている。

このうちの 1. と 2. の自前判定は日本語にしか使えない。他言語にも対応したかったので mlang.dll を使う方法を試すことにした。mlang.dll は IE5 以上が利用する文字コード関連のライブラリだ。&lt;code&gt;IMultiLanguage2::DetectInputCodepage()&lt;/code&gt; が文字コード判定の機能を提供している。

このページの手順を試してみたが、どうも判定結果が正しくない。C++ から &lt;code&gt;IMultiLanguage2::DetectInputCodepage()&lt;/code&gt; を呼ぶと意図したとおりの結果を返すのに、C# から呼び出すと「トルコ語」などと適当なことを言い出す。
====
何かおかしいので、WinDbg でブレークポイントしかけつつ見てみたところ、C# から呼び出したときにはバイト列の 1 バイト目しか渡っていなかった。（WinDbg で調べる方法は後述する）

そりゃー、正しい結果にならないわけだ…。

**バイト列を渡すには？
バイト列をアンマネージ コードに渡すときには &lt;code&gt;GCHandle.Alloc()&lt;/code&gt; と &lt;code&gt;Marshal.UnsafeAddrOfPinnedArrayElement()&lt;/code&gt; を呼んで &lt;code&gt;IntPtr&lt;/code&gt; に変換するとうまくいくらしい。

元のコードはメソッドの定義をタイプ ライブラリからクラスを自動生成していて、バイト列は &lt;code&gt;ref sbyte&lt;/code&gt; で受け取っていた。&lt;code&gt;ref sbyte&lt;/code&gt; に正しく &lt;code&gt;IntPtr&lt;/code&gt; を与える方法が分からなかった。

そこで、[http://msdn.microsoft.com/ja-jp/library/aa288455%28v=vs.71%29.aspx:title] を参照しつつ、自前で「COM コクラス」や「COM インターフェース」を定義することにした。

その結果、見事に C# でも文字コードを判定できるようになった。

以下が完成したコードである。タイプライブラリを登録する必要もなく、素の C# コンソール プロジェクトに食わせて動くはずである。

コマンドライン引数で受け取ったファイルの文字コードを判定してコンソールに出力している。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|cs|
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace ConsoleApplication3
{
    class Program
    {
        static void Main(string[] args)
        {
            new Program().Start(args[0]);
        }

        private void Start(string path)
        {
            Encoding encoding = DetectEncoding(GetFileAsByteArray(path));
            Console.WriteLine(&quot;Result: {0}&quot;, encoding.EncodingName);
        }

        private byte[] GetFileAsByteArray(string path)
        {
            using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))
            {
                byte[] bytes = new byte[fs.Length];
                fs.Read(bytes, 0, bytes.Length);
                return bytes;
            }
        }

        private Encoding DetectEncoding(byte[] bytes)
        {
            IMultiLanguage2 lang = (IMultiLanguage2)new MultiLanguage();
            int len = bytes.Length;
            DetectEncodingInfo info = new DetectEncodingInfo();
            int scores = 1;

            // bytes to IntPtr
            GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);
            IntPtr pbytes = Marshal.UnsafeAddrOfPinnedArrayElement(bytes, 0);

            try
            {
                lang.DetectInputCodepage(0, 0, pbytes, ref len, out info, ref scores);
            }
            finally
            {
                if (handle.IsAllocated)
                    handle.Free();
            }

            return Encoding.GetEncoding((int)info.nCodePage);
        }
    }

    public struct DetectEncodingInfo
    {
        public UInt32 nLangID;
        public UInt32 nCodePage;
        public Int32 nDocPercent;
        public Int32 nConfidence;
    };

    [ComImport, Guid(&quot;275c23e2-3747-11d0-9fea-00aa003f8646&quot;)]
    public class MultiLanguage
    {
    }

    [Guid(&quot;DCCFC164-2B38-11D2-B7EC-00C04F8F5D9A&quot;),
        InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    public interface IMultiLanguage2
    {
        void GetNumberOfCodePageInfo();
        void GetCodePageInfo();
        void GetFamilyCodePage();
        void EnumCodePages();
        void GetCharsetInfo();
        void IsConvertible();
        void ConvertString();
        void ConvertStringToUnicode();
        void ConvertStringFromUnicode();
        void ConvertStringReset();
        void GetRfc1766FromLcid();
        void GetLcidFromRfc1766();
        void EnumRfc1766();
        void GetRfc1766Info();
        void CreateConvertCharset();
        void ConvertStringInIStream();
        void ConvertStringToUnicodeEx();
        void ConvertStringFromUnicodeEx();
        void DetectCodepageInIStream();
        void DetectInputCodepage(
            [In] UInt32 dwFlag,
            [In] UInt32 dwPrefWinCodePage,
            [In] IntPtr pSrcStr,
            [In, Out] ref Int32 pcSrcSize,
            [Out] out DetectEncodingInfo lpEncoding,
            [In, Out] ref Int32 pnScores);
        void ValidateCodePage();
        void GetCodePageDescription();
        void IsCodePageInstallable();
        void SetMimeDBSource();
        void GetNumberOfScripts();
        void EnumScripts();
        void ValidateCodePageEx();
    }
}
||&lt;
&gt;&lt;/div&gt;&lt;

**WinDbg で COM 呼び出しをブレークする
最後に、WinDbg で COM 呼び出しをブレークして調べる方法をまとめておく。同じ方法を使えば COM 呼び出しに限らず、Win32 の API でも同じようにブレークできるだろう。Visual Studio でもできるかもしれないが、自分の環境ではシンボル読み込みがうまくいかないことが多かったので、WinDbg を使うようになった。

Debugging Tools for Windows がインストールされている前提とする。

+[File] [Symbol File Path] で MS のシンボルサーバーを設定されていることを確認。されていないなら次のように設定（C:\symbols フォルダに保存する場合）&lt;pre&gt;SRV*C:\symbols*http://msdl.microsoft.com/download/symbols&lt;/pre&gt;
+[File] [Open Executable] からデバッグ対象の EXE を開く。
+開始直後の状態でいったん停止するので、ブレークポイントを設定する。&lt;pre&gt;bu mlang!CMultiLanguage2::DetectInputCodepage&lt;/pre&gt;
+&lt;code&gt;g&lt;/code&gt; と入力するなり F5 を押すなりして EXE の実行を開始する。
+ブレークポイントで止まるので、あとは引数を調べる。

とても簡単ですね！

最後の引数を調べるところが面倒だが、x86 なら &lt;code&gt;kv&lt;/code&gt; で引数をダンプできるし、スタックを眺めればなんとかなる。

自分の環境は x64 だったので、一部の引数はレジスタに置かれる。&lt;code&gt;IMultiLanguage2::DetectInputCodepage()&lt;/code&gt; のプロトタイプ宣言は次の通り。
&gt;|cs|
void DetectInputCodepage(
    [In] UInt32 dwFlag,
    [In] UInt32 dwPrefWinCodePage,
    [In] IntPtr pSrcStr,
    [In, Out] ref Int32 pcSrcSize,
    [Out] out DetectEncodingInfo lpEncoding,
    [In, Out] ref Int32 pnScores);
||&lt;

レジスタを眺めてみると、こうなっていた。
&gt;|
0:000&gt; r
rax=0000000000000018 rbx=0000000000000000 &lt;strong&gt;rcx=00000000003ee3a0&lt;/strong&gt;
&lt;strong&gt;rdx=0000000000000000&lt;/strong&gt; rsi=000000000020eb48 rdi=000000000020ea88
rip=000007fef5df8d84 rsp=000000000020ea48 rbp=000000000020eab0
&lt;strong&gt; r8=0000000000000000&lt;/strong&gt;  &lt;strong&gt;r9=00000000028d7dc8&lt;/strong&gt; r10=000007fef5df8d84
r11=00000000003ee3a0 r12=000000000038bac0 r13=00000000003ee3a0
r14=000000000000001d r15=0000000000000001
|&lt;

マークしたところがレジスタ上に設定された第１～第４引数。ただし、COM 呼び出しなので、第一引数は this ポインタとなっている。

つまり、それぞれの引数の値は次のレジスタに格納されている。
-dwFlag: rdx
-dwPrefWinCodePage: r8
-pSrcStr: r9

知りたかったのは &lt;code&gt;pSrcStr&lt;/code&gt; にバイト列が正しく渡っているか。ということで、&lt;code&gt;r9&lt;/code&gt; に入っているアドレスをダンプしてみた。
&gt;|
0:000&gt; dd @r9
00000000`028d7dc8  3042241b 3143247a 2537245b 253c2137
00000000`028d7dd8  2473253a 42281b4e 42241b33 47246e37
00000000`028d7de8  23213924 6e356132 3f324b24 2b245945
   : 
|&lt;
このバイト列がちゃんと意図したものならば成功。

めでたし。

**まとめ
DOBON.NET を妄信してはいけない。

</body>
</day>
<day date="2012-03-13" title="">
<body>
*newdesign2012*[css]ブログのデザインを新しくしてみた
最近、高解像度のノート PC（15.6インチ 1920×1080）に乗り換えたら、自分のブログが見にくくてしかたなかった。こんな風に見える。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120313/20120313020403.png&quot;&gt;&lt;/center&gt;&lt;

高解像度時代の Web デザインについて思いを巡らせていたら、いつの間にか新しい CSS を書いていた。結果、こうなった。
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120313/20120313020402.png&quot;&gt;&lt;/center&gt;&lt;

**新しいデザインで重視したこと
***1. デフォルトのフォント サイズを使う
本文のフォントはデフォルトのサイズにした。
====
&lt;s&gt;いままでは見栄えを気にして、&lt;code&gt;13px&lt;/code&gt; にしていたが、高解像度端末では見にくい。変な小細工はせずに「デフォルトのフォントサイズで表示しておけば、そのデバイスで一番適切なサイズで表示される」と信じることにした。&lt;/s&gt; → (2012/3/15 追記) 信じていたが、やっぱり見にくいと指摘を受けたので、やや小さくしてみた。

リンクの色もデフォルトのままにした。無駄に凝るのはやめた。

サイズ指定の単位は &lt;code&gt;px&lt;/code&gt; ではなく &lt;code&gt;em&lt;/code&gt; を使うようにしてみた（画像を除く）。たとえば、本文の横幅は &lt;code&gt;45em&lt;/code&gt; に設定している。

***2. シングルカラム化
いままでは右側のカラムに色々置いてたが、しっくりきてなかった。

マルチカラムの悲しいところは
-本文が短い ＋ カラムが無駄に長い → フッターがあらわれない
-本文が長い ＋ カラムがシンプル → 空っぽなカラムが残ったまま
である。

そんな中、最近、シングルカラムのブログを見かけるようになってきたので、時流に乗ってみた。

記事一覧とプロフィールはフッターに移動した。最近のコメントやトラックバックは自分しか見ないだろうから消した。ブログパーツは究極の自己満足なのですべて消した。

ページ上部と脇のカラムに Google アドセンスを貼り付けていたが、今回のリニューアルに際して見てみるとクリック率が異様に低かった。記事の下の広告が一番まともだったので、そこだけ残しておいた。

***4. CSS3 はじめました
CSS3 の &lt;code&gt;border-radius&lt;/code&gt; や &lt;code&gt;box-shadow&lt;/code&gt;、&lt;code&gt;text-shadow&lt;/code&gt; を使ってみた。

この手の新しいプロパティーは、ついつい派手に使いたくなってしまう気持ちを堪えて、控えめに使うようにしてみた。

ベンダープレフィックスが面倒だったので、&lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; を使ってみた。&lt;code&gt;@[]include[] border-radius(1em, 1em);&lt;/code&gt; のように書くだけで、各ブラウザー向けのプロパティーを吐き出してくれるので楽だった。Sass の変数やネスト表記も使えるので生産性があがった。

IE9、Firefox10、Chrome17 で確認したけど、どれも一発 OK でほとんど同じ見た目だった。モダン ブラウザーすごい。IE6 で見たら、&lt;code&gt;:first-child&lt;/code&gt; が効いてなくて悲しくなったが、それ以外はだいたい同じにした。

と思ったら、IE9 で表示が崩れていた…。はてなダイアリーの &lt;code&gt;DOCTYPE&lt;/code&gt; の関係で、互換モードになってしまうのかな。悲しい。。。 → (2012/3/15 追記) IE でもほとんど崩れなくなったはず。

***5. ロゴを調整した
いまのロゴは&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20070211/p1&quot;&gt;5年前&lt;/a&gt;に作ったもので、イラストレーター ファイルが紛失していたので、あらためてトレースした。

今回のデザインで白背景になり、いままではごまかせていた歪みが目立つようになってしまった。隙間や大きさを調整して違和感ないようにした。

結果、5年前にこだわった「湯気が『てっく』になっている」「『煮』が茹でられているお椀にみえる」「てっく煮+4 → tech.nitoyon」といった細かいポイントも伝わりやすくなった気がする。

**まとめ
新しいデザインのソースコードなどは https://github.com/nitoyon/tech.nitoyon.com にコミットしてある。気になる人はご自由に見てください。

高解像度の Web デザインについてや、Sass は便利だぜ、といった話は後日エントリにまとめるかもしれない。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
- [http://d.hatena.ne.jp/nitoyon/20090226/hatebu2_css:title]
- [http://d.hatena.ne.jp/nitoyon/20070305/hateda_new_css:title]
- [http://d.hatena.ne.jp/nitoyon/20070211/p1:title]
- [http://d.hatena.ne.jp/nitoyon/20070125/p1:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>satosystems</username>
<body>iPad2では逆に文字が小さくなって見にくくなりました。指二本で拡大すればいいんですけどね。全てのクライアントで意図したように見せるのは難しいんですね。</body>
<timestamp>1331663883</timestamp>
</comment>
<comment>
<username>satosystems</username>
<body>小さくなる原因は「リンク元」の長いURLのようでした。お騒がせしました。</body>
<timestamp>1331664491</timestamp>
</comment>
<comment>
<username>kanariia</username>
<body>にとよんさん、&lt;br&gt;ブログのデザインリニューアルおめでとうございます＼(^o^)／&lt;br&gt;&lt;br&gt;リンク元のURLが折り返していない様子ですが、&lt;br&gt;こちらのaタグにCSSで&lt;br&gt;word-break: break-all;&lt;br&gt;word-wrap: break-word;&lt;br&gt;とかけてやると、&lt;br&gt;ちゃんと折り返してくれるようになるのでお試しください～！</body>
<timestamp>1331686073</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>文字が大きすぎてかなり読みづらい@白Macbook&lt;br&gt;前のほうが良かった</body>
<timestamp>1331724872</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>いろいろとコメントありがとうございます。&lt;br&gt;&lt;br&gt;「リンク元」の URL を折り返すようにして、&lt;br&gt;フォントサイズは少し小さくしてみました。&lt;br&gt;&lt;br&gt;まだまだ試行錯誤中です・・・。</body>
<timestamp>1331740010</timestamp>
</comment>
</comments>
</day>
<day date="2012-03-19" title="">
<body>
*perl_feature_extraction*[perl]Perl で文章の特徴抽出した話を Kyoto.pm #01 で発表しました
&lt;a href=&quot;http://www.atnd.org/events/25439&quot;&gt;Kyoto.pm TECH TALKS #01&lt;/a&gt; の LT で飛び入り発表してきました。

&gt;&lt;center&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1rbwzN8Tg34cfevQ28IPX-Jm5w1K1-cHs-5KEdgnbqo8/embed&quot;&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120319/20120319004739.png&quot;&gt;&lt;br&gt;最近つかった Perl の話&lt;/a&gt;&lt;/center&gt;&lt;
====
発表するのが 2 年ぶりぐらいで、Perl 詳しくなくてアウェイ感があって、だいぶ緊張しました。

しかも、他人のふんどしで相撲をとった感じの内容だったので、いろいろ酷いのですが、まあまあうけた気がするのでよかったことにします。

**Google Docs のプレゼン機能を使ってみた
参加と発表を決めたのが当日で、スライドを作る環境も時間もなかったので、Google Docs のプレゼンテーション作成機能を使ってみました。

ブラウザー上でプレゼン資料を作成できるのが便利だったのですが、
-プレゼン モードでの日本語フォントが変
-ブログに埋め込む手順が分からない（&lt;a href=&quot;http://support.google.com/docs/bin/answer.py?hl=en&amp;answer=86101&quot;&gt;ヘルプ&lt;/a&gt;には１つ古い UI での手順が書いてある）
-共有の URL を開いても閲覧用の全画面表示にならない (推測で URL 末尾の &lt;code&gt;[ID]/edit&lt;/code&gt; を &lt;code&gt;[ID]/embed&lt;/code&gt; にしたらそれっぽくなった)
など、いろいろと悲しいのでたぶんもう使わない…。

Yappo さんが使ってた impress.js がかっこよかったので試してみたい！

**参加の感想
技術の無駄遣いな &lt;code&gt;Acme&lt;/code&gt; モジュールの話があったり、OR マッパーの濃いの話があったり、最近気になる git の話があったり、そのほかも色々面白かった。

10 人ぐらい LT してたけど、厳密に時間を区切ってたのがよかった。LT 大会が盛り上がるためには「発表者がそこそこ多い」「時間がきたら強制終了」という条件が重要なんだなー、と思った。

次は 3～4 ヶ月後に開催らしいので、予定があえばまた参加したい！
</body>
</day>
<day date="2012-03-27" title="">
<body>
*mova_to_foma*[生活]mova から FOMA に機種変更した話
3月末で mova サービスが終了する。

自分の携帯電話は 7 年前に 0 円で購入した &lt;a href=&quot;http://k-tai.impress.co.jp/cda/article/showcase_top/19876.html&quot;&gt;SH506iC&lt;/a&gt; という機種だったので、見事に mova であり、使えなくなる 30 万人のうちの 1 人であった((&lt;a href=&quot;http://www.nikkansports.com/general/news/f-gn-tp2-20120324-922524.html&quot;&gt;ムーバ19年の歴史に幕も契約者34万人 - 経済ニュース : nikkansports.com&lt;/a&gt;))。

当初は 4 月まで放置して、使えなくなるところを体験する「mova と一緒に心中プラン」を予定していた。使えなくなった携帯電話を持って docomo ショップに駆け込んで
- 電話番号は引き継がれるのか
- 使えなかった期間の基本料金はどうなるのか
- どういう事務手続きになるのか
などを体験すればブログのネタにもなるかなー、と考えていた。

しかし、25日（日）に携帯電話を落としてしまって、これはもう、なんとしても FOMA に変えろという見えざる力が働いたんじゃなかと思うにいたった。

「ケータイ落としたら回線を止めてもらわないと勝手に使われちゃって請求やばいことなる」ってマクドナルドで女子高生が言ってたのを思い出したので、その日のうちに docomo ショップにいって回線は停止しておいた。本人確認なしに契約者名と電話番号だけで停止できたのには少し驚いた((おねーさんに「ご本人様ですか？」と聞かれて「はい」と答えたので、これが本人確認といえば本人確認になるのかもしれない。住所も記入したのだが、契約しているものとは別のものを書いたので照合はしていないようだ。))。
====
**どういう機種にしようかな？
回線も無事に停止できたので、帰宅後、どういう機種にするかじっくり調査した。

一番の分岐点は「スマートフォンにするか」。

自分の生活パターンが特殊なのかもしれないけど、
- 子どもが生まれたので休日も家にいることが多い。
- 平日は家か会社。移動は自転車。
- 家でも会社でもパソコンは常時起動している。
という状況なので、スマートフォンが必要な時間帯が存在しない。

なにより、スマートフォンにすると月額 5,000 円プラスになるのが負担が大きい。イオンの 980 円 SIM カードは魅力的なので、生活パターンが変わったら 2 台目スマホ＋イオン SIM にしてみようかと思う。

結論： &lt;strong&gt;ガラケー（フィーチャー フォン）の安いやつにしよう！&lt;/strong&gt;

**機種変更のために家を出ようとした瞬間に…。
翌日、26日（月）、機種変更をしようと家を出ようとした瞬間、家に docomo さんから電話がかかってきた。

前日落とした携帯電話が警察署に届いたらしい。拾って届けてくれた人は本当にありがたいし、アドレス帳のデータがなくならずに済んだのは大いに助かったのだけれども、この&lt;strong&gt;電話の回線を復活させてもあと 5 日しか使えない&lt;/strong&gt;という状況が面白くて嫁と 2 人で笑ってしまった。

いまさら mova と一緒に心中する気にもなれなかったので、Winny の開発者を逮捕したことでもおなじみの五条警察署に携帯電話を取りにいって、そのまま docomo ショップに向かった。

それにしても、警察署が製造番号をキャリアに伝えて、キャリアから契約者に連絡が行くフローがあることに驚いた。確かにこれは効率的である。

**ガラケー 最安機種変 13,000円から一転。
docomo ショップでおねーさんに話を聞いたところ、一番安い機種への変更でも 13,000 円するらしい。渋っているこちらの様子に疑問を感じたのか「なぜ機種変更をされようと思ったのですか」と聞かれて「電話が使えなくなるらしいので…」と伝えたところから、話は一転、mova からなら 13,000 円のものだけでなく 60,000 円のものまで無料で変更できるらしい((厳密には、5,250 円だが、i コンシェルジュや i チャネルなどのサービスを 3 ヶ月間契約することでその分が割り引かれる、とのこと。))。

そして、目の前には全機種のモックが並んだ。

過去に自分が携帯電話を選んだときは、「○○の機種が気になるけど高いから××で妥協しようかなー」とか「安いやつでいいや」とか、そういう基準で選んできたので、いきなり&lt;strong&gt;「全機種無料」と言われると完全に思考停止する&lt;/strong&gt;。

「値段」という重大な判断基準を奪われて何も考えられなくなる。

7 年間も同じ携帯電話を使い続けるぐらいにこだわりのない自分に、大量のラインナップを見せられても困ってしまう。

「えーっと、カメラはどれで使えますか？」「ぜんぶ使えます」&lt;br&gt;「動画は？」「ここにあるやつはぜんぶできます」&lt;br&gt;「ワンセグは…」「ぜんぶできます」

新機種は全部スマートフォンになっていて、ガラケーといえば「らくらくホン」とあと１機種ぐらいじゃないかと思い込んでいたので、あまりの数の機種に途方にくれてしまった。そんな私に、おねーさんは「だいたいどれも機能は似てるので、デザインで選んでもいいんじゃないでしょうか」と素敵な一言。docomo の人がそれをいってしまっては身もフタもないのだけれど、自分にとっては最高のアドバイスだった。

本体の色はほとんどが白・黒・ピンクのみ。黄金色も微妙だし、紺のやつは魅力的だったけど GPS がついてないのがいまいち。しばらく見ない 7 年の間に随分と地味になってしまった。昔はもっと個性的な色の携帯電話が多かったような気がする。

あとは消去法。大きいやつを除外して、重いやつも除外して、ボタンが平べったいのも除外して、握り心地がいいやつを残して、最後に直感で選んだのが &lt;a href=&quot;http://k-tai.impress.co.jp/docs/news/20111018_484478.html&quot;&gt;N-03D&lt;/a&gt; だった。

**まとめ
mova からの機種変更は大変お安くてありがたかったのだけれど、安すぎて逆にどうしていいのか分からなくなった、というお話でした。

docomo のおねえさんに「mova のまま 4 月になったらどうなるの？」と聞いてみたところ、
- 契約はいったん解除になる
- 4 月になってから FOMA にしようとしても新規契約になるので、番号も変わる
とのことだった。確証を得るためにネットで調べてみたけど、4 月になったらどうなるかの情報は見つからなかった。もしかしたら救済策のルートはあるのかもしれないけど、基本的には解約になるのかもしれない。そのあたりは 4 月になってから体験者の情報が出てくるのを楽しみしたい。

今回はガラケーに機種変更したが、あとから考えたら、「スマートフォンに機種変更」＋「中古で買ったケータイに SIM だけ移す」という戦略にすれば、ほぼ無料で最新スマフォ（Wi-Fi 限定）が手に入ったことに気づいた。2ch あたりの情報をみると、もっと複雑なお得作戦がいろいろあるみたいだけども。
</body>
</day>
<day date="2012-04-09" title="">
<body>
*nes_img_search_tips*簡単にファミコンのプレイ画像を入手する方法
ゲーム名で Google 画像検索しても意外にプレイ画像は手に入りにくい。

たとえば「スーパーマリオ3」で検索するとこうなる。

&gt;&lt;center&gt;[f:id:nitoyon:20120409021448j:image:w640]&lt;/center&gt;&lt;

パッケージ写真だったり、二次創作だったり、テレビ画面を写真に撮った画像だったりがヒットするのでノイズが多い。

さらにたちが悪いのがプレイ動画のサムネール。一覧ではまともに見えるのに、開いてみるとボケていてがっかりしてしまう。上の画像のそれっぽく見えるやつも、実はほとんどが動画のサムネールなのだ。

そんなときにこの方法が使える。

**やりかた
左側の [サイズを指定] をクリックして、256×240 を指定して検索するだけ。

&gt;&lt;center&gt;[f:id:nitoyon:20120409020527j:image]&lt;/center&gt;&lt;

かなりの的中率になった。

&gt;&lt;center&gt;[f:id:nitoyon:20120409021449j:image:w640]&lt;/center&gt;&lt;

エミュレーターで遊んだ人がそのままキャプチャーしてアップロードしたものだと思う。等倍の画像なので変にボケてなくて便利。

どうぞご利用ください。

(追記 2012/4/12) &lt;a href=&quot;http://d.hatena.ne.jp/Longsword/20120409/1333997533&quot;&gt;簡単にファミコンのプレイ画像を入手する方法プラス（MSX＋MSX2＋PCエンジン） - 【長剣は】最強武器候補【鈍器です】&lt;/a&gt; によると、256×224 で検索したほうが多くヒットすることがある、&lt;code&gt;inurl:gif&lt;/code&gt; などで拡張子を指定するとより安心、とのことです。ファミコン以外のハードを検索するときのサイズも紹介されています。
</body>
</day>
<day date="2012-04-12" title="">
<body>
*msysgit_utf8_2*[git]UTF-8 対応の msysGit 1.7.10 リリース！ いよいよ Windows で git できるよ!!!
先日、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120221/msysgit_utf8&quot;&gt;msysGit（Git for Windows）がいよいよ公式に UTF-8 をサポート！&lt;/a&gt; という記事で「UTF-8 対応のコードがコミットされた」ことをお伝えしましたが、ついに、&lt;strong&gt;UTF-8 対応の新バージョン、msysGit 1.7.10 がリリース&lt;/strong&gt;されました。

いよいよ Windows でも日本語ファイル名を扱えるようになったので、「git では &quot;詳細設計仕様書.xlsx&quot; をコミットできないんでしょ？」とブーブーいってた人を説得できる材料はそろいました!!!!

それを記念して、この記事では
- UTF-8 対応の msysGit 1.7.10 を試してみた
- ブーブーいう人を黙らせるための「GUI で git する Windows 向けツール」まとめ
の2本立てでお送りしたいと思います。

**UTF-8 対応の msysGit 1.7.10 を試してみた
さっそく Google Code の &lt;a href=&quot;http://code.google.com/p/msysgit/&quot;&gt;msysGit&lt;/a&gt; から 1.7.10 をダウンロード。
====
インストールして、スタートメニューから [Git] &gt; [Git Bash] を起動します。

日本語ファイル名を表示できるように次の設定をしておくことをお忘れなく。
&gt;|sh|
$ git config [--global] core.quotepath off
||&lt;

***日本語ファイル名の実験！
では早速、日本語ファイル名を含んだレポジトリーをとってきてみよう。

Github の &lt;a href=&quot;https://github.com/toooooooby/japanese_test&quot;&gt;toooooooby / japanese_test&lt;/a&gt; がちょうどいいので使ってみる。
&gt;|sh|
$ git clone https://github.com/toooooooby/japanese_test.git
Cloning into 'japanese_test'...
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (22/22), done.
remote: Total 43 (delta 21), reused 43 (delta 21)
Unpacking objects: 100% (43/43), done.
||&lt;

エクスプローラーで見ると…

&gt;&lt;center&gt;[f:id:nitoyon:20120412015658p:image]&lt;/center&gt;&lt;

おー！　日本語!!!

Git Bash でも…。
&gt;|sh|
$ cd japanese_test/

$ ls
readme.textile                  ??????.txt
unko.txt                        ????????????SJIS.txt
???????????????UTF-8.txt        ????????????????????????
?????????????????????UTF-8.txt
||&lt;
あれ？

less を噛ませば大丈夫。
&gt;|sh|
$ ls | less
readme.textile
unko.txt
噂のソフトUTF-8.txt
日本語ファイルUTF-8.txt
能知.txt
能表暴予SJIS.txt
表が怖いです！！
||&lt;
※ただし、フォントを MS ゴシックなどの日本語対応のものに変更しておく必要あり

(追記) &lt;code&gt;ls --show-control-chars&lt;/code&gt; すれば less なしで日本語通りました。.bashrc に &lt;code&gt;alias ls='ls --color=auto --show-control-chars'&lt;/code&gt; と定義しておくとよさそうです。(twitter で @hogelog さんに教えてもらいました)

vector から &lt;a href=&quot;http://www.vector.co.jp/soft/win95/util/se031296.html&quot;&gt;nkf Win32 版&lt;/a&gt; を落としてきて確認してみると
&gt;|sh|
$ ls | nkf -g
UTF-8
||&lt;
ファイル名の出力は内部的に UTF-8 になっていますね。less も UTF-8 に対応していることが分かります。

もちろんコミットログの日本語も問題なし。日本語ファイル名も余裕です!!!
&gt;|sh|
$ git log --stat
commit b20cfb6454a69242d361fedb8927b8515b97e4f7
Author: toooooooby &lt;example@example.com&gt;
Date:   Tue Jul 27 01:08:20 2010 +0900

    テストテスト表が怖い噂の(ry＠msysGit UTF-8

 unko.txt                 |    6 ++++++
 噂のソフトUTF-8.txt |   13 -------------
 2 files changed, 6 insertions(+), 13 deletions(-)
||&lt;

***日本語ファイル名のコミットは少し厄介
日本語のファイルを作って &lt;code&gt;git add&lt;/code&gt; を試してましょう。

しかし・・・Git Bash 上で日本語を入力できない・・・。IME の入力が無視されます(対処方法があればおしえてください)。

回避方法は、コマンドラインにこだわるなら xargs でファイル名を渡すか、MS-DOS を起動して git.exe を実行しましょう・・・。
&gt;|sh|
&gt;&quot;c:\Program Files (x86)\Git\bin\git.exe&quot; add テスト.txt
||&lt;

コマンドラインにこだわらないのであれば、msysGit と同時にインストールされるシェル エクステンション「git-cheetah」を使えばよいでしょう。エクスプローラーから右クリックで &lt;code&gt;git add&lt;/code&gt; や &lt;code&gt;git commit&lt;/code&gt; できます。

***コミットメッセージに日本語を使うならエディターの設定は必須
いざコミット・・・としてみましたが、今度は msysGit 付属の vim が日本語表示できてるのに、IME からの日本語を受け付けてくれません。

仕方がないので、エディターを自分で設定しましょう。ここでは秀丸を設定してみます。
&gt;|sh|
$ git config [--global] core.editor &quot;\&quot;C:/Program Files (x86)/Hidemaru/Hidemaru.exe\&quot;&quot;
||&lt;
空白パスを含む場合は &lt;code&gt;\&quot;&lt;/code&gt; を忘れないように注意。

最初、メモ帳でやろうとしたけど、コミットメッセージの改行コードが LF のみでエディターに渡されていたので、メモ帳では改行を表示できませんでした。そこそこ高機能なエディターを選択しましょう。

コミット メッセージを UTF-8 で保存してエディターを終了します。

コミットしてログをみてみると・・・
&gt;|sh|
$ git log --stat
commit 6c925290f271237da7e8508916e193f53ba9552a
Author: unknown &lt;user@HOST.(none)&gt;
Date:   Thu Apr 12 00:30:58 2012 +0900

    日本語コミットメッセージだよ。

    いけるかな？？？

 テスト.txt |    1 +
 1 file changed, 1 insertion(+)
||&lt;
はい、無事いけました。


**ブーブーいう人を黙らせるための「GUI で git する Windows 向けツール」まとめ
コマンドラインに不慣れな人にも Git を使ってもらわなきゃいけない場合、GUI ツールの存在が気になります。

そんな人に使ってもらえそうな GUI で git するツールをまとめてみました。

***git-cheetah
msysgit に付属するシェル拡張です。

エクスプローラーから右クリックしてのコミットや GUI でのヒストリーの確認など、一通りのことは実現できます。

&gt;&lt;center&gt;[f:id:nitoyon:20120412015659p:image]&lt;/center&gt;&lt;

カジュアルな使い方をする分にはこれで十分そうです。

***GitHub for Windows
(2012/5/23 追記) GitHub が作成、公開している Windows 向けの Git クライアント「&lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows&lt;/a&gt;」です。GitHub の名前がついていますが、GitHub 以外の Git レポジトリを扱うこともできるようです。

***Tortoise Git
TortoiseSVN で有名な Tortoise シリーズの「&lt;a href=&quot;http://code.google.com/p/tortoisegit/&quot;&gt;TortoiseGit&lt;/a&gt;」。TortoiseSVN をベースに git 用にカスタマイズしています。

しかし、msysGit 1.7.6 の利用を推奨しているため UTF-8 対応していません。草の根版でよいなら、msysgit の UTF-8 化に尽力した Karsten さんが TortoiseGit V1.7.5.0 をベースに UTF-8 対応させたパッケージが msysGit のメーリングリストに流れています(&lt;a href=&quot;http://groups.google.com/group/msysgit/browse_thread/thread/408f7613d096f2c0/b5ebf2a57c8676d2?lnk=gst&amp;q=v15#b5ebf2a57c8676d2&quot;&gt;Issue 80: Unicode support on Windows&lt;/a&gt; 参照)。Tortoise にこだわりがあるなら、こちらを使ってもよいかもしれません。

ただ、残念ながら日本語化はされていません（昔に日本語化した人はいたが、現在はメンテされていない）。

(追記 2012/4/15) 新たな日本語化プロジェクト「&lt;a href=&quot;http://tortoisegitjapan.com/&quot;&gt;TortoiseGit Japan&lt;/a&gt;」が開始したようです。日本語化パッチが配布されています。インストール手順も日本語で解説してあります。

***Git Extensions
知名度は低いものの &lt;a href=&quot;http://code.google.com/p/gitextensions/&quot;&gt;Git Extensions&lt;/a&gt; というツールもあります。

こちらは日本語の対応は完璧。msysgit 1.7.10 を利用すれば、ファイル名やコミットログを問題なく表示できるし、Git Bash で面倒だった日本語ファイル名のコミットも簡単です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120221/20120221024334.png&quot;&gt;&lt;/center&gt;&lt;

こちらは一部日本語化もされているので「英語を見ると吐き気がする」という人にも使ってもらいやすいです。UI は分かりにくいところも多いですが、Git の一通りの機能を Windows 的な UI で使うことができます。

最新の 2.31 には私が push リクエストしたコミットもいくつか取り込まれています（宣伝）。

***Git Source Control Provider
Visual Studio をメインで開発しているなら &lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/63a7e40d-4d71-4fbb-a23b-d262124b8f4c&quot;&gt;Git Source Control Provider&lt;/a&gt; も便利そうです。

ソリューション エクスプローラー上からコミットしたり、git の状態をアイコンで表示してくれるようです。

***EGit
Eclipse がメインの開発環境だよ、という人は &lt;a href=&quot;http://www.eclipse.org/egit/&quot;&gt;EGit&lt;/a&gt; を試してみるとよさそうです。こちらは git の Java 実装である JGit を使っている模様です。

少し古いですが &lt;a href=&quot;http://news.mynavi.jp/column/ide/052/index.html&quot;&gt;コラム】イマドキのIDE事情 (52) EclipseでGitを使おう! EGitを試してみる | エンタープライズ | マイナビニュース&lt;/a&gt; に紹介記事があります。この記事の内容が現在も妥当なのかどうかは Eclipse を使っていないので分かりません。

***GitHub for Eclipse
GitHub が公開している Eclipse 用のプラグインです。http://eclipse.github.com/ で公開されています。

**まとめ
-msysGit 1.7.10 がリリースされて、いよいよ Windows で git できる環境が整った
-GUI で git するツールもいくつかある
-ついに git!!! git!!!

[asin:4798023809:detail]
[asin:4873114403:detail]

</body>
<comments>
<comment>
<username>sugi</username>
<body>gitbash で日本語が入力できない件は、ホーム(何処になってるのかちょっと分からないけど cd $HOME で移動できる場所)に .inputrc を置いたら解決しないでしょうか？　中身は以下の３行。&lt;br&gt;set convert-meta off&lt;br&gt;set meta-flag on&lt;br&gt;set output-meta on</body>
<timestamp>1334200558</timestamp>
</comment>
<comment>
<username>yukoba</username>
<body>コマンドラインは、Git Bash ではなく、Cygwin からだと日本語ファイル名行けますよ！</body>
<timestamp>1334230227</timestamp>
</comment>
<comment>
<username>masaru_b_cl</username>
<body>msys-1.0.dll入れ替えたらいけました。&lt;br&gt;http://takanosho.wordpress.com/2012/04/12/git-utf8-input-japanese/</body>
<timestamp>1334298340</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>&gt;&gt; sugi 様&lt;br&gt;ありがとうございます。&lt;br&gt;試してみましたが、何も受け付けない状態から、文字化けした状態で入力できるようになりました・・・。&lt;br&gt;&lt;br&gt;&gt;&gt; yukoba 様&lt;br&gt;Cygwin 使うなら、最初から Cygwin 版の git でいいや・・・と思ってしまうところです・・・。&lt;br&gt;&lt;br&gt;&gt;&gt; masaru_b_cl 様&lt;br&gt;情報ありがとうございます。&lt;br&gt;うちの環境が悪いのかもしれませんが、手順どおりに試して Git Bash を再起動してみたつもりなのですが、変わりませんでした・・・。&lt;br&gt;msysgit のコミットログをみると、msys-1.0.dll も UTF-8 対応で特別にビルドされたもののようですので、MingGW から拾ってくるとよろしくないように見えます。実際に置き換えたあとに ls | nkf -g すると Shift_JIS になってしまいました。</body>
<timestamp>1334394356</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>msysgit が msys-1.0.dll を独自ビルドしている件について追記。&lt;br&gt;&lt;br&gt;あたっていると思われるパッチ：&lt;br&gt;https://github.com/msysgit/msysgit/commit/be1eadf11789b4ef295731a5049732c5eb4c51fa&lt;br&gt;&lt;br&gt;関連のメーリングリストのログ：&lt;br&gt;http://groups.google.com/group/msysgit/browse_thread/thread/408f7613d096f2c0/9330975573721d6b?lnk=gst&amp;q=g7ebac74</body>
<timestamp>1334395300</timestamp>
</comment>
</comments>
</day>
<day date="2012-04-17" title="">
<body>
*git_bash_ime*[git]msysGit 1.7.10 の Git Bash に日本語が入力できない件について少し調べた
先日の &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120412/msysgit_utf8_2&quot;&gt;UTF-8 対応の msysGit 1.7.10 リリース！ いよいよ Windows で git できるよ!!!&lt;/a&gt; という記事で、msysGit 1.7.10 の Git Bash で IME からの日本語入力できない件を伝えていたが、この件についてもう少し深入りしてみた。

**.inputrc を設定してもうまくいかない
記事へのコメントで指摘をいただいたのが、&lt;code&gt;.inputrc&lt;/code&gt; に
&gt;|sh|
set convert-meta off
set meta-flag on
set output-meta on
||&lt;
と設定してみる、という方法だった。

しかし、この通りに設定しても期待通りの結果にはならなかった。

いろいろ検索してみると、生の MSYS では「この方法でうまくいく」と記述してあるページは多かった。

生の MSYS ではうまくいくのに、msysGit ではうまくいかない理由はなぜか。この原因を調べてみたところ、次の事実に行き当たった。
====

**msysGit は msys-1.0.dll にパッチを当てている
msysGit は MSYS が配布している &lt;code&gt;msys-1.0.dll&lt;/code&gt; に対してパッチを当てている。

そのパッチがこちら。
- &lt;a href=&quot;https://github.com/msysgit/msysgit/blob/be1eadf11789b4ef295731a5049732c5eb4c51fa/src/rt/patches/0013-msys.dll-basic-Unicode-support.patch&quot;&gt;msysgit/src/rt/patches/0013-msys.dll-basic-Unicode-support.patch at be1eadf11789b4ef295731a5049732c5eb4c51fa &amp;#183; msysgit/msysgit&lt;/a&gt;

ざっと覗いてみると、コンソールの出力が ANSI から Unicode になるように頑張っている箇所があった。
&gt;|patch|
@@ -1008,7 +1010,7 @@ fhandler_console::clear_screen (int x1, int y1, int x2, int y2)
       tlc.X = x2;
       tlc.Y = y2;
     }
-  FillConsoleOutputCharacterA (get_output_handle (), ' ',
+  FillConsoleOutputCharacterW (get_output_handle (), L' ',
 			       num,
 			       tlc,
 			       &amp;done);
@@ -1244,7 +1246,7 @@ fhandler_console::char_command (char c)
 	      savebuf = (PCHAR_INFO) cmalloc (HEAP_1_BUF, sizeof (CHAR_INFO) *
 					     savebufsiz.X * savebufsiz.Y);
 
-	      ReadConsoleOutputA (get_output_handle (), savebuf,
+	      ReadConsoleOutputW (get_output_handle (), savebuf,
 				  savebufsiz, cob, &amp;now.srWindow);
 	    }
 	  else          /* restore */
@@ -1258,7 +1260,7 @@ fhandler_console::char_command (char c)
 	      if (!savebuf)
 		break;
 
-	      WriteConsoleOutputA (get_output_handle (), savebuf,
+	      WriteConsoleOutputW (get_output_handle (), savebuf,
 				   savebufsiz, cob, &amp;now.srWindow);
 
||&lt;

そしてパッチの先頭を見ると、次のようなコメントがあった。
&gt;||
Still TODO:
- handle console input
- add wrappers for dynamically loaded *A functions (see autoload.cc 310ff)
||&lt;

なるほど、コンソールへの入力は ANSI のままなので、IME から直接マルチバイト文字列を流し込むとうまくいかないのだろう。

なんとなく &lt;code&gt;ReadConsoleInputA()&lt;/code&gt; を &lt;code&gt;ReadConsoleInputW()&lt;/code&gt; に変更したら動くような気がしなくもないけど、MSYS のビルド環境を整えるところから…と思うと気が遠くなる。

**おまけ
先日の記事を書いた直後に TortoiseGit の日本語プロジェクトが新たに始まったようだ。
- &lt;a href=&quot;http://tortoisegitjapan.com/&quot;&gt;TortoiseGit Japan&lt;/a&gt;

日本語化した DLL を配布していたり、インストール手順を解説してくれていたりするので、TortoiseGit を使っている人はチェックしておくとよいだろう。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120412/msysgit_utf8_2&quot;&gt;UTF-8 対応の msysGit 1.7.10 リリース！ いよいよ Windows で git できるよ!!!&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120221/msysgit_utf8&quot;&gt;msysGit（Git for Windows）がいよいよ公式に UTF-8 をサポート！&lt;/a&gt;
&gt;&lt;/div&gt;&lt;

</body>
</day>
<day date="2012-04-19" title="">
<body>
*tiny_jp_webfont*[HTML5]文字を制限した軽量な日本語 Web フォントを作成する方法
最近、Web フォントをつかってかっこいい表現をしているサイトも増えてきました。ただ、残念ながら 日本語で Web フォントを使うのは厳しいのが現実です。

というのも、日本語には英数字・ひらがな・カタカナ・漢字・記号・・・など必要になる文字数が多すぎるため、フルスペックの日本語の Web フォントはファイルサイズがすごいことになりそうです。

そこで、「&lt;strong&gt;利用したい文字だけを含んだ Web フォントをその都度作ればいいんじゃね？&lt;/strong&gt;」ということを考えてみました。アイデア自体は珍しいものではなく、例えば &lt;a href=&quot;http://decomoji.jp/&quot;&gt;デコもじ&lt;/a&gt; というサービスは同じようなことをやってくれるようです（ただし、無料では「書体 1 つまで」「5 文字まで」など機能制限が大きい）。

(追記) このような軽量フォントを作成することを&lt;strong&gt;「サブセット化」&lt;/strong&gt;というようです。

**手始めに日本語 Web フォントを作ってみる
まずは簡単に日本語 Web フォントを作る方法を紹介しておきます。

無料で公開されているフォントの中にも、フォントファイルの改変を禁止しているものが意外と多いので注意が必要です。今回は、武蔵システムが公開している &lt;a href=&quot;http://musashi.or.tv/kouzansousho.htm&quot;&gt;衡山毛筆フォント草書&lt;/a&gt; を選びました。無料で、改編も自由とのことで遠慮なく活用させてもらいます。

(追記) Web フォントとして利用できるフォント一覧が &lt;a href=&quot;http://www.yomotsu.net/wp/?p=565&quot;&gt;WebFonts として利用できるフリーの和文フォント | ヨモツネット&lt;/a&gt; にまとまっていました。

Web フォント化する方法ですが、同じく武蔵システムが公開している &lt;a href=&quot;http://musashi.or.tv/woffconv.htm&quot;&gt;WOFF コンバーター&lt;/a&gt; を使ってみました。実行してみるとサンプルの HTML も吐いてくれます。

ブラウザー上で毛筆フォントを表示できました！
&gt;&lt;center&gt;[f:id:nitoyon:20120419013354p:image]&lt;/center&gt;&lt;
====

気になるファイルサイズは次のようになっていました。
&gt;||
衡山毛筆フォント草書.ttf: 5,732 KB
                 ↓
衡山毛筆フォント草書.woff: 3.697 KB
||&lt;

うーん、3 MB 以上の Web フォントを使うのは現実的ではありませんね。

**不要な文字を取り除いてみる
3 MB は嫌すぎるので、使いたい文字のみを含んだ Web フォントを作ってみましょう。

今回は
&gt;&gt;
日本語フォントをWebFontに変換すると数MBになってしまうので日本語は難しいと思っていました。
&lt;&lt;
という文を表示するためだけの Web フォントを作ってみます。

フォントの編集ソフトといえば FontForge や TTEdit などが有名なようですが、手作業でやるのは耐えられません。FontForge はスクリプト機能もあるようですが、Windows では環境の準備が大変なので敬遠しました。

そこで、&lt;a href=&quot;http://d.hatena.ne.jp/project_the_tower2/20101106/1289060546&quot;&gt;Webフォント変換サービスを作ろう その1（ ´_ゝ`） - Webと文字&lt;/a&gt; で紹介されていた Python のライブラリ &lt;a href=&quot;http://sourceforge.net/projects/fonttools/files/&quot;&gt;TTX/FontTools&lt;/a&gt; を使ってみました。手順とソースコードは最後に紹介します。

変換したところ、こんなフォントができあがりました。

&gt;&lt;center&gt;[f:id:nitoyon:20120419013355p:image]&lt;/center&gt;&lt;

5.7 MB もあった ttf ファイルが  &lt;strong&gt;214 KB&lt;/strong&gt; になりました。「Windows でコンピューターの世界が広がります。」が歯抜けになっていることからも、必要最低限の文字しか含まれていないことが分かります。

この ttf ファイルを WOFF に変換すると次のようになりました。
&gt;||
衡山毛筆フォント草書(改).ttf: 214 KB
                 ↓
衡山毛筆フォント草書(改).woff: 67 KB
||&lt;
67 KB なら画像ファイル 1 枚程度のサイズです。

画像で埋め込むよりも SEO 効果は高いですし、文字のコピペもできます。タイトル字に画像を使うぐらいなら、こっちのほうがいいかもしれません。

**もっとサイズを小さくしたい！
今回のスクリプトでは&lt;strong&gt;「未使用の文字のベクターデータを空にする」&lt;/strong&gt;という処理のみを行っています。

フォントファイルには、その他にも
- バイト列をどの文字に対応付けるか (文字コードごとに…)
- 縦書、合字、カーニング、異体字…etc
の情報が残っています。このあたりを整理できれば、まだまだファイルサイズは小さくできます。

空にしたベクターデータについても、「何も描画しない」というデータが残ってしまっています。これを削除できればもっとサイズを抑えられるはずです。

しかし、いろいろ試してみたのですが、各テーブルが複雑に絡まりあっていて、一部を下手に削除すると保存時にエラーがでたり、表示できないフォントファイルができあがったりと、かなり難易度高かったです。

かといって、&lt;a href=&quot;http://www.microsoft.com/typography/otspec/&quot;&gt;OpenFont の仕様書&lt;/a&gt; を最初から読む気にもなりません。フォントの世界は難しいです…。

何かいいツールやライブラリがあれば教えてください。(追記)&lt;strong&gt;&lt;a href=&quot;http://www.fontsquirrel.com/fontface/generator&quot;&gt;Font Squirrel | Create Your Own @font-face Kits&lt;/a&gt; を使えば日本語のサブセット化にも対応してくれるようです。ためしに 1 文字のフォントを作ったら数 KB になりました。&lt;/strong&gt;

**スクリプトの使い方
では最後にスクリプトを公開します。

動作には Python 2.X、が必要です。
&gt;http://d.hatena.ne.jp/project_the_tower2/20101106/1289060546:title&gt;
+Python 2.X の実行環境を用意します。
+&lt;a href=&quot;http://numpy.scipy.org/&quot;&gt;Numpy&lt;/a&gt; をダウンロードして、インストールします。
+&lt;a href=&quot;http://sourceforge.net/projects/fonttools/files/&quot;&gt;fonttools-2.3.tar.gz&lt;/a&gt; をダウンロードして、展開します。
&lt;&lt;

実行するには次のようにします。
&gt;|sh|
python compact.py FontName.ttf &lt; test.txt
||&lt;
- 第一引数にサイズを小さくするフォントを指定する
- 取り出す文字を含んだ文章を UTF-8 で保存して、標準入力から渡す
- 変換に成功すると &lt;code&gt;converted-FontName.ttf&lt;/code&gt; が出力される
- 出力フォントに半角の数字や記号が含まれないバグあり (グリフ名が &lt;code&gt;zero&lt;/code&gt;、&lt;code&gt;plus&lt;/code&gt; などになっていて機械的変換できなかった。本気でやるなら &lt;code&gt;cmap&lt;/code&gt; を見るべきなのだが面倒だった。)

ソースコードは以下の通りです。
&gt;|python|
import fontTools.ttLib.tables
import fontTools.ttLib
import sys
import os.path

if len(sys.argv) &lt; 2:
    print &quot;font file not specified&quot;
    sys.exit(1)

path = sys.argv[1]
if not os.path.exists(path):
    print &quot;file not found: %s&quot; % path
    sys.exit()

s = ''.join(sys.stdin.readlines())
s = unicode(s, 'utf-8')

chars = set()
for c in s:
    if ord(c) &lt; 256:
        chars.add(c)
    else:
        chars.add(&quot;uni%04X&quot; % ord(c));
chars.add('.notdef')

tt = fontTools.ttLib.TTFont(path)

for g in dict(tt['glyf'].glyphs):
    if g in chars:
        print &quot;skipping %s&quot; % g
        continue
    tt['glyf'].glyphs[g] = fontTools.ttLib.tables._g_l_y_f.Glyph()

output_path = &quot;converted-%s&quot; % path
tt.save(output_path)
print &quot;wrote %s&quot; % output_path
||&lt;

</body>
<comments>
<comment>
<username>しん</username>
<body>サブセットフォントメーカー&lt;br&gt;http://musashi.or.tv/subsetfontmk.htm&lt;br&gt;も便利です。&lt;br&gt;WOFFコンバータ http://musashi.or.tv/woffconv.htm&lt;br&gt;もあります。</body>
<timestamp>1341233787</timestamp>
</comment>
<comment>
<username>nitoyon</username>
<body>ありがとうございます。&lt;br&gt;WOFF コンバーター には気づいていたのに、&lt;br&gt;サブセットフォントメーカー には気づいていませんでした・・・。</body>
<timestamp>1341331064</timestamp>
</comment>
</comments>
</day>
<day date="2012-04-20" title="">
<body>
*uncopyable*[html5]絶対にコピペできない文章を作ったったwwww
一見、コピーできるように見えますが、ペーストしてみると・・・。

&gt;&lt;center&gt;&lt;script src=&quot;http://gmodules.com/ig/ifr?url=http://gimite.net/rails/iframe_gadget/xml%3Fparams%3Dscrolling%3Dtrue%21url%3Dhttp://tech.nitoyon.com/misc/js/uncopyable/&amp;amp;synd=open&amp;amp;w=500&amp;amp;h=500&amp;amp;title=&amp;amp;border=%23ffffff%7C3px%2C1px+solid+%23999999&amp;amp;output=js&quot;&gt;&lt;/script&gt;&lt;noscript&gt;(JavaScript が有効になっていると、ここにコピペできない文章が表示されます)&lt;/noscript&gt;&lt;/center&gt;&lt;



(追記) &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120423/why_uncopyable&quot;&gt;からくりを説明する記事を書きました&lt;/a&gt;。
</body>
<comments>
<comment>
<username>sh___ilocale</username>
<body>Windowsなコンピューターの世界が広がりまいぺ</body>
<timestamp>1334876806</timestamp>
</comment>
<comment>
<username>リーさん</username>
<body>できないって本文のとこだよな？&lt;br&gt;他に表示されてないし&lt;br&gt;&lt;br&gt;一見、コピーできるように見えますが、ペーストしてみると・・・。</body>
<timestamp>1334879196</timestamp>
</comment>
<comment>
<username>匿名</username>
<body>iframe消したったｗｗｗｗｗはだかになった文字コピペおｋｗｗｗ</body>
<timestamp>1334882100</timestamp>
</comment>
<comment>
<username>？</username>
<body>一見、コピーできるように見えますが、ペーストしてみると・・・。</body>
<timestamp>1334884055</timestamp>
</comment>
<comment>
<username>どれのことだろ</username>
<body>絶対にコピペできない文章を作ったったwwww</body>
<timestamp>1334884159</timestamp>
</comment>
<comment>
<username>なるほど</username>
<body>ああ、フォント細工してんのか。</body>
<timestamp>1334885617</timestamp>
</comment>
<comment>
<username>ma</username>
<body>&quot;CipherM+1cregular&quot;これですかね</body>
<timestamp>1334886776</timestamp>
</comment>
<comment>
<username>MMGames</username>
<body>WindowsでChrome18を使っていますが何の問題もなくコピペできました。</body>
<timestamp>1334890828</timestamp>
</comment>
<comment>
<username>nittyoku</username>
<body>こーゆーのきらいじゃないよｗ</body>
<timestamp>1334890852</timestamp>
</comment>
<comment>
<username>odeco</username>
<body>おもしろーい笑</body>
<timestamp>1334891402</timestamp>
</comment>
<comment>
<username>uKey</username>
<body>つまらん</body>
<timestamp>1334891941</timestamp>
</comment>
<comment>
<username>wgc</username>
<body>WindowsでChrome18でもコピペできないですよ。&lt;br&gt;違う所コピペしてるのでは？？</body>
<timestamp>1334892419</timestamp>
</comment>
<comment>
<username>s</username>
<body>ソース表示してコピーしてみました</body>
<timestamp>1334892850</timestamp>
</comment>
<comment>
<username>a</username>
<body>ソース表示で余裕でした</body>
<timestamp>1334894464</timestamp>
</comment>
<comment>
<username>も</username>
<body>ほら。無理でしょ？ 絶対に不可能なんで す！ Gadget&lt;br&gt;&lt;br&gt;IS03 android2.1でコピペしました</body>
<timestamp>1334894945</timestamp>
</comment>
<comment>
<username>undefined</username>
<body>コピペできない本文は&lt;br&gt;”コピペできない文章です！！　嘘じゃないよ”&lt;br&gt;&lt;br&gt;なんだけど。コピーすると&lt;br&gt;”ほら。無理でしょ？絶対に不可能なんです！”&lt;br&gt;&lt;br&gt;に変わってる。&lt;br&gt;ソースにも書いてない。&lt;br&gt;&lt;br&gt;前者が既に見えない奴はブラウザが対応してない。残念だったな。</body>
<timestamp>1334895591</timestamp>
</comment>
<comment>
<username>masato119</username>
<body>おもしろーい</body>
<timestamp>1334895868</timestamp>
</comment>
<comment>
<username>ゴトウダイスケ</username>
<body>Webフォントですね</body>
<timestamp>1334896339</timestamp>
</comment>
<comment>
<username>アビル</username>
<body>すみません。最初から「ほら。無理でしょ？絶対に不可能なんです！」が見えちゃう私は・・・。FF11.0/Ubuntu11.10</body>
<timestamp>1334901546</timestamp>
</comment>
<comment>
<username>　</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1334902262</timestamp>
</comment>
<comment>
<username>名無し</username>
<body>(JavaScript が有効になっていると、ここにコピペできない文章が表示されます)</body>
<timestamp>1334905514</timestamp>
</comment>
<comment>
<username>yuri_donovic</username>
<body>&lt;meta property=&quot;og:description&quot; content=&quot;一見、コピーできるように見えますが、ペーストしてみると・・・。 &amp;gt;(JavaScript が有効になっていると..&quot;&gt;</body>
<timestamp>1334906024</timestamp>
</comment>
<comment>
<username> </username>
<body>サーバが見つかりませんでした</body>
<timestamp>1334910600</timestamp>
</comment>
<comment>
<username>BB</username>
<body>ソースからコピーしたったwwww</body>
<timestamp>1334913570</timestamp>
</comment>
<comment>
<username>test</username>
<body>&lt;blockquote class=&quot;text&quot;&gt;ほら。無理でしょ？絶対に不可能なんです！&lt;/blockquote&gt;</body>
<timestamp>1334915971</timestamp>
</comment>
<comment>
<username>ななし</username>
<body>画像でおｋ</body>
<timestamp>1334933027</timestamp>
</comment>
<comment>
<username>　</username>
<body>コピペできない文章です！！　嘘じゃないよ</body>
<timestamp>1334937220</timestamp>
</comment>
<comment>
<username>kitune</username>
<body>選択右クリック　ほら。無理でしょ？絶対に不可能なんです！”googleで検索</body>
<timestamp>1334942238</timestamp>
</comment>
<comment>
<username>dr51d513851v8g165</username>
<body>ppp</body>
<timestamp>1334983719</timestamp>
</comment>
<comment>
<username>siachan</username>
<body>フォント変えてるだけなんだね</body>
<timestamp>1334991958</timestamp>
</comment>
<comment>
<username>ore</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335004484</timestamp>
</comment>
<comment>
<username> </username>
<body>元の文章が表示されん</body>
<timestamp>1335005256</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>「絶対にコピペできない文章を作ったった」SafariでJavascript止めたらできた</body>
<timestamp>1335014574</timestamp>
</comment>
<comment>
<username>ななこっち★</username>
<body>コピペできるなの！だからこそ、アイデア頂いたなのなの</body>
<timestamp>1335058656</timestamp>
</comment>
<comment>
<username>　</username>
<body>スクショで完全コピペ余裕ですｗ</body>
<timestamp>1335121973</timestamp>
</comment>
<comment>
<username> </username>
<body>ネタを楽しめない子供が多いな</body>
<timestamp>1335182238</timestamp>
</comment>
<comment>
<username>　</username>
<body>絶対にコピペできない文章を作ったったwwww&lt;br&gt;&lt;br&gt;……普通にコピー出来るけど。これが何か？</body>
<timestamp>1335226631</timestamp>
</comment>
<comment>
<username>はれ</username>
<body>firefoxをMSPゴシック強制にしてるから普通にコピペできる。</body>
<timestamp>1335264859</timestamp>
</comment>
<comment>
<username>す</username>
<body>コピペできないじゃなくて、この文章をコピペするとにすれば良かったのにねｗ</body>
<timestamp>1335267981</timestamp>
</comment>
<comment>
<username>サトリ</username>
<body>ほら。無理でしょ？絶対に不可能なんです！ほら。無理でしょ？絶対に不可能なんです！　&lt;br&gt;ドラッグも出来んじゃないか。&lt;br&gt;コンピューターの事は解らん野田</body>
<timestamp>1335270687</timestamp>
</comment>
<comment>
<username> </username>
<body>ひねくれ者多すぎわろた</body>
<timestamp>1335311677</timestamp>
</comment>
<comment>
<username>ざんねん</username>
<body>ブラウザや環境によっては「ほら。無理でしょ？絶対に不可能なんです！」って表示されてますから、ぜんぜん普通にコピペできてます。</body>
<timestamp>1335311870</timestamp>
</comment>
<comment>
<username>あ</username>
<body>ほら。無理でしょ？絶対 に不 能なんです！&lt;br&gt;&lt;br&gt;Android2.3&lt;br&gt;IS11SH&lt;br&gt;&lt;br&gt;不能ワロタｗｗｗ</body>
<timestamp>1335312112</timestamp>
</comment>
<comment>
<username>あ</username>
<body>ほら。無理でしょ？絶対 に不 能なんです！&lt;br&gt;&lt;br&gt;Android2.3&lt;br&gt;IS11SH&lt;br&gt;&lt;br&gt;不能ワロタｗｗｗ</body>
<timestamp>1335312114</timestamp>
</comment>
<comment>
<username>allnightwalker</username>
<body>該当のテキストを選択して右クリックすると、コピーのオプションの下に「Googleで「ほら。無理でしょ？絶対に不可能なんです！」を檢索（S）」と言うオプションが出てきています。ちょっと笑った。</body>
<timestamp>1335312968</timestamp>
</comment>
<comment>
<username>　</username>
<body>情弱とひねくれ者多すぎｗｗｗ</body>
<timestamp>1335315915</timestamp>
</comment>
<comment>
<username>よゆう</username>
<body>コピペできない文章です！！　嘘じゃないよ</body>
<timestamp>1335316285</timestamp>
</comment>
<comment>
<username>meguso</username>
<body>こういう発想とそれにかける情熱が、とても良いと思う。素直に面白いと思う。</body>
<timestamp>1335317091</timestamp>
</comment>
<comment>
<username>メルモ</username>
<body>コピット！　でコピペ余裕でした。&lt;br&gt;&lt;br&gt;それはそれとして、このアイディアありそうなのに今まで誰もしてなかったのか……素晴らしいな。</body>
<timestamp>1335318391</timestamp>
</comment>
<comment>
<username>シーバス</username>
<body>渋谷駅へ徒歩１５分、が、高座渋谷駅へバス１５分、とかになれば面白いのに。</body>
<timestamp>1335319371</timestamp>
</comment>
<comment>
<username>mojo</username>
<body>なるほど、ブランクも入れて文字数が同じ、ってことね</body>
<timestamp>1335319763</timestamp>
</comment>
<comment>
<username>jgzr5g</username>
<body>なんか、普通にコピペになってしまう。ブラウザがたいおうしていないのかな？</body>
<timestamp>1335319894</timestamp>
</comment>
<comment>
<username>asa</username>
<body>絶対にコピペできない文章を作ったったwwww&lt;br&gt;絶対にコピペできない文章を作ったったwwww</body>
<timestamp>1335320454</timestamp>
</comment>
<comment>
<username>yupchan</username>
<body>最初から平成角ゴシック指定なのでコピペ余裕でしたw</body>
<timestamp>1335321332</timestamp>
</comment>
<comment>
<username>nonno</username>
<body>わくわくしてみたが、コピーできたのでがっかり</body>
<timestamp>1335322298</timestamp>
</comment>
<comment>
<username>たろうちゃん</username>
<body>見事です。普段使う企画書なんかに良いですね。</body>
<timestamp>1335322353</timestamp>
</comment>
<comment>
<username>trshugu</username>
<body>ほら。無理でし&lt;br&gt;&lt;br&gt;&lt;br&gt;無理でしーーー！！</body>
<timestamp>1335322693</timestamp>
</comment>
<comment>
<username>見たよ</username>
<body>コピペ普通にできたので？アレって思ってソースみたら、文章違うし・・・&lt;br&gt;改めて最初からソースコード見直したら、&lt;br&gt;&lt;link rel=&quot;prev&quot; href=&quot;/nitoyon/20120419/tiny_jp_webfont&quot; title=&quot;[HTML5]文字を制限した軽量な日...&quot;&gt;&lt;br&gt;&lt;br&gt;っておかしなフォント読んでるから、フォントファイル開けてみたら文字変えてあるんだもんな。&lt;br&gt;&lt;br&gt;まぁ発想は面白かった。</body>
<timestamp>1335323191</timestamp>
</comment>
<comment>
<username>ずっぶずぶの素人</username>
<body>ミクシイニュースから飛んできちゃいました。&lt;br&gt;門外の人間にとっては心の底から感心してしまいました。</body>
<timestamp>1335324427</timestamp>
</comment>
<comment>
<username>kaoco</username>
<body>ペーストしてみても&lt;br&gt;何もでてきません(&gt;_&lt;)</body>
<timestamp>1335324574</timestamp>
</comment>
<comment>
<username>siro</username>
<body>面白い（＾＾）</body>
<timestamp>1335326268</timestamp>
</comment>
<comment>
<username>47才主婦</username>
<body>楽しかった(*^_^*)&lt;br&gt;勉強になります。&lt;br&gt;ありがとうございました○┓</body>
<timestamp>1335326649</timestamp>
</comment>
<comment>
<username>p</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;って出た。おもろい。</body>
<timestamp>1335327382</timestamp>
</comment>
<comment>
<username>rio</username>
<body>素直に楽しまない子ってなんなの？反抗期？&lt;br&gt;ミクシィから知りましたが、面白かったです。</body>
<timestamp>1335328384</timestamp>
</comment>
<comment>
<username>ishida_1961</username>
<body>面白いけど、デメリットもあるんじゃない？他から検索してもらえないと思うけど。</body>
<timestamp>1335330686</timestamp>
</comment>
<comment>
<username>111</username>
<body>プリントスクリーン使えばほらコピペ成功だよ</body>
<timestamp>1335336998</timestamp>
</comment>
<comment>
<username>なまーえ</username>
<body>コピペしたようなへそ曲がりばっかり</body>
<timestamp>1335337206</timestamp>
</comment>
<comment>
<username>jane</username>
<body>ほら。無理でしょ？絶対に不可能なんです！本当だ。</body>
<timestamp>1335337377</timestamp>
</comment>
<comment>
<username>234</username>
<body>発想が面白いくていいですね。</body>
<timestamp>1335338078</timestamp>
</comment>
<comment>
<username>ＮＯＮＥ</username>
<body>すごく良いと思います。ムキになって解こうとする人達も可愛いです。</body>
<timestamp>1335338411</timestamp>
</comment>
<comment>
<username>なまえ</username>
<body>アイデア＆ヒント、頂戴いたしました。&lt;br&gt;ありがとうございます。</body>
<timestamp>1335339869</timestamp>
</comment>
<comment>
<username>麻衣</username>
<body>すごーい(´▽｀*)&lt;br&gt;&lt;br&gt;こうなった→ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335340277</timestamp>
</comment>
<comment>
<username>さとし</username>
<body>Opera使ってますが、ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;しか表示されません。クロームならコピペできない・・・が表示されましたけど・・・。</body>
<timestamp>1335340568</timestamp>
</comment>
<comment>
<username>ももか</username>
<body>こうなった→ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;&lt;br&gt;すげー＞＜</body>
<timestamp>1335340573</timestamp>
</comment>
<comment>
<username>iPhoneでやったら</username>
<body>iPhoneで&lt;br&gt;ペーストしたら&lt;br&gt;http://www.apricot-doll.com/doll/product.html&lt;br&gt;って出てきて&lt;br&gt;なにこのアドレスと思って行って見たら&lt;br&gt;&lt;br&gt;俺が昨日の夜コピーしたアドレスだった&lt;br&gt;&lt;br&gt;まぁつまりiPhoneではコピーができない</body>
<timestamp>1335342367</timestamp>
</comment>
<comment>
<username>熊沢隆</username>
<body>おもしろい。</body>
<timestamp>1335345110</timestamp>
</comment>
<comment>
<username>mmm</username>
<body>コピペそのものができないんじゃなくて、&lt;br&gt;同じ文章がコピペできないんだからな。&lt;br&gt;そこんとこ間違えんなよ、結構な数の人たち。</body>
<timestamp>1335346372</timestamp>
</comment>
<comment>
<username>おもしろいが</username>
<body>コピペも出来ないが、検索に引っかかることもないな。&lt;br&gt;この発想、表に出せないものの取引とかに悪用されそう。</body>
<timestamp>1335346638</timestamp>
</comment>
<comment>
<username>マイマイ</username>
<body>スマホでやったら、《ほら。無理でしょ？絶対 に不 能なんです！ &#65535;&#65535; &#65535;&#65535;》こんなん出ました。&lt;br&gt; &#65535;&#65535; &#65535;&#65535; ←これはなんだろ？</body>
<timestamp>1335346913</timestamp>
</comment>
<comment>
<username>ｄｔｙｎ</username>
<body>ほら。出来たでしょ？絶対に可能なんです！&lt;br&gt;&lt;br&gt;可能になってる件について</body>
<timestamp>1335353274</timestamp>
</comment>
<comment>
<username>mayuki0802</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335353674</timestamp>
</comment>
<comment>
<username>くｓｐ</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335354574</timestamp>
</comment>
<comment>
<username>無駄な労力</username>
<body>右クリックの時点で「Googleで…を検索」って見えるし面白さが分からない</body>
<timestamp>1335355835</timestamp>
</comment>
<comment>
<username>どゆこと</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335356051</timestamp>
</comment>
<comment>
<username>でも</username>
<body>いじわるフォントか～　すごぃ&lt;br&gt;でも、このサイトをＯＣＲしてから文章をコピペすると、問題なくコピペできる（笑）不可能ではない。</body>
<timestamp>1335364826</timestamp>
</comment>
<comment>
<username>あ</username>
<body>コピペできない文章です！！ 嘘じゃないよ</body>
<timestamp>1335365585</timestamp>
</comment>
<comment>
<username>余裕</username>
<body>コピーできるじゃねーか</body>
<timestamp>1335365775</timestamp>
</comment>
<comment>
<username>kk</username>
<body>絶対にコピペできない文章を作ったったwwww</body>
<timestamp>1335366745</timestamp>
</comment>
<comment>
<username>マスター</username>
<body>面白いですね。なんで？</body>
<timestamp>1335368011</timestamp>
</comment>
<comment>
<username>真面目か！</username>
<body>コピペ出来るとか出来ないの問題じゃなくて、アイデアって所に注目しようよ。&lt;br&gt;&lt;br&gt;まあ&lt;br&gt;コピペ余裕とか、キャプチャで余裕とかほざいてる奴らには、この斬新なアイデアは理解できないんだろうけどね</body>
<timestamp>1335370754</timestamp>
</comment>
<comment>
<username>heisei2008</username>
<body>普通にコピペできました(^o^)&lt;br&gt;なるほど！こういうふうに客寄せして、アフィリエイト収入につなげるのか～。勉強になりました。</body>
<timestamp>1335389426</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>なんでコピペできないんだろう&lt;br&gt;不思議ですね</body>
<timestamp>1335393517</timestamp>
</comment>
<comment>
<username>ドーナってるの</username>
<body>俺のドーナツブラウザはコピーできてしまった。あれ？&lt;br&gt;pcに詳しくないので理由は分かりません。&lt;br&gt;いろんな環境には対応できないのか。</body>
<timestamp>1335395267</timestamp>
</comment>
<comment>
<username>スマホでコピペ</username>
<body>ほら。無理でしょ？絶対 に不 能なんです！&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;不能になってるんですが…( ´△｀)</body>
<timestamp>1335404926</timestamp>
</comment>
<comment>
<username>a</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;おお！！</body>
<timestamp>1335405866</timestamp>
</comment>
<comment>
<username>chan</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335406471</timestamp>
</comment>
<comment>
<username>MacのFirefoxにヒラギノ角ゴ</username>
<body>一見、コピーできるように見えますが、ペーストしてみると・・・。&lt;br&gt;&lt;br&gt;あれれ…できるよ。</body>
<timestamp>1335429751</timestamp>
</comment>
<comment>
<username>えりのん</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;&lt;br&gt;すげえええwww</body>
<timestamp>1335432500</timestamp>
</comment>
<comment>
<username>もっち</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;&lt;br&gt;こんな発想ができるようになりたいものです。</body>
<timestamp>1335434640</timestamp>
</comment>
<comment>
<username>bb</username>
<body>一見、コピーできるように見えますが、ペーストしてみると・・・。</body>
<timestamp>1335439040</timestamp>
</comment>
<comment>
<username>どうなってるんだ？</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;しか、表示されてない…</body>
<timestamp>1335458048</timestamp>
</comment>
<comment>
<username>pyopyopyo</username>
<body>コピー先でも同じフォント使ったらコピペできるんじゃ？</body>
<timestamp>1335464844</timestamp>
</comment>
<comment>
<username>otyakenrabu</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1335522195</timestamp>
</comment>
<comment>
<username>shunsuke1030</username>
<body>TczE6t</body>
<timestamp>1335587348</timestamp>
</comment>
<comment>
<username>maasa0504</username>
<body>ほら。無理でしょ？絶対に不可能なんです！&lt;br&gt;↑無理だったｗｗｗｗ</body>
<timestamp>1335605495</timestamp>
</comment>
<comment>
<username>tetteketeeee</username>
<body>ちょっとビビったんだがｗｗｗｗｗｗ&lt;br&gt;怖ぇ！ってｗ</body>
<timestamp>1335792868</timestamp>
</comment>
<comment>
<username>なめ</username>
<body>背景の文字の上に透明な文字って方法はどうだろうか？&lt;br&gt;フォント作るよりは手軽ではないか？</body>
<timestamp>1336836739</timestamp>
</comment>
<comment>
<username>あ</username>
<body>ドヤ顔で「◯◯すればコピペ出来る」とか言ってる奴はなんなの？&lt;br&gt;飲み会での血液型占いとかでも、いらないウンチク言ってそうw</body>
<timestamp>1337486825</timestamp>
</comment>
<comment>
<username>yupchan0</username>
<body>コピペできた人は素直にそれを言えばいいのに,なぜそれを言う人に「へそ曲がり」「情弱」「ドヤ顔」とか「空気を読め」みたいなこと言うの?みんな「あーコピペできなーいすごーい」って全員が言わないといけないの?ホントのことを言えない統制って・・・</body>
<timestamp>1341985672</timestamp>
</comment>
<comment>
<username>ね？</username>
<body>コピペできない文章です！　嘘じゃないよ！</body>
<timestamp>1342429536</timestamp>
</comment>
<comment>
<username>まじですかー</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1343345863</timestamp>
</comment>
<comment>
<username>できたよ</username>
<body>ほら。無理でしょ？絶対に不可能なんです！</body>
<timestamp>1343346026</timestamp>
</comment>
<comment>
<username>だよね。</username>
<body>コピペできない文章です！！　嘘じゃないよ</body>
<timestamp>1343807940</timestamp>
</comment>
</comments>
</day>
<day date="2012-04-23" title="">
<body>
*why_uncopyable*[html5]「コピペできない文章」がコピペできなかった理由
先日公開した &lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120420/uncopyable&quot;&gt;絶対にコピペできない文章を作ったったwwww&lt;/a&gt; はおかげさまで好評だったようで嬉しい限りです。

「不思議！」「どういう仕組みなんだ？」という声も多かったので裏側を紹介します。

**コピペできない訳ではない
タイトルは「コピペできない」としていますが、実際にはコピペはできます。正確に表現すると「コピーすると違う文字になる」という状態になっています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003559.png&quot;&gt;&lt;/center&gt;&lt;


ではなぜ違う文字になるのでしょうか。結論をいってしまうと
&gt;&gt;
「そこにある文字が、人間の目に見える文字とは違う」
&lt;&lt;
からです。

といっても、これでは分からないですね。
====

**今回のために作成された独自フォント
トリックの肝は「フォント」です。フォントといえば、文字の見た目を変えるために利用するものです。

たとえば、「ほ」という文字を「メイリオ」フォントで表示するとこうなります。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003601.png&quot;&gt;&lt;/center&gt;&lt;

フォントを変えて「HG創英角ポップ体」フォントで表示すると、ポップな雰囲気になります。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003602.png&quot;&gt;&lt;/center&gt;&lt;


今回の「コピペできない文章」では &lt;a href=&quot;http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/index.html&quot;&gt;M+ OUTLINE FONTS&lt;/a&gt; というフォントをを利用しています。ただし、ある細工をした「いじわるフォント」になっています。

その細工とは・・・&lt;strong&gt;「ほ」で表示される文字が「コ」になっている&lt;/strong&gt;のです。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003600.png&quot;&gt;&lt;/center&gt;&lt;

同じように「ら」→「ピ」、「。」→「ペ」のように意図的にシャッフルされています。

そのため、「いじわるフォント」で「ほら。無理でしょ？絶対に不可能なんです！」を表示すると、「コピペできない文章です！！　嘘じゃないよ」に見えてしまいます。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003557.png&quot;&gt;&lt;/center&gt;&lt;


**人間だけをだます
面白いのが、HTML も、ブラウザーも、OS も、「ほら。無理でしょ？」と画面に表示しているつもりだということです。にもかかわらず、いじわるフォントのせいで、人間にだけは「コピペできない文章です」に見えます。

当然、コピーすると「ほら。無理でしょ？」がクリップボードに入り、ペーストすると「ほら。無理でしょ？」が貼り付けられます。コンピューターは何も変わったことをしていないのに、人間だけが不思議に思うのです。

普段、われわれは「フォントが悪さをする」なんて想像すらしていないのですが、もしある日、フォントが反乱して文字がバラバラになってしまったら、人間はコンピューター上で一切の文章を読むことができなくなります。日々の生活は、目に見えない多くの信頼の上に成り立っているのです。

**いじわるフォントの作りかた
ここから少し技術的な話になって、いじわるフォントを作った方法を説明していきます。

世の中にはいろんなフォント編集ツールがありますが、まともなものはどれも有料です。たとえ無料でいいソフトがあったとしても、手作業で編集するのはめんどくさいものです。プログラマーなら自動化でしょう。

そこで、Python のライブラリ &lt;a href=&quot;http://sourceforge.net/projects/fonttools/files/&quot;&gt;TTX/FontTools&lt;/a&gt; を使いました。

動作には Python が必要です。
&gt;http://d.hatena.ne.jp/nitoyon/20120419/tiny_jp_webfont:title&gt;
+Python 2.X の実行環境を用意します。
+&lt;a href=&quot;http://numpy.scipy.org/&quot;&gt;Numpy&lt;/a&gt; をダウンロードして、インストールします。
+&lt;a href=&quot;http://sourceforge.net/projects/fonttools/files/&quot;&gt;fonttools-2.3.tar.gz&lt;/a&gt; をダウンロードして、展開します。
&lt;&lt;

作成したスクリプトはこれです(33行)。
&gt;&lt;div class=&quot;fix-height-syntax&quot;&gt;&lt;
&gt;|python|
#!/usr/bin/python
# -*- coding: utf-8 -*-

import fontTools.ttLib.tables
import fontTools.ttLib

s1 = u&quot;コピペできない文章です！！　嘘じゃないよ&quot;
s2 = u&quot;ほら。無理でしょ？絶対に不可能なんです！&quot;

tt = fontTools.ttLib.TTFont(&quot;mplus-2p-regular.ttf&quot;)

chars = set()
glyphMap = dict()
hmtxMap = dict()
for i in range(len(s1)):
    c1 = &quot;uni%04X&quot; % ord(s1[i])
    c2 = &quot;uni%04X&quot; % ord(s2[i])
    chars.add(c2);
    print &quot;%s -&gt; %s&quot; % (c1, c2)
    glyphMap[c2] = tt['glyf'].glyphs[c1]
    hmtxMap[c2] = tt['hmtx'].metrics[c1]
glyphMap['.notdef'] = tt['glyf'].glyphs['.notdef']

for g in dict(tt['glyf'].glyphs):
    if g in chars:
        tt['glyf'].glyphs[g] = glyphMap[g]
        tt['hmtx'].metrics[g] = hmtxMap[g]
    else:
        tt['glyf'].glyphs[g] = fontTools.ttLib.tables._g_l_y_f.Glyph()

output_path = &quot;output.ttf&quot;
tt.save(output_path)
print &quot;wrote %s&quot; % output_path
||&lt;
&gt;&lt;/div&gt;&lt;

このスクリプトを実行することで、M+ フォントのグリフが入れ替わり、利用しないグリフは空っぽになります。

この時点で 1.2MB あったフォントは 180KB になりました。ただ、Web に載せるにはまだまだ無駄にサイズが大きいです。
そこで、&lt;a href=&quot;http://www.fontsquirrel.com/fontface/generator&quot;&gt;Font Squirrel | Create Your Own @font-face Kits&lt;/a&gt; という Web サービスを利用しました。同じような Web フォントへの変換サービスはいくつかあるのですが、このサイトは「EXPERT...」機能の充実っぷりがすごいです。今回はフォントのサブセット化のオプションで、利用するフォントだけの情報を含むようにしました。

この結果、20 文字ほどの文字のみを含んだ 8KB のフォント ファイルが完成しました。できあがったフォントを Web フォントとして CSS3 で設定すれば完成です。

**アイデアの元は Font Cipher
今回のネタは、&lt;a href=&quot;http://christopherwoodall.com/ceasar/&quot;&gt;Font Cipher&lt;/a&gt; というサイトに着想を得ています。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003556.png&quot;&gt;&lt;/center&gt;&lt;

このサイトでは英語フォントをランダムに置き換えて、「人間には読めるけどコンピューターには読めない」文章を作る方法を提案しています。

そこから一歩進めて「暗号化された文章にも意味を持たせてしまえ」と作ったのが今回のネタです。

大文字小文字あわせても 54 文字しかないアルファベットではかなり難しいでしょうが、日本語は文字数が多いのが特徴です。唯一苦労したところが 2 つの「で」です。「で」に対応する文字は同じにする必要があるので、表示後の文章をどのようにするか少しだけ試行錯誤しました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120423/20120423003558.png&quot;&gt;&lt;/center&gt;&lt;

今回は短い文章なので簡単でしたが、長い文章で意味を持たせようとするとパズルの要素が高くなってくることでしょう。

**まとめ
いかがでしたでしょうか。公開したスクリプトを使えば、誰でも同じようなイタズラができるようになります。興味がある人は、ぜひ私が作ったものよりも面白くてインパクトが強い「コピペできない文章」を作ってみてください。

このネタはもうちょっと引っ張ります。

公開前、Web フォントは最近のブラウザーではほとんどサポートされているので、全ての人に楽しんでもらえると考えていました。しかし、実際にはフォントが適用されず「意味が分からない」と困った人が続出しました。

次回は「&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120426/web_font_popularity&quot;&gt;意外と多い!? Web フォントに対応していない環境&lt;/a&gt;」をお送りします。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120420/uncopyable&quot;&gt;絶対にコピペできない文章を作ったったwwww&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120419/tiny_jp_webfont&quot;&gt;文字を制限した軽量な日本語 Web フォントを作成する方法&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090515/genotyp_review&quot;&gt;フォント同士を交配させて新しいフォントを作る「genoTyp」が面白い&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090422/hokkaido_uragawa&quot;&gt;北海道を落とすとどう跳ねるのか？の裏側&lt;/a&gt;
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>you</username>
<body>どうりでソース見てもわからんかったわけやｗ&lt;br&gt;素晴らしいアイデアです！</body>
<timestamp>1335147574</timestamp>
</comment>
<comment>
<username>z</username>
<body>スタイル書き換えで固定フォントにしているから、まったく意味不明な記事だった。&lt;br&gt;謎がようやく解けた。</body>
<timestamp>1335196143</timestamp>
</comment>
<comment>
<username>名無しさん＠お腹いっぱい。</username>
<body>webフォントが手軽に生成できるようになったと聞いて(ry&lt;br&gt;いい時代になりました。itmediaに載りました。</body>
<timestamp>1335270657</timestamp>
</comment>
<comment>
<username>S氏</username>
<body>普通のフォントを画像で偽装してるだけと思ってました。こんな高度なことしてたんですね。</body>
<timestamp>1335305731</timestamp>
</comment>
<comment>
<username>七龍</username>
<body>ま、負けたｗ</body>
<timestamp>1335340891</timestamp>
</comment>
<comment>
<username>立直</username>
<body>＞もしある日、フォントが反乱して文字がバラバラになってしまったら、人間はコンピューター上で一切の文章を読むことができなくなります。&lt;br&gt;この一文を見てバベルの塔の話を思い出してしまった。一瞬で世界中に情報が広がる世界も、根本は危ういものですね。</body>
<timestamp>1335350531</timestamp>
</comment>
<comment>
<username>ありがとう</username>
<body>知らない人がまだまだいる&lt;br&gt;今のうちに知らせて楽しまなきゃ♪&lt;br&gt;人のネタで・・・m(__)m</body>
<timestamp>1335620825</timestamp>
</comment>
<comment>
<username> </username>
<body>おもしろい～</body>
<timestamp>1336849665</timestamp>
</comment>
<comment>
<username>ｎ</username>
<body>もっと下らない仕掛けだと思ってた。&lt;br&gt;これは気づかない。</body>
<timestamp>1346004270</timestamp>
</comment>
</comments>
</day>
<day date="2012-04-26" title="">
<body>
*web_font_popularity*[html5]意外と多い!? Web フォントに対応していない環境 ～2012 年の Web フォント事情
Web フォントは「Web サイトにオリジナルのフォントを埋め込む」ための技術です。現行のブラウザーは全て Web フォントに対応している状況です。

そんな状況であるため、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120420/uncopyable&quot;&gt;絶対にコピペできない文章を作ったったwwww&lt;/a&gt; は Web フォントに依存したコンテンツでしたが、特別な配慮はせずに公開しました。

しかし、公開後、Web フォントが適用されなかった複数の方から「コピペできるんだけどどういうこと？」「意味が分からない」というコメントがよせられました。

そこで、Web サーバーのアクセスログを解析して「Web フォントに対応していない環境」がどの程度あったのかを調べてみました。

**４種類のフォーマット
一口に Web フォントといっても、フォントのフォーマットは &lt;strong&gt;WOFF・TTF・EOT・SVG の 4 種類&lt;/strong&gt;あります。今後は WOFF フォーマットが標準になっていくのですが、現在ではサポートしていないブラウザーも残っています。

そこで、&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120420/uncopyable&quot;&gt;絶対にコピペできない文章を作ったったwwww&lt;/a&gt; では、4 種類すべてのフォントを設置し、CSS には次のように記述していました。
&gt;|css|
@font-face {
    font-family: 'CipherM+1cregular';
    src: url('ciphered-mplus.eot');
    src: url('ciphered-mplus.eot?#iefix') format('embedded-opentype'),
         url('ciphered-mplus.woff') format('woff'),
         url('ciphered-mplus.ttf') format('truetype'),
         url('ciphered-mplus.svg#M+1cregular') format('svg');
}
||&lt;

IE8 以前は複数のフォント指定に対応していないため、ハックを活用しつつ 4 種類のフォーマットを指定しています。この指定は &lt;a href=&quot;http://www.fontsquirrel.com/fontface/generator&quot;&gt;Font Squirrel | Create Your Own @font-face Kits&lt;/a&gt; を使って出力されたものをそのまま利用しています。

では、このような指定をしたときに、どのフォーマットが一番利用されたのでしょうか。

**これが 2012 年の Web フォント利用率だ
公開後の 2 日間（4月20日～4月21日）には 43,892 件の PV がありました。このうち、利用されたフォントの割合は・・・
====
&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426013757.png&quot;&gt;&lt;/center&gt;&lt;

はい、7 割以上の人が WOFF フォーマットを利用していました。見逃せないのが、どのフォントも利用しなかった 3.94 %（1,729 PV）の存在です。
3.94% の詳細はこのあと分析するとして、まずはそれぞれのフォーマット別にどういうブラウザーからのアクセスが上位を占めていたのかを紹介していきます。

***期待の新星: WOFF フォーマット
一番多かったのが WOFF フォーマット。

Web Open Font Format という名前からして、Web フォントのために生まれてきた新人さん。今後、主流になるのは間違いないんだけども、まだ 3 割の人は使ってくれてない状況。

そんな WOFF に対応しているミーハーなブラウザーの上位 10 個はこれだ！

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ブラウザー&lt;/th&gt;&lt;th&gt;PV&lt;/th&gt;&lt;th&gt;割合&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025425.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Chrome&quot;&gt; Chrome 18 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;8,525&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;27.06%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.1 (iPhone iOS 5.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;6,434&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;20.42%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 11 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5,663&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;17.98%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025425.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Chrome&quot;&gt; Chrome 18 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2,326&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;7.38%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.1.5 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1,048&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.33%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 11 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;988&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.14%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.1 (iPad iOS 5.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;889&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.82%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.1 (iPhone iOS 5.0.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;842&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.67%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 11.62 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;576&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1.83%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5 (iPhone iOS 5.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;450&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1.43%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

分析：
- Chrome、Safari、Opera、Firefox など、主要なブラウザーの最新版が対応済み。
- IE9 も対応はしているが、CSS での指定順の関係から WOFF フォーマットは利用していない。
- iPhone、iPad では iOS 5 以降なら対応済み。
- Android 4 以降は Chrome 18 や一部の Mobile Safari（WebKit ビルド番号 535.7 以降）が対応済み。


はやく全部 WOFF でいける時代がくるといいですね。

***PC の覇者: TTF フォーマット
お次は 14% の人が参照した TTF フォーマット。

TTF(TrueType Font)は、いまは昔、1990 年に Apple と Microsoft が共同開発した業界標準のフォーマットです。

しかし、「生のフォント ファイルをそのまま Web にアップロードするのはどうなのよ？」という声があり、Web フォント業界では WOFF さんにその座を譲り渡しました。

そんな TTF さんを欲したのはコイツらだ!!!

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ブラウザー&lt;/th&gt;&lt;th&gt;PV&lt;/th&gt;&lt;th&gt;割合&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.4)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1,397&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;22.06%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.3)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1,128&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;17.81%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.5)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;580&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;9.16%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.6)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;509&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;8.04%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.2.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;454&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;7.17%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.2.2)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;274&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4.33%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.0.2 (iPhone iOS 4.3.5)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;236&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.73%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.7)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;232&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.66%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.0.2 (iPhone iOS 4.3.3)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;171&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.70%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 530.17 (Android 2.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;166&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.62%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

ザ・モバイル。

Android 2、iOS 4.2、iOS 4.3 など、少し古めのスマートフォンが独占しています。

ランク外には Firefox 3.5 (Windows)、 Android 4 の Mobile Safari（WebKit ビルド番号 535.7 以前）などもいました。

TTF さんは、少し前に愛されたフォーマットだということが分かりました。君は Web ではダメだったけど、PC の世界ではまだまだ主流なんだよ！、と励ましてあげましょう。

***時代を切り開いた英雄: EOT フォーマット
次は約 10% の人に求められた EOT フォーマットです。

いまをさかのぼること 14 年前、IE4 で Web フォントを実現するときに策定されたのが EOT（Embedded OpenType）フォーマットです。

当然、EOT さんを欲するのは・・・

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ブラウザー&lt;/th&gt;&lt;th&gt;PV&lt;/th&gt;&lt;th&gt;割合&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 7 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1,615&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;38.15%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 8 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1,415&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;33.43%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 9 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1,021&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;24.12%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 6 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;110&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.60%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 11.62 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;31&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0.73%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 11.63 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0.07%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 11.61 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0.07%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 11.62 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0.05%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 10 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0.05%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

はい、IE さんです。ただ、IE 一途かと思いきや、なぜか Mac の Opera も EOT を利用しています。

そんな IE さんも、IE9 で WOFF フォーマットに対応し、いよいよ死の瞬間が迫ってきています。さよなら、EOT さん。あなたが Web フォントの道を切り開いたから今があるんだよ・・・。


ところで、日本での IE の利用率は 50% を超えているはずです。にもかかわらず、EOT フォーマットへのアクセスは全体の 10% 程度でした。これは集計期間（公開直後 2 日間）には先進的なユーザー層の訪問が多かっからだと推測できます。

その後、4月25日に &lt;a href=&quot;http://nlab.itmedia.co.jp/nl/articles/1204/24/news103.html&quot;&gt;ITmedia&lt;/a&gt; に取り上げられると、公開直後よりも多くのアクセスが集まりました。この期間で集計してみると、
- WOFF フォーマット: 50.3%
- EOT フォーマット: 36.1%
と、一般ユーザーの分布に近くなりました。

***もう過去の人？: SVG フォント
利用率が 1% を切ったのが SVG フォントです。

SVG はベクター画像を扱うための規格であり、HTML5 でも注目されています。フォントがない環境でも SVG で文字を表示したい場合を考慮し、SVG にはフォント データを埋め込むことができるようになっています。この機能を活用したのが、SVG フォントです。

そんな SVG フォントを欲したのは・・・。

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ブラウザー&lt;/th&gt;&lt;th&gt;PV&lt;/th&gt;&lt;th&gt;割合&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 4.0.5 (iPhone iOS 4.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;33&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;40.74%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 4.0.5 (iPhone iOS 4.0.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;11&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;13.58%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 4.0.5 (iPhone iOS 4.0)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;7&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;8.64%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 4.0.5 (iPhone iOS 4.0.2)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;6.17%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 4.0.4 (iPad iOS 3.2.2)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4.94%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 4.0 (iPhone iOS 3.1.3)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.70%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025429.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;-----&quot;&gt; BlackBerry 534.8 (BlackBerry)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.70%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

かなり古めの iOS の Safari が SVG フォントを利用するようです。

本当にごくわずかではありますが、古い iPhone や iPad にも対応したい場合には、SVG フォントを用意しておくとよいでしょう。


**Web フォント利用しない 3.94% ってどういう人？
さて、問題は Web フォントを利用しない 3.94% の人たちです。

大きく分けて 2 パターンあります。

***Web フォント利用しない環境 その１: ブラウザーが対応していない
本当にごく少数ですが、Web フォントに対応していないブラウザーでアクセスしてきた人がいました（一部抜粋）。

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ブラウザー&lt;/th&gt;&lt;th&gt;PV&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 3 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;12&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 7 (FujitsuToshibaMobileCommun IS12T Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;9&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 3 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025429.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;-----&quot;&gt; Nintendo 3DS 1.7455 (Nintendo 3DS )&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 3.0.4 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 2 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 9.3 (PC)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025427.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Netscape&quot;&gt; Netscape 4 (PC)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 9 (FujitsuToshibaMobileCommun IS12T Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025429.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;-----&quot;&gt; NetFront (Sony PlayStation Portable Playstation Portable GameOS)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

Windows Phone とか、Nintendo DS とか、プレステとか、もしくは、古いブラウザーを強固に使い続ける人とか…。4万ヒット中に数十人のレベルなので、無視してもいいレベルでしょう。

しかし、無視できないのが次の人たちです。

***Web フォント利用しない環境 その 2: ブラウザーは対応してるけど無効になっている
Web フォントに対応したブラウザーでは、デフォルトで Web フォントが有効となります。しかし、何らかのカスタマイズによって Web フォントが無効になっている人がいました。

ブラウザー別に分類するとこうなりました。

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ブラウザー&lt;/th&gt;&lt;th&gt;PV&lt;/th&gt;&lt;th&gt;割合&lt;/th&gt;&lt;th&gt;同一ブラウザー&lt;br&gt;中の割合&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 11 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;285&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;16.48%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4.77%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025425.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Chrome&quot;&gt; Chrome 18 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;162&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;9.37%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1.86%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Safari 5.1 (iPhone iOS 5.1)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;142&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;8.21%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.16%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025428.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Opera&quot;&gt; Opera 11.62 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;103&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5.96%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;14.69%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 7 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;82&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4.74%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4.83%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 8 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;58&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.35%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.93%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025424.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Firefox&quot;&gt; Firefox 11 (PC Mac OS X)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;52&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.01%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5.00%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.4)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;51&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.95%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.52%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025426.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;IE&quot;&gt; MSIE 9 (PC Windows)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;50&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.89%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4.66%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120426/20120426025430.gif&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Safari&quot;&gt; Mobile Safari 533.1 (Android 2.3.3)&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;46&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.66%&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3.92%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

注目すべきは一番右側の列です。同じブラウザーを利用している人のうち、何パーセントが Web フォントをロードしなかったかを表します。

IE、Firefox、Chrome、Opera、Safari など、主要なブラウザーで数パーセントの人が Web フォントをロードしていないことが分かります。
では、いったい、どのような設定をすると、Web フォントが無効になるのでしょうか。

**Web フォントが無効になる設定とは？
***1. Web ページが指定するフォントを無視したい人
ブラウザーによっては、Web ページで指定されたフォントを利用しない設定項目があります。
:Firefox:[Web ページが指定したフォントを優先する] のチェックボックス
:Internet Explorer:[Web ページで指定されたフォント スタイルを使用しない] のチェックボックス

この設定を変更すると Web フォントの指定は無視されます。

また、あまり多くはないでしょうが、ユーザースタイルシートを設定している人も同じ状態となります。

***2. 拡張機能によって無効化されている人
ブラウザー拡張の中には、Web フォントの利用を禁止するものもあります。

有名どころでは &lt;a href=&quot;https://addons.mozilla.org/ja/firefox/addon/noscript/&quot;&gt;NoScript&lt;/a&gt; です。Google Web Fonts の FAQ には「NoScript のオプションを開いて、Embeddings タブで [Forbid @font-face] のチェックをはずすことで、Web フォントが使えるようになる」と&lt;a href=&quot;https://developers.google.com/webfonts/docs/troubleshooting#NoScript&quot;&gt;書いてあります&lt;/a&gt;。

NoScript が Web フォントを無効にする理由は、セキュリティーにあるようです。Firefox は Web フォントを利用するために、FreeType フォント ライブラリーを利用しているのですが、このライブラリーに問題があるようです。
&gt;http://hackademix.net/2010/03/24/why-noscript-blocks-web-fonts/:title=hackademix.net &amp;#187; Why NoScript Blocks Web Fonts&gt;
FreeType フォント ライブラリーが Web 上の信頼できないフォント ファイルを読み込むのは、本当に困った状況です。

というのも、このライブラリーは、ローカルコンピューター上の信頼できるフォントを処理するためのものであり、信頼できないフォントを読み込むことを想定していないように思えるからです。実際、このライブラリーが Firefox に導入されたあと、いくつもの脆弱性がみつかりました。
&lt;&lt;

ここで書いてある脆弱性は、たとえばこの件だと思います。
&gt;http://internet.watch.impress.co.jp/docs/news/20100323_356341.html:title&gt;
Firefox 3.6.2では、Firefox 3.6で追加された「WOFF」形式フォントの展開処理に関する脆弱性を修正している。この脆弱性が悪用された場合、ブラウザーのクラッシュが引き起こされ、任意のコードを実行させられる危険がある。
&lt;&lt;

このような事例もあるため、NoScript は「Web フォントはスクリプト実行と同等の危険性がある」と判断して、Web フォントをデフォルトで無効にしているようです。

(追記 2012/05/01) Firefox は 3.6.13 以降で &lt;a href=&quot;http://code.google.com/p/ots/&quot;&gt;OTS&lt;/a&gt; というフォント サニタイザーを&lt;a href=&quot;http://www.mozilla-japan.org/security/announce/2010/mfsa2010-78.html&quot;&gt;利用するように修正&lt;/a&gt;されており、現在では Web フォントを利用することによる危険性は小さいものと考えられます。OTS は Google Chrome でも利用されています。(twitter で @yusk_ さんに教えていただきました(&lt;a href=&quot;https://twitter.com/yusk_/status/196250942004408323&quot;&gt;その1&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/yusk_/status/196251246745751552&quot;&gt;その2&lt;/a&gt;)。ありがとうございます)

***3. iPhone, Android は…？
iPhone や Android でも数パーセントほど、Web フォントをロードしなかった人がいたのですが、こちらについては原因は分かっていません。

何らかの設定があるのでしょうか。ご存知の方がいれば教えてください。


(追記) twitter で指摘いただきました。iOS の&lt;strong&gt;アプリ内&lt;/strong&gt;のブラウザーでは Web フォントが効かないことがあるようです。

[twitter:195331139207041024:detail]

また、「iPhone ではそもそもコピーできない」という指摘がいくつかありましたが、このあたりもアプリ内かどうかで挙動が変わってくるのかもしれません。手元に iPhone がないので深追いできません…。(追記終わり)

**結論: Web フォントに依存してはいけない
長々と調べてきましたが、3 行で結論をまとめるとこうなります。

- WOFF フォーマットが普及しているが、現時点では各フォーマットの Web フォントを用意したほうがよい。
- Web フォントに対応していないブラウザーは皆無である。
- Web フォントを使わないように設定変更している人が数パーセントいる。


中でも、忘れてはいけないのが &lt;strong&gt;Web フォントを使わない人が確実に数パーセントいる&lt;/strong&gt; という事実です。その状況は今後も変わらないでしょう。

最近、Web フォントでアイコンを表示するテクニックが注目を集めています。
- [http://design.kayac.com/topics/2012/02/webFontIcons.php:title:bookmark]
- [http://kachibito.net/software/modern-pictograms.html:title:bookmark]

しかし、数パーセントの人には、Web フォントによるアイコンは意味不明な文字にしか見えません((追記 2012/05/03: &lt;a href=&quot;http://hail2u.net/blog/webdesign/mapping-to-private-use-area-is-not-a-perfect-answer.html&quot;&gt;私用領域へのマッピングだけでは解決しないもの - Weblog - hail2u.net&lt;/a&gt; によると、最近は Private Use Area (私用領域または外字領域)へアイコンをマッピングするもの増えてきているそうです。))。本当に万人に届けたいコンテンツを作るのであればアイコンは画像を使うべきでしょう。


最後に、今回の集計結果を &lt;a href=&quot;https://docs.google.com/spreadsheet/ccc?key=0AnNWAectqT7GdEJuTWMyb2J5MFIyZU5MYllvb2theVE&quot;&gt;Google スプレッドシートに公開&lt;/a&gt;しておきます。紙面の都合で省略したデータもありますので、興味のある方は確認してみてください。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120423/why_uncopyable&quot;&gt;「コピペできない文章」がコピペできなかった理由&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120420/uncopyable&quot;&gt;絶対にコピペできない文章を作ったったwwww&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120419/tiny_jp_webfont&quot;&gt;文字を制限した軽量な日本語 Web フォントを作成する方法&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120228/why_google_still_uses_flash&quot;&gt;Google がまだ Flash を使っているサービスでみる脱 Flash の難しさ&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090515/genotyp_review&quot;&gt;フォント同士を交配させて新しいフォントを作る「genoTyp」が面白い&lt;/a&gt;
-&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20090120/ie4_blueprint&quot;&gt;IE4 の青写真を懐かしむ&lt;/a&gt;
&gt;&lt;/div&gt;&lt;

</body>
<comments>
<comment>
<username>もやし</username>
<body>読みにくいフォントサイズとかカラーとか身体的な都合で&lt;br&gt;html指定のCSSを使わない場合とか？</body>
<timestamp>1335447191</timestamp>
</comment>
<comment>
<username>もやし</username>
<body>読みにくいフォントサイズとかカラーとか身体的な都合で&lt;br&gt;html指定のCSSを使わない場合とか？</body>
<timestamp>1335447191</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>iPhone の Twitter 公式アプリ、Twitter for iPhone の内蔵ブラウザーからはコピーができませんでした。&lt;br&gt;最後にコピーされた文字列が貼り付けられて一瞬焦りましたw&lt;br&gt;iPhone4 / iOS 5.1 です。</body>
<timestamp>1335465841</timestamp>
</comment>
</comments>
</day>
<day date="2012-05-11" title="">
<body>
*comp_gacha_probability*コンプガチャの確率マジックを中学生にも分かるように説明するよ
コンプガチャが話題になっています。

コンプガチャにハマりやすい理由として&lt;strong&gt;「最初は当たりやすいが、だんだん確率が低くなる」&lt;/strong&gt;という指摘があります。

なぜ「確率が低くなる」という現象おきるのでしょうか。

この記事ではコンプガチャの裏側にある確率マジックを分かりやすく解説します。

**サイコロの面を全部そろえるゲーム
いちばん身近な確率といえばサイコロです。

サイコロを使ったこんなゲームを考えてみます。
&gt;&gt;
***サイコロ コンプのルール
- サイコロを 1 回振るには 10 円が必要。
- 6 つの面をすべてを出せば、500ml のペットボトル飲料をプレゼント。
&lt;&lt;
「サイコロの 6 つの面をすべてコンプしよう」というゲームなので、シンプルな「コンプガチャ」といえます。

このゲーム、あなたなら参加しますか？
====
6 つの面を全部だせばよいので、運がよければ 6 回（60円）でペットボトルが手に入ります。なんだかお得そうです。

**ためしにやってみると・・・
サイコロを振ります。1投目。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511013149.png&quot;&gt;&lt;/center&gt;&lt;

はい、「6」が出ました。6 つの面のうち、1 つクリアです。


もう一度振ってみましょう。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511013150.png&quot;&gt;&lt;/center&gt;&lt;

「3」が出ました。6 つの面のうち、2 つクリアです。


第 3 投目。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511014618.png&quot;&gt;&lt;/center&gt;&lt;

今度は「2」です。

わずか 3 投で半分をコンプできました。なんだかとても楽勝なゲームに見えてきました。

**厳しくなってくる後半戦
あと 3 回投げればコンプ成功しそうな気がしますか？

いやいや、ここからが難しくなってきます。6 つの面のうち、3 つは既に出たので、残りの 3 つの面を出さなければなりません。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511023910.png&quot;&gt;&lt;/center&gt;&lt;

1/2 の確率で失敗します。


サイコロだと、分かりやすいですよね。

だけど、実際のコンプガチャでは
&gt;&gt;
「3千円で 3 枚出たんだから、8千円出せば 8 枚手に入る？」
&lt;&lt;
と錯覚してしまいがちです。

こわいですね。


ゲームを続けていきましょう。第 4 投です。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511014619.png&quot;&gt;&lt;/center&gt;&lt;

あー、さっそく重複してしまいました。。。

第 5 投目。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511014620.png&quot;&gt;&lt;/center&gt;&lt;

「4」が出て、4 つクリアです。


ここからは 1/3 の確率になります。

すこし手間取って、9 投目にしてあと「1」が出ました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511013144.png&quot;&gt;&lt;/center&gt;&lt;

残り 1 つです。

**あと 1 個からの苦悩
ここまで 9 回投げて「5」は一度も出ていません。

9 回投げて「5」が出なかったんだから、次かその次には「5」が出てもよさそうです。

「もうそろそろ出てもいいだろう」と思ってしまうのが人間の心理です。

しかし、現実はそうではありません。確率の世界では、&lt;strong&gt;たとえ過去に 100 回連続で「5」が出てなくても、次に「5」が出る確率は 1/6&lt;/strong&gt;です。中学では「同様に確からしい」という言葉を習ったのを覚えているでしょうか。あれです。（高校では、もうちょっと範囲を広げて「独立」という概念を習います）

確率が 1/6 ということは、平均すると 6 回投げないと当たりが出ません。運がよければ次に「5」が出るかもしれませんが、10 回投げても「5」が出でないかもしれません。100 回投げても出ないかもしれません。実際には何回投げるのかはやってみないと分からないけど、「平均すると 6 回投げる」ということです。


やめますか？

いや、ここでやめてしまうと 9 投目までに払った 90 円の投資はムダになってしまいます。
-「次の 10 円で『5』がでるかもしれない」
-「やめれば 90 円がムダになる」
という 2 つを比べると、やめると損するような気分になります。

やめられません。手を出してしまった以上、やめられないのがコンプガチャの怖さです。


意を決してサイコロを振り続けます。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511013145.png&quot;&gt;&lt;/center&gt;&lt;

出ません・・・。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511013146.png&quot;&gt;&lt;/center&gt;&lt;

16 投目でやっとでました。

16 投ということは 160 円です。ペットボトル飲料の定価 150 円を超えてしまいました・・・。


すべての結果をまとめると・・・

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120511/20120511013147.png&quot;&gt;&lt;/center&gt;&lt;

こうなりました。わずか 3 投目で半分までいったようにみえたのに、そのあと赤色が集中して、残りの 3 つをそろえるのに 13 回も投げる必要がありました。

「最初は簡単に当たるが、当たりが出るにつれて確率が下がる」ことが図をみて分かってもらえるのではないでしょうか。

**いったい何回投げなきゃいけないの？
さて、では、このゲーム、平均でサイコロを何回投げればコンプできるのでしょうか。

一般に、
&gt;&gt;
確率 p なら当たりがでるまで 1/p 回投げる必要がある
&lt;&lt;
ことが分かっています。

なんのこっちゃ、と思うかもしれませんが、先ほど「確率 1/6 のときは 6 回投げる必要がある」と説明しました。p に 1/6 を当てはめれば、そのままですね。


ゲーム開始時点では、何が出ても当たりなので「当たる確率は 1」です。当然、1 つ当たるまでに投げる回数は 1 回です。

残りが 5 面のときは、最初に出たもの以外がでれば当たりなので「当たる確率は 5/6」です。2 つ目が当たるまでに投げる回数の期待値は 6/5 です。

同じように、整理していくと、こうなります。

|*残数|*6|*5|*4|*3|*2|*1|
|*当たる確率|6/6|5/6|4/6|3/6|2/6|1/6|
|*投げる回数の期待値|6/6|6/5|6/4|6/3|6/2|6/1|


合計すると、投げる回数は
&gt;|
6/6 + 6/5 + 6/4 + 6/3 + 6/2 + 6/1 = &lt;strong&gt;14.7 回&lt;/strong&gt;
|&lt;
となります。

つまり、クリアまでに&lt;strong&gt;平均で 14.7 回投げる必要がある&lt;/strong&gt;、ということです。

サイコロ面は 6 つなのに、すべて出すには 14.7 回も投げる必要があります。予想したよりも多いと感じませんか？


この記事ではザックリと計算しましたが、数学的に厳密な計算をしようとすると、無限級数の知識が必要だったり、期待値の線形性を理解している必要があったりします。

ちょうど同じ問題が [isbn:479736100X:title] の 5 章で取り上げられています。この記事と同じぐらい丁寧に、この記事より厳密に解説してあるので、興味がある人は読んでみてください。本の中では、この問題のことを「確率の変化するコインを投げている」と表現していて、なるほど、と思いました。

[isbn:479736100X:detail]

**実際のコンプガチャはもっと複雑で低確率
実際のコンプガチャはもっと複雑です。

サイコロでたとえると
- 36 面あるサイコロのうち 1～10 をコンプしなきゃいけない&lt;br&gt;(コンプに無関係なアイテムが出る)
- サイコロの重心がずれていて、特定の出目がでにくい （プレーヤーの間では、出にくいカードのことを「ストッパー」「門番」などと呼ぶそうです (2012/5/12 11:00 追記)）
といった状態です。

[http://doryokujin.hatenablog.jp/entry/2012/05/09/034209:title=くわしく解説している記事]によると、出現確率がバラバラなときにはコンプに必要な回数が増加するそうです。
&gt;http://doryokujin.hatenablog.jp/entry/2012/05/09/034209:title=コンプガチャの数理 -コンプに必要な期待回数の計算方法について- - doryokujin&amp;#39;s blog&gt;
+等確率の設定よりもコンプに必要な回数は遙かに多くなる
+出現確率のばらつきによってもコンプに必要な回数は変動する
+300円ガチャであれば10種類のアイテム数でもコンプまでに10万円以上かかる設定が可能である

以下が主な数値結果。

# 3種類
+(1/3, 1/3, 1/3) -&gt; 5.5回
+(1/6, 1/3, 1/2) -&gt; 7.3回
+(1/10, 4/10, 5/10) -&gt; 10.7回
&lt;&lt;

**まとめ
いかがだったでしょうか。

「コンプガチャ」といってしまうと確率のイメージが沸きにくいですが、「サイコロの面を全部そろえるゲーム」に置き換えることで、
- 最初は簡単にそろう
- 後半になると出にくくなり、心理的にも後に引けなくなる
ことが分かっていただけたでしょうか？

このような「サイコロの面を全部そろえたら商品がもらえる」というゲームは「カード合わせ」「絵合わせ」と呼ばれ、景品表示法で禁止されています。過去に「プロ野球チップス」が流行った 1977 年頃に社会問題になって禁止されたそうです。今回のコンプガチャ騒動では、コンプガチャが「カード合わせ」「絵合わせ」に当たるとして消費者庁が指摘した形になります。

この記事を書くにあたって、次の記事や本を参考にしました。
- [http://sipo.jp/blog/2012/05/post-4.html:title]
- [http://doryokujin.hatenablog.jp/entry/2012/05/09/034209:title]
- [http://www.jaro.or.jp/ippan/bunrui_soudan/kenshou_keihin01.html:title]
- [isbn:479736100X:title]


→ (追記) &lt;strong&gt;続編を書きました&lt;/strong&gt; [http://d.hatena.ne.jp/nitoyon/20120517/gacha_probability:title]

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20120420/uncopyable:title]
-[http://d.hatena.ne.jp/nitoyon/20120306/inexpensive_moving:title]
-[http://d.hatena.ne.jp/nitoyon/20120214/original_shachihata:title]
-[http://d.hatena.ne.jp/nitoyon/20090415/hokkaido:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>50過ぎのオジサン</username>
<body>出張帰りの新幹線の中で、とても興味深く読ませてもらいました。アカデミックな内容を、解り易く解説してあり、良かったですが、本当にガチャにハマったしまうような人には、理解出来ないのでしょうね、</body>
<timestamp>1336745285</timestamp>
</comment>
<comment>
<username>takumi1123</username>
<body>なかなかわかりやすいでした！グリー等のコンプガチャはまっこうからやる気はないですが（（（</body>
<timestamp>1336745547</timestamp>
</comment>
<comment>
<username>モバゲーに２万円</username>
<body>わかりやすい解説ありがとうございました♪無駄金使って後悔です！パチンコより低い確率と言うか胴元笑のやりたい放題ですよね？第三者機関の監視は各メーカーが断ったらしいですし(-。-;</body>
<timestamp>1336748758</timestamp>
</comment>
<comment>
<username>確率</username>
<body>麻雀やる人なら&lt;br&gt;「七対子のイーシャンテン地獄」なんてのは&lt;br&gt;一回位経験あるんじゃないかと</body>
<timestamp>1336751334</timestamp>
</comment>
<comment>
<username>ささ</username>
<body>最後の「実際の部分」が重要ですね。最初の説明だと運次第でそれなりにコンプ出来そうな気になってしまいます。&lt;br&gt;ご存知と思いますが実際には「ストッパー」と呼ばれる物が一つないしは二つ入っていて他の1/10以下の確率でしか出ないようになっています。</body>
<timestamp>1336752732</timestamp>
</comment>
<comment>
<username>たろう</username>
<body>あほか。&lt;br&gt;コンプガチャしたことないやつが、知ったかぶって机上の空論をドヤ顔でほざいてると恥ずかしいだろ。&lt;br&gt;5枚コンプでも8枚コンプでも出ないカードってのは決まってるんだよ。&lt;br&gt;ストッパーと呼ばれているカードが。&lt;br&gt;あなたのサイコロの例えで言えば、1の目だけが出ない。&lt;br&gt;他の目は簡単に出る。&lt;br&gt;2～6までは1万円以内に出るが残りのストッパーの1がその後30万使っても出ないのがコンプガチャだよ。&lt;br&gt;各アプリのコンプガチャの報告スレッドみればどれがストッパーかわかる。&lt;br&gt;みんな同じカードが出なくてどんどん課金に拍車がかかってしまう。&lt;br&gt;スレッドでストッパーを確認して、もしその時に自分がリーチしていて、なおかつストッパー所持していればもうコンプは目前てなわけ。&lt;br&gt;&lt;br&gt;8枚コンプだとストッパーが2枚になるのが殆どなので、6枚で停滞する。&lt;br&gt;苦労して7枚目をゲットしてリーチがかかると、それまでに多額のお金を投入している為に最後の一枚をどうしてもゲットしてコンプリートしたくなる。&lt;br&gt;リーチがかかるとコンプリート出来るイメージしか頭になくなってしまうんだ。&lt;br&gt;そして2枚のストッパーにも確立差があり、みんなリーチがかかると最後はやはり同じストッパーのカードになってしまう。&lt;br&gt;かなりの金額使うのでコンプリートした人を見ると欲しくなり止まらなくなる。&lt;br&gt;体感的にストッパーのカードは金額10万使ってようやくストッパーのカードが入っている抽選テーブルでガチャが出来る様な感じ。&lt;br&gt;様は当たりの入っていないクジ引いている。&lt;br&gt;多額投資してようやくコンプリート出来る権利が発生。&lt;br&gt;200万以上色々なコンプリートガチャやりましたが、これ以外の例外を感じるのは1度もなかったです。&lt;br&gt;次こそはの精神状態になります。&lt;br&gt;&lt;br&gt;以上簡単に。&lt;br&gt;&lt;br&gt;&lt;br&gt;そんなサイコロ振って全ての目を集める例えが出るなんてビックリしました。&lt;br&gt;何も知らないド素人が適当な与太話するのは恥ですよ、大恥。&lt;br&gt;&lt;br&gt;みんな知ってる当たり前の話ですよ、ストッパーの存在は。ど恥ずかしい知ったか記事あったんで腹立って米します。</body>
<timestamp>1336753288</timestamp>
</comment>
<comment>
<username>ささ</username>
<body>マスコミはストッパーの存在をもっと報道するべきですねｗ」&lt;br&gt;それこそ「確率的」にマスコミの誰もがストッパーの存在を知らないって事の方があり得ないだろうし、意図的に報道しないんでしょうね。</body>
<timestamp>1336754501</timestamp>
</comment>
<comment>
<username>じろう</username>
<body>200万使ったとかドヤ顔して書き込んでる奴がいると聞いて</body>
<timestamp>1336754962</timestamp>
</comment>
<comment>
<username>ジョン</username>
<body>200万円の無駄金を投じて得たのは「やったこともねえくせに」って威張れるってことだったわけか。</body>
<timestamp>1336755415</timestamp>
</comment>
<comment>
<username>さぶろう</username>
<body>絵合わせの違法性に気づかず「楽しさだけを追求して自制がきかずにのめりこむ心理」が理解できない私には、あらゆる意味でよくわかりました。&lt;br&gt;指摘されて　気づきたくないところに気づいた人は儲かったと考えるか、損失に発狂したくなるか　ですかね。</body>
<timestamp>1336755577</timestamp>
</comment>
<comment>
<username>たま</username>
<body>ちゃんと重心がずれてるってかいてるのにね。</body>
<timestamp>1336755865</timestamp>
</comment>
<comment>
<username>かい</username>
<body>企業側がストッパーの存在を簡単に認めるとは思えないんだけど。。。マスコミが簡単に報道出来るレベルの話ではないと思う。</body>
<timestamp>1336756093</timestamp>
</comment>
<comment>
<username>匿名</username>
<body>サイコロゲームのコンプ期待値は一応147円なのでプレイヤーに有利な設定になってるね&lt;br&gt;最短の6回（60円）でコンプする確率は1.546%と低いし&lt;br&gt;10円～50円ではコンプ不可能だが&lt;br&gt;&lt;br&gt;実際はコンプまでの回数に加えて、1回でも課金があれば&lt;br&gt;運営の勝ちとの考え方もありそうな</body>
<timestamp>1336756110</timestamp>
</comment>
<comment>
<username>ツ</username>
<body>長々と体験談書いてる人いるけど、確率の話で解決できるね。&lt;br&gt;システムを解読したつもりが、感情論へ。</body>
<timestamp>1336756801</timestamp>
</comment>
<comment>
<username>n-styles</username>
<body>たろうさん、おそらくこの記事の本文中にある「サイコロの重心がずれていて、特定の出目がでにくい」という一文を見落としていますね。コレがまさにストッパー。</body>
<timestamp>1336757691</timestamp>
</comment>
<comment>
<username>よ～く考えよ～お金は大事だお</username>
<body>とても分かりやすかったです。ありがとうございます。&lt;br&gt;私もお金のかかるゲームはしたことがありませんが、&lt;br&gt;ガチャに200万も投資する人がいるということに驚きました。</body>
<timestamp>1336758274</timestamp>
</comment>
<comment>
<username>やれやれ</username>
<body>＞たろうさん&lt;br&gt;&lt;br&gt;200万投資したからどうのこうのって・・・。&lt;br&gt;それだけ投資するまで気付かないなんて、良いお客さんですね。&lt;br&gt;業者にとったらあなたは正しくネギを背負った鴨です。&lt;br&gt;その上で、長々と感情論ぶちまけて、自分で恥の上塗りしてますよ。</body>
<timestamp>1336762073</timestamp>
</comment>
<comment>
<username>しかし</username>
<body>こんなバカなこと、机上の説明で充分だろ。「やったこともないくせに」って、「ダマされたこともないくせに」ってことだろ？</body>
<timestamp>1336762519</timestamp>
</comment>
<comment>
<username>たろうの母</username>
<body>皆んなでたろうを責めないで下さい。&lt;br&gt;たろうは自分でも「あほか。たろう」と言っているようにあほなんです。&lt;br&gt;たろうには正確に文章を読んでそれを理解できる力がありません。&lt;br&gt;そんな能力があったら、コンプガチャに200万も使うものですか。&lt;br&gt;&lt;br&gt;えっ・・たろうは、自分であほって言っていませんか？&lt;br&gt;すいません・・親子ソロッて、読解力がないものですから。</body>
<timestamp>1336777331</timestamp>
</comment>
<comment>
<username>ワロス</username>
<body>コメ欄ワロタよ。</body>
<timestamp>1336779753</timestamp>
</comment>
<comment>
<username>おいおい</username>
<body>操作をほとんど考慮しない机上の理論でも、実際には思った以上にコンプは難しいんですよ、っていう趣旨の内容だろ。&lt;br&gt;それを知ったかだのドヤ顔だのと言うほうが恥ずかしいわ。</body>
<timestamp>1336782850</timestamp>
</comment>
<comment>
<username>じろう</username>
<body>実際のコンプガチャはもっと複雑で低確率と書いてあるがな。&lt;br&gt;サイコロの重心がずれていて、特定の出目がでにくいってまさにそのストッパーのことじゃねえかｗ</body>
<timestamp>1336785653</timestamp>
</comment>
<comment>
<username>一太郎</username>
<body>弟をいじめないでください！！</body>
<timestamp>1336788480</timestamp>
</comment>
<comment>
<username>もちろん</username>
<body>机上の空論で良いんだけど、何が危ないのかというのは、このシステム自体が、ユーザーを騙しやすい性質を持っていて、しかも、運営側の恣意的な操作がやり放題ということでしょ。&lt;br&gt;&lt;br&gt;サイコロの例をちょっとアレンジすれば、ストッパーの概念なんて誰でも思いつくわ。</body>
<timestamp>1336789985</timestamp>
</comment>
<comment>
<username>どりない</username>
<body>中学生にもわかるように説明している文章を、ちゃんと読めない人もいるようですね・・・。&lt;br&gt;十分わかりやすい説明だと思います。&lt;br&gt;&lt;br&gt;TVの報道を見ていると、サイコロの例くらいまでしか説明されていませんが、実際にカードの出現率を運営側で自由に、しかも公表せずに変更できるのがコンプに多額のお金がかかってしまう原因なんですけどね。&lt;br&gt;さらに、コンプしてもらえるものがレアガチャ券とかだと、本当に欲しいものが手に入るのにいくらくらいかかるか検討つかないです。&lt;br&gt;もっと深いところまで報道してほしいものです。</body>
<timestamp>1336798508</timestamp>
</comment>
<comment>
<username>たろうｗｗｗ</username>
<body>ガチャコンプとか頭の出来の悪い中学・高校生と頭の出来の悪いトラックの運ちゃんと頭の出来の悪いキャバ嬢くらいしかやってないだろ&lt;br&gt;&lt;br&gt;最底辺の知的弱者がなけなしの収入を搾取されて現実世界では何の役にも立たないキラキラのアバタ―買ってると思ったら泣けてくるな</body>
<timestamp>1336800209</timestamp>
</comment>
<comment>
<username>あぼじ☆</username>
<body>現実世界で何が役に立つかは個々の価値観だと思いますが&lt;br&gt;楽しむことにお金をかけるのにはいいと思いますよ。&lt;br&gt;クジに使うか、当たった人から買うか、&lt;br&gt;やり方はいろいろありますよね。支払うことに躊躇したり&lt;br&gt;後悔するくらいなら楽しみ方、入手の仕方を間違えているのではないでしょうか？ほしいものがあるなら、どういうルートで入手するか考え、レジャーに出せる金額か判断する必要があると思います。そもそも確立に対していろいろ国が制限するのはどうかと思いますし、みなさんのおっしゃるとおり確立勝負をしかけられて損したと思う方は鴨になっていますので手を出さないのが一番ですね。</body>
<timestamp>1336813750</timestamp>
</comment>
<comment>
<username>うーん</username>
<body>まずこれをコンプ「ガチャ」と称する事自体がおかしい。&lt;br&gt;実際のガチャガチャなら筐体内に当たりのカプセルが入っていれば&lt;br&gt;最悪でも筐体が空っぽになるまで連続で回し続ければ当たりが得られる訳で。&lt;br&gt;&lt;br&gt;コンプルーレットとかコンプくじと呼ぶのが妥当では？</body>
<timestamp>1336816988</timestamp>
</comment>
<comment>
<username>あ</username>
<body>コンプガチャに騙される情弱が多数いるのと同じくらい&lt;br&gt;こんな当たり前のことを書いた記事が&lt;br&gt;はてブされまくってランキングや検索上位に来ることが悲しい</body>
<timestamp>1336821345</timestamp>
</comment>
<comment>
<username>というか</username>
<body>最初の一回目の確率と、あと一枚でコンプの時の&lt;br&gt;確率が同じとは謳ってないよね</body>
<timestamp>1336833417</timestamp>
</comment>
<comment>
<username>見てるか？</username>
<body>たろうアホすぎワロタｗｗｗ</body>
<timestamp>1336837535</timestamp>
</comment>
<comment>
<username>TARO</username>
<body>人気者が降臨したと聞いて&lt;br&gt;&lt;br&gt;理屈や悪質性は知っていたけど、ここのサイトの説明は分かりやすい&lt;br&gt;こういったサイトを拡散するのは抑制に効果あるだろ&lt;br&gt;&lt;br&gt;まぁ、のめり込んでるヤツには理解出来ないと思うけどｗ</body>
<timestamp>1336870584</timestamp>
</comment>
<comment>
<username>そういえば</username>
<body>今回の報道をするのに射幸心を煽る・・・ってあったけど、ターゲットは中高生とかの判断基準の甘い(主に扶養家族の)ガキだから射幸心って言葉は当てはまるのかな？となんとなく思ったｗ&lt;br&gt;&lt;br&gt;射幸心ってより無知に付け込んだ詐欺(欺瞞?)商法って感じがするけど・・・</body>
<timestamp>1336871542</timestamp>
</comment>
<comment>
<username>次郎</username>
<body>200万もそんなことに使えるなんて裕福なんですね＾＾&lt;br&gt;&lt;br&gt;一回ネトゲで3000使ったけど課金した瞬間にやる気が萎えた´｀&lt;br&gt;こういうのは全部課金を前提に作ってんだよな…</body>
<timestamp>1336874515</timestamp>
</comment>
<comment>
<username>Saburo</username>
<body>射幸心なんて年齢性別問わず、誰もが持ってるもんだよ。&lt;br&gt;ただ理性で抑えられるか、計算してみて割に合わないと切り捨てられるかどうかは、当人の資質による。精神的に未生熟だったり、知識が乏しければ煽られやすくはなるけど。</body>
<timestamp>1336877483</timestamp>
</comment>
<comment>
<username>slider</username>
<body>疑問の持ち方じゃないのかな？&lt;br&gt;”何とか生命保険ビルディング”が都心部の一等地に&lt;br&gt;そびえたつのを見て&lt;br&gt;如何に保険って商品がもうかるか、&lt;br&gt;つまりは払ってる側が損をしているかを&lt;br&gt;思い付く人間と、&lt;br&gt;あんな立派なビルを持つ保険会社なら安心だ&lt;br&gt;と全く的外れな解釈をしちゃう一般人。&lt;br&gt;どっちが多いのか。</body>
<timestamp>1336878346</timestamp>
</comment>
<comment>
<username>名前内容</username>
<body>確立を論ずる前に、もっと単純な問題がある。&lt;br&gt;ガチャはプログラムって事。&lt;br&gt;人為的にいくらでも当たりを引かないように出来る。&lt;br&gt;確立云々以前に業者にインチキされてんだから、そっちの方から攻めた方がよほど分かり易いね。</body>
<timestamp>1336889336</timestamp>
</comment>
<comment>
<username>lol</username>
<body>１つは確率の話&lt;br&gt;&lt;br&gt;１つはコンプガチャ形式が絵合わせとして規制されているという話&lt;br&gt;&lt;br&gt;１つはプログラムで異常にコンプしにくい状態になっているという話&lt;br&gt;&lt;br&gt;消費者庁はプログラムに口出ししないから、あまり関係ない&lt;br&gt;絵合わせでアウト&lt;br&gt;&lt;br&gt;プログラムの話で一番わかり易いのはペニーオークションね&lt;br&gt;あれは完全に当たりなしにできるからね</body>
<timestamp>1336898380</timestamp>
</comment>
<comment>
<username>www</username>
<body>た　ろ　うｗｗｗｗｗｗ&lt;br&gt;&lt;br&gt;コンプガチャしてる層がどんだけバカかわかる一文だなｗｗｗ&lt;br&gt;今回規制されたものがどんなものか説明しているのに、&lt;br&gt;カードによって確率変えてるっていう別の問題を出してくる辺り&lt;br&gt;頭悪すぎるｗ&lt;br&gt;バカにもわかるように問題を簡単にして解説したら&lt;br&gt;実際は違うとかｗｗ&lt;br&gt;たろう、見てたら理解できるか？確率変えてなくても&lt;br&gt;最後の一枚がそろう可能性は1/カードの枚数しかないんだよｗ&lt;br&gt;確率を明示していない、カードによって変えてるってのは&lt;br&gt;別の問題。これは解説しなくてもおまえのようなあほでも理解で&lt;br&gt;きてるだろｗｗｗ&lt;br&gt;解説してやろうかｗｗ</body>
<timestamp>1336910519</timestamp>
</comment>
<comment>
<username>www</username>
<body>た　ろ　うｗｗｗｗｗｗ&lt;br&gt;&lt;br&gt;コンプガチャしてる層がどんだけバカかわかる一文だなｗｗｗ&lt;br&gt;今回規制されたものがどんなものか説明しているのに、&lt;br&gt;カードによって確率変えてるっていう別の問題を出してくる辺り&lt;br&gt;頭悪すぎるｗ&lt;br&gt;バカにもわかるように問題を簡単にして解説したら&lt;br&gt;実際は違うとかｗｗ&lt;br&gt;たろう、見てたら理解できるか？確率変えてなくても&lt;br&gt;最後の一枚がそろう可能性は1/カードの枚数しかないんだよｗ&lt;br&gt;確率を明示していない、カードによって変えてるってのは&lt;br&gt;別の問題。これは解説しなくてもおまえのようなあほでも理解で&lt;br&gt;きてるだろｗｗｗ&lt;br&gt;解説してやろうかｗｗ</body>
<timestamp>1336910520</timestamp>
</comment>
<comment>
<username>通りすがり</username>
<body>たろう氏の言うことはおそらく本当ではないか。６のサイコロに例えれば、１～３の目は高確率で出現するようにして、４～５の目は低確率、６の目は超低確率に設定しているのではないだろうか。&lt;br&gt;&lt;br&gt;こうすると、等確率よりも１～３まではあっさり揃うが、全部揃うのには等確率よりもはるかに回数が必要なことになる。でも１～３まではすぐに揃うからユーザーを騙しやすくなるわけだ。どう考えてもこのほうがユーザーを騙せるから儲かる。&lt;br&gt;&lt;br&gt;ソーシャルゲームの詐欺師達がこれをやらない理由がないわな。たろう氏の言う通りほとんどのコンプガチャはそうなっているのだと考えていいと思うぞ。</body>
<timestamp>1336916019</timestamp>
</comment>
<comment>
<username>だーかーらー</username>
<body>記事＆コメしっかり読もうぜぇ・・・&lt;br&gt;”たろう”の言ったこと自体はハズレとは言ってない&lt;br&gt;ただ、机上の空論と言い放った割には、内容のないスカスカの感情論だったからココまで叩かれてるのに・・・&lt;br&gt;記事のラスト付近にも「実際のコンプガチャはもっと複雑で低確率」があるだろうが！&lt;br&gt;&lt;br&gt;たろうが延々「次の一発で逆転のギャンブラー心理」話を垂れ流してる内容がその数行で説明されてるよ&lt;br&gt;&lt;br&gt;日本に居たいなら日本語必修な</body>
<timestamp>1336924068</timestamp>
</comment>
<comment>
<username>あにょね</username>
<body>アバターきらきらにしたいなら別に止めはしないさ・・・&lt;br&gt;それが君にとって掛替えのないものなら・・・なぁ、たろう・・・&lt;br&gt;&lt;br&gt;俺もネトゲで欲しい武器を課金して買ってるよ&lt;br&gt;&lt;br&gt;でもな・・・おれはガチャがあってもそんな不確かなものには&lt;br&gt;リアルマネーを使ったりせんよ&lt;br&gt;せいぜいあってもゲーム内で稼げる通貨のガチャしかやらんのよ&lt;br&gt;&lt;br&gt;君の言う普通とはちょっと違うかも知れないが、これが一般的と言うか・・・正常なのよ・・・悲しいけど&lt;br&gt;&lt;br&gt;ネトゲでもなんでもサービスが終了するとか、過疎るとか、あるでしょ？普通に&lt;br&gt;&lt;br&gt;一時的にちょっとのお金を投資するのはいいよ&lt;br&gt;でも、車が買えそうな金額をつぎ込んで、後に残ったものは・・・残ってすらないか・・・なんせ仮想の世界の話なんだから&lt;br&gt;&lt;br&gt;俺はお前の将来の方が心配だよ・・・</body>
<timestamp>1336926177</timestamp>
</comment>
<comment>
<username>50過ぎのオジサン</username>
<body>一番目のコメントに「本当にガチャにハマったしまうような人には、理解出来ないのでしょうね」と書き込みをした本人です。一例にしろ、この一文を証明してくれた”たろう”さん、貴重な存在です。(勿論嫌味ですが、、）&lt;br&gt;読めば、本文中に&quot;ストッパー”なるもののが解説してあるにも関わらず、ヒステリックに反応をするのは、ある意味、期待通りですな。</body>
<timestamp>1336928506</timestamp>
</comment>
<comment>
<username>おっさん</username>
<body>これは確率的に公平な場合の話&lt;br&gt;&lt;br&gt;実際はコンプまで残り１種類になると出現確率が落ちるよう裏で補正されているからもっとアコギ。</body>
<timestamp>1336969097</timestamp>
</comment>
<comment>
<username>D</username>
<body>コンプガチャってなに？と思って調べましたが　わかりやすかったです。&lt;br&gt;ネットのゲームって何十万とか何百万とかほんとに使ってる人が居るらしくて&lt;br&gt;ガチャガチャでレアアイテムの装備をフル装備にしようと狙うってのも似たようなものかな&lt;br&gt;私は、羨ましいというよりも　ちょっと中毒気味ときうか冷静な判断力を失ってるのかな？&lt;br&gt;って感じで、コンプガチャとは違う話になりましたがお金を使ってる感覚もなく&lt;br&gt;ここで引くとコレまでの投資が無駄になるぞ！と心理的に引けないような状態で&lt;br&gt;&lt;br&gt;すべてのネトゲに、なんらかの規制が必要になりそうだけど&lt;br&gt;特におもうのは、ああいうの未成年にさせて良いのかな（大きなお友達もね）</body>
<timestamp>1336986718</timestamp>
</comment>
<comment>
<username>ｐ</username>
<body>アホすぎてワロタww</body>
<timestamp>1336994584</timestamp>
</comment>
<comment>
<username>kjirouu</username>
<body>たろうさんは、早い内にストッパーのことを教えてくれたので&lt;br&gt;そんなに叩かないでもいいような&lt;br&gt;&lt;br&gt;１．基本的はランダムだけど確率を調整していることもある&lt;br&gt;２．基本的にストッパーで確率を調整している&lt;br&gt;&lt;br&gt;これ、２の方は、ランダムによる確率論理が&lt;br&gt;実プレイ時の期待値計算で「全く」役に立たないという&lt;br&gt;点では指摘は有用なものだったと思います&lt;br&gt;&lt;br&gt;下手に確率を知ってる人が「後1枚だから大体3000円で当たるよ」と&lt;br&gt;的外れなアドバイスをしちゃうことも防げてますしね&lt;br&gt;&lt;br&gt;口調は悪いとは思いますけど</body>
<timestamp>1337046911</timestamp>
</comment>
<comment>
<username>そんなのは</username>
<body>簡単に揃わなくていいんだよ&lt;br&gt;稀少価値があるからやるのであって、&lt;br&gt;サイコロ出目の確率論で説明するのが的外れ</body>
<timestamp>1337064301</timestamp>
</comment>
<comment>
<username>いろはす</username>
<body>150円のペットボトル、サイコロ1振り10円のこのゲーム。&lt;br&gt;あなたは参加しますか？と尋ねられ、ボッタクリで話題になっているガチャの記事だから、6面揃えるまでには大きな金額が必要に&lt;br&gt;なるのかと思って計算してみたら147円。驚きもなく反応しにくい微妙な結果に、計算間違いかと思ったが記事内でもそのような結果に。&lt;br&gt;なんだ！実際買うよりガチャッたほうが少しお得じゃん！</body>
<timestamp>1337180009</timestamp>
</comment>
<comment>
<username>たんぽぽ</username>
<body>「150円のペットボトル」なら、途中で気づく人が多いと思いますが、値段の付いていない（見えない）ものに対してするところが、コンプガチャの一番恐ろしいポイントなのでしょうね。&lt;br&gt;&quot;たろうさん&quot;は、ちょっと早とちりされていますが、ストッパーのことをとても具体的に説明してくださったので、それはそれでよかったんじゃないですか？&lt;br&gt;体験者の話が聞けるって、貴重と思います。</body>
<timestamp>1337221053</timestamp>
</comment>
<comment>
<username>yJY6MA</username>
<body>引くに引けなくなるってのは&lt;br&gt;日本の社会システムの中でもよく見受けられますね&lt;br&gt;マイホームローンを組んでしまったから、、、とか&lt;br&gt;結婚して子供が出来たから、、、とか&lt;br&gt;長期間勤務したから（潰しがきかない）、、、とか</body>
<timestamp>1337232344</timestamp>
</comment>
<comment>
<username>いいんじゃない？</username>
<body>パチンコで○○万円すった、ってのと全く同じですよ。&lt;br&gt;そんな話どこにでもあるでしょう？それと同じ、&lt;br&gt;&lt;br&gt;ガチャやソシャゲーにそんなに大金を突っ込んで・・・って言う方は馬鹿にしているだけですね。それはしかし価値観の違いと言うものです。要は楽しければいいんですよ。ちょっと感情に走っちゃった感があるだけです。&lt;br&gt;&lt;br&gt;&lt;br&gt;まあ私も月額数千円～多いときで数万円ガチャやっているので、感覚的にわかるのですが、確率論を超えた恣意的な操作感がある、というのは良く分かります。&lt;br&gt;2chのスレッドが1000発言2～3時間で消費するような多人数が参加している場で、門番やストッパーの話題が出てかつそれらが全く共通している点から推察するに、個人の感覚ではなく、統計的にも信頼できそうな程度、「操作している」だろうなあと思いますね。&lt;br&gt;&lt;br&gt;上の発言で「ガチャガチャ」じゃない。とご指摘されている方がいらっしゃいますが、まさにその通りです。&lt;br&gt;実は出るか出ないか、分からないのです。&lt;br&gt;ここがオンラインカジノなんかと同じで、海外は須らく第3者機関のモジュール適用や検査、といった認証方式をとっています。&lt;br&gt;ソシャゲーの各社がそれを断った、というソースはちょっと分からなかったのですが、もしそれが事実なら、それが一番の問題です。&lt;br&gt;「悪いこと」していないのなら、堂々とすべきですよね。</body>
<timestamp>1337271495</timestamp>
</comment>
<comment>
<username>あと</username>
<body>追記です。実は確率が「動的に変化できうる立場にある」というだけでＮＧだろう、というのが私の考え方です。&lt;br&gt;&lt;br&gt;サイコロの話で言うと、ある特定の目が超低確率でというのが基本的にあるとして、さらに、後もうちょっと、と言うタイミングで、&lt;br&gt;一旦確率をゼロにしてしまえたり、あるいは、&lt;br&gt;そのユーザーの今までの課金の傾向を分析して、&lt;br&gt;10万までなら払いそう、という統計結果があるとすれば、&lt;br&gt;ぎりぎり9万くらいガチャを「回させて」から、やっと「しょうがないからあと1枚、出してやるよ」という感じで、コンプさせてあげる。&lt;br&gt;&lt;br&gt;といった制御が可能である、ということが一番グレーであり、改善すべきことであると思います。&lt;br&gt;&lt;br&gt;可能性がゼロではないことに自体が罪、というわけです。</body>
<timestamp>1337271937</timestamp>
</comment>
<comment>
<username>うっち</username>
<body>コンプガチャの内容を全く知らない人が簡易的に内容把握するには分かりやすい例です。&lt;br&gt;&lt;br&gt;ただ&lt;br&gt;た&lt;br&gt;ろ&lt;br&gt;う&lt;br&gt;サンwwwwwwwwwwww裕福な餓鬼だなｗ</body>
<timestamp>1337302668</timestamp>
</comment>
<comment>
<username>kikori2660</username>
<body>コンプガチャには、単純にアイテム数で100%を割っただけの確率のものと、アイテムによって確率に偏りの設定をしておくものがある。後者の場合、その確率が低いものをストッパーとユーザーが呼んでいるのだろうな。&lt;br&gt;&lt;br&gt;「多額投資してようやくコンプリート出来る権利が発生」「確率が動的に変化できうる立場にある」←だが、これは恐らくただの錯誤だろうと思う。運営経験のある人間からすると、内部フラグを設けたり、途中で引ける確率を変えたりなどの仕様はデバッグが難しくトラブルの元になるので、やらないんじゃないのかな。わざわざそんな事をしなくても、「偏り」の設定のみで充分回収出来るんだから。&lt;br&gt;&lt;br&gt;『ぎりぎり9万くらいガチャを「回させて」から、やっと「しょうがないからあと1枚、出してやるよ」という感じで、コンプさせてあげる。』←本当にこれはメンド臭いんです。プログラマーとデバッガーが嫌がる。</body>
<timestamp>1337487255</timestamp>
</comment>
<comment>
<username>もうゲームは卒業した。</username>
<body>ゲーム運営会社が違法性を指摘された最初のうちは「ただちに違法性はない」と強気だったが、ある日突然、全運営会社が足並みを揃えて&lt;br&gt;「コンプガチャ自主停止」&lt;br&gt;と打ち出しました。&lt;br&gt;おそらく公正取引委員会にガサ入れされてプログラムをチェックされると、カードの確率を自由に操作していたことがバレるから、それを恐れての事でしょうね。&lt;br&gt;&lt;br&gt;ゲーム会社は、各プレイヤーのゲームプレイ履歴をデータとして持ってる。ゲーム開発のエピソードとして&lt;br&gt;「ゲームプレイ履歴を分析することで、どんなプレイヤーがゲームのどの点を面白いと思うのか、つまらないと思うのか、という事がわかる。それによってより楽しいゲーム、夢中になれるゲームを作っている」&lt;br&gt;と言っていました。&lt;br&gt;おそらく&lt;br&gt;「どんなゲームだったらどれだけコンプガチャに注ぎ込んでくれるか、どこまでプレイヤーを煽り立てて思考停止の状態にして金をはぎ取れるか」&lt;br&gt;という研究もなされているでしょう。きっとそうに違いありません。だからこそここまで急成長したのですから。&lt;br&gt;&lt;br&gt;コンプガチャの違法性をばっちり指摘されて、プレイヤーたちから&lt;br&gt;「なんだよ！！　違法なゲームで金を巻き上げていたのかよ！！　金返せ！！！」&lt;br&gt;と代金支払い拒否や返還訴訟など起こされると携帯ゲーム業界が総潰れになりますから、そうなる前に&lt;br&gt;「コンプガチャ自主停止。自分たちで決めたことですからこれ以上は追求しないでください」&lt;br&gt;とその部分の非を認めて、追及の手を逃れるように防波堤を立てたんですね。</body>
<timestamp>1337585494</timestamp>
</comment>
<comment>
<username>kikori2660</username>
<body>＞カードの確率を自由に操作していた＜だから、そんなメンド臭い事しないって。最初からメインアイテムの排出確率を下げとけばいいだけの話。それで充分儲けられるの。</body>
<timestamp>1338614338</timestamp>
</comment>
<comment>
<username>しろう</username>
<body>みんなお兄ちゃんを責めないで…(/_;)</body>
<timestamp>1341825595</timestamp>
</comment>
</comments>
</day>
<day date="2012-05-17" title="">
<body>
*gacha_probability*コンプガチャだけじゃない!?　ガチャに潜む確率の罠
twitter をみていたら、こんなツイートが回ってきました。

[twitter:199049818738401280:detail]

たしかに「1% のガチャを 100 回引いたら当たる」と思い込んでしまう人は多そうです。

では、1% のガチャを 100 回引くと、どれぐらいの人が当たり、どれぐらいの人が当たらないのでしょうか。
====
**1% のガチャを 100 回引いて当たらない確率は？
さっそく計算してみましょう。

1 回ガチャを引いて当たらない確率は [tex:\frac{99}{100}] です。当たる確率は [tex:1-\frac{99}{100}] = 1% です。

2 回ガチャを引いたときに、1 度も当たらない確率は [tex:\left(\frac{99}{100}\right)^2] です。つまり、1 回以上当たる確率は [tex:1-\left(\frac{99}{100}\right)^2] = 1.9% となります。

3 回ガチャを引いたときに、1 度も当たらない確率は [tex:\left(\frac{99}{100}\right)^3] です。1 回以上当たる確率は [tex:1-\left(\frac{99}{100}\right)^3] で 2.7% です。

同じように計算していくと、結果はこうなります。

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ケース&lt;/th&gt;&lt;th&gt;まったく当たらない確率&lt;/th&gt;&lt;th&gt;1 回以上当たる確率&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\frac{99}{100}=99.0%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1.0%&lt;/td&gt;&lt;/th&gt;
&lt;tr&gt;&lt;td&gt;2 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99}{100}\right)^2=98.1%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1.9%&lt;/td&gt;&lt;/th&gt;
&lt;tr&gt;&lt;td&gt;3 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99}{100}\right)^3=97.3%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;2.7%&lt;/td&gt;&lt;/th&gt;
&lt;tr&gt;&lt;td class=&quot;center&quot;&gt;:&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;:&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;:&lt;/td&gt;&lt;/th&gt;
&lt;tr&gt;&lt;td&gt;100 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99}{100}\right)^{100}=36.6%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;63.4%&lt;/td&gt;&lt;/th&gt;
&lt;/table&gt;&lt;


&lt;strong&gt;1% のガチャを 100 回引いて 1 度も当たらない人は36.6%&lt;/strong&gt;います。

当たらない人が意外に多いように感じませんか？

確率 1% は「100 回引けば必ず 1 回当たる」を意味するのではなく、「平均すると100 回に 1 回は出る」ことを意味します。100 回引いて 2 回も 3 回も当たる人がいる一方で、36.6% の人は 1 つも当たらずに終わってしまいます。


では、100 回以降も引き続けたとき、当たらない人の割合はどのように変わっていくのでしょうか。

グラフを描いてみました。

&gt;&lt;center&gt;&lt;img src=&quot;http://img.f.hatena.ne.jp/images/fotolife/n/nitoyon/20120517/20120517021601.png&quot;&gt;&lt;/center&gt;&lt;

グラフから面白い性質が読み取れます。
- 1% のガチャを70 回ほど引いたところで半数の人は 1 度は当たる
- 1% のガチャを 100 回引いても 36.6% の人は当たりが出ない
- 1% のガチャを 200 回引いても 13.4% の人は当たりが出ない
- 1% のガチャを 300 回引いても 4.9% の人は当たりが出ない

20 人に1人は 300 回引いても当たりが出ません。これは恐怖です。

**確率を変えて見えてくる 36% の不思議
ここまで、1% のガチャで調べてきましたが、ガチャの確率をいろいろ変えて計算してみましょう。

&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;ケース&lt;/th&gt;&lt;th&gt;まったく当たらない確率&lt;/th&gt;&lt;th&gt;1 回以上当たる確率&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;20% のガチャを 5 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{80}{100}\right)^5=32.8%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;67.2%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;10% のガチャを 10 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{90}{100}\right)^{10}=34.9%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;65.1%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5% のガチャを 20 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{95}{100}\right)^{20}=35.8%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;64.1%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1% のガチャを 100 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99}{100}\right)^{100}=36.6%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;63.4%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.5% のガチャを 200 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99.5}{100}\right)^{200}=36.7%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;63.3%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.1% のガチャを 1000 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99.9}{100}\right)^{1000}=36.7%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;63.3%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0.01% のガチャを 10000 回引いたとき&lt;/td&gt;&lt;td class=&quot;center&quot;&gt;[tex:\left(\frac{99.99}{100}\right)^{10000}=36.8%]&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;63.2%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;

あれ？　ガチャの確率が 1% 以下だと、
- まったく当たらない確率: 36.X%
- 1 回以上当たる確率: 63.X%
とほとんど同じ値です。

この不思議な性質は、パチンコをやる人には比較的知られている数字のようです。
&gt;http://pachitop.seesaa.net/article/36072620.html:title=パチンコのはまりと初当たり確率の関係:パチンコ、負けない立ち回りと確率の密接な関係&gt;
この&lt;strong&gt;63%という数字はとても不思議な数字&lt;/strong&gt;です。パチンコ台にはデジハネ（ハネデジと記載してい雑誌もあります）のように初当たり確率pが1/100前後の台から、エヴァンゲリオンのように1/400くらいの台まで様々な台がありますが、この数式で計算すると&lt;strong&gt;どんなスペックのパチンコ台でも1/p回転以内に初当たりが引ける確率は必ず63%&lt;/strong&gt;になります。
&lt;&lt;

「36% の謎」。気になりますよね。高校数学を使って解き明かしてみましょう。

***36% の謎を解く (高校3年生向け)
ここからは高校 3 年生の知識が必要になるので、少し難しくなります。（数学が苦手な人は飛ばしてください）

1% のガチャを 100 回引いて、一度も当たらない確率は [tex:\left(1-\frac{1}{100}\right)^{100}] です。

0.1% のガチャを 1000 回引いて、1度も当たらない確率は [tex:\left(1-\frac{1}{1000}\right)^{1000}] です。

これを一般化すると、次のようになります。
&gt;&gt;
確率 1/n のガチャを n 回引く確率いて 1 度も当たらない確率は [tex:\left(1-\frac{1}{n}\right)^{n}]
&lt;&lt;

n を大きくしていったときの、
&gt;&lt;center&gt;[tex:\lim_{n\right\infty}\left(1-\frac{1}{n}\right)^{n}]&lt;/center&gt;&lt;
が求めたい値です。


ところで、指数関数 [tex:e^x] を原点で微分すると [tex:\lim_{t\right0}\frac{e^t-1}{t}=1] となります。ここに [tex:t=\log\left(1%2B\frac{a}{n}\right)] を代入すると、
&gt;&lt;center&gt;[tex:\lim_{n\right\infty}\left(1%2B\frac{a}{n}\right)^n=e^a]&lt;/center&gt;&lt;
という式を得ます。

この式に a = -1 を代入すると、
&gt;&lt;center&gt;[tex:\lim_{n\right\infty}\left(1-\frac{1}{n}\right)^{n}=\frac{1}{e}=0.367879...]&lt;/center&gt;&lt;
となります。


はい、以上で 36% の正体が分かりました。&lt;strong&gt;1 / e&lt;/strong&gt; だったのです（e は自然対数の底 2.71828...)。

こんなところで、自然対数が出てくるのが不思議ですね。

同じ計算は複利計算にも応用できます。例えば、年利 1% で 100 年運用すると、資産はほぼ e 倍になります。

**まとめ
「1% のガチャを 100 回引いても 36% の人は当たらない」ことが分かりました。

確率を変えて計算したところ、「1/n の確率のガチャを n 回引いても 36% の人は当たらない」(n≧100)という性質があることが分かりました。

この「36%」の罠は、パチンコにも存在します。パチンコとガチャが「36%」の罠でつながりました。

一方は法律で 18 歳未満は禁止されていて、ギャンブルであると世間では認知されていますが、もう一方は「ゲーム」であり、年齢制限はありません。

パチンコと似ているからといって、すぐに「賭博だ」「違法だ」とはなりません。「36%」の罠は、自然界や多くのゲームに潜んでいます。

ただ、最初に紹介した、
[twitter:199049818738401280:detail]
というツイートは、ギャンブル慣れしていない大人や学生にギャンブル的なゲームを提供している状況を象徴しているように思えます。


※コンプガチャについても記事を書いていますので、興味のある方はどうぞ!!! → [http://d.hatena.ne.jp/nitoyon/20120511/comp_gacha_probability:title]

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20120511/comp_gacha_probability:title]
-[http://d.hatena.ne.jp/nitoyon/20120420/uncopyable:title]
-[http://d.hatena.ne.jp/nitoyon/20120306/inexpensive_moving:title]
-[http://d.hatena.ne.jp/nitoyon/20120214/original_shachihata:title]
-[http://d.hatena.ne.jp/nitoyon/20090415/hokkaido:title]
&gt;&lt;/div&gt;&lt;
</body>
<comments>
<comment>
<username>risuo</username>
<body>こんにちは。&lt;br&gt;記事の方、楽しく拝見させていただきました。&lt;br&gt;書いてあることは正しいと思いますが、１００回ガチャやって１％が２回以上出る可能性もあり、結局期待値は１になることを一応書いておいた方がいいのでは、と思いました。&lt;br&gt;これだと単なるネガキャンな気がするので</body>
<timestamp>1337219148</timestamp>
</comment>
<comment>
<username>risuo</username>
<body>すいません、よく読んだら書いてました。無視してください</body>
<timestamp>1337219238</timestamp>
</comment>
<comment>
<username>kari</username>
<body>パチンコで飯を食っていた知人が良く言ってました。&lt;br&gt;「確率の３倍はハマる覚悟はしておけ。」と。&lt;br&gt;数学とか確率とか全然知らない彼が実体験から出した数字です。&lt;br&gt;グラフの曲線を見ると、ナルホドと感じるものがあります。</body>
<timestamp>1337260944</timestamp>
</comment>
<comment>
<username>tech</username>
<body>-------------------------------------------------&lt;br&gt;確率を変えて計算したところ、「1/n の確率のガチャを n 回引いても 36% の人は当たらない」(n≧100)という性質があることが分かりました。&lt;br&gt;-------------------------------------------------&lt;br&gt;は間違っていると思います。&lt;br&gt;表が少し恣意的で、下記のように試行回数を揃えたものを提示すべきです。&lt;br&gt;&lt;br&gt;0.5% のガチャを 100 回引いたとき		60.5% 当たらない。&lt;br&gt;0.1% のガチャを 100 回引いたとき		90.5% 当たらない。&lt;br&gt;0.01% のガチャを 100 回引いたとき		99.0% 当たらない。&lt;br&gt;&lt;br&gt;つまり、確率によって、36%に収束する平均試行回数は確実に変わるはずです。&lt;br&gt;現状、ガチャが問題視されているのは、この確率を変動させているのでは？という疑惑があるからだと思います。</body>
<timestamp>1337358994</timestamp>
</comment>
<comment>
<username>test</username>
<body>&gt;techさん&lt;br&gt;この記事の構成上間違っていないと思いますよ。&lt;br&gt;nitoyonさんは「1/100の確率で起こることは100回やりゃ1回は起こるんじゃねーの？」という誤解から&lt;br&gt;だいたい36%は1回も起こらないよということを示し、それをnで一般化しnに具体的な値をいれてnを変えてみた場合でも&lt;br&gt;みんなだいたい36%付近になることとその根拠を示してるわけです。&lt;br&gt;なのでtechさんのコメントの様に試行回数を固定してしまっては「1/nの確率でn回行なっても1回は起きるってことじゃないよ」&lt;br&gt;「そしてn回やっても36%ぐらいは1回も起きないよ」という記事の流れには合わないと思います。&lt;br&gt;もちろん起こる確率と固定した試行回数からどの位の確率で当たるか当たらないかを計算しそれによってガチャをするか決める&lt;br&gt;的な記事の流れならtechさんのコメント通りですが。</body>
<timestamp>1337388711</timestamp>
</comment>
<comment>
<username>tech</username>
<body>あーなるほど。でしたらそうですね。&lt;br&gt;多分私とは前提の部分が違ってるっぽいです。&lt;br&gt;確率を明示しないのは顧客対応の問題ではなく、変動させてるからできないのでは？というのが私の想定です。</body>
<timestamp>1337401283</timestamp>
</comment>
</comments>
</day>
<day date="2012-05-24" title="">
<body>
*stereoscopic_maps*飛び出る Google マップを作ってみた
あまり知られていないけど、Google マップには &lt;a href=&quot;http://support.google.com/maps/bin/answer.py?hl=ja&amp;answer=1630790&quot;&gt;MapsGL&lt;/a&gt; というのがあって一部の建物が 3D 表示になったりする。

といっても Google Earth のように角度を変えて表示したりはできないんだけど、地図をスクロールすると高い建物の傾き具合が変化する。この表示方法のことを、Google では「parallax (視差効果)」と&lt;a href=&quot;http://google-latlong.blogspot.jp/2012/04/see-3d-buildings-in-whole-new-way-with.html&quot;&gt;呼んでいる&lt;/a&gt;ようだ。

「視差」という言葉で思い出すのは&lt;strong&gt;立体視&lt;/strong&gt;。

MapsGL の視差効果を使えば、立体視を作れそう！

試しに作ってみた。
====
**飛び出る東京都庁
どうせなら高いビルを立体視したい。思いついたのは西新宿のオフィス街。

その中でもひときわ目立つ &lt;a href=&quot;http://maps.google.com/maps?hl=en&amp;ll=35.689098,139.69359&amp;spn=0.003438,0.008256&amp;t=v&amp;z=18&amp;vector=1&quot;&gt;東京都庁&lt;/a&gt;で試してみた。

***平行法
&gt;&lt;center&gt;[f:id:nitoyon:20120524021445p:image]&lt;/center&gt;&lt;

***交差法
&gt;&lt;center&gt;[f:id:nitoyon:20120524021446p:image]&lt;/center&gt;&lt;

**飛び出るビッグベン
お次は、ロンドンの &lt;a href=&quot;http://maps.google.com/maps?hl=en&amp;ll=51.49996,-0.124205&amp;spn=0.004091,0.005493&amp;t=v&amp;z=18&amp;vector=1&quot;&gt;ビッグ・ベン&lt;/a&gt;。複雑な建物の構造が再現されているので、なかなかいい立体感だ。

***平行法
&gt;&lt;center&gt;[f:id:nitoyon:20120524021442p:image]&lt;/center&gt;&lt;

***交差法
&gt;&lt;center&gt;[f:id:nitoyon:20120524021443p:image]&lt;/center&gt;&lt;

**浮き上がりましたか？
それなりに立体にみえて面白い。本当はもっといっぱい作りたかったけど、2 個で力尽きた。

作る手順はこんな感じ。
+ MapsGL の地図で適当な建物を探す。
+ 画面をキャプチャする。
+ キーボードで左右どちらかに少しずらす。
+ もう一枚キャプチャする。
+ 2 つの画像を横に並べる。

ただ、手作業でやるのは面倒だ。

MapGL 版の Google マップが API から使えるようになったら、「Google マップ 立体視ビューワー」のようなものを作って自動化してみたいところ。ただ、MapsGL は WebGL 技術を利用していて、WebGL は Internet Explorer では利用できないという状況から、MapsGL が今後、どういう運命をたどっていくか、先行き不透明ではある。

&gt;&lt;div class=&quot;seealso&quot;&gt;&lt;
**あわせてどうぞ
-[http://d.hatena.ne.jp/nitoyon/20120228/why_google_still_uses_flash:title]
-[http://d.hatena.ne.jp/nitoyon/20110907/end_of_maps_api_for_flash:title]
-[http://d.hatena.ne.jp/nitoyon/20110426/messages_for_japan_design:title]
-[http://d.hatena.ne.jp/nitoyon/20110228/diorama_google_maps:title]
-[http://tech.nitoyon.com/javascript/application/racing/1/:title]
&gt;&lt;/div&gt;&lt;
</body>
</day>
<day date="2012-06-27" title="">
<body>
*english_blog_renewal*英語ブログを新調した話と移転計画
放置していた&lt;a href=&quot;http://tech.nitoyon.com/en/blog/&quot;&gt;英語ブログ&lt;/a&gt;をこのブログと同じデザインに統一した。

英語ブログ、以前は MovableType を使ってたんだけど、いろいろ面倒になったので Jekyll で作り直した。Jekyll は Github Pages に使われている静的コンテンツ ジェネレータ。Ruby で作られていて、コードはシンプル、プラグイン機構もあるので、カスタマイズしやすい。

Jekyll については次のページが分かりやすかった。
-[http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm:title=Big Sky :: Jekyllで始める簡単ブログ]

ソースコードは https://github.com/nitoyon/tech.nitoyon.com で公開している。

**このブログも移動させようと準備中
せっかく英語ブログも新調したので、このブログも http://tech.nitoyon.com/ja/blog/ あたりに移動させようと準備している。
====
理由としては色々あるんだけど、ざっと挙げると・・・

-CSS3 でブログのデザインを&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120313/newdesign2012&quot;&gt;新しくした&lt;/a&gt;のに、はてなダイアリーは &lt;code&gt;DOCTYPE&lt;/code&gt; が互換モードになっている。つまり、IE9 で CSS3 が有効にならない。
-はてなブログも気にはなるんだけど、
--もう一回最初から進化に付き合う気にはなれない。システムの制約で新しいことを試せないのが悲しい。
--スマートフォン版のデザインをカスタマイズできない。 いま流行のレスポンシブ Web デザインをやってみたい。
--AdSense の位置をいろいろ試してみたい。コピペできない文章のすぐ下に AdSense 置いたら普段の倍ぐらいの RPM（収益/PV）になって驚いた。そのあたりのノウハウも身につけてみたい。

どうせ移転するなら過去の記事も全部移動させたい。しかし、数百件の過去記事を手で Markdown に変換するのは嫌だ。そこで、Ruby で「はてな記法」を扱える hparser を組み込もうとしている。ただ、自分が使ってる記法がサポートされていないものがあったので、hparser 本体にも手を入れたりして、なかなかの大作業になっている。

やっかいなのが twitter 記法と amazon 記法。この 2 つについては Web サービスへのリクエストが必要になるので、リクエスト結果をキャッシュする仕組みもほしくなる。

また、Jekyll で数百の記事をパブリッシュすると完了までに時間がかかりすぎるので、ここにも何らかのキャッシュが必要になる。コメントの扱いも難しい。静的コンテンツなので facebook なり DISQUS を使うことになるんだろうか。このあたりの外部サービスによって変化する空気感も気になる。


以上のように、最近、はてなダイアリーの劣化コピーを作りにいそしんでいる。こうやって一つ一つ作業をこなしていると、はてなダイアリーがいかに便利だったかをあらためて実感することにもなる。

奮闘中の様子は https://github.com/nitoyon/tech.nitoyon.com を見れば分かるようになっているので、興味がある人はウォッチしてみてほしい。いまは楽しんで作っているけど、途中で飽きて、しれっとはてなダイアリーで書き続けているかもしれない・・・。
</body>
</day>
<day date="2012-07-31" title="">
<body>
*disqus_comment_import*DISQUS へのコメントのインポートが意外に面倒
更新期間が開いてしまったが、ブログの[http://d.hatena.ne.jp/nitoyon/20120627/english_blog_renewal:title=移転計画]を少しずつ進めている。

おおよその過去記事の表示は問題なくなったところであり、もう間もなく移転できるところまで来ているんだけど、コメント欄の移行で手間取っている。

新生ブログのコメント欄には&lt;a href=&quot;http://disqus.com/&quot;&gt;DISQUS&lt;/a&gt;を採用することを検討している。DISQUS はコメント欄の請負サービスとしては最大手だろう。英語圏では CNN や Time、MLB.com などが、日本では &lt;a href=&quot;http://jp.techcrunch.com/&quot;&gt;TechCrunch JAPAN&lt;/a&gt; などが採用している。

アカウント登録して、JavaScript を貼り付けるだけで高機能なコメント欄ができあがるので、気軽で便利なのである。

**インポートの戦略
ただ、今回は既存のブログがあるので、「JavaScript を貼って、はい、終わり」とはいかない。

過去のコメントをインポートしたいのである。

幸い、DISQUS にはインポート機能がある。WordPress や Blogger、MovableType からのインポートはもちろん、&lt;a href=&quot;http://help.disqus.com/customer/portal/articles/472150-custom-xml-import-format&quot;&gt;特定の XML フォーマット&lt;/a&gt;に従ってコメントを抽出すれば、任意のサービスからのインポートも可能になっている。

なるほど、これを使えば一件落着、と思って手を出してみた。


今回のインポート元は
-日本語ブログ: はてなダイアリー
-英語ブログ: MovableType 3.33
の２つ。

MovableType については DISQUS 側でエクスポートのためのプラグインが用意されている。しかし、よく見てみると MovableType 4.X 用しか用意されていない。3.33 でも動くのかもしれないが、MovableType が面倒になって移転しようとしているので、このためだけにプラグインを入れたり、バージョンアップしたりはしたくない。

一方、はてなダイアリーは MovableType 形式でのエクスポート機能がある。

ということは、両方のブログから MovableType のフォーマットでコメントを吐き出すことはできる。

あとは「MovableType のフォーマット → DISQUS インポート フォーマットへの変換スクリプト」を書けば、両方のブログから DISQUS にインポートできるはずだ。

**インポート 待ち時間の罠
そんなわけで、せっせとスクリプトを&lt;a href=&quot;https://github.com/nitoyon/tech.nitoyon.com/blob/master/_scripts/convert_mt_to_disqus.rb&quot;&gt;書いた&lt;/a&gt;。ただし、MovableType フォーマットには URL が含まれていないので、手動で XML に追記した。英語ブログには 2 つの記事にしかコメントがついてないので、まずはこれでよい。日本語ブログをインポートするときには、自動化で悩むことにする。

ためしにインポートしてみたら、
&gt;&gt;
Imports may take up to 24 hours to complete.
&lt;&lt;
と表示される。日本語訳すると「インポート作業は 24 時間かかるかもしれないよ」。

さすがにそんなにかかるわけはないだろう、と思ったものの、実際に 1 日ぐらいかかった。さらに、Importer に遅れが生じていときには、1 日以上待たされることもあった。

アップロードして、結果が分かるのが 1 日後なのである。XML にミスがあって、インポートに失敗した場合には
-1 日目: アップロード
-2 日目: うまくいってなかったことが分かる。修正してアップロード
-3 日目: 成功していたことが分かる
と、わずか 1 ミスで 3 日かかってしまうのだ・・・。

ちなみに、自分のインポートの進捗状況は http://import.disqus.com、サービス全体 Importer の動作状況は http://status.disqus.com で確認できるようになっている。

(追記 2012/08/04) 再度、やってみたところ、数分以内にインポートが終了した。たまたま Importer の調子が悪かったようだ。

**コメント フォーマットの CDATA にやられる
XML の作成については、基本的に [http://help.disqus.com/customer/portal/articles/472150-custom-xml-import-format:title=DISQUS - Custom XML Import Format] に従えばいい。

たとえばコメント本文は
&gt;|xml|
  &lt;!-- comment body; use cdata; html allowed (though will be formatted to DISQUS specs) --&gt;
  &lt;wp:comment_content&gt;&lt;![CDATA[Hello world]]&gt;&lt;/wp:comment_content&gt;
||&lt;
のような形式で書くことになっている。

仕様を読んだつもりであったのだが「CDATA を使え」を見逃していた。

つまり、本当は CDATA を使って
&gt;|xml|
  &lt;wp:comment_content&gt;&lt;![CDATA[I'm nitoyon]]&gt;&lt;/wp:comment_content&gt;
||&lt;
と書くべきところを、
&gt;|xml|
  &lt;wp:comment_content&gt;I&amp;apos;m nitoyon&lt;/wp:comment_content&gt;
||&lt;
としていた。

まっとうな XML パーサーを使っていれば、&lt;code&gt;&amp;amp;apos;&lt;/code&gt; はシングルクオートになるはずなのだが、インポート結果を見てみると、&lt;code&gt;I&amp;amp;aposm nitoyon&lt;/code&gt; となっていた・・・。

インポート後にコメントを編集はできるのだが、コメントの末尾に「(Edited by a moderator)」と表示されてしまう。これでは印象が悪いので、結局最初からやり直すことにした。

やりなおしすると、当然、1 日待たねばならない。いま、それを待っているところである・・・。

**まとめ
DISQUS のインポートは用意周到に。締め切りのあるケースではやりたくない作業である。

</body>
</day>
<day date="2012-08-27" title="">
<body>
*hatena_blog*暫定で「はてなブログ」に移転した
※まだ現在いじり中。。。

&lt;a href=&quot;http://d.hatena.ne.jp/nitoyon/20120627/english_blog_renewal&quot;&gt;以前&lt;/a&gt;、「はてなブログは使う気ないよー」みたいなことを書いたにも関わらず、はてなブログに引っ越してみました。

これに従って、URL は http://d.hatena.ne.jp/nitoyon/ から http://tech2.nitoyon.com/ に変更になりました。旧 URL へのアクセスはすべて自動的にリダイレクトされます。

**今回の移転の理由
将来的に、tech.nitoyon.com にて自前でホスティングしたいという夢は捨てていません。

ただ、その前に、はてなブログの有料プランを介在しておくことで
- 旧 URL へのアクセスが、独自ドメインの URL にリダイレクトされる
- はてなダイアリー上のページランクを新しい URL に引き継ぐことができる
- はてなブックマーク数も新しいドメインに引き継ぐことができる
というメリットを得られます。

本当なら tech2.nitoyon.com という中途半端なドメインを使わずに、直接 tech.nitoyon.com に移転したかったのですが、tech.nitoyon.com にはブログ以外のコンテンツがいくつか存在しています。その状態で tech.nitoyon.com の DNS の向き先を「はてなブログ」に向けてしまうと、既存のコンテンツが閲覧できなくなって悲しいわけです。移転先のドメインに何もコンテンツが存在していないのなら、直接、新しい URL にリダイレクトさせたと思います。そうすれば、後述する「次の移転」で URL が変わることはないので、よりハッピーだったでしょう。移転先を新しいサブドメイン名にしてもよかったのですが、tech.nitoyon.com というドメインに思い入れがあるので仕方ありません。

もう 1 つ、ひどい方法として、リダイレクトのためだけに「はてなブログ」の有料プランを使う方法も考えられます。移転するリダイレクトの設定だけしておいて、DNS の向き先を「はてなブログ」にしない、という作戦も考えられたのですが、そもそも動くのか分からないです。(はてなブログでリダイレクト先が存在しないなら xxxx.hatenablog.com にリダイレクト先を変えるような実装をしているかもしれない。実際、ドメインの確認ができてない時点で xxxx.hatenablog.com にアクセスしても、独自ドメインに転送してくれない)

何よりも、せっかく有料プランにするので、すこし試してみたい気持ちもありました。

ということで、いったん「はてなブログ」に引っ越すことにしました。

**すぐにやってくる次の移転計画
このあとの計画は次のようになります。
+ Google の検索結果が新 URL(tech2.nitoyon.com)になるまでじっと待つ。
+ 自分のサーバーで tech.nitoyon.com に移転先のコンテンツを準備する。
+ 自分のサーバーで tech2.nitoyon.com を tech.nitoyon.com にリダイレクトするように設定する。
+ tech2.nitoyon.com の DNS の向き先を「はてなブログ」から「自分のサーバー」に移動する。
+ d.hatena.ne.jp/nitoyon/ の各記事を「移転先はこちら」といった単純なリンクに書き換える。
+ はてなブログのリダイレクト機能を切る。(d.hatena.ne.jp/nitoyon → tech2.nitoyon.com にリダイレクトされなくなる)
+ はてなブログの有料プランを解約する。

このようにすることで、
- d.hatena.ne.jp/nitoyon/ を開いた人 → 移転先のリンクが表示される。
- tech2.nitoyon.com を開いた人 → 自動的にリダイレクトされる。
という動作になるはずだと信じています。

**はてなブログを使ってみて
ということで、いまさらながらに「はてなブログ」を使ってみているわけですが、作り直しただけはあって、インターフェースもすっきりしていて使いやすいですね。

</body>
</day>
</diary>

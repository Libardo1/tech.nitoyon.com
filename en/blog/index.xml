<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>TECH-NI Blog</title>
		<link>http://tech.nitoyon.com/en/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>en</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Tue, 09 Jul 2013 01:42:40 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/en/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>Use symlinks in git difftool --dir-diff on Windows</title>
			<link>http://tech.nitoyon.com/en/blog/2013/07/09/symlink-dir-diff-on-windows/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/07/09/symlink-dir-diff-on-windows/</guid>
			<pubDate>Tue, 09 Jul 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I like <code>git difftool --dir-diff</code> because it checks out the modified files to a temporary directory and executes diff tool with directory pathes.</p>

<p>On Unix and MacOS, <code>git difftool --dir-diff</code> create a symbolic link to the working directory if a right-hand file has the same SHA1 as the file in the working directory.  It&#39;s very useful when we modify right-hand files with a difftool.</p>

<p>On Windows, instead of creating symbolic links, <code>git difftool --dir-diff</code> copy back right-hand files to working directory after difftool program exits.  I want to use symlinks on Git for Windows like Unix and MacOS.</p>

<h1>Quick Hack Patch</h1>

<p>Environment: Git for Windows 1.8.3 and Windows 7 (64bit).</p>

<p>Patch for <code>C:\Program Files (x86)\Git\libexec\git-core\git-difftool</code>.</p>
<div class="highlight"><pre><code class="diff language-diff" data-lang="diff">--- git-difftool    Sun Jun  2 11:28:06 2013
+++ git-difftool    Tue Jul  9 00:42:02 2013
@@ -283,7 +283,7 @@
            exit_cleanup($tmpdir, 1);
        }
        if ($symlinks) {
-           symlink(&quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
+           !system(&quot;git&quot;, &quot;mklink&quot;, &quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
            exit_cleanup($tmpdir, 1);
        } else {
            copy(&quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
@@ -448,7 +448,7 @@
    my $indices_loaded = 0;

    for my $file (@worktree) {
-       next if $symlinks &amp;&amp; -l &quot;$b/$file&quot;;
+       next if $symlinks;
        next if ! -f &quot;$b/$file&quot;;

        if (!$indices_loaded) {
</code></pre></div>
<p>Save this patch to somewhere, and run GitBash as administrator.</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ cd /c/Program\ Files\ \(x86\)/Git/libexec/git-core/
$ patch &lt; ~/git-difftool.patch
patching file `git-difftool&#39;
</code></pre></div>
<p>Create a file on <code>C:\Program Files (x86)\Git\libexec\git-core\git-mklink</code>:</p>
<div class="highlight"><pre><code class="sh language-sh" data-lang="sh">#!/bin/sh

cmd.exe /c &quot;mklink \&quot;$2\&quot; \&quot;$1\&quot;&quot; &gt; /dev/null
</code></pre></div>
<p>(This script is necessary for converting <code>/tmp/</code> directory to Windows path)</p>

<h1>How to Use</h1>

<p>First, configure difftool on <code>.gitconfig</code>. For example, set <a href="http://winmerge.org/">WinMerge</a> as difftool.</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[diff]
    tool = winmerge
[difftool winmerge]
    path = C:/Program Files (x86)/WinMerge/winmergeu.exe
    cmd = \&quot;C:/Program Files (x86)/WinMerge/winmergeu.exe\&quot; -r -u \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;
</code></pre></div>
<p>Run GitBash as an administrator, and enter following command.</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git difftool -d --symlinks [&lt;commit&gt; [&lt;commit&gt;]]
</code></pre></div>
<p>(On Windows, administrator privileges is required to create symbolic links)</p>

<p>If you want, create an alias on <code>.gitconfig</code>.</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[alias]
    d = difftool -d --symlinks
</code></pre></div>
<p>Enjoy.</p>
]]></description>
		</item>

		<item>
			<title>Jekyll: Use Grunt instead of --watch option</title>
			<link>http://tech.nitoyon.com/en/blog/2013/06/25/jekyll-grunt/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/06/25/jekyll-grunt/</guid>
			<pubDate>Tue, 25 Jun 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I&#39;m using <a href="https://github.com/mojombo/jekyll">Jekyll</a> for building my site.  When I write a new entry, I have executed <code>jekyll --auto</code>. But I noticed that ruby consumes up to 25% of CPU on my quad core PC.</p>

<p>This problem is caused by <code>directory_watcher</code> module. It executes <code>File::Stat()</code> on all files under the given directory every one second! It works fine when the number of files is small, but as it grow up, it begins wasting our CPU.</p>

<p>For example, my site has over 600+ posts by which Jekyll generates 900 files. And more, there are 5000 files under <code>.git</code> dir. Suprisingly, Jekyll ~0.12 watches all files under the current directory, which means that it execute stat to these 6,500 files every one second.</p>

<p>Jekyll 1.0&#39;s <code>jekyll build --watch</code> doesn&#39;t watch <code>.git</code> and <code>_site</code> directory. Despite of such improvement, ruby still uses up to 10% of CPU.</p>

<p>So I decided to use <a href="http://gruntjs.com/">Grunt</a> instead of using <code>--watch</code> (or <code>--auto</code>) option.</p>

<h1>Grunt config files</h1>

<p>I&#39;m use following versions:</p>

<ul>
<li>Jekyll 1.0.3</li>
<li>Grunt 0.4.1

<ul>
<li><code>grunt-shell-spawn</code> plugin</li>
<li><code>grunt-contrib-watch</code> plugin</li>
</ul></li>
</ul>

<p>At first, I used <code>grunt-jekyll</code> instead of <code>grunt-shell-spawn</code>, but <code>grunt-jekyll</code> plugin doesn&#39;t show Jekyll&#39;s output until it exits.</p>

<p>See <a href="http://gruntjs.com/getting-started">Getting started - Grunt</a> to setup Grunt.</p>

<p>Here is my <code>package.json</code> and <code>Gruntfile.js</code>.</p>

<h2>package.json</h2>
<div class="highlight"><pre><code class="json language-json" data-lang="json">{
  &quot;name&quot;: &quot;tech-ni&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;devDependencies&quot;: {
    &quot;grunt&quot;: &quot;~0.4.1&quot;,
    &quot;grunt-shell-spawn&quot;: &quot;~0.2.4&quot;,
    &quot;grunt-contrib-watch&quot;: &quot;~0.4.4&quot;
  }
}
</code></pre></div>
<h2>Gruntfile.js</h2>
<div class="highlight"><pre><code class="js language-js" data-lang="js">module.exports = function(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(&#39;package.json&#39;),
    shell: {
      jekyll: {
        command: &#39;jekyll build&#39;,
        options: {
          async: false
        }
      }
    },
    watch: {
      jekyll: {
        files: [&#39;_posts/**/*.md&#39;, &#39;_layout/*.html&#39;, &#39;_includes/*.html&#39;],
        tasks: [&#39;shell:jekyll&#39;]
      }
    }
  });

  grunt.loadNpmTasks(&#39;grunt-shell-spawn&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);

  grunt.registerTask(&#39;default&#39;, [&#39;shell:jekyll&#39;]);
};
</code></pre></div>
<p>(If you&#39;re using Jekyll ~0.12, replace <code>jekyll build</code> to <code>jekyll</code>)</p>

<h1>How to Use</h1>

<p>By entering <code>grunt watch</code>, it starts watching files. When some posts or HTML files are modified, grunt executes <code>jekyll build</code>.</p>

<p>But CPU usage is not 0%. It turns out that <code>grunt-contrib-watch</code> doesn&#39;t use native watch API -- <code>fs.watch()</code>. It uses <code>gaze</code> module which execute <code>fs.statSync()</code> periodically.</p>

<p>Oh!! Nothing changes...</p>

<p>It seems that <code>fs.watch()</code> had many problems such as not reporting filenames on mac and executing <code>fs.stat()</code> became popular. Oh, hell!</p>
]]></description>
		</item>

		<item>
			<title>Bugzilla: Edit bug status using Perl script</title>
			<link>http://tech.nitoyon.com/en/blog/2013/05/17/bugzilla-hack/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/05/17/bugzilla-hack/</guid>
			<pubDate>Fri, 17 May 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I wrote a perl script which adds a comment and modify status of bug in Bugzilla. This script is useful if you want to fix a bug automatically with a commit log.</p>
<div class="highlight"><pre><code class="perl language-perl" data-lang="perl">#!/usr/bin/perl -I/path/to/bugzilla -I/path/to/bugzilla/lib

use strict;
use Bugzilla;
use Bugzilla::User;
use Bugzilla::Status;
use Bugzilla::Bug;
use utf8;

&amp;update_bug(1, &quot;ほげほげ&quot;);

# API document: http://www.bugzilla.org/docs/4.2/en/html/api/
sub update_bug {
    my ($bug_id, $text) = @_;

    # open bug
    my $bug = Bugzilla::Bug-&gt;new($bug_id);
    die $bug-&gt;error if defined $bug-&gt;error;

    # get user
    my $user = Bugzilla::User-&gt;new({name =&gt; &#39;admin@example.com&#39;});
    die &#39;user not found!!!!&#39; unless defined $user;

    # login
    Bugzilla-&gt;set_user($user);

    # comment to the bug
    $bug-&gt;add_comment($text);

    # FIXED
    $bug-&gt;set_bug_status(Bugzilla::Status-&gt;new({name =&gt; &#39;RESOLVED&#39;}),
                         {resolution =&gt; &#39;FIXED&#39;});

    # save to database
    $bug-&gt;update();
}
</code></pre></div>
<p>Tested on Bugzilla 4.2.5.</p>

<p>When you are using Git, call this subroutine from <code>post-receive</code> hook.</p>

<p>Warnings:</p>

<ul>
<li>This script must be executed on the server Bugzilla installed.</li>
<li>I&#39;m using undocumented module, <code>Bugzilla::Bug</code>. At first, I tried to use <code>Bugzilla::WebService::Bug</code> (documented), but it depends on <code>Test/Taint</code> module and my server doesn&#39;t have the module.</li>
</ul>
]]></description>
		</item>

		<item>
			<title>3 ways to specify categories and tags in Jekyll</title>
			<link>http://tech.nitoyon.com/en/blog/2013/04/17/jekyll-pluralize/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/04/17/jekyll-pluralize/</guid>
			<pubDate>Wed, 17 Apr 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>To specify categories and tags, you should write in <a href="https://github.com/mojombo/jekyll/wiki/yaml-front-matter">YAML front matter</a>. It&#39;s so complicated because there are 3 ways to specify it.</p>

<p>This article is targeted on Jekyll 0.12.0.</p>

<h1>(1) Use singular key</h1>

<p>Use singular key (such as <code>category</code> or <code>tag</code>), then we can specify at most 1 category or tag.</p>
<div class="highlight"><pre><code class="yaml language-yaml" data-lang="yaml">---
category: Foo
tag: Bar
</code></pre></div>
<p>In the above example, we specify a category named <code>Foo</code> and a tag named <code>Bar</code>.</p>

<p>Even if we write as follows:</p>
<div class="highlight"><pre><code class="yaml language-yaml" data-lang="yaml">---
category: Foo Bar
tag: Bar, Baz
</code></pre></div>
<p>we&#39;ll get a tag named <code>Foo Bar</code> and a category named <code>Bar, Baz</code>.</p>

<h1>(2) Use string with plural key</h1>

<p>Use plural key (such as <code>categories</code> or <code>tags</code>) and a space-separated string value.</p>
<div class="highlight"><pre><code class="yaml language-yaml" data-lang="yaml">---
categories: Foo Bar
tags: Bar Baz
</code></pre></div>
<p>In the above example, we get 2 categories (<code>Foo</code> and <code>Bar</code>) and 2 tags (<code>Bar</code> and <code>Baz</code>).</p>

<p>We cannot specify name which contains a space character. If you wants, use the next pattern &quot;plural + string array&quot;.</p>

<h1>(3) Use an array of string with plural key</h1>

<p>Use plural key (such as <code>categories</code> and `tags) and an array of string value.</p>
<div class="highlight"><pre><code class="yaml language-yaml" data-lang="yaml">---
categories:
- Foo Bar
- AA,BBB
tags:
- Bar
- Baz, AAA
</code></pre></div>
<p>In the above example, we get 2 categories (<code>Foo Bar</code> and <code>AA,BBB</code>) and 2 tags (<code>Bar Baz</code> and <code>AAA</code>).</p>

<p>We can specify following, but in this case, we cannot specify name which contains a comma character.</p>
<div class="highlight"><pre><code class="yaml language-yaml" data-lang="yaml">---
categories: [Foo Bar, AABBB]
tags: [Bar Baz, AAA]
</code></pre></div>
<h1>Read Jekyll&#39;s source code</h1>

<p>To understand this complecated specification, reading the source code would be helpful.</p>

<p>See <code>Hash#pluralized_array</code> method in <a href="https://github.com/mojombo/jekyll/blob/9d814a4eb7b59ce617569b40a19c3c183fecda33/lib/jekyll/core_ext.rb">lib/jekyll/core_ext.rb</a>.</p>

<p>This method is called like <code>self.data.pluralized_array(&quot;tag&quot;, &quot;tags&quot;)</code>.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">class Hash

  # Read array from the supplied hash favouring the singular key
  # and then the plural key, and handling any nil entries.
  #   +hash+ the hash to read from
  #   +singular_key+ the singular key
  #   +plural_key+ the singular key
  #
  # Returns an array
  def pluralized_array(singular_key, plural_key)
    hash = self
    if hash.has_key?(singular_key)
      array = [hash[singular_key]] if hash[singular_key]
    elsif hash.has_key?(plural_key)
      case hash[plural_key]
      when String
        array = hash[plural_key].split
      when Array
        array = hash[plural_key].compact
      end
    end
    array || []
  end
</code></pre></div>]]></description>
		</item>

		<item>
			<title>LiveReloadX 0.2.0 Released: try include/exclude filter</title>
			<link>http://tech.nitoyon.com/en/blog/2013/03/25/livereloadx0-2-0/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/03/25/livereloadx0-2-0/</guid>
			<pubDate>Mon, 25 Mar 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><a href="http://nitoyon.github.com/livereloadx/">LiveReloadX</a> 0.2.0 is released.</p>

<p>If you want to install, type <code>npm install -g livereloadx</code>. If you have installed older versions, run <code>npm update -g livereloadx</code>.</p>

<p>With older version, if you modifying any files under the monitored directory, browsers are reloaded. It means that running <code>git commit</code> made browsers reloaded.</p>

<p>So, I add a command line options to specify include/exclude filter.</p>

<p>For example, if you want to <code>cache</code> directory not to be watched, specify as follows:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ livereloadx --exclude cache
</code></pre></div>
<p>And more, LiveReloadX 0.2.0 monitors files with extension such as html, shtml, css, js, jpg, gif, png, cgi, php... If you want to watch files with extension <code>ini</code>, run following:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ livereloadx --include &quot;*.ini&quot;
</code></pre></div>
<p>Iinclude/exclude options works like rsync. See FILTER RULES section of rsync manual for details.</p>

<p>Try it now!!</p>
]]></description>
		</item>

	</channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>TECH-NI Blog</title>
		<link>http://tech.nitoyon.com/en/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>en</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Fri, 17 May 2013 01:00:05 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/en/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>Bugzilla: Edit bug status using Perl script</title>
			<link>http://tech.nitoyon.com/en/blog/2013/05/17/bugzilla-hack/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/05/17/bugzilla-hack/</guid>
			<pubDate>Fri, 17 May 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I wrote a perl script which adds a comment and modify status of bug in Bugzilla. This script is useful if you want to fix a bug automatically with a commit log.</p>
<div class="highlight"><pre><code class="perl">#!/usr/bin/perl -I/path/to/bugzilla -I/path/to/bugzilla/lib

use strict;
use Bugzilla;
use Bugzilla::User;
use Bugzilla::Status;
use Bugzilla::Bug;
use utf8;

&amp;update_bug(1, &quot;ほげほげ&quot;);

# API document: http://www.bugzilla.org/docs/4.2/en/html/api/
sub update_bug {
    my ($bug_id, $text) = @_;

    # open bug
    my $bug = Bugzilla::Bug-&gt;new($bug_id);
    die $bug-&gt;error if defined $bug-&gt;error;

    # get user
    my $user = Bugzilla::User-&gt;new({name =&gt; &#39;admin@example.com&#39;});
    die &#39;user not found!!!!&#39; unless defined $user;

    # login
    Bugzilla-&gt;set_user($user);

    # comment to the bug
    $bug-&gt;add_comment($text);

    # FIXED
    $bug-&gt;set_bug_status(Bugzilla::Status-&gt;new({name =&gt; &#39;RESOLVED&#39;}),
                         {resolution =&gt; &#39;FIXED&#39;});

    # save to database
    $bug-&gt;update();
}
</code></pre></div>
<p>Tested on Bugzilla 4.2.5.</p>

<p>When you are using Git, call this subroutine from <code>post-receive</code> hook.</p>

<p>Warnings:</p>

<ul>
<li>This script must be executed on the server Bugzilla installed.</li>
<li>I&#39;m using undocumented module, <code>Bugzilla::Bug</code>. At first, I tried to use <code>Bugzilla::WebService::Bug</code> (documented), but it depends on <code>Test/Taint</code> module and my server doesn&#39;t have the module.</li>
</ul>
]]></description>
		</item>

		<item>
			<title>3 ways to specify categories and tags in Jekyll</title>
			<link>http://tech.nitoyon.com/en/blog/2013/04/17/jekyll-pluralize/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/04/17/jekyll-pluralize/</guid>
			<pubDate>Wed, 17 Apr 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>To specify categories and tags, you should write in <a href="https://github.com/mojombo/jekyll/wiki/yaml-front-matter">YAML front matter</a>. It&#39;s so complicated because there are 3 ways to specify it.</p>

<p>This article is targeted on Jekyll 0.12.0.</p>

<h1>(1) Use singular key</h1>

<p>Use singular key (such as <code>category</code> or <code>tag</code>), then we can specify at most 1 category or tag.</p>
<div class="highlight"><pre><code class="yaml">---
category: Foo
tag: Bar
</code></pre></div>
<p>In the above example, we specify a category named <code>Foo</code> and a tag named <code>Bar</code>.</p>

<p>Even if we write as follows:</p>
<div class="highlight"><pre><code class="yaml">---
category: Foo Bar
tag: Bar, Baz
</code></pre></div>
<p>we&#39;ll get a tag named <code>Foo Bar</code> and a category named <code>Bar, Baz</code>.</p>

<h1>(2) Use string with plural key</h1>

<p>Use plural key (such as <code>categories</code> or <code>tags</code>) and a space-separated string value.</p>
<div class="highlight"><pre><code class="yaml">---
categories: Foo Bar
tags: Bar Baz
</code></pre></div>
<p>In the above example, we get 2 categories (<code>Foo</code> and <code>Bar</code>) and 2 tags (<code>Bar</code> and <code>Baz</code>).</p>

<p>We cannot specify name which contains a space character. If you wants, use the next pattern &quot;plural + string array&quot;.</p>

<h1>(3) Use an array of string with plural key</h1>

<p>Use plural key (such as <code>categories</code> and `tags) and an array of string value.</p>
<div class="highlight"><pre><code class="yaml">---
categories:
- Foo Bar
- AA,BBB
tags:
- Bar
- Baz, AAA
</code></pre></div>
<p>In the above example, we get 2 categories (<code>Foo Bar</code> and <code>AA,BBB</code>) and 2 tags (<code>Bar Baz</code> and <code>AAA</code>).</p>

<p>We can specify following, but in this case, we cannot specify name which contains a comma character.</p>
<div class="highlight"><pre><code class="yaml">---
categories: [Foo Bar, AABBB]
tags: [Bar Baz, AAA]
</code></pre></div>
<h1>Read Jekyll&#39;s source code</h1>

<p>To understand this complecated specification, reading the source code would be helpful.</p>

<p>See <code>Hash#pluralized_array</code> method in <a href="https://github.com/mojombo/jekyll/blob/9d814a4eb7b59ce617569b40a19c3c183fecda33/lib/jekyll/core_ext.rb">lib/jekyll/core_ext.rb</a>.</p>

<p>This method is called like <code>self.data.pluralized_array(&quot;tag&quot;, &quot;tags&quot;)</code>.</p>
<div class="highlight"><pre><code class="ruby">class Hash

  # Read array from the supplied hash favouring the singular key
  # and then the plural key, and handling any nil entries.
  #   +hash+ the hash to read from
  #   +singular_key+ the singular key
  #   +plural_key+ the singular key
  #
  # Returns an array
  def pluralized_array(singular_key, plural_key)
    hash = self
    if hash.has_key?(singular_key)
      array = [hash[singular_key]] if hash[singular_key]
    elsif hash.has_key?(plural_key)
      case hash[plural_key]
      when String
        array = hash[plural_key].split
      when Array
        array = hash[plural_key].compact
      end
    end
    array || []
  end
</code></pre></div>]]></description>
		</item>

		<item>
			<title>LiveReloadX 0.2.0 Released: try include/exclude filter</title>
			<link>http://tech.nitoyon.com/en/blog/2013/03/25/livereloadx0-2-0/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/03/25/livereloadx0-2-0/</guid>
			<pubDate>Mon, 25 Mar 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><a href="http://nitoyon.github.com/livereloadx/">LiveReloadX</a> 0.2.0 is released.</p>

<p>If you want to install, type <code>npm install -g livereloadx</code>. If you have installed older versions, run <code>npm update -g livereloadx</code>.</p>

<p>With older version, if you modifying any files under the monitored directory, browsers are reloaded. It means that running <code>git commit</code> made browsers reloaded.</p>

<p>So, I add a command line options to specify include/exclude filter.</p>

<p>For example, if you want to <code>cache</code> directory not to be watched, specify as follows:</p>
<div class="highlight"><pre><code class="text">$ livereloadx --exclude cache
</code></pre></div>
<p>And more, LiveReloadX 0.2.0 monitors files with extension such as html, shtml, css, js, jpg, gif, png, cgi, php... If you want to watch files with extension <code>ini</code>, run following:</p>
<div class="highlight"><pre><code class="text">$ livereloadx --include &quot;*.ini&quot;
</code></pre></div>
<p>Iinclude/exclude options works like rsync. See FILTER RULES section of rsync manual for details.</p>

<p>Try it now!!</p>
]]></description>
		</item>

		<item>
			<title>LiveReloadX Released: Reload your Browser Automatically!</title>
			<link>http://tech.nitoyon.com/en/blog/2013/02/27/livereloadx/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/02/27/livereloadx/</guid>
			<pubDate>Wed, 27 Feb 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><center><img src="http://farm9.staticflickr.com/8100/8509399251_7056f91a11.jpg" width="500" height="294"></center></p>

<p>When we are developping a web site, we often edit source code and reload a browser. It would be wonderful if browsers are reloaded automatically.</p>

<p>There are some softwares such as <a href="http://incident57.com/codekit/">CodeKit</a> and <a href="http://livereload.com/">LiveReload</a>, but they are GUI tools and not free of charge. So I created a command line tool named <a href="http://nitoyon.github.com/livereloadx/">LiveReloadX</a> based on <a href="http://livereload.com/">LiveReload</a> source code.</p>

<p>LiveReloadX is using Node.js, so it runs on Windows, Mac and Linux. It reloads the browser not only on developping environment but also on iPhone and Android. Of course, free of charge.</p>

<p>See <a href="http://nitoyon.github.com/livereloadx/">LiveReloadX</a> for details!!</p>

<p>You can get source code from <a href="https://github.com/nitoyon/livereloadx">nitoyon/livereloadx - GitHub</a>. It would be a greate pleasure for me if you Star or send me a pull request.</p>
]]></description>
		</item>

		<item>
			<title>IRBWEB - Try Ruby on Your Browser!</title>
			<link>http://tech.nitoyon.com/en/blog/2009/04/05/irbweb-ruby-on-your-browser/</link>
			<guid>http://tech.nitoyon.com/en/blog/2009/04/05/irbweb-ruby-on-your-browser/</guid>
			<pubDate>Sun, 05 Apr 2009 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>One of the annoyances of trying ruby is installing Ruby. IRBWEB let you try it on your browser!</p>

<p>You can enter ruby expression and evaluate it.</p>

<p><center><a href="http://tech.nitoyon.com/irb/"><img src="http://f.hatena.ne.jp/images/fotolife/n/nitoyon/20090406/20090406011151.png" width="450" height="344" border="0"><br>IRBWEB</a></center></p>

<p>It works completely in your browser, so you get the result so quickly.</p>

<h1>Requirements</h1>

<p>The Silverlight 2.0 runtime plug-in required.</p>

<h1>How does it work?</h1>

<p>Silverlight supports DLR(Dynamic Language Runtime) which enables us to execute Ruby and Python on .NET application. IRBWEB is developped based on repl sample included in <a href="http://www.codeplex.com/sdlsdk">Silverlight Dynamic Languages SDK</a> 0.5.0.</p>
]]></description>
		</item>

	</channel>
</rss>
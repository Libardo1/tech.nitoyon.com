<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>TECH-NI Blog</title>
		<link>http://tech.nitoyon.com/en/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>en</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Thu, 07 Jan 2016 03:07:05 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/en/blog/index.xml" rel="self" type="application/rss+xml" />


		<item>
			<title>Generate an animated GIF with Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</link>
			<guid>http://tech.nitoyon.com/en/blog/2016/01/07/go-animated-gif-gen/</guid>
			<pubDate>Thu, 07 Jan 2016 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>This article shows how to generate an animated GIF with Golang in 3 ways.</p>

<ul>
<li>Generate from static images</li>
<li>Generate from video</li>
<li>Generate programatically</li>
</ul>

<h1>Generate from static images</h1>

<p>Let&#39;s make an animated GIF from static images.</p>

<p>Supose that we have following static GIF images:</p>

<p><img src="/ja/blog/2016/01/07/go-animated-gif-gen/g1.gif" width="200" height="200">
<img src="/ja/blog/2016/01/07/go-animated-gif-gen/g2.gif" width="200" height="200">
<img src="/ja/blog/2016/01/07/go-animated-gif-gen/g3.gif" width="200" height="200"></p>

<p>We got:</p>

<p><center><img src="/ja/blog/2016/01/07/go-animated-gif-gen/gopher.gif" width="200" height="200"></center></p>

<p>This animated GIF is generated by following code:</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import &quot;image&quot;
import &quot;image/gif&quot;
import &quot;os&quot;

func main() {
    files := []string{&quot;g1.gif&quot;, &quot;g2.gif&quot;,&quot;g3.gif&quot;, &quot;g2.gif&quot;}

    // load static image and construct outGif
    outGif := &amp;gif.GIF{}
    for _, name := range files {
        f, _ := os.Open(name)
        inGif, _ := gif.Decode(f)
        f.Close()

        outGif.Image = append(outGif.Image, inGif.(*image.Paletted))
        outGif.Delay = append(outGif.Delay, 0)
    }

    // save to out.gif
    f, _ := os.OpenFile(&quot;out.gif&quot;, os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, outGif)
}
</code></pre></div>
<p>Note:</p>

<ul>
<li>Read each frame GIF image with <code>gif.Decode</code>. If we read JPEG images, we have to convert them programatically (<a href="https://github.com/srinathh/goanigiffy">goanigiffy</a> does this by calling <code>gif.Encode</code> and <code>gif.Decode</code>).</li>
<li>Call <code>gif.EncodeAll</code> to save animated GIF.</li>
</ul>

<h1>Convert video to Animated GIF</h1>

<p>Use <a href="http://www.mplayerhq.hu/">MPlayer</a> to extract frames, and create animated GIF with <a href="https://github.com/srinathh/goanigiffy">goanigiffy</a> (see <a href="http://srinathh.github.io/opensource/goanigiffy/">GoAniGiffy</a> for details).</p>

<h1>Programatically</h1>

<p>Let&#39;s generate animated GIF programatically.</p>

<p><center><img src="/ja/blog/2016/01/07/go-animated-gif-gen/rgb.gif" width="240" height="240"></center></p>

<p>Generate <code>[]*image.Paletted</code> programatically and pass it to <code>gif.EncodeAll</code>.</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">    var images []*image.Paletted
    var delays []int

    // create 20 images and draw circles
    for step := 0; step &lt; 20; step++ {
        img := image.NewPaletted(image.Rect(0, 0, w, h), palette)
        images = append(images, img)
        delays = append(delays, 0)

        // drawing code (too long)
    }

    // save to rgb.gif
    f, _ := os.OpenFile(&quot;rgb.gif&quot;, os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })
</code></pre></div>
<p>The entire code is as follows:</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    &quot;image&quot;
    &quot;image/color&quot;
    &quot;image/gif&quot;
    &quot;math&quot;
    &quot;os&quot;
)

type Circle struct {
    X, Y, R float64
}

func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        return 0
    } else {
        return 255
    }
}

func main() {
    var w, h int = 240, 240
    var hw, hh float64 = float64(w / 2), float64(h / 2)
    circles := []*Circle{&amp;Circle{}, &amp;Circle{}, &amp;Circle{}}

    var palette = []color.Color{
        color.RGBA{0x00, 0x00, 0x00, 0xff},
        color.RGBA{0x00, 0x00, 0xff, 0xff},
        color.RGBA{0x00, 0xff, 0x00, 0xff},
        color.RGBA{0x00, 0xff, 0xff, 0xff},
        color.RGBA{0xff, 0x00, 0x00, 0xff},
        color.RGBA{0xff, 0x00, 0xff, 0xff},
        color.RGBA{0xff, 0xff, 0x00, 0xff},
        color.RGBA{0xff, 0xff, 0xff, 0xff},
    }

    var images []*image.Paletted
    var delays []int
    steps := 20
    for step := 0; step &lt; steps; step++ {
        img := image.NewPaletted(image.Rect(0, 0, w, h), palette)
        images = append(images, img)
        delays = append(delays, 0)

        θ := 2.0 * math.Pi / float64(steps) * float64(step)
        for i, circle := range circles {
            θ0 := 2 * math.Pi / 3 * float64(i)
            circle.X = hw - 40*math.Sin(θ0) - 20*math.Sin(θ0+θ)
            circle.Y = hh - 40*math.Cos(θ0) - 20*math.Cos(θ0+θ)
            circle.R = 50
        }

        for x := 0; x &lt; w; x++ {
            for y := 0; y &lt; h; y++ {
                img.Set(x, y, color.RGBA{
                    circles[0].Brightness(float64(x), float64(y)),
                    circles[1].Brightness(float64(x), float64(y)),
                    circles[2].Brightness(float64(x), float64(y)),
                    255,
                })
            }
        }
    }

    f, _ := os.OpenFile(&quot;rgb.gif&quot;, os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    gif.EncodeAll(f, &amp;gif.GIF{
        Image: images,
        Delay: delays,
    })
}
</code></pre></div>
<p>Thank you for reading.</p>
]]></description>
		</item>

		<item>
			<title>Generate an image programmatically with Golang</title>
			<link>http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</link>
			<guid>http://tech.nitoyon.com/en/blog/2015/12/31/go-image-gen/</guid>
			<pubDate>Thu, 31 Dec 2015 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Golang makes it easy to generate an image using image package. We don&#39;t have to build imagemagick nor GD. Just use golang.</p>

<p>But, image package offers us a method for changing color of a pixel. If we want to draw lines or paint colors, we have to use other libraries such as <a href="https://github.com/llgcode/draw2d">draw2d</a>.</p>

<p>This article shows how to generate an image only using standard library.</p>

<h1>Simplest Example</h1>

<p>First, let&#39;s make a simple image.</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import &quot;image&quot;
import &quot;image/color&quot;
import &quot;image/png&quot;
import &quot;os&quot;

func main() {
    // Create an 100 x 50 image
    img := image.NewRGBA(image.Rect(0, 0, 100, 50))

    // Draw a red dot at (2, 3)
    img.Set(2, 3, color.RGBA{255, 0, 0, 255})

    // Save to out.png
    f, _ := os.OpenFile(&quot;out.png&quot;, os.O_WRONLY|os.O_CREATE, 0600)
    defer f.Close()
    png.Encode(f, img)
}
</code></pre></div>
<h1>More Complecated Example</h1>

<p>Then, let&#39;s make more complected image!</p>

<p><center><img src="/ja/blog/2015/12/31/go-image-gen/rgb1.png" width="280" height="240"></center></p>

<p>The code is as follows:</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">package main

import (
    &quot;fmt&quot;
    &quot;image&quot;
    &quot;image/color&quot;
    &quot;image/png&quot;
    &quot;math&quot;
    &quot;os&quot;
)

type Circle struct {
    X, Y, R float64
}

func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        return 0
    } else {
        return 255
    }
}

func main() {
    var w, h int = 280, 240
    var hw, hh float64 = float64(w / 2), float64(h / 2)
    r := 40.0
    θ := 2 * math.Pi / 3
    cr := &amp;Circle{hw - r*math.Sin(0), hh - r*math.Cos(0), 60}
    cg := &amp;Circle{hw - r*math.Sin(θ), hh - r*math.Cos(θ), 60}
    cb := &amp;Circle{hw - r*math.Sin(-θ), hh - r*math.Cos(-θ), 60}

    m := image.NewRGBA(image.Rect(0, 0, w, h))
    for x := 0; x &lt; w; x++ {
        for y := 0; y &lt; h; y++ {
            c := color.RGBA{
                cr.Brightness(float64(x), float64(y)),
                cg.Brightness(float64(x), float64(y)),
                cb.Brightness(float64(x), float64(y)),
                255,
            }
            m.Set(x, y, c)
        }
    }

    f, err := os.OpenFile(&quot;rgb.png&quot;, os.O_WRONLY|os.O_CREATE, 0600)
    if err != nil {
        fmt.Println(err)
        return
    }
    defer f.Close()
    png.Encode(f, m)
}
</code></pre></div>
<p>We define <code>Circle</code> struct, and determine color by calling its <code>Brightness</code> method.</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">c := color.RGBA{
    cr.Brightness(float64(x), float64(y)),
    cg.Brightness(float64(x), float64(y)),
    cb.Brightness(float64(x), float64(y)),
    255,
}
</code></pre></div>
<p><code>Brightness</code> returns <code>255</code> when (x, y) is in red circle and returns <code>0</code> when not.</p>

<h1>Blur Circles</h1>

<p>Finally, let&#39;s blur circles.</p>

<p><center><img src="/ja/blog/2015/12/31/go-image-gen/rgb2.png" width="280" height="240"></center></p>

<p>We only modified <code>return 255</code> to <code>uint8((1 - math.Pow(d, 5)) * 255)</code>.</p>
<div class="highlight"><pre><code class="language-go" data-lang="go">func (c *Circle) Brightness(x, y float64) uint8 {
    var dx, dy float64 = c.X - x, c.Y - y
    d := math.Sqrt(dx*dx+dy*dy) / c.R
    if d &gt; 1 {
        // outside
        return 0
    } else {
        // inside
        return uint8((1 - math.Pow(d, 5)) * 255)
    }
}
</code></pre></div>]]></description>
		</item>

		<item>
			<title>Jenkins: How to change JENKINS_HOME on Windows</title>
			<link>http://tech.nitoyon.com/en/blog/2014/02/25/jenkins-home-win/</link>
			<guid>http://tech.nitoyon.com/en/blog/2014/02/25/jenkins-home-win/</guid>
			<pubDate>Tue, 25 Feb 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>If you install Jenkins using MSI installer, it copies files to <code>C:\Program Files (x86)\jenkins</code> and uses the install directory as <code>JENKINS_HOME</code> (on 64bit machine).</p>

<p>This means that Jenkins stores all data (including plugins, workspace and job data) to <code>C:\Program Files (x86)\jenkins</code>. On windows, it is recommended that application data is stored to <code>ProgramData</code> and <code>AppData</code>. So, I wanted to change <code>JENKINS_HOME</code>.</p>

<p>First, I added <code>JENKINS_HOME</code> to environment value, but it doen&#39;t make any sense. Jenkins prefers the value set on <code>jenkins.xml</code> when we use MSI installer.</p>

<p>Now, let&#39;s change <code>JENKINS_HOME</code> to <code>C:\ProgramData\Jenkins</code> (Jenkins version: 1.550).</p>

<ol>
<li><p>Stop Jenkins service.</p></li>
<li><p>Open <code>jenkins.xml</code> in the install folder, and edit</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml">  &lt;env name=&quot;JENKINS_HOME&quot; value=&quot;%BASE%&quot;/&gt;
</code></pre></div>
<p>as follows:</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml">  &lt;env name=&quot;JENKINS_HOME&quot; value=&quot;%ProgramData%\Jenkins&quot;/&gt;
</code></pre></div></li>
<li><p><strong>Move</strong> all files in install folder <strong>except for</strong> the following files (Don&#39;t copy because it brokes symbolic links in <code>jobs</code> folder):</p>

<ul>
<li><code>jre</code> folder</li>
<li><code>jenkins.err.log</code></li>
<li><code>jenkins.exe</code></li>
<li><code>jenkins.exe.config</code></li>
<li><code>jenkins.out.log</code></li>
<li><code>jenkins.war</code></li>
<li><code>jenkins.war.bak</code></li>
<li><code>jenkins.war.tmp</code></li>
<li><code>jenkins.wrapper.log</code></li>
<li><code>jenkins.xml</code></li>
</ul></li>
<li><p>Start Jenkins service.</p></li>
<li><p>Open <code>http://localhost:8080/systemInfo</code> and check <code>JEKNINS_HOME</code> has been changed.</p></li>
</ol>

<p>Enjoy!</p>
]]></description>
		</item>

		<item>
			<title>Chef Console: avoid multiple ruby problem on Windows</title>
			<link>http://tech.nitoyon.com/en/blog/2014/01/29/chef-win-path/</link>
			<guid>http://tech.nitoyon.com/en/blog/2014/01/29/chef-win-path/</guid>
			<pubDate>Wed, 29 Jan 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>The <a href="http://www.getchef.com/">Chef</a> installer for Windows adds <code>ruby.exe</code> and to <code>PATH</code>. If you have installed ruby environment, which ruby is used when you enter <code>ruby</code> to your MS-DOS prompt? </p>

<p>To avoid such problem, I created a Chef console with a simple bat file.</p>

<h1>Chef adds two folders to PATH</h1>

<p>When you install Chef client (<a href="http://www.getchef.com/chef/install/">http://www.getchef.com/chef/install/</a>), many files are deployed to <code>C:\opscode\chef</code>  and the following 2 folders are added to <code>PATH</code>:</p>

<ul>
<li><p><code>C:\opscode\chef\bin</code></p>

<p>Chef related programs such as <code>chef-solo</code>, <code>knife</code>.</p></li>
<li><p><code>C:\opscode\chef\embedded\bin</code></p>

<p>UNIX related programs such as <code>ruby.exe</code>, <code>perl.exe</code>, <code>ls.exe</code>, <code>cat.exe</code>.</p></li>
</ul>

<h1>Conflicts with existing Ruby environment</h1>

<p>I have <code>ruby.exe</code> in <code>C:\Ruby200-x64\bin</code> which is added to <code>PATH</code>.</p>

<p>Which ruby is used when I run <code>ruby</code> or <code>gem install xxxx</code> from my MS-DOS prompt? </p>

<p>If we first install Ruby and then install Chef, <code>C:\Ruby200-x64\bin\gem</code> is executed.</p>

<p>If we first install Chef and then install Ruby, <code>C:\opscode\chef\embedded\bin\gem</code> is executed.</p>

<p>It&#39;s very confusing.</p>

<h1>Let&#39;s use Chef console</h1>

<p>To solve this problem, I created a &quot;Chef console&quot;.</p>

<h2>1. Create a bat file</h2>

<p>Save following file as <code>C:\opscode\chefenv.bat</code>.</p>
<div class="highlight"><pre><code class="language-bat" data-lang="bat">@ECHO OFF

SET PATH=c:\opscode\chef\bin;c:\opscode\chef\embedded\bin
SET PATH=%PATH%;c:\windows\system32;c:\windows

title Chef Env
chef-solo -v
</code></pre></div>
<h2>2. Create a shortcut file</h2>

<p>Create a shortcut file to this bat.</p>

<ul>
<li>Target: <code>C:\Windows\System32\cmd.exe /K C:\opscode\chefenv.bat</code></li>
<li>Start in: Anywhere. (My document, path to chef repository and so on)</li>
</ul>

<p>(<code>/K</code> means &quot;Carries out the command specified by string and continues.&quot;)</p>

<h1>How to use</h1>

<p>When you double click the shortcut file, a command prompt appears with restricted <code>PATH</code>.</p>

<p><center><img src="http://farm6.staticflickr.com/5527/11980775965_c14b1872a6.jpg" width="500" height="364"></center></p>

<p>You can execute <code>chef-solo</code> and <code>knife</code>.</p>

<p>Now, you can safely remove <code>c:\opscode\chef\bin</code> and <code>C:\opscode\chef\embedded\bin</code> from <code>PATH</code>.</p>

<p>Let&#39;s enjoy!</p>
]]></description>
		</item>

		<item>
			<title>Visualizing K-Means algorithm with D3.js</title>
			<link>http://tech.nitoyon.com/en/blog/2013/11/07/k-means/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/11/07/k-means/</guid>
			<pubDate>Thu, 07 Nov 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>The K-Means algorithm is a popular and simple clustering algorithm. This visualization shows you how it works.</p>

<div id="kmeans">
<div><svg></svg></div>
<div><button id="step">Step</button> <button id="restart" disabled>Restart</button></div>
<fieldset style="display: inline; margin: .8em 0 1em 0; border: 1px solid #999; padding: .5em">
<div><label for="N">N (the number of node):</label><input type="number" id="N" min="2" max="1000" value="100"></div>
<div><label for="K">K (the number of cluster):</label><input type="number" id="K" min="2" max="50" value="5"></div>
<div><button id="reset">New</button></div>
</fieldset>
</div>

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<script src="/ja/blog/2013/11/07/k-means/k-means.js"></script>

<ul>
<li>Click figure or push [Step] button to go to next step.</li>
<li>Push [Restart] button to go back to initialization step.</li>
<li>Push [New] button to start new simulation with given <i>N</i> (the number of nodes) and <i>K</i> (the number of clusters).</li>
<li>Requires modern browsers (tested on IE 10, Firefox 25 and Chrome 30).</li>
</ul>

<h1>What is K-Means</h1>

<p>You can find a detail description at <a href="http://en.wikipedia.org/wiki/K-means_clustering">k-means clustering - Wikipedia, the free encyclopedia</a>, but it&#39;s too complecated to understand.</p>

<p>Here is simpler steps:</p>

<ol>
<li><em>Initialization:</em> Create <i>N</i> nodes (circle) and randomly put initial <i>K</i> cluster (cross).</li>
<li><em>Assignment step:</em> Assign each node (circle) to the nearest cluster (cross).</li>
<li><em>Update step:</em> Each cluster (cross) move to the centroid of its nodes.</li>
<li>Go to step 2.</li>
</ol>

<h1>D3.js and ActionScript 3</h1>

<p>This visualization is JavaScript port of my past work -- <a href="/ja/blog/2009/04/09/kmeans-visualise/">Visualization of K-means algorithm with ActionScript 3 (Japanese only)</a> -- with <a href="http://d3js.org/">D3.js</a>.</p>

<p>I like D3.js&#39;s powerful data binding and animation APIs. It makes my code simple. But Flash shows smoother animations.</p>
]]></description>
		</item>

	</channel>
</rss>
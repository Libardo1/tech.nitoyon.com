<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>TECH-NI Blog</title>
		<link>http://tech.nitoyon.com/en/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>en</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Wed, 29 Jan 2014 23:42:05 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/en/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>Chef Console: avoid multiple ruby problem</title>
			<link>http://tech.nitoyon.com/en/blog/2014/01/29/chef-win-path/</link>
			<guid>http://tech.nitoyon.com/en/blog/2014/01/29/chef-win-path/</guid>
			<pubDate>Wed, 29 Jan 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>The <a href="http://www.getchef.com/">Chef</a> installer for Windows adds <code>ruby.exe</code> and to <code>PATH</code>. If you have installed ruby environment, which ruby is used when you enter <code>ruby</code> to your MS-DOS prompt? </p>

<p>To avoid such problem, I created a Chef console with a simple bat file.</p>

<h1>Chef adds two folders to PATH</h1>

<p>When you install Chef client (<a href="http://www.getchef.com/chef/install/">http://www.getchef.com/chef/install/</a>), many files are deployed to <code>C:\opscode\chef</code>  and the following 2 folders are added to <code>PATH</code>:</p>

<ul>
<li><p><code>C:\opscode\chef\bin</code></p>

<p>Chef related programs such as <code>chef-solo</code>, <code>knife</code>.</p></li>
<li><p><code>C:\opscode\chef\embedded\bin</code></p>

<p>UNIX related programs such as <code>ruby.exe</code>, <code>perl.exe</code>, <code>ls.exe</code>, <code>cat.exe</code>.</p></li>
</ul>

<h1>Conflicts with existing Ruby environment</h1>

<p>I have <code>ruby.exe</code> in <code>C:\Ruby200-x64\bin</code> which is added to <code>PATH</code>.</p>

<p>Which ruby is used when I run <code>ruby</code> or <code>gem install xxxx</code> from my MS-DOS prompt? </p>

<p>If we first install Ruby and then install Chef, <code>C:\Ruby200-x64\bin\gem</code> is executed.</p>

<p>If we first install Chef and then install Ruby, <code>C:\opscode\chef\embedded\bin\gem</code> is executed.</p>

<p>It&#39;s very confusing.</p>

<h1>Let&#39;s use Chef console</h1>

<p>To solve this problem, I created a &quot;Chef console&quot;.</p>

<h2>1. Create a bat file</h2>

<p>Save following file as <code>C:\opscode\chefenv.bat</code>.</p>
<div class="highlight"><pre><code class="bat language-bat" data-lang="bat">@ECHO OFF

SET PATH=c:\opscode\chef\bin;c:\opscode\chef\embedded\bin
SET PATH=%PATH%;c:\windows\system32;c:\windows

title Chef Env
chef-solo -v
</code></pre></div>
<h2>2. Create a shortcut file</h2>

<p>Create a shortcut file to this bat.</p>

<ul>
<li>Target: <code>C:\Windows\System32\cmd.exe /K C:\opscode\chefenv.bat</code></li>
<li>Start in: Anywhere. (My document, path to chef repository and so on)</li>
</ul>

<p>(<code>/K</code> means &quot;Carries out the command specified by string and continues.&quot;)</p>

<h1>How to use</h1>

<p>When you double click the shortcut file, a command prompt appears with restricted <code>PATH</code>.</p>

<p><center><img src="http://farm6.staticflickr.com/5527/11980775965_c14b1872a6.jpg" width="500" height="364"></center></p>

<p>You can execute <code>chef-solo</code> and <code>knife</code>.</p>

<p>Now, you can safely remove <code>c:\opscode\chef\bin</code> and <code>C:\opscode\chef\embedded\bin</code> from <code>PATH</code>.</p>

<p>Let&#39;s enjoy!</p>
]]></description>
		</item>

		<item>
			<title>Visualizing K-Means algorithm with D3.js</title>
			<link>http://tech.nitoyon.com/en/blog/2013/11/07/k-means/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/11/07/k-means/</guid>
			<pubDate>Thu, 07 Nov 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>The K-Means algorithm is a popular and simple clustering algorithm. This visualization shows you how it works.</p>

<div id="kmeans">
<div><svg></svg></div>
<div><button id="step">Step</button> <button id="restart" disabled>Restart</button></div>
<fieldset style="display: inline; margin: .8em 0 1em 0; border: 1px solid #999; padding: .5em">
<div><label for="N">N (the number of node):</label><input type="number" id="N" min="2" max="1000" value="100"></div>
<div><label for="K">K (the number of cluster):</label><input type="number" id="K" min="2" max="50" value="5"></div>
<div><button id="reset">New</button></div>
</fieldset>
</div>

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<script src="/ja/blog/2013/11/07/k-means/k-means.js"></script>

<ul>
<li>Click figure or push [Step] button to go to next step.</li>
<li>Push [Restart] button to go back to initialization step.</li>
<li>Push [New] button to start new simulation with given <i>N</i> (the number of nodes) and <i>K</i> (the number of clusters).</li>
<li>Requires modern browsers (tested on IE 10, Firefox 25 and Chrome 30).</li>
</ul>

<h1>What is K-Means</h1>

<p>You can find a detail description at <a href="http://en.wikipedia.org/wiki/K-means_clustering">k-means clustering - Wikipedia, the free encyclopedia</a>, but it&#39;s too complecated to understand.</p>

<p>Here is simpler steps:</p>

<ol>
<li><em>Initialization:</em> Create <i>N</i> nodes (circle) and randomly put initial <i>K</i> cluster (cross).</li>
<li><em>Assignment step:</em> Assign each node (circle) to the nearest cluster (cross).</li>
<li><em>Update step:</em> Each cluster (cross) move to the centroid of its nodes.</li>
<li>Go to step 2.</li>
</ol>

<h1>D3.js and ActionScript 3</h1>

<p>This visualization is JavaScript port of my past work -- <a href="/ja/blog/2009/04/09/kmeans-visualise/">Visualization of K-means algorithm with ActionScript 3 (Japanese only)</a> -- with <a href="http://d3js.org/">D3.js</a>.</p>

<p>I like D3.js&#39;s powerful data binding and animation APIs. It makes my code simple. But Flash shows smoother animations.</p>
]]></description>
		</item>

		<item>
			<title>When grunt-contrib-watch uses too much CPU, try grunt-este-watch</title>
			<link>http://tech.nitoyon.com/en/blog/2013/10/10/grunt-watch-slow/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/10/10/grunt-watch-slow/</guid>
			<pubDate>Thu, 10 Oct 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I used <a href="http://gruntjs.com/">Grunt</a> and <a href="https://github.com/gruntjs/grunt-contrib-watch"><code>grunt-contrib-watch</code></a> in my project. </p>

<p>Although <code>grunt-contrib-watch</code> works fine when the number of files is small, but as it grows up, <code>grunt-contrib-watch</code> starts using too much CPU. For example, when <code>grunt-contrib-watch</code> is watching about 1,000 files, node always uses 10% of my CPU.</p>

<p>This is known issue. Look at the <a href="https://github.com/gruntjs/grunt-contrib-watch/#why-is-the-watch-devouring-all-my-memorycpu">FAQ</a>:</p>

<blockquote>
<p>Another reason if you&#39;re watching a large number of files could be the low default <code>interval</code>. Try increasing with <code>options: { interval: 5007 }</code>. Please see issues <a href="https://github.com/gruntjs/grunt-contrib-watch/issues/35">#35</a> and <a href="https://github.com/gruntjs/grunt-contrib-watch/issues/145">#145</a> for more information.</p>
</blockquote>

<h1>What causes high CPU usage?</h1>

<p><code>grunt-contrib-watch</code> uses <a href="https://github.com/shama/gaze"><code>gaze</code></a> module to watch files.</p>

<p>This module uses not only <code>fs.watch()</code> (native API) but also <code>fs.watchFile()</code> which periodically executes <code>fs.statSync()</code> (read <a href="/en/blog/2013/10/02/node-watch-impl/">Difference between fs.watch() and fs.watchFile()</a> for details).</p>

<p>Why does <code>gaze</code> use <code>fs.watchFile()</code>? <a href="https://github.com/paulmillr/chokidar">chokidar/README.md</a> says <code>fs.watch()</code> had many problems.</p>

<blockquote>
<p>Node.js <code>fs.watch</code>:</p>

<ul>
<li>Doesn&#39;t report filenames on mac.</li>
<li>Doesn&#39;t report events at all when using editors like TextMate2 on mac.</li>
<li>Sometimes report events twice.</li>
<li>Has only one non-useful event: <code>rename</code>.</li>
<li>Has <a href="https://github.com/joyent/node/search?q=fs.watch&amp;type=Issues">a lot of other issues</a></li>
</ul>
</blockquote>

<h1>How do I avoid it?</h1>

<p>Use <a href="https://github.com/steida/grunt-este-watch/"><code>grunt-este-watch</code></a> instead of <a href="https://github.com/gruntjs/grunt-contrib-watch"><code>grunt-contrib-watch</code></a>.</p>

<p>Let&#39;s read <a href="https://github.com/steida/grunt-este-watch/blob/master/README.md"><code>grunt-este-watch/README.md</code></a>.</p>

<blockquote>
<p><em>What&#39;s wrong with official grunt-contrib-watch?</em></p>

<p>It&#39;s slow and buggy, because it uses combination fs.fileWatch and fs.watch, for
historical reason. From Node 0.9.2+, fs.watch is ok.</p>

<p><a href="http://github.com/steida/este">github.com/steida/este</a> Needs maximum performance and
stability, so that&#39;s why I had to create yet another Node.js file watcher.
This watcher is continuously tested on Mac, Linux, Win platforms.</p>
</blockquote>

<p>I&#39;m using <code>grunt-este-watch</code> now. It uses no CPU when watching. Nice!</p>

<h2>Example</h2>

<p>Here is my <a href="https://github.com/nitoyon/tech.nitoyon.com/blob/b1fd0f12a6318b200390d8a2934d5cb66e46d454/Gruntfile.js"><code>Gruntfile.js</code></a>:</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">module.exports = function(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(&#39;package.json&#39;),
    shell: {
      jekyll_build: {
        command: &#39;jekyll build&#39;
      },
      // snip
    },
    // snip
    esteWatch: {
      options: {
        dirs: [&#39;./&#39;, &#39;_posts/*/&#39;, &#39;_layouts&#39;, &#39;_includes&#39;,
               &#39;javascript/**/&#39;, &#39;apollo/tutorial&#39;,
               &#39;_plugins/**/&#39;, &#39;stylesheets&#39;, &#39;javascripts&#39;],
        livereload: {
          enabled: false
        }
      },
      &#39;*&#39;: function(filepath) { return &#39;shell:jekyll_build&#39; }
    }
  });
</code></pre></div>
<p><code>grunt-este-watch</code>&#39;s configuration is quite different from <code>grunt-contrib-watch</code>&#39;s.</p>

<p><code>grunt-este-watch</code> requires directory list to watch. When any file under watched directory is modified, callback function is called.</p>

<p>My callback function returns <code>&#39;shell:jekyll_build&#39;</code>, so <code>grunt</code> executes <code>shell:jekyll_build</code> when watched files are modified. We can check <code>filepath</code> argument to determine the tasks returned.</p>

<p><code>&#39;*&#39;</code> means all extensions. We can register callback to specified extension. There is a good example on <a href="https://github.com/steida/grunt-este-watch/blob/master/README.md">grunt-este-watch/README.md</a>.</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">    coffee: function(filepath) {
      var files = [{
        expand: true,
        src: filepath,
        ext: &#39;.js&#39;
      }];
      grunt.config([&#39;coffee&#39;, &#39;app&#39;, &#39;files&#39;], files);
      grunt.config([&#39;coffee2closure&#39;, &#39;app&#39;, &#39;files&#39;], files);
      return [&#39;coffee:app&#39;, &#39;coffee2closure:app&#39;];
    },
    // snip
    css: function(filepath) {
      if (grunt.option(&#39;stage&#39;)) {
        return &#39;cssmin:app&#39;;
      }
    }
</code></pre></div>
<p>Enjoy!</p>
]]></description>
		</item>

		<item>
			<title>Difference between fs.watch() and fs.watchFile()</title>
			<link>http://tech.nitoyon.com/en/blog/2013/10/02/node-watch-impl/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/10/02/node-watch-impl/</guid>
			<pubDate>Wed, 02 Oct 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Node.js has two functions for file watching. <code>fs.watch()</code> and <code>fs.watchFile()</code>.</p>

<p>These functions look similar. What&#39;s the difference?</p>

<h1>Official Document</h1>

<p>According to official <a href="http://nodejs.org/docs/v0.8.0/api/fs.html#fs_fs_watchfile_filename_options_listener">document (v0.8.0)</a>,</p>

<blockquote>
<h2>fs.watchFile(filename, [options], listener)</h2>

<p>Stability: 2 - Unstable.  Use fs.watch instead, if available.</p>

<p>Watch for changes on <code>filename</code>.</p>

<h2>fs.watch(filename, [options], [listener])</h2>

<p>Stability: 2 - Unstable.  Not available on all platforms.</p>

<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a directory.</p>
</blockquote>

<p>we can say</p>

<ul>
<li><code>fs.watch()</code> is recommended.</li>
<li><code>fs.watch()</code> is not available on all platforms.</li>
<li><code>fs.watch()</code> watches a file or a directory. <code>fs.watchFile()</code> watches a file.</li>
</ul>

<h1>ChangeLog</h1>

<p>According to <a href="https://github.com/joyent/node/blob/master/ChangeLog">ChangeLog</a>, I found that</p>

<ul>
<li><code>fs.watchFile()</code> is older API which is implemented on v0.1.18 as <code>process.watchFile()</code>.</li>
<li><code>fs.watch()</code> is newer API which is implemented on v0.5.9.</li>
</ul>

<h1>Source Code</h1>

<p>I cannot found official information any more, so I looked at source code for more understanding.</p>

<h2>fs.watch()</h2>

<p>Let&#39;s look at implementation of <code>fs.watch()</code>. (We use source code for <a href="https://github.com/joyent/node/tree/v0.10.19">v0.10.19</a>)</p>

<p>After I looked at <a href="https://github.com/joyent/node/blob/v0.10.19/lib/fs.js"><code>lib/fs.js</code></a> and <a href="https://github.com/joyent/node/blob/v0.10.19/src/fs_event_wrap.cc#L102"><code>src/fs_event_wrap.cc</code></a>, I found <code>fs.watch()</code> is implemented by <code>uv_fs_event_init()</code> function.</p>

<p>The functions whose name start with <code>uv</code> is defined by libuv. libuv is multi-platform support library for Node.js. It has features like asynchronous IO, thread pool, timer and so on.</p>

<p>So, look at <code>uv_fs_event_init()</code> function. I grepped under <code>deps/uv/src</code>. The results are as follows:</p>

<ul>
<li>unix\aix.c</li>
<li>unix\cygwin.c</li>
<li>unix\kqueue.c</li>
<li>unix\linux-inotify.c</li>
<li>unix\sunos.c</li>
<li>win\fs-event.c</li>
</ul>

<p>Each file has implementation for different platforms.</p>

<table><thead>
<tr>
<th>Platform</th>
<th>How to implement</th>
</tr>
</thead><tbody>
<tr>
<td>Linux</td>
<td>inotify</td>
</tr>
<tr>
<td>MacOS、*BSD</td>
<td>kqueue</td>
</tr>
<tr>
<td>Windows</td>
<td><code>ReadDirectoryChangesW()</code></td>
</tr>
<tr>
<td>Solaris</td>
<td>Event Ports</td>
</tr>
<tr>
<td>AIX</td>
<td>(Not supported)</td>
</tr>
<tr>
<td>Cygwin</td>
<td>(Not supported)</td>
</tr>
</tbody></table>

<p>Conclusion: <strong>fs.watch() uses native API</strong>.</p>

<h2>fs.watchFile()</h2>

<p>Let&#39;s look at <code>fs.watchFile()</code>.</p>

<p>After I looked at <a href="https://github.com/joyent/node/blob/v0.10.19/lib/fs.js"><code>lib/fs.js</code></a> and <a href="https://github.com/joyent/node/blob/v0.10.19/src/node_stat_watcher.cc#L112"><code>src/node_stat_watcher.cc</code></a>, I found <code>fs.watchFile()</code> is implemented by <code>uv_fs_poll_start()</code> function.</p>

<p>OK. Let&#39;s read <code>uv_fs_poll_start()</code> defined in <a href="https://github.com/joyent/node/blob/v0.10.19/deps/uv/src/fs-poll.c#L56"><code>deps/uv/src/fs-poll.c</code></a>.</p>
<div class="highlight"><pre><code class="c language-c" data-lang="c">int uv_fs_poll_start(uv_fs_poll_t* handle,
                     uv_fs_poll_cb cb,
                     const char* path,
                     unsigned int interval) {
  // snip initialization

  if (uv_fs_stat(loop, &amp;ctx-&gt;fs_req, ctx-&gt;path, poll_cb))
    abort();
</code></pre></div>
<p>The point is <code>uv_fs_stat()</code>. This function executes  asynchronous <code>stat()</code>. The callback <code>poll_cb</code> is called when it completes.</p>

<p>Next, <a href="https://github.com/joyent/node/blob/v0.10.19/deps/uv/src/fs-poll.c#L139"><code>poll_cb()</code></a>.</p>
<div class="highlight"><pre><code class="c language-c" data-lang="c">static void poll_cb(uv_fs_t* req) {
  // snip: trigger event, error handling, and so on

  /* Reschedule timer, subtract the delay from doing the stat(). */
  interval = ctx-&gt;interval;
  interval -= (uv_now(ctx-&gt;loop) - ctx-&gt;start_time) % interval;

  if (uv_timer_start(&amp;ctx-&gt;timer_handle, timer_cb, interval, 0))
    abort();
}
</code></pre></div>
<p>First it analyzes the stat result, and then it starts next timer so that <code>timer_cb()</code> will be called <code>interval</code> later.</p>

<p><code>timer_cb()</code> calls <code>uv_fs_stat()</code> again. I got it! <code>fs.stat()</code> is called periodically.</p>

<p>Conclusion: <strong>fs.watchFile() periodically executes fs.stat()</strong>.</p>

<h1>Conclusion</h1>

<p><code>fs.watch()</code>:</p>

<ul>
<li>is newer API and recommended.</li>
<li>uses native watching functions supported by OS, so doesn&#39;t waste CPU on waiting.</li>
<li>doesn&#39;t support all platforms such as AIX and Cygwin.</li>
</ul>

<p><code>fs.watchFile()</code>:</p>

<ul>
<li>is old API and not recommended.</li>
<li>calls stat periodically, so uses CPU even when nothing changes.</li>
<li>runs on any platforms.</li>
</ul>
]]></description>
		</item>

		<item>
			<title>Use symlinks in git difftool --dir-diff on Windows</title>
			<link>http://tech.nitoyon.com/en/blog/2013/07/09/symlink-dir-diff-on-windows/</link>
			<guid>http://tech.nitoyon.com/en/blog/2013/07/09/symlink-dir-diff-on-windows/</guid>
			<pubDate>Tue, 09 Jul 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>I like <code>git difftool --dir-diff</code> because it checks out the modified files to a temporary directory and executes diff tool with directory pathes.</p>

<p>On Unix and MacOS, <code>git difftool --dir-diff</code> create a symbolic link to the working directory if a right-hand file has the same SHA1 as the file in the working directory.  It&#39;s very useful when we modify right-hand files with a difftool.</p>

<p>On Windows, instead of creating symbolic links, <code>git difftool --dir-diff</code> copy back right-hand files to working directory after difftool program exits.  I want to use symlinks on Git for Windows like Unix and MacOS.</p>

<h1>Quick Hack Patch</h1>

<p>Environment: Git for Windows 1.8.3 and Windows 7 (64bit).</p>

<p>Patch for <code>C:\Program Files (x86)\Git\libexec\git-core\git-difftool</code>.</p>
<div class="highlight"><pre><code class="diff language-diff" data-lang="diff">--- git-difftool    Sun Jun  2 11:28:06 2013
+++ git-difftool    Tue Jul  9 00:42:02 2013
@@ -283,7 +283,7 @@
            exit_cleanup($tmpdir, 1);
        }
        if ($symlinks) {
-           symlink(&quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
+           !system(&quot;git&quot;, &quot;mklink&quot;, &quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
            exit_cleanup($tmpdir, 1);
        } else {
            copy(&quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
@@ -448,7 +448,7 @@
    my $indices_loaded = 0;

    for my $file (@worktree) {
-       next if $symlinks &amp;&amp; -l &quot;$b/$file&quot;;
+       next if $symlinks;
        next if ! -f &quot;$b/$file&quot;;

        if (!$indices_loaded) {
</code></pre></div>
<p>Save this patch to somewhere, and run GitBash as administrator.</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ cd /c/Program\ Files\ \(x86\)/Git/libexec/git-core/
$ patch &lt; ~/git-difftool.patch
patching file `git-difftool&#39;
</code></pre></div>
<p>Create a file on <code>C:\Program Files (x86)\Git\libexec\git-core\git-mklink</code>:</p>
<div class="highlight"><pre><code class="sh language-sh" data-lang="sh">#!/bin/sh

cmd.exe /c &quot;mklink \&quot;$2\&quot; \&quot;$1\&quot;&quot; &gt; /dev/null
</code></pre></div>
<p>(This script is necessary for converting <code>/tmp/</code> directory to Windows path)</p>

<h1>How to Use</h1>

<p>First, configure difftool on <code>.gitconfig</code>. For example, set <a href="http://winmerge.org/">WinMerge</a> as difftool.</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[diff]
    tool = winmerge
[difftool winmerge]
    path = C:/Program Files (x86)/WinMerge/winmergeu.exe
    cmd = \&quot;C:/Program Files (x86)/WinMerge/winmergeu.exe\&quot; -r -u \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;
</code></pre></div>
<p>Run GitBash as an administrator, and enter following command.</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git difftool -d --symlinks [&lt;commit&gt; [&lt;commit&gt;]]
</code></pre></div>
<p>(On Windows, administrator privileges is required to create symbolic links)</p>

<p>If you want, create an alias on <code>.gitconfig</code>.</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[alias]
    d = difftool -d --symlinks
</code></pre></div>
<p>Enjoy.</p>
]]></description>
		</item>

	</channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Fri, 14 Mar 2014 03:49:18 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>全角半角混在の文章で 1 行に半角何文字分あるか調べる方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/03/14/utf8-str-count/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/03/14/utf8-str-count/</guid>
			<pubDate>Fri, 14 Mar 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>「ソースコードは 1 行あたり 80 文字以内」とか「コミットログは横幅 72 文字以内」とか、文字数に関するルールはいろいろある。</p>

<p>ルールを徹底するには機械的に判定したい。と思って、簡単なスクリプトを書こうとした瞬間、意外と「1 行あたりの文字数」をカウントするのが難しいことに気付いた。</p>

<p>たとえば、「あA」は「全角 1 文字＋半角 1 文字」なので半角 3 文字分としてカウントしたい。</p>

<p>しかし、UTF-8 の世界では「あA」の文字長は 2 だし、バイト数は 4 (あ=0xE38182、a=0x41) である。</p>

<p>EUC-JP や Shift-JIS の時代なら、単純に「あA」は 3 バイトなので「半角 3 つ分」とすぐ分かったのだけども… (逆に文字長を調べるのが面倒だった)。</p>

<p>はて、どうするか？　というのがこの記事でいいたいこと。</p>

<h1>East Asian Width を見よ</h1>

<p>いろいろとググった結果、Unicode の <a href="http://www.unicode.org/reports/tr11/">East Asian Width</a> を参照するとよいらしい。</p>

<p><a href="http://www.unicode.org/reports/tr11/">East Asian Width</a> で <a href="http://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt">EastAsianWidth.txt</a> という資料が紹介されている。この資料では、全ての文字の横幅が 6 つのカテゴリーに分類されている。</p>

<p>そのカテゴリーが次の 6 つ。</p>

<table><thead>
<tr>
<th>分類</th>
<th>意味</th>
<th>例</th>
</tr>
</thead><tbody>
<tr>
<td>F</td>
<td>East Asian Fullwidth</td>
<td>Ａ (全角の A)</td>
</tr>
<tr>
<td>H</td>
<td>East Asian Halfwidth</td>
<td>ｱ (半角のア)</td>
</tr>
<tr>
<td>Na</td>
<td>East Asian Narrow</td>
<td>A (半角の A)</td>
</tr>
<tr>
<td>W</td>
<td>East Asian Wide</td>
<td>ア (全角のア)</td>
</tr>
<tr>
<td>A</td>
<td>East Asian Ambiguous</td>
<td>○☆※ (一部の記号)、Д (ロシア語)</td>
</tr>
<tr>
<td>N</td>
<td>Neutral (Not East Asian)</td>
<td>À</td>
</tr>
</tbody></table>

<p>たとえば、「あ」なら <code>3042;W # HIRAGANA LETTER A</code> と書いてある。カテゴリーは <code>W</code> なので、全角 （＝半角 2 文字分) だと分かる。</p>

<p>ということで、<code>F</code>・<code>W</code> は全角 (＝ 2 文字分)、<code>H</code>・<code>Na</code>・<code>N</code> は半角 (＝ 1 文字) として扱えばよいわけだ。</p>

<h2>Ambiguous をどうするか問題</h2>

<p>で、<code>A</code> (East Asian Ambiguous) の扱いが難しい。</p>

<p>例にあるような ○☆※ などの記号を見ると全角として扱いたくなる。しかし、<code>A</code> にはロシア語も含まれている。</p>

<p><code>A</code> を一律に全角として扱うと、「1 行に 80 文字以上書いたら警告出すシステム」を作ると、「80 文字超えてないのに警告出るんだけどなにこれ？」とロシアの人に怒られてしまうかもしれない。</p>

<p>具体例をみてみよう。ロシア語でヘンタイをあらわす「Хентай」をいくつかの環境で表示してみた。</p>

<p><center><img src="http://farm8.staticflickr.com/7394/13131518004_f517a03418_o.png" width="680" height="212"></center></p>

<p>Cent OS のコンソールでは半角になっているが、MS ゴシックなら全角になる。プロポーショナルなメイリオでは、だいたい半角で表示している。</p>

<p>悩ましい・・・！</p>

<p>とりあえず、Ambiguous は 1 文字として扱うのが安全そうだ。ある環境で 80 文字以上に見えていても、別の環境では 80 文字以内に見えている…ということは十分に起こりうるのだ…！</p>

<h1>いろんな言語で判別したいよ</h1>

<p>さて、一次情報と判定方法が分かったところで、いろんなスクリプト言語で実装するにはどうしたらいいだろう。<code>&quot;East Asian Width&quot; 言語名</code> で検索したら、それなりに情報が出てくる。</p>

<h2>Python</h2>

<p>一番簡単だったのが Python さん。標準モジュールの <code>unicodedata</code> に <a href="http://docs.python.org/2/library/unicodedata.html#unicodedata.east_asian_width"><code>unicodedata.east_asian_width(unichr)</code></a> なるメソッドがあった。</p>
<div class="highlight"><pre><code class="python language-python" data-lang="python">&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.east_asian_width(u&#39;あ&#39;)
&#39;W&#39;
&gt;&gt;&gt; unicodedata.east_asian_width(u&#39;※&#39;)
&#39;A&#39;
</code></pre></div>
<h2>PHP</h2>

<p>伝家の宝刀 mb うんたらの関数群の中に、期待通り <a href="http://www.php.net/manual/en/function.mb-strwidth.php"><code>mb_strwidth()</code></a> がいた。</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php">echo mb_strwidth(&quot;あ&quot;); // 2
echo mb_strwidth(&quot;※&quot;); // 1
</code></pre></div>
<p>Ambiguous は <code>1</code> を返すようだ。</p>

<h2>Ruby</h2>

<p>標準ではムリだけど、<a href="https://github.com/janlelis/unicode-display_width"><code>unicode-display_width</code></a> なるモジュールが gem にあった。</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">require &#39;unicode/display_width&#39;
&quot;○&quot;.display_width #=&gt; 1
&#39;一&#39;.display_width #=&gt; 2
</code></pre></div>
<p>現時点では Ambiguous は全部 <code>1</code> を返しているよ、ということが TODO のところに書いてある。</p>

<h2>JavaScript</h2>

<p>こちらも標準ではムリだけど、<a href="https://github.com/komagata/eastasianwidth"><code>eastasianwidth</code></a> なるモジュールが npm にあがっている。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">var eaw = require(&#39;eastasianwidth&#39;);
console.log(eaw.eastAsianWidth(&#39;￦&#39;)) // &#39;F&#39;
console.log(eaw.eastAsianWidth(&#39;｡&#39;)) // &#39;H&#39;
console.log(eaw.eastAsianWidth(&#39;뀀&#39;)) // &#39;W&#39;

console.log(eaw.length(&#39;あいうえお&#39;)) // 10
</code></pre></div>
<p>ソースコードを読んだところ、Ambiguous は <code>2</code> を返している。</p>

<h2>Perl</h2>

<p>CPAN にある <a href="http://search.cpan.org/%7Eaudreyt/Unicode-EastAsianWidth-1.33/lib/Unicode/EastAsianWidth.pm"><code>Unicode::EastAsianWidth</code></a> を使えば、次のようにできるらしい。</p>
<div class="highlight"><pre><code class="perl language-perl" data-lang="perl">use Unicode::EastAsianWidth;

$_ = chr(0x2588); # FULL BLOCK, an ambiguous-width character

/\p{InEastAsianAmbiguous}/; # true
/\p{InFullwidth}/;          # false
</code></pre></div>
<p>長さやカテゴリーが返ってこない分、少し面倒そう。</p>

<h1>まとめ</h1>

<p>3 行でまとめちゃう。</p>

<ul>
<li>UTF-8 では半角何文字分で表示されるのかを調べるのは少し面倒になった。</li>
<li>しかも、環境によって何文字分で表示するかは違うので、完全に調べきるのはあきらめたほうがよい。</li>
<li>一次情報は <a href="http://www.unicode.org/reports/tr11/">East Asian Width</a> にあるが、各種スクリプト言語には便利なライブラリーを使えばよい。</li>
</ul>
]]></description>
		</item>

		<item>
			<title>ConEmu 突っ込んだら Git for Windows の Git Bash がカッコよくなった</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/03/07/fancy-git-bash/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/03/07/fancy-git-bash/</guid>
			<pubDate>Fri, 07 Mar 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git for Windows の Git Bash の配色がイマイチだなーと思ってググってたら、<a href="http://sourceforge.net/projects/console/">Console2</a> だとか <a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> を使うと楽にできるっぽいことが、Stack Overflow とか英語のブログで見つかった。</p>

<p>そこで、<a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> を試してみたら色々と幸せになった (<a href="http://sourceforge.net/projects/console/">Console2</a> はそのままでは日本語が使えなかった。解決方法はあるらしいけど…)。</p>

<p>左が Git Bash、右が ConEmu さん。</p>

<p><center><img src="http://farm8.staticflickr.com/7428/12971385585_16c5ed8db4_o.png" width="600" height="503"></center></p>

<p>アンチエイリアス効いてるし、色もオサレ。</p>

<h1>起動から色を設定するまで</h1>

<p><a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> を起動すると、初回は設定の保存場所などを確認される。お好みで答えて [OK] を押すと、タブ化した MS-DOS プロンプトみたいなのが立ち上がってくる。</p>

<p>[Win] + [N] を押すと新しいタブを開始できる。</p>

<p><center><img src="http://farm3.staticflickr.com/2146/12971527963_69fbb4b171.jpg" width="500" height="364"></center></p>

<p>上のキャプチャーのように、どんな環境のタブを開始するかをメニューで聞いてきている (<code>{cmd}</code> やら <code>{cmd (Admin)}</code> やら <code>{PowerShell}</code> やら <code>{Git bash}</code> やら <code>{Putty}</code> やら…。システムにインストールされてるものを自動で検知して、立ち上げられるようになっているようだ)。</p>

<p><code>{Git Bash}</code> を選ぶと、Git Bash が新しいタブに出てくる。</p>

<p>この時点ではデフォルトの配色なんだけど、タブの部分を右クリックしたら、いろんなカラースキーマを試せるようになっているのが手軽だ。</p>

<p><center><img src="http://farm3.staticflickr.com/2416/12971385475_b32ca52128.jpg" width="500" height="495"></center></p>

<p><code>&lt;Terminal.app&gt;</code> (MacOS 風) とか、<code>&lt;xterm&gt;</code> (X Window) とかあるけど、世間的には <code>Solarized</code> が人気っぽいので、<code>&lt;Solarized (Luke Maciak)&gt;</code> を選んだ。</p>

<p>色が気に入ったら、全体設定の [Features] &gt; [Colors] からデフォルトのカラースキーマを選んでおくと、次回からはその色で表示してくれるようになる。</p>

<h1>多すぎる設定項目</h1>

<p>設定パネルをみたら、気力を失うぐらいの設定項目がある。</p>

<p><center><img src="http://farm8.staticflickr.com/7364/12971527793_387e9b4495.jpg" width="500" height="370"></center></p>

<p>ショートカットキーにからしか使えない機能も多数あるようで、上下左右分割とかもできるっぽい。プラグインとかマクロとかもあるご様子…。</p>

<p>とりあえずは、タブの使い勝手が気になったので、[Features] &gt; [Tabs] から [Lazy tab switch] と [Recent mode] をオフにしておいた。</p>

<p>あと、ちょっとキーコンフィグをいじって、標準的な Windows っぽいやつに置き換えてみたりした。</p>

<h1>エディター起動中の Duplicate root が便利</h1>

<p>ちょっと使っていて便利だなー、と思ったのは、タブの右クリック メニューにある [Duplicate root...]。カレントディレクトリをそのまま引き継いで、新しいタブで Git Bash を起動してくれる。</p>

<p>何がうれしいかというと、コミットとか <code>rebase -i</code> でエディターが立ち上がっているときに、log とか diff とか見たくなることはそれなりにあると思う。こんなときにも、[Duplicate root...] して、新しい GitBash 上で確認できる。いままでは、別の Git Bash を立ち上げるとか、一時的なコミットログを書くとかしてたので、便利になった。</p>

<h1>まとめ</h1>

<ul>
<li>ConEmu 便利だよ。</li>
<li>タブ化して、色とかフォントがキレイになるだけでもメリットある。</li>
<li>他にも便利な機能はいっぱいありそう。</li>
</ul>
]]></description>
		</item>

		<item>
			<title>Windows の Jenkins で JENKINS_HOME を別のフォルダーに変更する方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/02/25/jenkins-home-win/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/02/25/jenkins-home-win/</guid>
			<pubDate>Tue, 25 Feb 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Jenkins を Windows 環境に MSI ファイルで導入すると、デフォルトでは <code>C:\Program Files (x86)</code> にインストールされる (64 ビットの場合)。</p>

<p>Java の実行環境を同梱してくれていたり、自動でサービスに登録してくれたりして嬉しいのだけど、気になるのが <code>JENKINS_HOME</code> が <code>C:\Program Files (x86)\Jenkins</code> になってしまう点。ジョブやワークスペース、プラグインなどのデータなどが <code>Program Files</code> の下に置かれてしまう。Windows 的な作法では「アプリケーションのデータは <code>ProgramData</code> や <code>AppData</code> に置きましょう」となっているので少し気持ち悪い。</p>

<p><code>JENKINS_HOME</code> を変更するには環境変数を設定したらいけそうなんだけど、MSI から導入した場合は環境変数ではなく <code>jenkins.xml</code> の値が優先されるようだ (jar から直接実行する場合は未確認)。</p>

<p>ということで、「MSI から導入した Jenkins で <code>JENKINS_HOME</code> を変更する手順」をまとめておく。Jenkins のバージョンは 1.550。</p>

<p>ここでは、<code>JENKINS_HOME</code> を <code>C:\ProgramData\Jenkins</code> に変更するものとする。</p>

<ol>
<li>Jenkins サービスをとめる。</li>
<li><p>インストール フォルダーの <code>jenkins.xml</code> を開いて</p>
<div class="highlight"><pre><code class="xml language-xml" data-lang="xml">  &lt;env name=&quot;JENKINS_HOME&quot; value=&quot;%BASE%&quot;/&gt;
</code></pre></div>
<p>を次のように書き換える (改行コードが LF なので、メモ帳ではできなくはないが探すのが少し大変)。</p>
<div class="highlight"><pre><code class="xml language-xml" data-lang="xml">  &lt;env name=&quot;JENKINS_HOME&quot; value=&quot;%ProgramData%\Jenkins&quot;/&gt;
</code></pre></div></li>
<li><p>インストール フォルダーの次のファイル・フォルダー<strong>以外</strong>を <code>%ProgramData%\Jenkins</code> に<strong>移動</strong>する (コピーだと、<code>jobs</code> 内にシンボリックリンクがあった場合に壊れてしまうので、必ず「移動」すること)。</p>

<ul>
<li><code>jre</code> フォルダー</li>
<li><code>jenkins.err.log</code></li>
<li><code>jenkins.exe</code></li>
<li><code>jenkins.exe.config</code></li>
<li><code>jenkins.out.log</code></li>
<li><code>jenkins.war</code></li>
<li><code>jenkins.war.bak</code></li>
<li><code>jenkins.war.tmp</code></li>
<li><code>jenkins.wrapper.log</code></li>
<li><code>jenkins.xml</code></li>
</ul></li>
<li><p>Jenkins サービスを開始する。</p></li>
<li><p><code>http://localhost:8080/systemInfo</code> から <code>JEKNINS_HOME</code> が設定した値になっていることを確認する。ジョブやプラグインなどの情報が引き継がれているかどうかも合わせて確認する。</p></li>
</ol>

<p>とっても簡単ですね。インストーラーで設定できるようになっていると、より嬉しいので、気が向いたら pull request してみよう・・・。</p>
]]></description>
		</item>

		<item>
			<title>Vagrant で作ったり壊したりできる Windows 環境を手に入れるまでの手順</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/02/20/vagrant-win-guest/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/02/20/vagrant-win-guest/</guid>
			<pubDate>Thu, 20 Feb 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>最近話題の <a href="http://www.vagrantup.com/">Vagrant</a> さんは「Linux の環境を作ったり壊したりして開発とか試験が楽になるよ」と紹介されることが多いけど、Windows の環境だって作ったり壊したりしたい！</p>

<p>いろいろ調べつつ環境を作ってみたので、その手順を共有しておく。</p>

<p>完成イメージはこんな感じ。コマンドプロンプトから <code>vagrant up</code> をしたら VirtualBox 上に Windows Server 2012 R2 の環境が準備されて、そこにリモート デスクトップで接続している。</p>

<p><center><img src="http://farm4.staticflickr.com/3750/12637326905_8f2cfe0da7.jpg" width="500" height="365"></center></p>

<p>いろいろいじったあとに <code>vagrant destroy</code> したら環境は消え去って、<code>vagrant up</code> したら、また、まっさらな状態から使える。</p>

<p>ちょっと注目してほしいのは、ゲスト OS の <code>C:\vagrant</code> にホスト側の <code>Vagrantfile</code> がマウントされているところ。このあたりの処理は <a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> というプラグインがうまくやってくれている。このプラグインのおかげで、Linux と同じように <code>Vagrantfile</code> を設定してやると、ホスト名を変更したり、IP アドレスを指定してネットワーク アダプターを追加したり、ホスト側の Chef のレシピを <code>vagrat provision</code> を使って、ゲスト上で走らせたりできるようになる。</p>

<h1>目次</h1>

<p>最初に目次をドーン。</p>

<ol>
<li>VirtualBox をインストールする</li>
<li>Vagrant をインストールする</li>
<li>ゲスト OS をインストールする</li>
<li>Vagrant-Windows 用の設定を行う</li>
<li>Base Box を作成する</li>
<li>Base Box を試す</li>
</ol>

<p>正直いって長い。Linux ならネットに転がっている Box を使って「ハイ終わり」なんだけど、Windows の場合は自分で Box を作らなきゃいけないので、こんな長い手順になっている。</p>

<p>ゲスト OS は Windows 8.1 Pro 64bit と Windows Server 2012 R2 Standard を試してみた。</p>

<p>ホスト OS は Windows 8.1 Pro x64 を使っている。試してないけど Windows 以外の OS でも VirtualBox と Vagrant が動くならいけると思う。</p>

<p>なるべく一次情報を併記しつつ手順を示すので、バージョンが違うときにも応用はきくはずだ。また、裏側で何が起こっているのかを調べてみたので、うまくいかないときには参考にしてほしい。</p>

<p>では、さっそく行ってみよう。</p>

<h1>1. VirtualBox をインストールする</h1>

<p>VirtualBox を次の場所からダウンロードする。</p>

<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
</ul>

<p>執筆時点で最新の 4.3.6 をインストールした。</p>

<p>すべてデフォルトでインストールしたら、<code>C:\Program Files\Oracle\VirtualBox</code> にインストールされた。</p>

<h3>補足</h3>

<p>Vagrant が対応している VirtualBox をインストールしなきゃいけない。</p>

<p><a href="http://docs.vagrantup.com/v2/virtualbox/index.html">VirtualBox Provider - Vagrant Documentation</a> に Vagrant が要求する VirtualBox のバージョンが書いてある。執筆時点 (2014年2月) は次のようになっている。</p>

<blockquote>
<p>The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, and 4.3.x.</p>
</blockquote>

<h2>パスを通す</h2>

<p>Vagrant さんは <code>C:\Program Files\Oracle\VirtualBox\VBoxManage.exe</code> を使って VirtualBox に色んな指令をだす。</p>

<p>パスが通ってないとエラーになるので、<code>C:\Program Files\Oracle\VirtualBox</code> にパスを通しておく。</p>

<h1>2. Vagrant をインストールする</h1>

<p>Vagrant のインストーラーを次の場所から取得して、すべてデフォルトでインストールする。</p>

<ul>
<li><a href="http://www.vagrantup.com/downloads.html">http://www.vagrantup.com/downloads.html</a></li>
</ul>

<p>執筆時点で最新の 1.4.3 を利用した。</p>

<p><center><img src="http://farm4.staticflickr.com/3785/12637800714_643944ef04.jpg" width="500" height="390"></center></p>

<p>Vagrant は <code>C:\HashiCorp\Vagrant</code> にインストールされる。自動で、<code>C:\HashiCorp\Vagrant\bin</code> にパスが通る。<code>C:\HashiCorp\Vagrant\embedded</code> に ruby や mingw などの UNIX 環境が入る。</p>

<h2>Vagrant-Windows プラグイン</h2>

<p>Vagrant で Windows をゲスト OS として扱うために、<a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> プラグインを導入しておく。</p>

<p>コマンドプロンプトから次のコマンドを実行する。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">&gt;vagrant plugin install vagrant-windows
Installing the &#39;vagrant-windows&#39; plugin. This can take a few minutes...
Installed the plugin &#39;vagrant-windows (1.5.1)&#39;!
</code></pre></div>
<p>Vagrant-Windows の 1.5.1 がインストールされた。</p>

<h3>補足</h3>

<p>プラグインの gem は <code>C:\Users\username\.vagrant.d\gems\gems</code> に展開される。</p>

<h1>3. ゲスト OS をインストールする</h1>

<p>UNIX 系の OS だと、<a href="http://www.vagrantbox.es/">Vagrantbox.es</a> から Base Box (Vagrant 用のイメージ) を拾ってくればいいんだけど、Windows だとそうもいかない。自分で Base Box を作るところから始まる。</p>

<p>Base Box を作るときの注意点は <a href="http://docs.vagrantup.com/v2/boxes/base.html">Creating a Base Box - Vagrant Documentation</a> にある。ざっと要約すると</p>

<ul>
<li>ディスク サイズは大きめにしてね。VirtualBox なら [可変サイズ] のディスクを大きめのサイズで作ってね。</li>
<li>メモリーは大きすぎない値にしてね。ユーザーは <code>Vagrantfile</code> で変更できるんだから、512MB ぐらいにしておいてね。</li>
<li>オーディオとか USB は無効にしてね。</li>
<li><code>vagrant</code> というユーザー (パスワードも <code>vagrant</code>) を作ってね。<code>authorized_keys</code> に追加してね。<code>sudoers</code> に追加してね。<code>root</code> のパスワードも <code>vagrant</code> にしてね。</li>
</ul>

<p>といったことが書いてある。これに従って作業してみる。</p>

<h2>仮想マシンの作成</h2>

<p>次の手順で実施した。インストールメディアの ISO ファイルがあるものとする。</p>

<ol>
<li>VirtualBox を起動する。</li>
<li>メニューから [仮想マシン] &gt; [新規] で新しい仮想マシンを作る。</li>
<li>名前とバージョンを選択して、[次へ] を押す。

<ul>
<li>Windows Server 2012 R2 のとき: 名前は [Windows 2012 R2]、バージョンは [Windows 2012 (64bit)]。</li>
<li>Windows 8.1 のとき: 名前は [Windows 8.1]、バージョンは [Windows 8.1 (64bit)]。</li>
</ul></li>
<li>メモリーは 2048MB を提案されるので、1024MB に減らして [次へ] を押す。

<ul>
<li>512MB まで減らすと、Windows 8.1 で 0xc0000017、Windows Server 2012 R2 で 0xE0000100 エラーが出て先に進めなかった。</li>
</ul></li>
<li>ハードドライブはデフォルトで 25GB の可変サイズで [作成]、[次へ] を押していく。</li>
<li>新しくできた仮想マシン [Windows 2012 R2] を選択して、メニューから [仮想マシン] &gt; [設定] を選ぶ。</li>
<li>オーディオと USB を無効にする。

<ul>
<li>[オーディオ] を選択して、[オーディオを有効化] のチェックを外す。</li>
<li>[USB] を選択して、[USB コントローラーを有効化] のチェックを外す。</li>
</ul></li>
<li>ISO イメージを割り当てる。

<ul>
<li>[ストレージ] を選択する。</li>
<li>[コントロｰラー: IDE] の下の [空] を選択する。</li>
<li>[CD/DVD ドライブ] の右側のディスクのアイコンをクリックして、[仮想CD/DVDディスクファイルの選択...] を選ぶ。</li>
<li>インストールメディアの ISO ファイルを選ぶ。</li>
</ul></li>
<li>[OK] を押して閉じる。</li>
</ol>

<h2>OS のインストール</h2>

<p>引き続き、OS のインストールを行う。</p>

<ol>
<li>メニューから [仮想マシン] &gt; [起動] で仮想マシンを起動する。</li>
<li>ISO イメージから起動するので、デフォルトの設定でインストールを始める。</li>
<li>(2012 R2 のみ) OS の種類は [Windows Server 2012 R2 Standard (GUI 使用サーバー)] を選択して、[次へ]。</li>
<li>インストールの種類は [カスタム: Windows のみをインストールする (詳細設定)] を選ぶ。

<ul>
<li>インストールが始まるので、しばらく待つ。</li>
</ul></li>
<li>アカウントのパスワードを設定する。

<ul>
<li>Windows Server 2012 R2: Administrator アカウントのパスワードを決める画面になるので、適当に入力する (この時点では &quot;vagrant&quot; は「簡単すぎる」と怒られるので設定できない)。</li>
<li>Windows 8.1: Microsoft アカウントは登録しない。ローカルアカウントをユーザー名 vagrant、パスワード vagrant で登録する。</li>
</ul></li>
<li>ログオン画面になるので、作成したアカウントでログオンする。

<ul>
<li>Ctrl + Alt + Del は「右 Ctrl + Del」で入力する。メニューから [仮想マシン] &gt; [Ctrl-Alt-Delを送信] でもよい。</li>
</ul></li>
<li><p>Guest Additions をインストールする。</p>

<ul>
<li>メニューから [デバイス] &gt; [Guest Additions のCDイメージを挿入...] を選ぶ。</li>
<li>D: ドライブを開いて、Guest Additions のセットアップを行う。</li>
<li>作業が終わったら、[デバイス] &gt; [CD/DVD デバイス] &gt; [仮想ドライブからディスクを除去] でディスクを抜いておく。</li>
</ul></li>
</ol>

<h1>4. Vagrant-Windows 用の設定を行う</h1>

<p>ゲスト OS 側にいろんな設定を行う。</p>

<p>Linux 側の手順でいうところの</p>

<ul>
<li><code>vagrant</code> というユーザー (パスワードも <code>vagrant</code>) を作ってね。<code>authorized_keys</code> に追加してね。<code>sudoers</code> に追加してね。<code>root</code> のパスワードも <code>vagrant</code> にしてね。</li>
</ul>

<p>の作業をやるのだが、Windows の場合は SSH ではなく WinRM を使う。</p>

<p>詳しい手順は <a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> のページに書いてあるので、この手順に従って、ちまちまと作業を行う。</p>

<blockquote>
<ul>
<li>Create a vagrant user, for things to work out of the box username and password should both be &quot;vagrant&quot;.</li>
<li>Turn off UAC (Msconfig)</li>
<li>Disable complex passwords</li>
<li><a href="http://www.jppinto.com/2010/01/how-to-disable-the-shutdown-event-tracker-in-server-20032008/">Disable Shutdown Tracker</a> on Windows 2008/2012 Servers (except Core).</li>
<li><a href="http://www.elmajdal.net/win2k8/How_to_Turn_Off_The_Automatic_Display_of_Server_Manager_At_logon.aspx">Disable &quot;Server Manager&quot; Starting at login</a> on Windows 2008/2012 Servers (except Core).</li>
<li>Enable and configure WinRM (see below)</li>
</ul>
</blockquote>

<h2>パスワードの複雑性を無効にする</h2>

<p>Windows Server 2012 R2 のみ。</p>

<ol>
<li>サーバー マネージャーのメニューから [ツール] &gt; [ローカル セキュリティー ポリシー] を選択する。</li>
<li>[アカウント ポリシー] &gt; [パスワードのポリシー] &gt; [複雑さの要件を満たす必要があるパスワード] をダブルクリックして [無効] に設定する。</li>
<li>Ctrl-Alt-Del から Administrator のパスワードを <code>vagrant</code> に変更しておくとよい。</li>
</ol>

<h2>ユーザー vagrant を作成する</h2>

<p>Windows Server 2012 R2 のみ。</p>

<ol>
<li>サーバー マネージャーのメニューから [ツール] &gt; [コンピューターの管理] を選択する。</li>
<li>[システム ツール] &gt; [ローカル ユーザーとグループ] &gt; [ユーザー] を選択する。</li>
<li>右クリックから [新しいユーザー] を選択する。</li>
<li>ユーザーを作成する。

<ul>
<li>ユーザー名、パスワードを <code>vagrant</code> にする。</li>
<li>[ユーザーは次回ログオン時にパスワードの変更が必要] のチェックを外す。</li>
<li>[パスワードを無期限にする] をチェックする。</li>
<li>[作成] ボタンを押す。</li>
</ul></li>
<li>管理者に変更する。

<ul>
<li>新しく作成した <code>vagrant</code> 右クリックして [プロパティ] を選択する。</li>
<li>[所属するグループ] タブを開く。</li>
<li><code>Administrators</code> を追加して、[Users] を削除する。</li>
<li>[OK] ボタンを押す。</li>
</ul></li>
</ol>

<h2>UAC を無効にする</h2>

<p>Windows Server 2012 R2、Windows 8.1 共通。</p>

<ol>
<li>msconfig を起動する。たとえば、Windows + R で [ファイル名を指定して実行] を開いて、<code>msconfig</code> と入力して [OK] を押す。</li>
<li>[ツール] タブを開いて、[UAC 設定の変更] を選択して、[起動] ボタンを押す。</li>
<li>スライダーを一番下の [通知しない] にして、[OK] ボタンを押す。</li>
</ol>

<h2>Shutdown Tracker を無効にする</h2>

<p>Windows Server 2012 R2 のみ。</p>

<ol>
<li>[ローカル グループ ポリシー エディター] を起動する。たとえば、Windows + R で [ファイル名を指定して実行] を開いて、<code>gpedit.msc</code> と入力して [OK] を押す。</li>
<li>ツリーから [コンピューターの構成] &gt; [管理者用テンプレート] &gt; [システム] を選択する。</li>
<li>右側のペインから [シャットダウン イベントの追跡ツールを表示する] をダブルクリックする。</li>
<li>[未構成] を [無効] に変更して、[OK] ボタンを押す。</li>
</ol>

<h2>ログオン後にサーバー マネージャーが表示されないようにする</h2>

<p>Windows Server 2012 R2 のみ。</p>

<ol>
<li>[ローカル グループ ポリシー エディター] を起動する。たとえば、Windows + R で [ファイル名を指定して実行] を開いて、<code>gpedit.msc</code> と入力して [OK] を押す。</li>
<li>ツリーから [コンピューターの構成] &gt; [管理者用テンプレート] &gt; [システム] &gt; [サーバー マネージャー] を選択する。</li>
<li>右側のペインから [ログオン時にサーバー マネージャーを自動的に表示しない] をダブルクリックする。</li>
<li>[未構成] を [有効] に変更して、[OK] ボタンを押す。
5．コマンドプロンプトから <code>gpupdate</code> を実行して、その場でポリシーを反映する。</li>
</ol>

<h2>WinRM を有効にする</h2>

<p>Windows Server 2012 R2、Windows 8.1 共通。</p>

<p>コマンドプロンプト上で次のコマンドを実行する。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">winrm quickconfig -q
winrm set winrm/config/winrs @{MaxMemoryPerShellMB=&quot;512&quot;}
winrm set winrm/config @{MaxTimeoutms=&quot;1800000&quot;}
winrm set winrm/config/service @{AllowUnencrypted=&quot;true&quot;}
winrm set winrm/config/service/auth @{Basic=&quot;true&quot;}
sc config WinRM start= auto
</code></pre></div>
<p>Windows Server 2008 では追加の設定が必要になるようなので、<a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> を参照のこと。</p>

<h2>設定しておいたほうが便利そうなこと</h2>

<p><a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> の手順には書いてなかったが、やっておいたほうがよいかもしれないのは次の手順。</p>

<ul>
<li>リモートデスクトップを有効にする: ヘッドレスで利用する場合は、リモートデスクトップでつなぐことになる。いずれにしても有効にしておいたほうが便利だろう。</li>
<li>Windows Update をとめる: 自動でダウンロードしたりインストールしたりする設定は OFF にしておくと、いきなり端末が重くなって悩まされない。</li>
</ul>

<h1>4. Base Box を作成する</h1>

<p>ここまでで準備は完了。ゲスト OS は電源を切っておく。</p>

<p>ホスト OS 側でイメージを Base Box としてパッケージ化していく。</p>

<h2>デフォルトの Vagrantfile を用意</h2>

<p>Box に <code>Vagrantfile</code> を同梱したいので、次の中身を <code>Vagrantfile.txt</code> として保存しておく。</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">Vagrant.configure(&quot;2&quot;) do |config|
  config.vm.guest = :windows
end
</code></pre></div>
<p>「ゲスト OS は Windows だよ」「Vagrant-Windows を使ってゲスト OS に指令をだしてね」という意味だ。</p>

<p>この手順は省略してもよいんだけど、省略した場合は、プロジェクトを作るたびに上の設定を <code>Vagrantfile</code> に書く必要がある (忘れてしまうと、電源起動以外がうまく動かない)。</p>

<h3>参考情報</h3>

<ul>
<li><a href="http://docs.vagrantup.com/v2/vagrantfile/">Vagrantfile - Vagrant Documentation</a>: <code>Vagrantfile</code> の優先順位について書いてある。プロジェクトごとの <code>Vagrantfile</code> に設定がない場合は、Box の <code>Vagrantfile</code> を見に行くそうだ。</li>
</ul>

<h2>vagrant package で Box を作成</h2>

<p>コマンドプロンプトで次のように入力するだけ。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">C:\Users\username&gt;vagrant package --base &quot;Windows 2012 R2&quot; --vagrantfile Vagrantfile.txt
[Windows 2012 R2] Clearing any previously set forwarded ports...
[Windows 2012 R2] Exporting VM...
[Windows 2012 R2] Compressing package to: C:/Users/username/package.box```
</code></pre></div>
<p>カレントディレクトリに <code>package.box</code> というファイル名で出力される。<code>Win2012R2.box</code> や <code>Win81.box</code> などにリネームしておくと分かりやすいだろう。</p>

<h3>補足</h3>

<ul>
<li><code>Windows 2012 R2</code> の部分は VirtualBox の仮想マシン名なので、別名で作った場合は適宜変更すべし。</li>
<li>Vagrantfile.txt が別のディレクトリーにあるときは、そこへのパスを入力すべし。</li>
<li>Vagrantfile を同梱しない場合は、<code>--vagrantfile</code> の指定は不要。</li>
</ul>

<h3>裏側の挙動</h3>

<p>それなりの時間がかかる。内部的には次のような処理をしている様子。</p>

<ol>
<li>ディスクイメージ (この時点で約 8GB) を <code>C:\Users\username\.vagrant.d\tmp</code> の下に圧縮した vmdk として出力する (4GB に圧縮)。</li>
<li><code>box.ovf</code> と <code>Vagrantfile</code> も同じ場所に設置。</li>
<li>tar でカレントディレクトリに <code>package.box</code> として固めて出力。</li>
</ol>

<h3>参考情報</h3>

<ul>
<li><a href="http://docs.vagrantup.com/v2/virtualbox/boxes.html">Creating a Base Box - VirtualBox Provider - Vagrant Documentation</a>: パッケージ化の方法</li>
<li><a href="http://docs.vagrantup.com/v2/cli/package.html">vagrant package - Command-Line Interface - Vagrant Documentation</a>: <code>vagrant package</code> のコマンドライン オプション。</li>
</ul>

<h1>5. Base Box を試す</h1>

<p>ここからは他の OS の Base Box を試す手順とかなり似てくる。</p>

<h2>vagrant box add</h2>

<p>次のコマンドで Box を作成する。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">&gt; vagrant box add Win2012R2 path\to\package.box
Downloading box from URL: file:C:/Users/username/package.box
Extracting box...ate: 124M/s, Estimated time remaining: --:--:--)
Successfully added box &#39;Win2012R2&#39; with provider &#39;virtualbox&#39;!
</code></pre></div>
<p><code>path\to\package.box</code> の部分は 4. で作成した box ファイルへのパスに置き換えて実行してね。</p>

<h3>補足</h3>

<p><code>package.box</code> を Web サーバー上に置いた場合は <code>vagrant box add BoxName http://example.com/package.box</code> のように指定できる。Web 上に公開された Box ファイルの情報を寄せ集めたのが <a href="http://www.vagrantbox.es/">Vagrantbox.es</a> である。</p>

<h3>裏側の挙動</h3>

<p><code>C:\Users\username\.vagrant.d\boxes\Win2012R2\virtualbox</code> に box ファイルの中身が展開される。</p>

<h2>vagrant init</h2>

<p>プロジェクトのディレクトリーを適当に作って、<code>vagrant init</code> する。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">&gt;cd C:\Users\username\Documents
&gt;mkdir Win2012R2
&gt;cd Win2012R2
&gt;vagrant init Win2012R2
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
</code></pre></div>
<p><code>Vagrantfile</code> がカレントディレクトリーに出力される。</p>

<p>ゲスト OS の画面を表示する方法を</p>

<ul>
<li>VirtualBox のウインドウを表示する</li>
<li>リモートデスクトップする</li>
</ul>

<p>のいずれを選ぶかに応じて、<code>Vagrantfile</code> の設定手順が変わる。</p>

<p>VirtualBox のウインドウを表示する場合は、次のように <code># Don&#39;t boot with headless mode</code> の部分のコメントを取り除いておく。</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">  config.vm.provider :virtualbox do |vb|
    # Don&#39;t boot with headless mode
    vb.gui = true

    # Use VBoxManage to customize the VM. For example to change memory:
    #vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;1024&quot;]
  end
</code></pre></div>
<p>リモートデスクトップを利用する場合は、次のような設定を書いておく。</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Port forward RDP
  config.vm.network :forwarded_port, guest: 3389, host: 13389

  # ここより下は省略...
end
</code></pre></div>
<p>ゲストの電源を入れたあと、ホスト上のリモートデスクトップ クライアントを立ち上げて <code>localhost:13389</code> に繋ぎに行けばよい。詳しくは <a href="/ja/blog/2014/02/06/rdp-port/">リモート デスクトップでポート番号を指定して接続する方法</a> を参照してほしい。なお、<a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> にはホスト側を <code>3389</code> とする設定例が載っていたが、それではうまく動かなかった。</p>

<h2>vagrant up</h2>

<p>いよいよ起動。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">&gt; vagrant up
Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
[default] Clearing any previously set forwarded ports...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 3389 =&gt; 13389 (adapter 1)
[default] Booting VM...
[default] Waiting for machine to boot. This may take a few minutes...
[default] Machine booted and ready!
[default] Mounting shared folders...
[default] -- /vagrant
[default] VM already provisioned. Run `vagrant provision` or use `--provision` t
o force it
</code></pre></div>
<p><code>vagrant up</code> すると端末が上がってくる。</p>

<p><center><img src="http://farm4.staticflickr.com/3750/12637326905_8f2cfe0da7.jpg" width="500" height="365"></center></p>

<h3>補足</h3>

<ul>
<li>コピーが発生するので初回は少し待つ。</li>
<li>VirtualBox を起動しておくと、イメージが登録されて起動してくる様子を確認できる。</li>
<li>ログオンしてみると、<code>C:\vagrant</code> にホスト側のプロジェクト ディレクトリーが見えているのが確認できる。</li>
</ul>

<h3>裏側の挙動</h3>

<ul>
<li><code>C:\Users\username\.vagrant.d\boxes\Win2012R2\virtualbox</code> の中身を <code>C:\Users\username\VirtualBox VMs</code> にコピーする。</li>
<li>上記イメージを VirtualBox に登録して、電源が入る。</li>
<li>プロジェクト ディレクトリーが <code>C:\vagrant</code> で見えているのは「VirtualBox の共有フォルダーの機能」と「<a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> が共有へのシンボリックリンクを作る機能」の合わせ技で実現している。シンボリックリンクは WinRM で <a href="https://github.com/WinRb/vagrant-windows/blob/v1.5.1/lib/vagrant-windows/scripts/mount_volume.ps1.erb"><code>mount_volume.ps1</code></a> を実行して作成している。</li>
</ul>

<h1>まとめ</h1>

<p>以上で手順の解説は終わる。このあとは <code>Vagrantfile</code> を編集していろいろ試すとよい。</p>

<p><a href="https://github.com/WinRb/vagrant-windows">Vagrant-Windows</a> が頑張ってくれているおかげで、Linux と同じように Vagrant の機能を使えることがわかった。手順が面倒だったのは、ライセンス上の問題で Windows の Box がネットに落ちていないから。</p>

<p>実際に使ってみると、VirtualBox がたまに落ちたり、ゲスト OS 内で <code>VirtualBoxService.exe</code> や <code>rundll32.exe aepdu.dll,AePduRunUpdate</code> が CPU を消費しまくっている現象が起きたりして悲しい。VirtualBox や Windows の問題なので、Vagrant は悪くない。</p>
]]></description>
		</item>

		<item>
			<title>リモート デスクトップでポート番号を指定して接続する方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/02/06/rdp-port/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/02/06/rdp-port/</guid>
			<pubDate>Thu, 06 Feb 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Windows のリモート デスクトップは 3389 番ポートを利用している。</p>

<p>通常はポート番号は変わらないんだけど、ポートフォワードで別のポート番号で待機する場合がある。</p>

<p>たとえば、NAT で外に出ていく仮想マシンにリモートデスクトップで接続したい場合、ポートフォワードを使って、ゲストの 3389 番をホストの 13389 番などで公開することがある。</p>

<h1>「ホスト名:ポート番号」でいける</h1>

<p>13389 番で待機中のリモートデスクトップサービス接続するには、[コンピューター] の欄に <code>localhost:13389</code> と入力すればよい。</p>

<p><center><img src="http://farm3.staticflickr.com/2812/12332461233_3fd4d74907.jpg" width="500" height="309"></center></p>

<p>コマンドラインから接続する場合は <code>mstsc /v:localhost:13389</code> と入力する。</p>

<h2>調べた手順</h2>

<p>まずは、コマンドライン オプションでの指定方法を調べるために、<code>mstsc /?</code> を実行したところ、</p>

<blockquote>
<p>/v:&lt;サーバー[:ポート]&gt; -- 接続先のリモート コンピューターを指定します。</p>
</blockquote>

<p>と出てきた。</p>

<p>同じ書き方を GUI でも試したらうまくいった。</p>

<h2>ローカルの 3389 にポートフォワードできない問題</h2>

<p>ちなみに、先ほどの例で、ゲストの 3389 番をホストの 3389 番にポートフォワードして、<code>localhost</code> に接続しようとすると</p>

<blockquote>
<p>既に進行中のコンソール セッションがあるため、リモート コンピューター上の他のコンソール セッションに接続できませんでした。</p>
</blockquote>

<p>というエラーがでて接続できない。</p>

<p>要は「自分自身に RDP できませんよ」ということなんだろうけど、リモート デスクトップを有効にしてなくてもこのエラーがでてしまう…。</p>

<p>ということは、接続を試みる前にクライアント側でエラーを表示しているっぽい。少し納得できないところではあるが、仕方がない。</p>
]]></description>
		</item>

	</channel>
</rss>
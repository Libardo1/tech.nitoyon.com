<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Wed, 02 Apr 2014 01:27:57 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>D3.js で自作クラスにイベント発行機能を追加する</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/04/02/d3-event-dispatch/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/04/02/d3-event-dispatch/</guid>
			<pubDate>Wed, 02 Apr 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>D3.js を使っていると、自作クラスのイベント発行も D3.js を使いたくなる。そんなときには <a href="https://github.com/mbostock/d3/wiki/Internals#d3_dispatch"><code>d3.dispatch</code></a> を使うとよい。</p>

<h1>使う側の実装</h1>

<p>イメージしやすいように、最初に使う側のコードを示しておく。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">var myButton = new MyButton(d3.select(&quot;button&quot;));
myButton.on(&quot;myclick&quot;, function(e) {
  alert(e.name); // MyEvent
  console.log(this, e); // MyButton, { name: &quot;MyEvent&quot;, MouseEvent }
});
</code></pre></div>
<p>こんな感じで、自作の <code>MyButton</code> クラスで <code>myclick</code> イベントを発行したい。</p>

<h1>MyButton の実装</h1>

<p>では、さっそく <code>MyButton</code> の実装。最初はコンストラクターから。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">function MyButton(selector) {
  // ボタンがクリックされたときに onClick を呼ぶ
  selector.on(&#39;click&#39;, this.onClick.bind(this));

  // myclick イベントを発行する dispatcher を作成
  this.dispatcher = d3.dispatch(&quot;myclick&quot;);
}
</code></pre></div>
<p><code>d3.dispatch</code> の引数に「発行したいイベント名」を渡して、dispatcher オブジェクトを取得している。複数のイベントを出す場合は <code>d3.dispatch(&quot;event1&quot;, &quot;event2&quot;);</code> のようにする。</p>

<p>dispatcher オブジェクトには次の 2 種類のメソッドが定義される。</p>

<ul>
<li>イベントを発行するためのメソッド (イベント名と同じ名前)</li>
<li>イベントを監視するための <code>on(type, listener)</code></li>
</ul>

<h2>イベント発行処理</h2>

<p>イベントの発行処理からみていこう。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">MyButton.prototype.onClick = function() {
  this.dispatcher.myclick.call(this, {
    name: &quot;MyEvent&quot;,
    event: d3.event
  });
};
</code></pre></div>
<p>ボタンがクリックされたときに <code>myclick</code> イベントを発行している。今回は <code>myclick</code> イベントと名付けたので、<code>dispatcher.myclick()</code> を実行すれば、<code>myclick</code> イベントが発火する。引数はそのままリスナーに渡される。</p>

<p><code>Function.call()</code> を使っているのは、リスナー側で <code>this</code> が <code>dispatcher</code> ではなく <code>MyButton</code> にしたいから。</p>

<h2>on の実装</h2>

<p>次に <code>MyButton.prototype.on()</code> の実装。こちらは、単純に <code>dispatcher.on()</code> に中継している。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">MyButton.prototype.on = function() {
  return this.dispatcher.on.apply(this.dispatcher, arguments);
};
</code></pre></div>
<p>単純に中継しているだけなので、もっと簡略化して書けそうである。そう、<a href="https://github.com/mbostock/d3/wiki/Internals#d3_rebind"><code>d3.rebind</code></a> を使えばね。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">function MyButton(selector) {
  selector.on(&#39;click&#39;, this.onClick.bind(this));
  this.dispatcher = d3.dispatch(&quot;myclick&quot;);

  // !!! ここが追加 !!!
  d3.rebind(this, this.dispatcher, &quot;on&quot;);
}
</code></pre></div>
<p>コンストラクターに 1 行追加したおかげで、<code>MyButton.prototype.on()</code> が不要になった。コードは短くなったが、<code>d3.rebind()</code> の学習コストが増えたので微妙なところではある。</p>

<p>ちなみに、<code>d3.rebind()</code> は 11 行の短い関数。上で手で書いたのとだいたい同じ動作になるのが分かるはず。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">d3.rebind = function(target, source) {
  var i = 1, n = arguments.length, method;
  while (++i &lt; n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
  return target;
};
function d3_rebind(target, source, method) {
  return function() {
    var value = method.apply(source, arguments);
    return value === source ? target : value;
  };
}
</code></pre></div>
<p>これで目的は完遂。めでたし。</p>

<p>完成後の全体のソースコードを貼っておく。</p>
<div class="highlight"><pre><code class="html language-html" data-lang="html">&lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;body&gt;
&lt;button&gt;click me&lt;/button&gt;

&lt;script&gt;
function MyButton(selector) {
  selector.on(&#39;click&#39;, this.onClick.bind(this));
  this.dispatcher = d3.dispatch(&quot;myclick&quot;);
  d3.rebind(this, this.dispatcher, &quot;on&quot;);
}

MyButton.prototype.onClick = function() {
  this.dispatcher.myclick.call(this, {
    name: &quot;MyEvent&quot;,
    event: d3.event
  });
};

var myButton = new MyButton(d3.select(&quot;button&quot;));
myButton.on(&quot;myclick&quot;, function(e) {
  alert(e.name); // MyEvent
  console.log(this, e); // MyButton, { name: &quot;MyEvent&quot;, MouseEvent }
});
&lt;/script&gt;
&lt;/body&gt;
</code></pre></div>
<h1>複数イベント登録の罠</h1>

<p>D3.js のイベントで厄介な点は、1 つのイベント名に複数のイベントを登録できないところ。新しいイベントを登録したら、古いほうは消される…。DOM イベントと同じ感覚でいると混乱してしまう。</p>

<p>これを回避するには <code>myclick.foo</code> や <code>myclick.bar</code> のように optional namespace をつけてイベント登録する必要がある。くわしくは <a href="https://github.com/mbostock/d3/wiki/Selections#on"><code>selection.on</code></a> を参照あれ。</p>
]]></description>
		</item>

		<item>
			<title>Git for Windows でレポジトリー上の CR LF を LF に変換する手順</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/03/28/git-crlf-to-lf/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/03/28/git-crlf-to-lf/</guid>
			<pubDate>Fri, 28 Mar 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git for Windows では改行コードが「レポジトリー上は LF」「ワーキング ディレクトリーは CR LF」となるように、git config の <code>core.autocrlf</code> が <code>true</code> となる状態でインストールされる (インストーラーでデフォルトの [Checkout Windows-style, commit Unix-style line endings] を選択した場合)。</p>

<p>Windows 以外の文化圏の人は CR LF を見ると CR がゴミに見えるので、妥当な設定だろう。</p>

<p>標準設定の <code>autocrlf</code> が <code>true</code> のときに、レポジトリー上に CR LF なファイルが紛れ込んでいないか調べたり、紛れ込んだ CR LF を LF に変換したかったのだけど、この手順が少しややこしかったので記事にまとめておく。</p>

<p>(<code>autocrlf</code> を <code>false</code> にして clone したらすぐに分かる…という話なんだけど、大きなレポジトリーを clone しなおすのはストレスフルなので、その場で確認する手順を調べてみた)</p>

<p>※ Git for Windows は 1.9 と 1.8.4 で検証した</p>

<h1>レポジトリー上に CR LF のファイルがあるか調べたい</h1>

<p>レポジトリー上のファイルの改行コードは LF で統一しているつもりなのに、CR LF のファイルが混ざりこんでたら悲しい。</p>

<p><code>autocrlf</code> が <code>true</code> な状態で、レポジトリー上に CR LF のファイルが入ってないか調べるには次のようにする。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git grep --cached -I $&#39;\r&#39;
</code></pre></div>
<p>オプションの補足:</p>

<ul>
<li><code>--cached</code> を指定しないと、ワーキング ディレクトリー上のファイルから CR を探してしまう。つまり、<code>core.autocrlf</code> が <code>true</code> な状態では、すべての改行がヒットしてしまう。</li>
<li><code>-I</code> でバイナリー ファイルを無視している。</li>
</ul>

<h2>実行例</h2>

<p><a href="https://gist.github.com/nitoyon/9808563">https://gist.github.com/nitoyon/9808563</a> に CRLF と LF のファイルの 2 つがあるレポジトリーを用意してみた。</p>

<p><code>core.autocrlf</code> が <code>true</code> な状態で clone すると、両方のファイルが CRLF でチェックアウトされる。</p>

<p>この状態で上記のコマンドを実行してみると、CR LF のほうだけが引っかかる。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git grep --cached -I $&#39;\r&#39;
crlf-test.txt:End of Line Character Test^M
crlf-test.txt:^M
crlf-test.txt:Which do you like CR LF or LF?^M
crlf-test.txt:^M
crlf-test.txt:This file uses &quot;CR LF&quot;!!!!^M
crlf-test.txt:^M
crlf-test.txt:Clone me!^M
</code></pre></div>
<p>めでたし。</p>

<h1>レポジトリー上の CR LF を LF に変換したい</h1>

<p>万が一、レポジトリー上に CR LF を発見したら、LF に統一しよう。</p>

<p>こちらも <code>core.autocrlf</code> が <code>true</code> になっている状態からの手順を示しておく。</p>

<ol>
<li><p>一時的に <code>core.autocrlf</code> を <code>false</code> に設定する。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git config core.autocrlf false
</code></pre></div></li>
<li><p>LF でチェックアウトするために、ワーク ディレクトリーのファイルを全部削除してから、チェックアウトする (一度削除しないと反映されないことがあった!!)。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ rm -rf .
$ git checkout .
</code></pre></div></li>
<li><p>CR LF になっているファイルを何らかのエディターで LF に変換する。</p></li>
<li><p>コミットする。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git add . &amp;&amp; git commit
</code></pre></div></li>
<li><p><code>autocrlf</code> の設定を戻す。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git config core.autocrlf true
</code></pre></div></li>
</ol>

<h2>実行例</h2>

<p>再び、<a href="https://gist.github.com/nitoyon/9808563">https://gist.github.com/nitoyon/9808563</a> で試してみる。</p>

<p>作業完了後の diff はこんな感じになる。</p>
<div class="highlight"><pre><code class="diff language-diff" data-lang="diff">$ git diff HEAD~
diff --git a/crlf-test.txt b/crlf-test.txt
index ad9608a..85a3c62 100644
--- a/crlf-test.txt
+++ b/crlf-test.txt
@@ -1,7 +1,7 @@
-End of Line Character Test
-
-Which do you like CR LF or LF?
-
-This file uses &quot;CR LF&quot;!!!!
-
-Clone me!
+End of Line Character Test
+
+Which do you like CR LF or LF?
+
+This file uses &quot;CR LF&quot;!!!!
+
+Clone me!
</code></pre></div>
<p>違いが分かりにくい diff が表示されていて悲しい。git の diff では CR があると <code>^M</code> として警告してくれるはずなんだけど、<code>^M</code> が表示されるのは <code>+</code> から始まる行だけのようだ。今回のような「CR LF が LF になった」ケースでは CR があるのは <code>-</code> の行なので <code>^M</code> は表示してくれない…。</p>

<p><code>--ignore-space-at-eol</code> を指定して行末スペースの変更を無視したら、diff が消え去るので、うまくいっていると信じる。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git diff --ignore-space-at-eol HEAD~
</code></pre></div>
<p><code>git grep</code> でも CR を見つけられなくなるので、うまくいっていると信じる。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git grep --cached -I $&#39;\r&#39;
</code></pre></div>
<h1>まとめ</h1>

<p>Windows はつらいよ。</p>
]]></description>
		</item>

		<item>
			<title>全角半角混在の文章で 1 行に半角何文字分あるか調べる方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/03/14/utf8-str-count/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/03/14/utf8-str-count/</guid>
			<pubDate>Fri, 14 Mar 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>「ソースコードは 1 行あたり 80 文字以内」とか「コミットログは横幅 72 文字以内」とか、文字数に関するルールはいろいろある。</p>

<p>ルールを徹底するには機械的に判定したい。と思って、簡単なスクリプトを書こうとした瞬間、意外と「1 行あたりの文字数」をカウントするのが難しいことに気付いた。</p>

<p>たとえば、「あA」は「全角 1 文字＋半角 1 文字」なので半角 3 文字分としてカウントしたい。</p>

<p>しかし、UTF-8 の世界では「あA」の文字長は 2 だし、バイト数は 4 (あ=0xE38182、a=0x41) である。</p>

<p>EUC-JP や Shift-JIS の時代なら、単純に「あA」は 3 バイトなので「半角 3 つ分」とすぐ分かったのだけども… (逆に文字長を調べるのが面倒だった)。</p>

<p>はて、どうするか？　というのがこの記事でいいたいこと。</p>

<h1>East Asian Width を見よ</h1>

<p>いろいろとググった結果、Unicode の <a href="http://www.unicode.org/reports/tr11/">East Asian Width</a> を参照するとよいらしい。</p>

<p><a href="http://www.unicode.org/reports/tr11/">East Asian Width</a> で <a href="http://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt">EastAsianWidth.txt</a> という資料が紹介されている。この資料では、全ての文字の横幅が 6 つのカテゴリーに分類されている。</p>

<p>そのカテゴリーが次の 6 つ。</p>

<table><thead>
<tr>
<th>分類</th>
<th>意味</th>
<th>例</th>
</tr>
</thead><tbody>
<tr>
<td>F</td>
<td>East Asian Fullwidth</td>
<td>Ａ (全角の A)</td>
</tr>
<tr>
<td>H</td>
<td>East Asian Halfwidth</td>
<td>ｱ (半角のア)</td>
</tr>
<tr>
<td>Na</td>
<td>East Asian Narrow</td>
<td>A (半角の A)</td>
</tr>
<tr>
<td>W</td>
<td>East Asian Wide</td>
<td>ア (全角のア)</td>
</tr>
<tr>
<td>A</td>
<td>East Asian Ambiguous</td>
<td>○☆※ (一部の記号)、Д (ロシア語)</td>
</tr>
<tr>
<td>N</td>
<td>Neutral (Not East Asian)</td>
<td>À</td>
</tr>
</tbody></table>

<p>たとえば、「あ」なら <code>3042;W # HIRAGANA LETTER A</code> と書いてある。カテゴリーは <code>W</code> なので、全角 （＝半角 2 文字分) だと分かる。</p>

<p>ということで、<code>F</code>・<code>W</code> は全角 (＝ 2 文字分)、<code>H</code>・<code>Na</code>・<code>N</code> は半角 (＝ 1 文字) として扱えばよいわけだ。</p>

<h2>Ambiguous をどうするか問題</h2>

<p>で、<code>A</code> (East Asian Ambiguous) の扱いが難しい。</p>

<p>例にあるような ○☆※ などの記号を見ると全角として扱いたくなる。しかし、<code>A</code> にはロシア語も含まれている。</p>

<p><code>A</code> を一律に全角として扱うと、「1 行に 80 文字以上書いたら警告出すシステム」を作ると、「80 文字超えてないのに警告出るんだけどなにこれ？」とロシアの人に怒られてしまうかもしれない。</p>

<p>具体例をみてみよう。ロシア語でヘンタイをあらわす「Хентай」をいくつかの環境で表示してみた。</p>

<p><center><img src="http://farm8.staticflickr.com/7394/13131518004_f517a03418_o.png" width="680" height="212"></center></p>

<p>Cent OS のコンソールでは半角になっているが、MS ゴシックなら全角になる。プロポーショナルなメイリオでは、だいたい半角で表示している。</p>

<p>悩ましい・・・！</p>

<p>とりあえず、Ambiguous は 1 文字として扱うのが安全そうだ。ある環境で 80 文字以上に見えていても、別の環境では 80 文字以内に見えている…ということは十分に起こりうるのだ…！</p>

<h1>いろんな言語で判別したいよ</h1>

<p>さて、一次情報と判定方法が分かったところで、いろんなスクリプト言語で実装するにはどうしたらいいだろう。<code>&quot;East Asian Width&quot; 言語名</code> で検索したら、それなりに情報が出てくる。</p>

<h2>Python</h2>

<p>一番簡単だったのが Python さん。標準モジュールの <code>unicodedata</code> に <a href="http://docs.python.org/2/library/unicodedata.html#unicodedata.east_asian_width"><code>unicodedata.east_asian_width(unichr)</code></a> なるメソッドがあった。</p>
<div class="highlight"><pre><code class="python language-python" data-lang="python">&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.east_asian_width(u&#39;あ&#39;)
&#39;W&#39;
&gt;&gt;&gt; unicodedata.east_asian_width(u&#39;※&#39;)
&#39;A&#39;
</code></pre></div>
<h2>PHP</h2>

<p>伝家の宝刀 mb うんたらの関数群の中に、期待通り <a href="http://www.php.net/manual/en/function.mb-strwidth.php"><code>mb_strwidth()</code></a> がいた。</p>
<div class="highlight"><pre><code class="php language-php" data-lang="php">echo mb_strwidth(&quot;あ&quot;); // 2
echo mb_strwidth(&quot;※&quot;); // 1
</code></pre></div>
<p>Ambiguous は <code>1</code> を返すようだ。</p>

<h2>Ruby</h2>

<p>標準ではムリだけど、<a href="https://github.com/janlelis/unicode-display_width"><code>unicode-display_width</code></a> なるモジュールが gem にあった。</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">require &#39;unicode/display_width&#39;
&quot;○&quot;.display_width #=&gt; 1
&#39;一&#39;.display_width #=&gt; 2
</code></pre></div>
<p>現時点では Ambiguous は全部 <code>1</code> を返しているよ、ということが TODO のところに書いてある。</p>

<h2>JavaScript</h2>

<p>こちらも標準ではムリだけど、<a href="https://github.com/komagata/eastasianwidth"><code>eastasianwidth</code></a> なるモジュールが npm にあがっている。</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript">var eaw = require(&#39;eastasianwidth&#39;);
console.log(eaw.eastAsianWidth(&#39;￦&#39;)) // &#39;F&#39;
console.log(eaw.eastAsianWidth(&#39;｡&#39;)) // &#39;H&#39;
console.log(eaw.eastAsianWidth(&#39;뀀&#39;)) // &#39;W&#39;

console.log(eaw.length(&#39;あいうえお&#39;)) // 10
</code></pre></div>
<p>ソースコードを読んだところ、Ambiguous は <code>2</code> を返している。</p>

<h2>Perl</h2>

<p>CPAN にある <a href="http://search.cpan.org/%7Eaudreyt/Unicode-EastAsianWidth-1.33/lib/Unicode/EastAsianWidth.pm"><code>Unicode::EastAsianWidth</code></a> を使えば、次のようにできるらしい。</p>
<div class="highlight"><pre><code class="perl language-perl" data-lang="perl">use Unicode::EastAsianWidth;

$_ = chr(0x2588); # FULL BLOCK, an ambiguous-width character

/\p{InEastAsianAmbiguous}/; # true
/\p{InFullwidth}/;          # false
</code></pre></div>
<p>長さやカテゴリーが返ってこない分、少し面倒そう。</p>

<h1>まとめ</h1>

<p>3 行でまとめちゃう。</p>

<ul>
<li>UTF-8 では半角何文字分で表示されるのかを調べるのは少し面倒になった。</li>
<li>しかも、環境によって何文字分で表示するかは違うので、完全に調べきるのはあきらめたほうがよい。</li>
<li>一次情報は <a href="http://www.unicode.org/reports/tr11/">East Asian Width</a> にあるが、各種スクリプト言語には便利なライブラリーを使えばよい。</li>
</ul>
]]></description>
		</item>

		<item>
			<title>ConEmu 突っ込んだら Git for Windows の Git Bash がカッコよくなった</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/03/07/fancy-git-bash/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/03/07/fancy-git-bash/</guid>
			<pubDate>Fri, 07 Mar 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git for Windows の Git Bash の配色がイマイチだなーと思ってググってたら、<a href="http://sourceforge.net/projects/console/">Console2</a> だとか <a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> を使うと楽にできるっぽいことが、Stack Overflow とか英語のブログで見つかった。</p>

<p>そこで、<a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> を試してみたら色々と幸せになった (<a href="http://sourceforge.net/projects/console/">Console2</a> はそのままでは日本語が使えなかった。解決方法はあるらしいけど…)。</p>

<p>左が Git Bash、右が ConEmu さん。</p>

<p><center><img src="http://farm8.staticflickr.com/7428/12971385585_16c5ed8db4_o.png" width="600" height="503"></center></p>

<p>アンチエイリアス効いてるし、色もオサレ。</p>

<h1>起動から色を設定するまで</h1>

<p><a href="https://code.google.com/p/conemu-maximus5/">ConEmu</a> を起動すると、初回は設定の保存場所などを確認される。お好みで答えて [OK] を押すと、タブ化した MS-DOS プロンプトみたいなのが立ち上がってくる。</p>

<p>[Win] + [N] を押すと新しいタブを開始できる。</p>

<p><center><img src="http://farm3.staticflickr.com/2146/12971527963_69fbb4b171.jpg" width="500" height="364"></center></p>

<p>上のキャプチャーのように、どんな環境のタブを開始するかをメニューで聞いてきている (<code>{cmd}</code> やら <code>{cmd (Admin)}</code> やら <code>{PowerShell}</code> やら <code>{Git bash}</code> やら <code>{Putty}</code> やら…。システムにインストールされてるものを自動で検知して、立ち上げられるようになっているようだ)。</p>

<p><code>{Git Bash}</code> を選ぶと、Git Bash が新しいタブに出てくる。</p>

<p>この時点ではデフォルトの配色なんだけど、タブの部分を右クリックしたら、いろんなカラースキーマを試せるようになっているのが手軽だ。</p>

<p><center><img src="http://farm3.staticflickr.com/2416/12971385475_b32ca52128.jpg" width="500" height="495"></center></p>

<p><code>&lt;Terminal.app&gt;</code> (MacOS 風) とか、<code>&lt;xterm&gt;</code> (X Window) とかあるけど、世間的には <code>Solarized</code> が人気っぽいので、<code>&lt;Solarized (Luke Maciak)&gt;</code> を選んだ。</p>

<p>色が気に入ったら、全体設定の [Features] &gt; [Colors] からデフォルトのカラースキーマを選んでおくと、次回からはその色で表示してくれるようになる。</p>

<h1>多すぎる設定項目</h1>

<p>設定パネルをみたら、気力を失うぐらいの設定項目がある。</p>

<p><center><img src="http://farm8.staticflickr.com/7364/12971527793_387e9b4495.jpg" width="500" height="370"></center></p>

<p>ショートカットキーにからしか使えない機能も多数あるようで、上下左右分割とかもできるっぽい。プラグインとかマクロとかもあるご様子…。</p>

<p>とりあえずは、タブの使い勝手が気になったので、[Features] &gt; [Tabs] から [Lazy tab switch] と [Recent mode] をオフにしておいた。</p>

<p>あと、ちょっとキーコンフィグをいじって、標準的な Windows っぽいやつに置き換えてみたりした。</p>

<h1>エディター起動中の Duplicate root が便利</h1>

<p>ちょっと使っていて便利だなー、と思ったのは、タブの右クリック メニューにある [Duplicate root...]。カレントディレクトリをそのまま引き継いで、新しいタブで Git Bash を起動してくれる。</p>

<p>何がうれしいかというと、コミットとか <code>rebase -i</code> でエディターが立ち上がっているときに、log とか diff とか見たくなることはそれなりにあると思う。こんなときにも、[Duplicate root...] して、新しい GitBash 上で確認できる。いままでは、別の Git Bash を立ち上げるとか、一時的なコミットログを書くとかしてたので、便利になった。</p>

<h1>まとめ</h1>

<ul>
<li>ConEmu 便利だよ。</li>
<li>タブ化して、色とかフォントがキレイになるだけでもメリットある。</li>
<li>他にも便利な機能はいっぱいありそう。</li>
</ul>
]]></description>
		</item>

		<item>
			<title>Windows の Jenkins で JENKINS_HOME を別のフォルダーに変更する方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/02/25/jenkins-home-win/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/02/25/jenkins-home-win/</guid>
			<pubDate>Tue, 25 Feb 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Jenkins を Windows 環境に MSI ファイルで導入すると、デフォルトでは <code>C:\Program Files (x86)</code> にインストールされる (64 ビットの場合)。</p>

<p>Java の実行環境を同梱してくれていたり、自動でサービスに登録してくれたりして嬉しいのだけど、気になるのが <code>JENKINS_HOME</code> が <code>C:\Program Files (x86)\Jenkins</code> になってしまう点。ジョブやワークスペース、プラグインなどのデータなどが <code>Program Files</code> の下に置かれてしまう。Windows 的な作法では「アプリケーションのデータは <code>ProgramData</code> や <code>AppData</code> に置きましょう」となっているので少し気持ち悪い。</p>

<p><code>JENKINS_HOME</code> を変更するには環境変数を設定したらいけそうなんだけど、MSI から導入した場合は環境変数ではなく <code>jenkins.xml</code> の値が優先されるようだ (jar から直接実行する場合は未確認)。</p>

<p>ということで、「MSI から導入した Jenkins で <code>JENKINS_HOME</code> を変更する手順」をまとめておく。Jenkins のバージョンは 1.550。</p>

<p>ここでは、<code>JENKINS_HOME</code> を <code>C:\ProgramData\Jenkins</code> に変更するものとする。</p>

<ol>
<li>Jenkins サービスをとめる。</li>
<li><p>インストール フォルダーの <code>jenkins.xml</code> を開いて</p>
<div class="highlight"><pre><code class="xml language-xml" data-lang="xml">  &lt;env name=&quot;JENKINS_HOME&quot; value=&quot;%BASE%&quot;/&gt;
</code></pre></div>
<p>を次のように書き換える (改行コードが LF なので、メモ帳ではできなくはないが探すのが少し大変)。</p>
<div class="highlight"><pre><code class="xml language-xml" data-lang="xml">  &lt;env name=&quot;JENKINS_HOME&quot; value=&quot;%ProgramData%\Jenkins&quot;/&gt;
</code></pre></div></li>
<li><p>インストール フォルダーの次のファイル・フォルダー<strong>以外</strong>を <code>%ProgramData%\Jenkins</code> に<strong>移動</strong>する (コピーだと、<code>jobs</code> 内にシンボリックリンクがあった場合に壊れてしまうので、必ず「移動」すること)。</p>

<ul>
<li><code>jre</code> フォルダー</li>
<li><code>jenkins.err.log</code></li>
<li><code>jenkins.exe</code></li>
<li><code>jenkins.exe.config</code></li>
<li><code>jenkins.out.log</code></li>
<li><code>jenkins.war</code></li>
<li><code>jenkins.war.bak</code></li>
<li><code>jenkins.war.tmp</code></li>
<li><code>jenkins.wrapper.log</code></li>
<li><code>jenkins.xml</code></li>
</ul></li>
<li><p>Jenkins サービスを開始する。</p></li>
<li><p><code>http://localhost:8080/systemInfo</code> から <code>JEKNINS_HOME</code> が設定した値になっていることを確認する。ジョブやプラグインなどの情報が引き継がれているかどうかも合わせて確認する。</p></li>
</ol>

<p>とっても簡単ですね。インストーラーで設定できるようになっていると、より嬉しいので、気が向いたら pull request してみよう・・・。</p>
]]></description>
		</item>

	</channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Tue, 08 Jan 2013 00:55:40 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>うちの年賀状2013</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/01/08/nenga/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/01/08/nenga/</guid>
			<pubDate>Tue, 08 Jan 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>毎年恒例で、一年の最初のエントリは我が家の年賀状でのご挨拶です。</p>

<p><center><img src="http://farm9.staticflickr.com/8327/8357146769_ddc6a148bd.jpg" width="357" height="500"></center></p>

<p>今年は映画ポスター風の実写で作成してみました。</p>

<h1>twitter アイコン</h1>

<p>毎年、twitter のアイコンを年賀状から抜粋しているのですが、自分の実写の顔をそのまま twitter のアイコンにするのは抵抗があったので、12 年前に描いた年賀状を使うことにしました。12 年間、データが残っていたのが驚き。</p>

<p><center><img src="http://farm9.staticflickr.com/8083/8357161789_f84bd3d726_o.jpg" width="612" height="612"></center></p>

<p>今年もよろしくおねがいします。</p>
]]></description>
		</item>

		<item>
			<title>Jekyll の 0.12.0 でシンタックス ハイライトが便利になった</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/12/25/jekyll-0-12-0/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/12/25/jekyll-0-12-0/</guid>
			<pubDate>Tue, 25 Dec 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>※ これは <a href="https://www.google.co.jp/search?q=%E3%81%9D%E3%82%93%E3%81%AA%E3%82%82%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%84">Jekyll アドベントカレンダー</a> の 25 日目の記事です</p>

<p>このブログの生成にも利用している Jekyll が約 1 年ぶりにバージョン アップして 0.12.0 になった。<a href="http://rubygems.org/gems/jekyll">RubyGems</a> に公開されているので、<code>gem update</code> で更新できるはず。</p>

<p>この記事では、0.12.0 で個人的に注目している「シンタックス ハイライトに関する改善点」を 2 つ紹介する。</p>

<p>Jekyll の良さについては、<a href="/ja/blog/2012/09/20/moved-completed/">俺の最強ブログ システムが火を噴くぜ</a> で記事にしているので、知らない人はそちらからどうぞ。</p>

<h1>Redcarpet 2 のサポート</h1>

<p>まず 1 つ目は Redcarpet 2 のサポート。</p>

<p>Redcarpet は GitHub の中の人によって開発されている Markdown パーサーて、<a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a> が使えるのが大きな特徴。</p>

<p>これまでも Jekyll では Redcarpet をサポートしていたが、Redcarpet 2 で外部 API が変わったので、Jekyll からは利用できない状態になっていた。</p>

<p>今回、Jekyll 0.12.0 で Redcarpet 2 の API に対応した。個人的には <code>```</code> での Fenced code blocks が使えるようになったのがうれしい。</p>

<p>たとえば、</p>
<div class="highlight"><pre><code class="text">```ruby
def fib(n);
    n &lt;= 1 ? n : fib(n-1)+fib(n-2)
end
print fib(10)
```
</code></pre></div>
<p>と書くと</p>
<div class="highlight"><pre><code class="ruby">def fib(n);
    n &lt;= 1 ? n : fib(n-1)+fib(n-2)
end
print fib(10)
</code></pre></div>
<p>となる。</p>

<p>これまでは「<code>{% highlight ruby %}</code> と <code>{% endhighlight %}</code> で囲う」という面倒な書き方をしなきゃならなかった。どうしても <code>```</code> を使いたいときは <a href="http://mattn.kaoriya.net/software/lang/ruby/20121011184445.htm">Big Sky :: Jekyll で GitHub みたいな Triple Backtick を使う。</a> のように、独自にプラグインを作るハックもあるにはあった。</p>

<p>ちなみに、Redcarpet を利用するには、<code>_config.yml</code> に次のように書くのを忘れずに。</p>
<div class="highlight"><pre><code class="yaml">markdown:    redcarpet
</code></pre></div>
<h1>シンタックス ハイライトの高速化</h1>

<p>2 つ目は速度の話。</p>

<p>Jekyll はシンタックス ハイライトに pygments を使っている。Ruby で動く Jekyll から、Python で動く pygments を利用するには、何らかの工夫が必要になる。</p>

<p>Jekyll 0.11.2 までは <a href="https://github.com/github/albino">Albino</a> を使っていた。Albino はハイライトするたびに、Python のプロセスを実行して結果を取得していた。ハイライトするコード 1 つごとに Python が 1 プロセス立ち上がっていたので、当然、遅かった。</p>

<p>そこで、Jekyll 0.12.0 では <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a> が利用されるようになった。pygments.rb は高速化のための工夫がほどこされている。</p>

<p>pygments.rb には 0.2 系と 0.3 系があって、それぞれ別の高速化手法が使われていて面白い。</p>

<h2>pygments.rb 0.2 は RubyPython で無理やり</h2>

<p>0.2 では、<a href="http://rubypython.rubyforge.org/">rubypython</a> という Ruby 上で Python インタプリターを動かすライブラリーを使っている。<a href="https://github.com/ffi/ffi">FFI</a> で動的ライブラリーを読み込んでがんばっているようだ。</p>

<p>導入にはビルド環境が必要なので面倒だけど、劇的に高速化された。同一プロセス内で完結するので、プロセス起動のオーバーヘッドが 0 になる。</p>

<p>と、そこまではよかったのだけど、Ruby ごと落ちることがある。再現性はない。うまくいくこともあるし、落ちることもある。自分の環境が Windows だから不安定なのかと思いきや、Jekyll の Issue にも<a href="https://github.com/mojombo/jekyll/pull/667">上がっている</a> ので、RubyPython か FFI の問題なのだろう。</p>

<h2>pygments.rb 0.3 は Python を使いまわす</h2>

<p>0.2 の「Ruby 上で Python」作戦は不安定だったため、0.3 では純粋な Python を呼び出す方式に戻った。ただ、毎回呼び出すのではなく、プロセスを使いまわすようにした。</p>

<p>0.3 でハイライト処理を開始すると、Ruby と pygments を媒介する Python スクリプト <code>mentos.py</code> が立ち上がる。Ruby からは標準入出力を使って <code>mentos.py</code> に処理依頼をして、ハイライト結果を受け取る。複数回ハイライトを実行しても、同じプロセスを使いまわす。</p>

<p>純粋な Python が動くので、プロセスが死ぬような心配もない。0.2 のころに比べれば少しだけオーバーヘッドはある印象だが、Albino に比べれば十分速い。プロセス内に取り込むという暴挙に出て手に負えなくなったものが、ひとたび我に返って、実用に耐える速さと安定性を手に入れた。</p>

<p>ただし、最新の pygments 0.3.3 は Windows では動かない。<code>/dev/null</code> が見つからないとか、いろいろエラーになったので、動くようにして <a href="https://github.com/tmm1/pygments.rb/pull/55">pull request</a> を出しておいた。取り込まれるといいな。</p>

<h1>まとめ</h1>

<p>Jekyll 0.12.0 の個人的にうれしいところをざっと紹介した。その他の変更点は <a href="https://github.com/mojombo/jekyll/blob/master/History.txt">History.txt</a> を見れば載っているので、気になる人はぜひ。</p>
]]></description>
		</item>

		<item>
			<title>text-hatena.js を GitHub に移動した</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/12/21/text-hatena-js-github/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/12/21/text-hatena-js-github/</guid>
			<pubDate>Fri, 21 Dec 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>2005 年ごろに作成して放置していた <a href="http://tech.nitoyon.com/javascript/application/texthatena/download.html">text-hatena.js</a> について、twitter で</p>

<blockquote class="twitter-tweet" lang="ja"><p>@<a href="https://twitter.com/nitoyon">nitoyon</a> さん、2005年くらいのtext-hatena.js をGitHub等に公開は可能でしょうか？ <a href="http://t.co/Z6zylivM" title="http://tech.nitoyon.com/javascript/application/texthatena/download.html">tech.nitoyon.com/javascript/app…</a></p>&mdash; テラまこさん (@teramako) <a href="https://twitter.com/teramako/status/280642151715594240" data-datetime="2012-12-17T11:54:37+00:00">12月 17, 2012</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>というツッコミを受けたので GitHub で公開してみました。</p>

<ul>
<li><a href="https://github.com/nitoyon/text-hatena.js">nitoyon / text-hatena.js - GitHub</a></li>
</ul>

<p>いま text-hatena.js のコードを読み返すと、グローバルな名前空間を汚染してたり、Object.extend() を定義してたりと、いろいろ酷い。</p>

<p>当時は今に比べると JavaScript の知識も浅かったが、浅いなりに prototype.js のコードを読んだり、真似したりして勉強していたことを思い出した。</p>

<h1>2005 年の話</h1>

<p>text-hatena.js を公開した 2005 年といえば Web 2.0 だとか Ajax という言葉がバズっていて、ちょうどはてなブックマークが登場したあたりでもあった。</p>

<p>はてなブックマークは今よりも遥かに技術者寄りで、ホットエントリーには 2ch まとめや NAVER まとめの姿はなく、Ajax や JavaScript の話であふれていた。それらの記事を目を輝かせながら読み漁っていた。</p>

<p>自分もホットエントリーの仲間に入りたくて作ったものの 1 つが text-hatena.js だった。</p>

<p>公開当時にそこそこ話題になったのもうれしかったが、その後に層々たる人がプレゼン資料やブラウザー拡張に活用してくれたのがうれしかった。もしかしたら、自分が作ったものの中で、一番、人の役に立ってるのかもしれない。</p>

<h1>2012 年の話</h1>

<p>せっかく GitHub に公開するのだから、ついでに 2012 年っぽく書き直してみることにした。</p>

<p>実践したのは次の 3 つ。</p>

<ul>
<li>QUnit で単体試験を定義</li>
<li>無名関数でグローバル変数を汚さないようにしつつ、node.js でも動くように</li>
<li>Grunt でファイルを監視して lint &amp; QUnit</li>
</ul>

<p>特に Grunt を組み込んだことで、ファイルを変更するたびに自動で lint して単体試験が走るのが便利だ。設定を少し変えれば、コード結合や minify もできちゃう。可能性を感じる。</p>

<p>考えてみると、jQuery や node.js は 2005 年当時は存在すらしていなかった。Google Chrome はもちろん Firebug もなかった。</p>

<p>prototype.js が全盛の時代にちまちまブラウザーで動作試験していたコードが、7 年のときを経て、現代の技術を活用して効率的に開発できるようになったわけで、隔世の感で胸が熱くなる。</p>
]]></description>
		</item>

		<item>
			<title>Lightroom 4 では 5.1ch の動画は音なしになっちゃう話</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/12/10/lightroom-5.1ch-mts/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/12/10/lightroom-5.1ch-mts/</guid>
			<pubDate>Mon, 10 Dec 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Lightroom は 4.0 から動画編集ができるようになって便利になっている。動画編集といっても、ざっくりした色合いの修正と開始位置・終了位置の変更ぐらいで、本当にカジュアルな修正にのみ対応している。ザッと撮った動画を、ザッと編集して、ザッと Flickr や Facebook にアップロードできるので重宝している。</p>

<p>最近、新しいビデオカメラ <a href="http://www.amazon.co.jp/SONY-HD%E3%83%93%E3%83%87%E3%82%AA%E3%82%AB%E3%83%A1%E3%83%A9-Handycam-HDR-CX590V-%E3%83%9C%E3%83%AB%E3%83%89%E3%83%BC%E3%83%96%E3%83%A9%E3%82%A6%E3%83%B3/dp/B006WX5P36%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB006WX5P36">SONY HDビデオカメラ Handycam HDR-CX590V ボルドーブラウン</a> を購入した。</p>

<div class="hatena-asin-detail">
  <a href="http://www.amazon.co.jp/SONY-HD%E3%83%93%E3%83%87%E3%82%AA%E3%82%AB%E3%83%A1%E3%83%A9-Handycam-HDR-CX590V-%E3%83%9C%E3%83%AB%E3%83%89%E3%83%BC%E3%83%96%E3%83%A9%E3%82%A6%E3%83%B3/dp/B006WX5P36%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB006WX5P36"><img src="http://ecx.images-amazon.com/images/I/41KN5L1OGHL._SL160_.jpg" class="hatena-asin-detail-image" alt="SONY HDビデオカメラ Handycam HDR-CX590V ボルドーブラウン" title="SONY HDビデオカメラ Handycam HDR-CX590V ボルドーブラウン"></a>
  <div class="hatena-asin-detail-info">
    <p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/SONY-HD%E3%83%93%E3%83%87%E3%82%AA%E3%82%AB%E3%83%A1%E3%83%A9-Handycam-HDR-CX590V-%E3%83%9C%E3%83%AB%E3%83%89%E3%83%BC%E3%83%96%E3%83%A9%E3%82%A6%E3%83%B3/dp/B006WX5P36%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB006WX5P36">SONY HDビデオカメラ Handycam HDR-CX590V ボルドーブラウン</a></p>
    <ul>

      <li>出版社/メーカー: ソニー</li>
      <li>発売日: 2012-01-20</li>
      <li>メディア: エレクトロニクス</li>
      <li><a href="http://www.amazon.co.jp/review/product/B006WX5P36%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D5143%26creativeASIN%3DB006WX5P36">Amazon のレビューを見る</a></li>
    </ul>
  </div>
  <div class="hatena-asin-detail-foot"></div>
</div>

<p>デフォルト設定 (AVCHD 1440i、5.1ch) で動画を撮って、Lightroom に取り込んでみたところ、「音声が再生されない」という問題に出会った。Windows Media Player では音がでるので、ファイル自体には問題がなさそうだ。Lightroom は AVCHD に対応しているので、Lightroom でも再生できるはずなのだが・・・。</p>

<h1>問題は 5.1ch の音声にあった</h1>

<p>調べてみると <a href="http://feedback.photoshop.com/photoshop_family/topics/no_sound_audio_when_playing_mts_video">Lightroom: No sound/audio when playing mts video</a> という公式フォーラムの文章が出てきた。Adobe の中の人からの回答がでていて、ざっくり訳すと次のようになる。</p>

<blockquote>
<p>Lightroom はライセンス上の制限から、ドルビー デジタル オーディオの 2ch 以下にのみ対応している。
そのため、ドルビー デジタル オーディオ 5.1ch のファイルを再生すると音なしになるのは、期待通りの動作である。</p>
</blockquote>

<p>ためしに 2ch で録音してみると、Lightroom でも再生できた (Lightroom 4.2 で試験)。</p>

<h1>5.1ch の音声をステレオに変換する方法</h1>

<p>Lightroom が 5.1ch のビデオをサポートしてくれれば一番いいのだけど、現時点では、Lightroom で扱いたければステレオ (2ch) で動画を撮ったほうがよいだろう。</p>

<p>既に、5.1ch で撮っちゃったビデオがある場合は、2ch にダウンコンバートするしかない。各 OS ごとに色んなソフトがあるのだろうけど、ここではクロスプラットフォームな ffmpeg でステレオ音声に変換する方法を紹介しておく。</p>

<p>コマンドラインから次のように実行すればよい。</p>
<div class="highlight"><pre><code class="text">ffmpeg -i input.mts -vcodec copy -acodec ac3 -ac 2 output.mts
</code></pre></div>
<p>この方法で変換して、Lightroom でも音声つきで再生＆編集できることを確認している。</p>

<p>上のコマンドについて簡単に解説しておく。</p>

<ul>
<li><code>-vcodec copy</code> としているので、動画部分はそのままになる (再エンコードは発生しない)。音声のみの変換なので、短時間で実行は完了する。</li>
<li>元々の音声のコーデックが AC-3 (ドルビーデジタル) ということを前提として <code>-acodec ac3</code> と指定している。</li>
<li><code>-ac 2</code> で出力のチャンネル数が <code>2</code> (ステレオ) になるように指定している。</li>
</ul>

<p>おしまい。</p>

<div class="hatena-asin-detail">
  <a href="http://www.amazon.co.jp/Adobe-Photoshop-Lightroom-Windows-Macintosh%E7%89%88/dp/B007E921HU%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB007E921HU"><img src="http://ecx.images-amazon.com/images/I/51QMvYSTH7L._SL160_.jpg" class="hatena-asin-detail-image" alt="Adobe Photoshop Lightroom 4 Windows/Macintosh版 特別提供版" title="Adobe Photoshop Lightroom 4 Windows/Macintosh版 特別提供版"></a>
  <div class="hatena-asin-detail-info">
    <p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/Adobe-Photoshop-Lightroom-Windows-Macintosh%E7%89%88/dp/B007E921HU%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB007E921HU">Adobe Photoshop Lightroom 4 Windows/Macintosh版 特別提供版</a></p>
    <ul>

      <li>出版社/メーカー: アドビシステムズ</li>
      <li>発売日: 2012-03-16</li>
      <li>メディア: DVD-ROM</li>
      <li><a href="http://www.amazon.co.jp/review/product/B007E921HU%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D5143%26creativeASIN%3DB007E921HU">Amazon のレビューを見る</a></li>
    </ul>
  </div>
  <div class="hatena-asin-detail-foot"></div>
</div>
]]></description>
		</item>

		<item>
			<title>iPhone 3GS では &lt;IFRAME&gt; 内のテキストをコピーできない</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/12/06/iphone-iframe/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/12/06/iphone-iframe/</guid>
			<pubDate>Thu, 06 Dec 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>いまさらだけど、<a href="/ja/blog/2012/04/20/uncopyable/">絶対にコピペできない文章を作ったったwwww</a> が iPhone 対応できていなかったので調べてみた。</p>

<p>「対応できていない」というのは、iPhone では、長押しして選択したら「コピー」のメニューは出るんだけども、「コピー」を選んでも、クリップボードには入らない、という状態だった。「コピーすると別の文字になる」ことを楽しんでもらうコンテンツなのに、クリップボードに入らないのでは面白さがまったく伝わらない。</p>

<p>ということで、原因を調べようと条件を変えて試してみると、Web フォントは関係なかった。別ドメインの <code>&lt;IFRAME&gt;</code> かどうかも関係なかった。単に「iPhone では <code>&lt;IFRAME&gt;</code> の中身をコピーできない」だけだった (iPhone 3GS で試験)。コピーできるようにする方法があるのかもしれないけど、いろいろと検索しても見つからなかった。</p>

<p>実験用に従来の <code>&lt;IFRAME&gt;</code> 版の「コピペできない文章」を貼り付けておくので、iPhone の人は実験してみてほしい。</p>

<iframe src="/misc/js/uncopyable/" width="100%" height="500"></iframe>

<p>本家の <a href="/ja/blog/2012/04/20/uncopyable/">絶対にコピペできない文章を作ったったwwww</a> のほうは、<code>&lt;IFRAME&gt;</code> を使わない形に修正したので、現在は iPhone でも楽しめるようになったはずである。</p>

<p>そもそも、<code>&lt;IFRAME&gt;</code> を使っていたのは、はてなダイアリーだと、スマホでアクセスすると CSS が適用されない touch 版に飛ばされるからで、これを回避するために Google ガジェットで逃げていたのが原因だった。<code>&lt;IFRAME&gt;</code> でも Android では楽しめていたので、一定の成果はあったと思う。</p>
]]></description>
		</item>

	</channel>
</rss>
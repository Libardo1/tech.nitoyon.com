<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Fri, 15 Feb 2013 22:57:22 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>これがスマートフォン向けサイトを作るときの viewport 設定３パターンだ</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/02/15/viewport/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/02/15/viewport/</guid>
			<pubDate>Fri, 15 Feb 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>スマートフォン向けの Web サイトを作るとき、viewport の設定次第で使い勝手が大幅に変わる。</p>

<p>最近はレスポンシブ Web デザインが流行してるけども、その大前提として viewport の設定パターンを抑えておくのは重要だろう。</p>

<p>この記事では、viewport の設定によって、見た目・使い勝手がどう変わるかを解説する。</p>

<h1>パターン1: 何も考えずに HTML を書く</h1>

<p>まずは、viewport を指定せずに、単純な HTML をスマートフォンで表示してみる。</p>
<div class="highlight"><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;img src=&quot;/images/logo-ja.png&quot;&gt;
&lt;p&gt;色んな素材がごった煮になった様子をお椀で表現しています。
湯気が&lt;strong&gt;「てっく」&lt;/strong&gt;に見えるのが隠し味になっています。
「てっく煮」の右肩の「+4」 を「と、よん」と読むことで、
ドメイン名の tech.nitoyon.com と等しくなります。&lt;/p&gt;
&lt;/body&gt;
</code></pre></div>
<h2>表示結果</h2>

<p>iPhone 3GS (iOS 5.1.1) で表示してみた (<a href="./no-viewport.html">デモ ページ</a>)。</p>

<p><center><img src="http://farm9.staticflickr.com/8225/8472828815_ce69aec918.jpg" width="500" height="306"></center></p>

<p>スマホ対応していないサイトを表示した状態だ。</p>

<p>スマホートフォンは PC 向けのサイトを表示するときには、「横幅 980px 向けにデザインされている」という前提で描画する。結果として、文字が小さくなる。</p>

<p>どれぐらい小さくなるか、iPhone を例に調べてみよう。iPhone のそれぞれの世代で、横幅 980px のページがどれぐらい縮小されて表示されるかを計算してみた。</p>

<table><thead>
<tr>
<th>世代</th>
<th>解像度</th>
<th align="right">縦向き</th>
<th align="right">横向き</th>
</tr>
</thead><tbody>
<tr>
<td>iPhone 1～3</td>
<td>320px × 480px</td>
<td align="right">32.7%</td>
<td align="right">49.0%</td>
</tr>
<tr>
<td>iPhone 4</td>
<td>640px × 960px</td>
<td align="right">65.3%</td>
<td align="right">98.0%</td>
</tr>
<tr>
<td>iPhone 5</td>
<td>640px × 1,136px</td>
<td align="right">65.3%</td>
<td align="right">116.0%</td>
</tr>
</tbody></table>

<p>iPhone 4 以降の縦向き (Portrate mode) で 980px の PC 向けサイトは 2/3 に縮小して表示される。Retina ディスプレイで 2/3 のなので、文字はかなり小さくなる。ピンチ操作で拡大しないと読めない人も多いだろう。</p>

<h2>採用例</h2>

<p>このパターンでもデザインを工夫すれば、スマートフォンやタブレットでも見やすくなる。その代表格が Apple である。</p>

<p>ここでは詳しく触れないが、<a href="http://www.pxt.jp/ja/diary/article/257/index.html">pxt | 考察：Appleはスマホサイトを作らない。</a> に分かりやすく書いてあるので、興味がある人は読んでみるとよいだろう。</p>

<h1>パターン2: viewport でデバイスの横幅を指定する</h1>

<p>「スマホ向けにデザインしているよ」と主張するには <code>&lt;head&gt;</code> タグの中に <code>viewport</code> を 1 行追加すればよい。</p>
<div class="highlight"><pre><code class="html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;
</code></pre></div>
<p><code>width=device-width</code> というのは「デバイスの横幅で描画してください」という意味である。</p>

<p>一昔前は iPhone 前提で <code>width=320px</code> と指定すれば十分だったが、解像度がまちまちな Android やタブレット端末が登場したため、<code>width=device-width</code> と指定するのが新常識になった。</p>

<h2>表示結果</h2>

<p>表示するとこうなる (<a href="./scalable-viewport.html">デモ ページ</a>)。</p>

<p><center><img src="http://farm9.staticflickr.com/8101/8473918432_eddb076e37.jpg" width="500" height="306"></center></p>

<p>横向きにしたときには、縦向きのときの画面を引き伸ばして表示しようとするので、かなり拡大された印象になる (iPhone 4 までで 1.5 倍、iPhone 5 では 1.7 倍)。</p>

<p>字が大きくなって読みやすくなるが、画面内の情報量が少なくなる。</p>

<h2>採用例</h2>

<p>あまり見たことがないが、たとえば、<a href="http://b.hatena.ne.jp/touch">はてなブックマーク スマートフォン版</a> のソースを見ると、</p>
<div class="highlight"><pre><code class="html">&lt;meta content=&quot;width=320, minimum-scale=0.5&quot; name=&quot;viewport&quot; /&gt;
</code></pre></div>
<p>となっている。<code>320px</code> とあるので、旧世代の指定のままだ。現実問題として、Nexus 7 で閲覧すると <code>320px</code> だと信じて描画するので、フォントがでかすぎて見づらい。</p>

<h1>パターン3: 回転してもサイズを変えたくないケース</h1>

<p>スマートフォンのネイティブ アプリの動作をみていると、横向き (Landscape mode) にしたときには１行に表示する文字の数が増えるものが多い。</p>

<p>例えば、iPhone 3GS 標準のメモ アプリがそうである。</p>

<p><center><img src="http://farm9.staticflickr.com/8524/8472918769_f183e967df.jpg" width="500" height="306"></center></p>

<p>Web においても同様に「横向きのときは一行の文字数を増やしたり、追加の情報を表示したりしたい」という欲求がでてくる。</p>

<p>そのような場合は、<code>viewport</code> を次のように書きなおせばよい。</p>
<div class="highlight"><pre><code class="html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;
</code></pre></div>
<p>あわせて CSS に次のように指定しておく。</p>
<div class="highlight"><pre><code class="css">body {
  -webkit-text-size-adjust: 100%;
}
</code></pre></div>
<p>(理由は <a href="/ja/blog/2013/02/14/text-size-adjust/">-webkit-text-size-adjust: none を絶対に設定してはいけない理由</a> を参照)</p>

<h2>表示結果</h2>

<p>横方向のときには次のようになる (<a href="./unscalable-viewport.html">デモ ページ</a>)。</p>

<p><center><img src="http://farm9.staticflickr.com/8523/8473918482_552250ded9.jpg" width="500" height="306"></center></p>

<p>メモ アプリの利用イメージに近くなった。</p>

<p>ただし、この指定にしてしまうと、<strong>ピンチによる拡大・縮小ができない</strong>という大きな弱点がある。</p>

<h2>採用例</h2>

<p>数多くの大手サイトがこの方式を採用している。Google も Yahoo! Japan も twitter も facebook も全部これである。</p>

<p>「ピンチできない」という大きな欠点はあるものの、端末の縦横方向を変えたときに画面内の情報量を減らしたくないないので、このパターンを採用せざるをえないのだろう。</p>

<p>向きを変えたときに横幅が変わりつつピンチも使えるような手段が提供されるのが理想なのだが、現在のところ、そのような指定をする方法はない。</p>

<h2>補足</h2>

<p><code>viewport</code> で指定してるのは長ったらしい値は、次のようになっている。</p>
<div class="highlight"><pre><code class="text">width         = device-width
initial-scale = 1.0
minimum-scale = 1.0
maximum-scale = 1.0
user-scalable = no
</code></pre></div>
<p>この設定により、iPhone と Android でページの表示倍率が <code>1.0</code> 固定にして、ページのピンチができないようにしている。</p>

<p>その結果、ページの表示倍率が変わる余地をなくしている。表示倍率が変えられない状態になってはじめて、WebKit は仕方なくページの横幅を変えてくれるようだ。</p>

<h1>まとめ</h1>

<p>以上の内容を表でまとめる。</p>

<table><thead>
<tr>
<th align="center">番号</th>
<th>選ぶポイント</th>
<th>弱点</th>
<th>例</th>
</tr>
</thead><tbody>
<tr>
<td align="center">1</td>
<td>PC 向けのサイトをスマホで見ても、十分に見やすいとき。</td>
<td>初期状態の文字が小さい。</td>
<td>Apple</td>
</tr>
<tr>
<td align="center">2</td>
<td>スマホに対応しつつ、ピンチを許可したいとき。</td>
<td>横向きにしたときに極端に拡大される。</td>
<td>まれ</td>
</tr>
<tr>
<td align="center">3</td>
<td>他の人と同じようにスマホに対応したいとき。</td>
<td>ピンチで拡大・縮小できない。</td>
<td>多数</td>
</tr>
</tbody></table>

<p>このブログでも、ピンチできないのは不便だけど、結局、他の大手サイトと同じく 3 番目を採用した。</p>
]]></description>
		</item>

		<item>
			<title>-webkit-text-size-adjust: none を絶対に設定してはいけない理由</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/02/14/text-size-adjust/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/02/14/text-size-adjust/</guid>
			<pubDate>Thu, 14 Feb 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>PC 版の Google Chrome や Safari で見たときにユーザビリティーが落ちるから。</p>

<p>以上。</p>

<p>で終わってしまうと記事にならないので、ちゃんと説明しておく。</p>

<h1>そもそも -webkit-text-size-adjust とは何か</h1>

<p>iPhone や Android のブラウザーは、縦向き (Portrate mode) と横向き (Landscape mode) の文字サイズを自動調整する機能がある。</p>

<p>これを制御するのが CSS の <code>-webkit-text-size-adjust</code> である。</p>

<h2>文字サイズ自動調整の具体例</h2>

<p>次のような HTML をスマートフォンで表示してみる。</p>
<div class="highlight"><pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;
&lt;/head&gt;
&lt;body background=&quot;layout_grid.png&quot;&gt;
&lt;img src=&quot;/images/logo-ja.png&quot;&gt;
&lt;p&gt;色んな素材がごった煮になった様子をお椀で表現しています。
湯気が&lt;strong&gt;「てっく」&lt;/strong&gt;に見えるのが隠し味になっています。
「てっく煮」の右肩の「+4」 を「と、よん」と読むことで、
ドメイン名の tech.nitoyon.com と等しくなります。&lt;/p&gt;
&lt;/body&gt;
</code></pre></div>
<p>スマホ対応であることを主張するために viewport のおまじないを <code>&lt;meta&gt;</code> タグに書いている。それ以外はありきたりな単純な HTMLである。</p>

<p>このページを iPhone 3GS (iOS 5.1.1) で表示するとこうなった (<a href="./adjust.html">デモ ページ</a>)。</p>

<p><center><img src="http://farm9.staticflickr.com/8088/8467618983_5e6b9d2307.jpg" width="500" height="306"></center></p>

<p>横向きにしたときに画像のサイズはそのままで、<strong>文字のサイズだけが大きくなっている</strong>。</p>

<p>おそらく 1 行あたりの文字数が増えすぎると読みにくくなるから、という配慮なんだろうけど、余計なお世話なのでオフにしたくなる。</p>

<h2>自動調整をオフにしたい</h2>

<p>この自動調整をしているのが <code>-webkit-text-size-adjust</code> プロパティー。</p>

<p>デフォルト値は <code>auto</code> になっていて、<code>100%</code> や <code>none</code> にすると自動調整をオフにできる。</p>
<div class="highlight"><pre><code class="css">body {
  -webkit-text-size-adjust: 100%;
}
</code></pre></div>
<p>さきほどの例でも、文字のサイズが変わらなくなった (<a href="./no-adjust.html">デモ ページ</a>)。</p>

<p><center><img src="http://farm9.staticflickr.com/8515/8471101882_a792b39c70.jpg" width="500" height="306"></center></p>

<h2>none を設定してはいけない</h2>

<p>ここで重要なのが、<code>-webkit-text-size-adjust</code> は <strong><code>none</code> に設定すると副作用があるので <code>100%</code> を設定すべき</strong>という点だ。</p>

<p>検索してみると層々たるサイトで「<code>none</code> に設定しましょう」という記述があるんだけど、危険なので注意が必要だ。</p>

<p>危険な情報を載せているサイトの一例:</p>

<ul>
<li><a href="http://coliss.com/articles/build-websites/operation/css/css-tutorial-media-queries-by-webdesignerwall.html">[CSS]スマフォ対応サイトのためにMedia Queriesをしっかり身につけるチュートリアル | コリス</a></li>
<li><a href="http://www.atmarkit.co.jp/fsmart/articles/iphone/04.html">iPhone向けWebアプリを作ろう（4/4） － ＠IT</a></li>
<li><a href="http://zero.css-happylife.com/property/-webkit-text-size-adjust.shtml">-webkit-text-size-adjust｜プロパティ｜CSS HappyLife ZERO</a></li>
<li><a href="http://webdesignrecipes.com/web-design-for-mobile-with-css3-media-queries/">CSS3 Media Queries を使って、Webサイトをスマートフォンに対応させるときの注意書き - Webデザインレシピ</a></li>
</ul>

<h1>none が絶対にダメな理由</h1>

<p><code>-webkit-text-size-adjust: none</code> を指定してしまうと PC 版の Google Chrome や Safari でページの拡大/縮小機能に支障がでる。</p>

<p>たとえば、<a href="http://www.itmedia.co.jp/">ITmedia</a> には <code>none</code> が指定されてしまっているので悪い例として取り上げさせてもらう。Google Chrome (バージョン 24) にて 100% と 200% で ITmedia のトップページを表示するとこうなる。</p>

<p><center><img src="http://farm9.staticflickr.com/8515/8467619207_37643f6d2a.jpg" width="500" height="305"></center></p>

<p>画像や文字の位置は拡大されているのに<strong>文字が拡大されていない</strong>。目が悪い人や高解像度ディスプレイを使っている人にとっては、読みやすくするために拡大しても文字が小さいままなので、たいそう不便である。</p>

<p>ためしに、Google Chrome の開発者コンソールで <code>&lt;body&gt;</code> タグの <code>-webkit-text-size-adjust</code> プロパティーを <code>none</code> から <code>100%</code> に書き換えてみると、期待した通りの表示になる。</p>

<p><center><img src="http://farm9.staticflickr.com/8515/8468714646_3fc95ee0ff.jpg" width="500" height="305"></center></p>

<p>これが、<code>none</code> がダメで、<code>100%</code> を推奨している理由である。</p>

<p>昨今のレスポンシブ Web デザインの流行もあり、PC 向けサイトに <code>-webkit-text-size-adjust</code> が指定されることも増えてきた。もし、<code>none</code> を指定しちゃうと、目が悪い人や高解像度ディスプレイを使っている人がページを拡大できなくなっちゃう。これは重大なアクセシビリティーの欠陥である。</p>

<h2>none で拡大されないのは WebKit のバグ</h2>

<p>Mozilla の資料 <a href="https://developer.mozilla.org/en-US/docs/CSS/text-size-adjust">text-size-adjust - CSS | MDN</a> には、この挙動は WebKit のバグだと書いてある (日本語訳は私によるもの)。</p>

<blockquote>
<p>WebKit ベースの PC 版ブラウザーにはバグがある。<code>-webkit-text-size-adjust</code> に <code>none</code> を設定していると、PC 版の Chrome や Safari は、このプロパティーを無視すべきなのに、ページの拡大/縮小を妨害する動作をする。</p>

<blockquote>
<p>There is a bug in Webkit-based desktop browsers. If <code>-webkit-text-size-adjust</code> is explicitely set to <code>none</code>, Webkit-based desktop browsers, like Chrome or Safari, instead of ignoring the property, will prevent the user to zoom in or out the Web page.</p>
</blockquote>
</blockquote>

<p>このバグは WebKit Bugzilla に <a href="https://bugs.webkit.org/show_bug.cgi?id=56543">Bug 56543 - CSS property &quot;-webkit-text-size-adjust&quot; means different things in Safari and iOS</a> として バグ登録されている。パッチも提供されている。</p>

<p>しかし、現在のところ解決には至っていない。</p>

<h1>このバグへの対処方法</h1>

<h2>理想</h2>

<p>WebKit のバグが修正されるのが一番いい。</p>

<h2>現実</h2>

<p>しかし、修正される気配はないし、たとえ修正されたとしても、一定期間は古いブラウザーを使う人がいる。</p>

<p>だから、繰り返しになるが、現時点では</p>
<div class="highlight"><pre><code class="css">body {
  -webkit-text-size-adjust: none;
}
</code></pre></div>
<p>ではなく</p>
<div class="highlight"><pre><code class="css">body {
  -webkit-text-size-adjust: 100%;
}
</code></pre></div>
<p>を設定すべきだ。</p>

<p>スマホ専用サイトであれば <code>-webkit-text-size-adjust: none</code> を設定しても困る人はいないのだけど、別の人がコピペで PC サイトに流用する可能性もあるだろうから、<code>-webkit-text-size-adjust: 100%</code> を習慣づけておいて損はないだろう。</p>

<h2>利用者側の対策</h2>

<p>さきほど、ITmedia の例を紹介したが、よく使うサイトでこの CSS が指定されていると不便だ。</p>

<p>たとえば、はてなブックマークの新しいトップページは、公開当初、<code>none</code> を指定していた。普段から拡大して表示していた自分は困ってしまったのだが、中の人が <a href="http://kudakurage.hatenadiary.com/entry/2013/02/08/135725">タイムリーな記事</a> で <code>none</code> を推奨していたので、「<code>100%</code> にすべきだよ」とコメントしてみた。すると、数時間後には、はてなブックマークの CSS も治っていた。すばやい対応でありがたい。</p>

<p>とはいえ、サイトごとにいちいち連絡するのも面倒なので、ユーザースタイルシートを書くなり、対策用のブラウザー拡張を入れるなりするのが現実的だろう。自分の場合は Google Chrome に <a href="https://chrome.google.com/webstore/detail/webkit-text-size-adjust-r/jgfjnnljbpgajihjcajeiabjomhmjhec">Webkit-Text-Size-Adjust Remover</a> を入れたら快適になった。ITmedia も快適に拡大できるようになった。</p>

<h1>３行でまとめる</h1>

<p>長くなったが、強引に３行でまとめる。</p>

<ul>
<li>WebKit はこのバグを治してほしい。</li>
<li>対症療法にはなるけど <code>-webkit-text-size-adjust: none</code> はダメ。<code>100%</code> と書け。</li>
<li>バグを回避するための <a href="https://chrome.google.com/webstore/detail/webkit-text-size-adjust-r/jgfjnnljbpgajihjcajeiabjomhmjhec">Webkit-Text-Size-Adjust Remover</a> のような拡張もあるので、拡大できないサイトがあって困ってるなら入れるとよい。</li>
</ul>
]]></description>
		</item>

		<item>
			<title>jQuery 1.9 のソースマップ対応で圧縮版でもデバッグが簡単になった話</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/01/29/jquery-source-map/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/01/29/jquery-source-map/</guid>
			<pubDate>Tue, 29 Jan 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>jQuery 1.9 がリリースされました。1.9 の新機能の中ではあまり注目されていませんが、<strong>ソースマップに対応</strong>したのが地味に便利そうです。</p>

<p>というのも、圧縮版の jquery.min.js を使っていると</p>

<ul>
<li>何か問題が起きたときにスタックトレースを眺めても jQuery の部分が意味不明</li>
<li>デバッガーで jQuery のソースにステップインしても意味不明</li>
</ul>

<p>といった理由で、開発中には非圧縮の jquery.js を使うことが多かったわけです。</p>

<p>それが、1.9 からはソースマップに対応したので<strong>圧縮版のままでのデバッグが簡単</strong>になってます。</p>

<h1>超簡単な使い方</h1>

<p>ソースマップに対応したブラウザーは現時点では Google Chrome のみなので、Google Chrome の手順を説明します。</p>

<p>(Firefox はソースマップへの対応を<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=771597">計画中</a>らしい)</p>

<h2>事前準備を忘れずに</h2>

<p>Google Chrome で [デベロッパー ツール] を開きます。</p>

<p><center><img src="http://farm9.staticflickr.com/8466/8423335379_7fdbcbf661.jpg" width="500" height="454"></center></p>

<p>右下の設定ボタンを押して、[Enable source maps] をチェックします。</p>

<p>下準備はこれだけ。簡単ですね！</p>

<h2>早速使ってみよう</h2>

<p>本家の <a href="http://jquery.com/">jquery.com</a> は早速 1.9.0 の圧縮版を使っていました。ということで、ここで実験してみます。</p>

<p>まず、<a href="http://jquery.com/">http://jquery.com/</a> に行って、[デベロッパー ツール] を開いてみます。</p>

<p>[Sources] タブから <code>main.js</code> を選択して、最初の <code>on()</code> 関数のコールバックにブレークポイントを仕込んでみます。</p>

<p><center><img src="http://farm9.staticflickr.com/8225/8423335179_d4bc25f945.jpg" width="500" height="263"></center></p>

<p>サイトの下のほうにある「CDN」の右側が <code>.cdn input</code> なので、ここをクリックすると…</p>

<p><center><img src="http://farm9.staticflickr.com/8368/8423335345_e11a941f99.jpg" width="500" height="240"></center></p>

<p>はい、ブレークしますね。ここで注目すべきは右側の [Call Stack]。よく見ると…</p>

<ul>
<li>(anonymous function) main.js:7</li>
<li>st.event.dispatch jquery.js:3045</li>
<li>st.event.add.y.handle jquery.js:2721</li>
</ul>

<p>jQuery の関数名と、行数が書いてありますね。<strong>jquery.min.js しかロードしてないページなのに、jquery.js の情報が表示</strong>されています！</p>

<p>ためしに <code>st.event.dispatch jquery.js:3045</code> をダブルクリックすると…</p>

<p><center><img src="http://farm9.staticflickr.com/8469/8423335301_af26ed3b0e.jpg" width="500" height="257"></center></p>

<p>jquery.js がロードされて、該当する場所を表示できました。圧縮前の jquery.js なので、当然、コメントも残っています。</p>

<p>これはすごい！</p>

<p>jQuery 1.9 では jquery.min.js を利用しててもデバッグでは困らないのです。</p>

<p>ところで、これ、どういう仕組みで動いてるか気になりませんか？　気になる人は続きをお読みください。</p>

<h1>ソースマップとは何ぞや</h1>

<p>jQuery 1.9 からの jquery.min.js には、最後の行に次のようなコメントがあります。</p>
<div class="highlight"><pre><code class="javascript">/*! jQuery v1.9.0 (省略) */(function(e,t){/* 省略 */})(window);
//@ sourceMappingURL=jquery.min.map
</code></pre></div>
<p><code>@ sourceMappingURL=jquery.min.map</code> に注目。ソースマップの URL が書いてあります。Google Chrome はこの部分を見て、ソースマップを読み込んでいたわけですね。</p>

<p>となると、気になるのが <code>jquery.min.map</code> の中身。Google CDN には jquery.min.js と同じディレクトリーに <a href="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.map"><code>jquery.min.map</code></a> が設置してあります。</p>

<p>整形して表示してみるとこうなります。</p>
<div class="highlight"><pre><code class="javascript">{
    &quot;version&quot;: 3,
    &quot;file&quot;: &quot;jquery.min.js&quot;,
    &quot;sources&quot;: [&quot;jquery.js&quot;],
    &quot;names&quot;: [&quot;window&quot;,&quot;undefined&quot;,&quot;isArraylike&quot;, /* 省略 */],
    &quot;mappings&quot;: &quot;CAaA,SAAWA,EAAQC,GACnB,(省略)&quot;
}
</code></pre></div>
<p><code>jquery.js</code> と書いてありますね。これを見て Google Chrome は <code>jquery.js</code> に行き着いたようです。<code>sources</code> が複数指定できることから、ソースマップは、複数のソースを結合して圧縮した場合にも対応できそうなフォーマットだと推測できます。</p>

<p>問題は <code>mappings</code> なのですが、これは「圧縮後の○列目の文字は、ソース△△の××行目の××列目にありますよ」という情報を BASE64 VLQ で圧縮したものだそうです。</p>

<p>詳しくは <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">Introduction to JavaScript Source Maps - HTML5 Rocks</a> に書いてあるので、さらに興味がある人は参照してみてください。</p>

<h1>CDN を使わない場合</h1>

<p>いい忘れていましたが、Google CDN を使わないで自分のサーバーで jquery.min.js をホスティングする場合は、少し追加の手順が必要になります。</p>

<p>jquery.min.js をアップロードする場所に jquery.min.map と jquery.js を置くだけです。簡単ですね。</p>

<p><code>jquery.min.map</code> は jquery の公式サイトでは公開されてないけど、</p>

<ul>
<li><a href="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.map">http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.map</a></li>
</ul>

<p>に置いてあるので、1.9.0 以降のバージョンがリリースされても URL の 1.9.0 の部分を置き換えれば取得できそうです。</p>

<h1>ソースマップを活用しよう</h1>

<p>さて、便利便利なソースマップなので、自分のプロジェクトでも活用してみたいですよね。</p>

<p>ソースマップは JavaScript の圧縮はもちろん、<strong>CoffeeScript/HaXe/TypeScript/JSX</strong> などの JavaScript を生成する言語でも出力できるようです。</p>

<p>さらに、CSS 生成で有名な <strong>SASS/LESS</strong> でも活用できるようです。</p>

<p>夢が広がったので、ソースマップの出力方法を調べてみました。</p>

<h2>JavaScript の圧縮</h2>

<p>jQuery が利用している圧縮ツールは <a href="https://github.com/mishoo/UglifyJS2">UglifyJS</a> です。コマンドライン引数に <code>--source-map</code> を指定すると、ソースマップを吐けるようです。</p>

<p>もう１つの主流な圧縮ツール <a href="https://developers.google.com/closure/compiler/">Closure compiler</a> では <code>--create_source_map ./foo.min.map --source_map_format=V3</code> と指定する模様。</p>

<h2>JavaScript を生成する色々</h2>

<p>ぐぐって調べて引っかかった結果をまとめておく。</p>

<ul>
<li>CoffeeScript: CoffeeScriptRedux を使えば <code>coffee</code> コマンドに <code>--source-map</code> をつけて吐くことができるようです。</li>
<li>HaXe: <code>haxe</code> コマンドに <code>--debug</code> をつけるだけ。</li>
<li>TypeScript: <code>tcs</code> コマンドに <code>-sourcemap</code> をつけるだけ。</li>
<li>JSX: <code>--enable-source-map</code> らしい。</li>
</ul>

<h2>SASS/LESS</h2>

<p>JavaScript よりも、もう少し複雑そう。詳しくはリンク先を。</p>

<ul>
<li>SASS: <a href="http://bricss.net/post/33788072565/using-sass-source-maps-in-webkit-inspector">Bricss - Using Sass source maps in WebKit Inspector</a></li>
<li>LESS: <a href="http://robdodson.me/blog/2012/12/28/debug-less-with-chrome-developer-tools/">Debug LESS with Chrome Developer Tools - Rob Dodson talks internets</a></li>
</ul>

<p>リンク先を見る限り、<code>@media -sass-debug-info</code> という独自の情報を出力して、それを Google Chrome 側で解釈する模様。</p>

<h1>まとめ</h1>

<p>ソースマップがあれば、圧縮したソースでの開発も怖くない！　え？　Google Chrome 以外のブラウザーで困ったら？　そのときは今まで通り・・・。</p>
]]></description>
		</item>

		<item>
			<title>はてなブックマークの入れ替わり激しくない人気エントリーを見る方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/01/25/old-hotentry/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/01/25/old-hotentry/</guid>
			<pubDate>Fri, 25 Jan 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><a href="http://b.hatena.ne.jp/">はてなブックマーク</a>のトップページがリニューアルして、新しいデザインへの不満が一通り<a href="http://www.itmedia.co.jp/news/articles/1301/09/news089.html">出つくした</a>感があるけど、<strong>人気エントリーのアルゴリズムが改善された</strong>件について触れてる人をあまり見ない。</p>

<h1>人気エントリーの入れ替わりが激しくなった</h1>

<p>いままでは人気エントリーはキャッチーなやつで固定化されていたんだけど、今回の改善で、人気エントリーの入れ替わりが激しくなった。</p>

<p>公式にもアナウンスはされていて、<a href="http://hatena.g.hatena.ne.jp/hatenabookmark/20130108/1357641152">トップページとカテゴリページをリニューアルしました - はてなブックマーク日記</a> によると</p>

<blockquote>
<p>滞留や偏りをなくすためにアルゴリズムを変更いたしました。一定時間でコンテンツが入れ替わるよう更新性を高めています。その日にしかチェックできない、新鮮なエントリーが楽しめるようになりました。人気エントリーのアルゴリズムは、今後も継続的に改善してまいります。</p>
</blockquote>

<p>とある。</p>

<h2>いままでは「ブックマーク数」至上主義だった</h2>

<p>いままでの人気エントリーのアルゴリズムはきわめて単純だった。</p>

<p>「時間当たりのブックマーク数が多い順」。</p>

<p>単純で分かりやすいが弊害もある。人気を集めてトップページに掲載されると、それを見てブックマークする人が出てくるので、人気のある記事は半永久的にブックマークを集め続けられた。</p>

<p>キャッチーな記事は数日間トップページに居座り続けていたし、そうじゃなくても、「○○の××個まとめ」といった似たような記事ばかりトップページに載っていた。</p>

<p>結果、「すごく人気を集める記事」と「そこそこ需要はあるはずなのに人目に触れずに消えていく記事」に二分されていた。</p>

<h2>「鮮度」が重視されるようになった</h2>

<p>このような問題を改善するために、今回、「時間あたりのブックマーク数」だけでなく「情報の鮮度」が重視されるようになったようだ。しばらく人気エントリーに居座っていると、たとえブックマークを集めていてもランキングが落ちていく。</p>

<p>そのおかげで、以前よりもエントリーの入れ替わりが激しくなり、タイムリーに話題になっている記事が分かるようになった。いままでは人目に触れずに消えていったような記事がトップページでピックアップされやすくなった。</p>

<p>少し極端な例をあげてみる。これはとある日の、はてブトップページ。</p>

<p><center><img src="http://farm9.staticflickr.com/8045/8410686001_b50affeacb.jpg" width="500" height="404"></center></p>

<p>1 位が「55 users」、2 位が「42 users」。短い時間にブックマークを集めれば、50 users ほどでも 1 位になれるのだ。</p>

<p>(ただし、これでは極端すぎると判断したのか 1 週間後に<a href="http://hatena.g.hatena.ne.jp/hatenabookmark/20130116/1358333640">スコアリングが補正</a>されている。現在では 100～200 users ぐらい集めないと 1 位にはならないような印象がある)</p>

<h1>以前の計算方法で人気エントリーを見たい！</h1>

<p>さて、タイムリーな話題が分かるようになったのはいいけど、みんながみんな、四六時中、はてなブックマークを見ているわけではない。</p>

<p>タイムリーな記事ではなく、今日話題になっている記事を知りたい、という人も多いはずだ。</p>

<h2>日別ランキングがあるじゃないか</h2>

<p>実は、以前の人気エントリーに相当するようなページがある。</p>

<p>それが <a href="http://b.hatena.ne.jp/hotentry/daily">http://b.hatena.ne.jp/hotentry/daily</a> だ。<code>daily</code> という URL の通り、その 1 日の人気エントリーがブックマーク数順に並んでいるようだ。</p>

<p><a href="http://b.hatena.ne.jp/hotentry/daily"><center><img src="http://farm9.staticflickr.com/8468/8410686199_3366103bc6.jpg" width="500" height="418"></center></a></p>

<p>上位にブックマーク数の多いエントリーが並んでいる。昔の人気エントリーのアルゴリズムと完全に同じではないんだけど、かなり近い印象がある。懐かしい・・・。</p>

<p>一番下までスクロールすると、過去の日付にさかのぼるリンクもある。前日・前々日あたりの人気のエントリーが気になるなら、そちらもチェックするとよいだろう。</p>

<h2>週間・月間ランキングもあるよ</h2>

<p>さらに少し長いスパンでの人気エントリーを探したい場合は、</p>

<ul>
<li><a href="http://b.hatena.ne.jp/ranking">はてなブックマークランキング - 週間ランキング</a></li>
<li><a href="http://b.hatena.ne.jp/ranking/monthly">はてなブックマークランキング - 月間ランキング</a></li>
</ul>

<p>を見るとよい。</p>

<p><a href="http://b.hatena.ne.jp/ranking"><center><img src="http://farm9.staticflickr.com/8183/8410686329_e3d0be8450.jpg" width="500" height="379"></center></a></p>

<p>新しいトップページからはリンクされてないけど・・・。</p>

<h1>まとめ</h1>

<p>人気エントリーの算出方法が変わってタイムリーな記事が上位に来るようになったよ、前のような「ブックマーク数至上主義」なランキングを見たいなら <a href="http://b.hatena.ne.jp/hotentry/daily">日別ランキング</a>、<a href="http://b.hatena.ne.jp/ranking">週間別ランキング</a>、<a href="http://b.hatena.ne.jp/ranking/monthly">月間ランキング</a> が便利だよ、というお話でした。</p>

<p>新しいトップページについての個人的な感想は</p>

<ul>
<li>確かに一覧性は悪くなったけど、初めて見る人には親しみやすいデザインになったんじゃないかな。</li>
<li>Google Chrome で <code>[Ctrl] + [+]</code> で拡大しても文字サイズが変わらないのを何とかしてほしい。</li>
<li>Nexus 7 を横にしてカテゴリーページを開いたら「見やすい」と感じたので、「タイル」はスマホ・タブレット向きのデザインなんだろう。これからの Web サービスは PC と携帯デバイスの見え方の違いをどう吸収していくかが課題になりそう。</li>
<li>人気エントリーの新しいアルゴリズムは非常によい。トップページを見る頻度が上がった。</li>
</ul>

<p>といったところ。</p>
]]></description>
		</item>

		<item>
			<title>GitHub で clone するときは SSH じゃなく HTTP を使ったほうが高速</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/01/11/github-clone-http/</guid>
			<pubDate>Fri, 11 Jan 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><center><img src="http://farm9.staticflickr.com/8082/8367926710_8530642335_o.png" width="571" height="221"></center></p>

<p>GitHub には clone するための URL として [HTTP]、[SSH]、[Git Read-Only] の 3 つが用意されている。</p>

<p>いままで、SSH に慣れているという理由だけで [SSH] を利用していたのだけど、「<strong>SSH は転送速度が遅い</strong>」という問題がある。</p>

<h1>SSH だとこんなに遅い…</h1>

<p>さっき、[SSH] で clone してみたら 20～60 KiB/s 程度の速度しか出なかった。</p>
<div class="highlight"><pre><code class="text">$ git clone git@github.com:nitoyon/tech.nitoyon.com.git
Cloning into &#39;tech.nitoyon.com&#39;...
remote: Counting objects: 8856, done.
remote: Compressing objects: 100% (2125/2125), done.
remote: Total 8856 (delta 3251), reused 8731 (delta 3126)
Receiving objects: 100% (8856/8856), 7.04 MiB | 26 KiB/s, done.
Resolving deltas: 100% (3251/3251), done.
</code></pre></div>
<p>↑最終的に <code>26 KiB/s</code> しか出ていない。</p>

<p>これでは、巨大なリポジトリを clone すると、長大な時間を要することになる。</p>

<h1>HTTP は高速！</h1>

<p>そんなときは、 [HTTP] で clone すればよい。</p>

<p>さっき試したら、300～600 KiB/s 出た。</p>
<div class="highlight"><pre><code class="text">$ git clone https://github.com/nitoyon/tech.nitoyon.com.git
Cloning into &#39;tech.nitoyon.com&#39;...
remote: Counting objects: 8856, done.
remote: Compressing objects: 100% (2125/2125), done.
remote: Total 8856 (delta 3251), reused 8731 (delta 3126)
Receiving objects: 100% (8856/8856), 7.04 MiB | 604 KiB/s, done.
Resolving deltas: 100% (3251/3251), done.
</code></pre></div>
<p>↑<code>604 KiB/s</code> も出ている</p>

<p>[Git Read-Only] も試してみたら、こちらは 1 MiB/s ぐらいでたので一番高速だった。</p>

<p><s>つまり、[HTTP] が最強！　他の 10 倍速い。</s></p>

<p>つまり、速さは [Git Read-Only] &gt; [HTTP] &gt;&gt; [SSH] となった。</p>

<p>(訂正) 当初、[HTTP] が最強としていましたが、再度調べてみたところ、[Git Read-Only] が最強でした。お詫びして訂正します。</p>

<h1>push が面倒なら clone 後に SSH にすればよい</h1>

<p>[SSH] で clone したときのメリットは、push のときには ssh-agent なり pageant なりが、パスフレーズの入力を代行してくれる点にある。<code>git push</code> と入力するだけで push を開始できてお手軽だ。</p>

<p>一方、[HTTP] で clone してしまうと、push するたびにユーザー名とパスワードを要求されて面倒だ。<a href="https://help.github.com/articles/set-up-git#platform-windows">credential helper</a> を導入すればキャッシュしてくれるらしいが、これも面倒だ。</p>

<p>[Git Read-Only] だと Read-Only という名前の通り、push できない。</p>

<p>それが理由で、いままで [SSH] でちんたら clone していた。</p>

<p>けども、よく考えたら [HTTP] や [Git Read-Only] で clone したあとでも、[SSH] で push するように設定を変更できる。</p>
<div class="highlight"><pre><code class="text">$ git remote set-url origin git@github.com:user/repo.git
</code></pre></div>
<p><code>git remote</code> で <code>origin</code> の URL を変えるだけ。この手順は <a href="https://help.github.com/articles/why-is-git-always-asking-for-my-password">GitHub のヘルプ</a>にも書いてある。</p>

<p>これ以降の push / pull は [SSH] でやるようになる。[HTTP] に比べて転送速度は遅いけど、1度 clone したあとなら、差分のみの送受信なので、あまり速度は気にしなくてもよいはずだ。(もし大量に送受信する必要が出たなら、同じようにして再度 [HTTP] に切り替えてもよいだろう)</p>

<h1>(追記) SSH も設定を変えれば速くなる</h1>

<p><code>~/.ssh/config</code> に次の設定をすれば、SSH でも十分速くなるようです。</p>
<div class="highlight"><pre><code class="text">Host github.com
  Compression yes
  Ciphers arcfour256
</code></pre></div>
<p>はてなブックマークで id:y-kawaz さんに<a href="http://b.hatena.ne.jp/y-kawaz/20130111#bookmark-127926818">指摘していだきました</a>。ありがとうございます。</p>

<h1>まとめ</h1>

<p>次のような戦略が考えられる。</p>

<ul>
<li>push する必要がないなら [Git Read-Only] で clone すると高速。</li>
<li>[SSH] の clone は <code>~/.ssh/config</code> を設定すると速度が劇的に改善する。</li>
<li>clone したあとに、<code>git remote set-url</code> で URL を変更すれば、push するプロトコルを変更できる</li>
</ul>

<p>快適な GitHub 生活を。</p>
]]></description>
		</item>

	</channel>
</rss>
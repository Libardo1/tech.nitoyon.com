<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Fri, 17 Jan 2014 00:28:44 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>Windows で Chef するときに PATH で混乱しないように専用のコンソールを作った</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/01/17/chef-win-path/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/01/17/chef-win-path/</guid>
			<pubDate>Fri, 17 Jan 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>話題の <a href="http://www.getchef.com/">Chef</a> をいまさら試したくなって、手元の Windows 環境に環境を作ってみた。</p>

<p><a href="http://www.getchef.com/chef/install/">http://www.getchef.com/chef/install/</a> からインストーラーをダウンロードしてインストールした。Cygwin を使うと<a href="http://dqn.sakusakutto.jp/2013/12/berkshelf_chef_gem_ruby.html">無駄にはまる</a>し、ぐぐるといっぱい出てくる「gem から入れる手順」は公式サイトでは見つからなくなっている。</p>

<p>すべてデフォルトでインストールすると、<code>C:\opscode\chef</code> にファイルがいっぱい展開されていた。</p>

<h1>PATH に追加される 2 つのフォルダー</h1>

<p>インストーラーから Chef を入れると、<code>PATH</code> に</p>

<ul>
<li><code>C:\opscode\chef\bin</code></li>
<li><code>C:\opscode\chef\embedded\bin</code></li>
</ul>

<p>の 2 つが追加される。</p>

<p><code>C:\opscode\chef\bin</code> には Chef 関係のプログラム (<code>chef-solo</code>, <code>knife</code> など...) が入っている。</p>

<p>一方、<code>C:\opscode\chef\embedded\bin</code> には UNIX 関係のプログラム (<code>ruby.exe</code>, <code>perl.exe</code>, <code>ls.exe</code>, <code>cat.exe</code> など...) が入っている。</p>

<h1>ピンチ！　既存の Ruby 環境と競合！！</h1>

<p>全部入りでありがたいんだけど、<code>ruby.exe</code> や <code>perl.exe</code> にパスが通ってしまうのが気持ち悪い。</p>

<p>自分の環境では、Chef のやつ以外にも Ruby を <code>C:\Ruby200-x64\bin</code> にインストールしていて、そっちにも <code>PATH</code> が通った状態になっている。</p>

<p>この状態で、<code>gem install knife-solo</code> すると、先にインストールしたほうの Ruby の gem が動く。自分の場合は Chef が後だったので、<code>C:\Ruby200-x64\bin</code> のほうの gem が動いた。その結果、<code>C:\Ruby64</code> の下に knife-solo が入って、おかしな状態になった。</p>

<p>この環境では、Chef 側の何らかのコマンドが <code>C:\opscode\chef\embedded\bin\ruby.exe</code> を実行するつもりで <code>ruby</code> を実行したとしても、<code>C:\Ruby200-x64\bin\ruby.exe</code> が実行されてしまうわけで、変なバグに困らされる確率が高そうだ。</p>

<p>何かと嫌な予感がするので、対策することにした。</p>

<h1>解決法: Chef 用のコンソールを作る</h1>

<p>Visual Studio を入れたら「開発者コンソール」がスタート メニューに入るし、Git for Windows でも MS-DOS から隔離された Git Bash で作業をする。</p>

<p>同じように、Chef にも専用のコマンド プロンプトを用意することにした。</p>

<p>ということで作ってみた。手順は 2 段階。</p>

<h2>1. バッチファイルを作る</h2>

<p>こちらがそのバッチファイル。これを <code>C:\opscode\chefenv.bat</code> といった名前で保存しておく。</p>
<div class="highlight"><pre><code class="bat language-bat" data-lang="bat">@ECHO OFF

SET PATH=c:\opscode\chef\bin;c:\opscode\chef\embedded\bin
SET PATH=%PATH%;c:\windows\system32;c:\windows

title Chef Env
chef-solo -v
</code></pre></div>
<h2>2. ショートカットを作る</h2>

<p>このファイルへのショートカットを作る。</p>

<p>[リンク先] は <code>C:\Windows\System32\cmd.exe /K C:\opscode\chefenv.bat</code> に設定する (<code>/K</code> は「バッチを実行して、ウインドウを閉じない」という意味)。</p>

<p>[作業フォルダー] は Chef レポジトリーのパスか、マイドキュメントのパスにでもしておくとよいだろう。</p>

<p>ショートカットのファイル名は何でもよいけど、「Chefコマンド プロンプト」とでもしておいてスタートメニューに登録するなり、デスクトップに置くなり、ランチャーに登録するなりしておくとよいだろう。</p>

<h1>使い方</h1>

<p>ショートカットを叩くと、<code>PATH</code> が限定された状態でコマンドプロンプトが立ち上がってくれる。</p>

<p><center><img src="http://farm6.staticflickr.com/5527/11980775965_c14b1872a6.jpg" width="500" height="364"></center></p>

<p><code>chef-solo</code> も <code>knife</code> も実行できる。めでたし。</p>

<p>ついでに、システム全体の <code>PATH</code> から <code>c:\opscode</code> 以下の 2 つを削っておくと、コマンドプロンプトを使ったときの混乱も起きなくなって幸せ。</p>

<p>ぜひお試しください。</p>
]]></description>
		</item>

		<item>
			<title>うちの年賀状2014</title>
			<link>http://tech.nitoyon.com/ja/blog/2014/01/14/nenga/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2014/01/14/nenga/</guid>
			<pubDate>Tue, 14 Jan 2014 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>毎年恒例で、一年の最初のエントリは我が家の年賀状でのご挨拶です。</p>

<p><center><img src="http://farm6.staticflickr.com/5507/11931220906_0cbcb76095.jpg" width="356" height="500"></center></p>

<p>写真２つとイラストを無理矢理合成して作りました。</p>

<h1>twitter アイコン</h1>

<p>twitter のアイコンも合わせて更新しています。</p>

<p><center><img src="http://farm4.staticflickr.com/3788/11930824034_528fbbbb2f_o.png" width="480" height="480"></center></p>

<p>今年もよろしくおねがいします。</p>
]]></description>
		</item>

		<item>
			<title>タッチ操作に対応した画像ビューワーをJavaScriptで作るならD3.jsが便利</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/12/13/touch-viewer/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/12/13/touch-viewer/</guid>
			<pubDate>Fri, 13 Dec 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>スマホやタブレットで写真を表示していると、ピンチでズームしたり、ドラッグで移動したりができて便利なので、あれを Web 上で実現してみたくなった。</p>

<p>最近のブラウザーでは <code>touchstart</code> や <code>touchmove</code> イベントでタッチ情報を取れたり、イベントの <code>touches</code> でマルチタッチを扱えたりするので、実現するための基盤はそろっている。</p>

<p>適当なライブラリーがあるかと思って探してみたが、意外と苦労してしまった。</p>

<h1>Hammer.js が使えない</h1>

<p>タッチを扱うためのライブラリーとしては <a href="http://eightmedia.github.io/hammer.js/">Hammer.js</a> がメジャーらしい。スワイプ・ピンチ・ドラッグなど、各種イベントにも対応していて、これを使えば一発解決してくれそうだ。</p>

<p>ところが、画像ビューワーを作るには不向きだった。困ったのは次の 2 点。</p>

<ul>
<li>ピンチやドラッグは個別には動くが、組み合わせたときに「表示位置」と「倍率」の関係を自前で計算する必要がある</li>
<li>人差し指でドラッグしながら親指を追加してピンチすると、ピンチイベントは来るもののスケールがいい加減 (ドラッグ開始位置を基準に算出している気配)</li>
</ul>

<p>いちおう公式のサンプルに <a href="http://eightmedia.github.io/hammer.js/examples/pinchzoom.html">pinchzoom.html</a> というものはあるんだけど、動かしてみると分かる通り、毎回、移動の初期位置は初期化される。</p>

<p>コードも読んでみたが、複雑なものを作るには少し不向きである予感がした。</p>

<h1>D3.js の d3.behavior.zoom で万事解決！</h1>

<p>自前で実装するにしても難しそうだし、しばらく途方に暮れていたのだけど、<a href="http://d3js.org/">D3.js</a> の <a href="http://bl.ocks.org/mbostock/2374239">Zoomable Geography</a> のサンプルを見たら、見事に希望の動作を実現していた。</p>

<p>ドラッグ中にピンチしてもきれいに動いている。マウスのドラッグやホイールにも対応してたり、ダブルクリック・ダブルタップでの拡大もしてくれる。Nexus 7 と Windows 8 + Google Chrome で動作することを確認した。すばらしい。</p>

<p>しかもサンプルのコードが超絶短い。どうやら、D3.js の <a href="https://github.com/mbostock/d3/wiki/Zoom-Behavior"><code>d3.behavior.zoom()</code></a> がタッチ操作を全部面倒みてくれるようだ。</p>

<h2>画像ファイルでやってみた</h2>

<p>そこで、試しに自分も作ってみた。本家のサンプルは SVG だけども、こっちのサンプルは単なる画像を CSS3 の 2D Transform で動かしている。</p>

<iframe src="zoom_test.html" style="border: .2em solid #999" width="100%" height="300"></iframe>

<p>↑をピンチで拡大縮小、ドラッグで移動できるよ。</p>

<h1>まとめ</h1>

<p><a href="http://d3js.org/">D3.js</a> がタッチ操作に対応してるのは、たぶんビジュアライズ結果を拡大・移動したいからだろう。他にも同じようなことを実現するライブラリーはありそうなのだが、意外と見つからなかったので記事にしておく。</p>

<p>D3.js については <a href="/ja/blog/2013/10/24/d3js/">D3.js の Data-Driven な DOM 操作がおもしろい</a> もご覧あれ。そうそう、このエントリーは <a href="http://www.adventar.org/calendars/117">d3.js Advent Calendar</a> の 13 日目の記事だったりもする。</p>

<p>ソースは以下に (40行)。2D Transform では <code>transform-origin</code> の設定が必要なところで少しはまった。</p>
<div class="highlight"><pre><code class="html language-html" data-lang="html">&lt;!DOCTYPE html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;style&gt;
html,body {
    margin: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background: white;
}
&lt;/style&gt;
&lt;body&gt;
&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var zoom = d3.behavior.zoom()
    .scale(1)
    .scaleExtent([.1, 10])
    .on(&quot;zoom&quot;, zoomed);

var svg = d3.select(&quot;body&quot;)
    .call(zoom);

function zoomed() {
    var t = &quot;translate(&quot; + d3.event.translate[0] + &#39;px,&#39; + d3.event.translate[1] +&quot;px) &quot; +
        &quot;scale(&quot; + d3.event.scale + &#39;,&#39; + d3.event.scale + &quot;)&quot;;
    d3.select(&quot;img&quot;)
        .style(&quot;transform-origin&quot;, &quot;0 0&quot;)
        .style(&quot;-moz-transform-origin&quot;, &quot;0 0&quot;)
        .style(&quot;-webkit-transform-origin&quot;, &quot;0 0&quot;)
        .style(&quot;-o-transform-origin&quot;, &quot;0 0&quot;)
        .style(&quot;-ms-transform-origin&quot;, &quot;0 0&quot;)
        .style(&quot;transform&quot;, t)
        .style(&quot;-moz-transform&quot;, t)
        .style(&quot;-webkit-transform&quot;, t)
        .style(&quot;-o-transform&quot;, t)
        .style(&quot;-ms-transform&quot;, t);
}
&lt;/script&gt;
&lt;img src=&quot;/images/logo-blog.png&quot;&gt;
&lt;/body&gt;
</code></pre></div>]]></description>
		</item>

		<item>
			<title>Windows でファイル作成日時をスクリプト言語から操作するために setctime.exe を作った</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/12/09/setctime/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/12/09/setctime/</guid>
			<pubDate>Mon, 09 Dec 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Windows でたくさんのファイルの作成日時を変更したくなったときに、Perl・Ruby・Python などのスクリプト言語を使おうとしたんだけど、作成日時を変更するための関数がなくて困った。</p>

<h1>そもそも UNIX にファイルの作成日時がない</h1>

<p><a href="http://manpages.ubuntu.com/manpages/gutsy/en/man2/stat.2.html">stat(2)</a> で取得できる情報のうち時刻に関するものは次の 3 つがある。</p>

<ul>
<li><code>atime</code>: 最終アクセス日時 (access time)</li>
<li><code>utime</code>: 最終更新日時 (modify time)</li>
<li><code>ctime</code>: 最終変更日時 (change time)</li>
</ul>

<p>名前からすると <code>ctime</code> が作成日時 (creation time) っぽいけど、<code>ctime</code> はファイルを更新したときとか chmod や chown したときなどに自動的に現在時刻に更新されるようだ。</p>

<p><code>atime</code> と <code>utime</code> は <a href="http://manpages.ubuntu.com/manpages/gutsy/en/man2/utime.2.html">utimes(2)</a> で任意の時刻に変更できるんだけど、<code>ctime</code> を変更する手段は表立っては用意されていない。</p>

<p>ということで、UNIX 文化には「ファイルの作成日時」という概念がないので、UNIX 由来なスクリプト言語を使って「Windows のファイルの作成日時」を変更する公式の手法はない。</p>

<p>ということで、これを何とかするための補助アプリケーション setctime.exe を作ってみた。</p>

<ul>
<li><a href="https://github.com/nitoyon/setctime.exe">https://github.com/nitoyon/setctime.exe</a></li>
</ul>

<h1>setctime.exe の使い方</h1>

<p>とてもシンプル。</p>

<ul>
<li>コマンドライン引数でファイル名を受け取る</li>
<li>受け取ったファイルに設定されている更新日時を、作成日時にそろえる</li>
<li>成功したときのみ exit code が 0 になる</li>
</ul>

<p>日時の指定方法って、言語ごとにロケールやらタイムゾーンやらフォーマットやらが色々あってややこしいので、<strong>更新日時を、作成日時にそろえる</strong>という機能だけを提供することにしてみた。</p>

<p>こんだけシンプルにしたおかげで、いろんなスクリプト言語から使いやすくなってる。</p>

<p>例をあげておく。</p>

<h2>Perl</h2>

<p>更新日時・作成日時を現在時刻にする Perl スクリプト。</p>
<div class="highlight"><pre><code class="perl language-perl" data-lang="perl">utime undef, 0, &#39;test.txt&#39;;
system(&#39;setctime test.txt&#39;) == 0 or die &quot;failed&quot;;
</code></pre></div>
<p><code>utime()</code> してから、<code>setctime.exe</code> を呼び出すだけ。</p>

<p>mtime も変わっちゃっうけど、嫌なら <code>stat()</code> で取得して、<code>utime()</code> で戻してやればよい。</p>

<h2>Ruby</h2>

<p>同じく、更新日時・作成日時を現在時刻にする Ruby スクリプト。</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby">t = Time.now
File::utime(t, t, &#39;test.txt&#39;)
system &#39;setctime.exe test.txt&#39; or abort &#39;failed&#39;
</code></pre></div>
<p><code>File::utime()</code> してから、<code>setctime.exe</code> を呼び出すだけ。Ruby では atime を省略できないらしいので、一時変数 <code>t</code> を使って atime も更新している。</p>

<h2>Python</h2>

<p>同じく、更新日時・作成日時を現在時刻にする Python スクリプト。</p>
<div class="highlight"><pre><code class="python language-python" data-lang="python">import os
import sys
import time

t = time.time()
os.utime(&#39;test.txt&#39;, (t, t))
if os.system(&#39;setctime.exe test.txt&#39;) != 0:
    sys.exit(&#39;failed&#39;)
</code></pre></div>
<h1>実装詳細</h1>

<p>50 行ほどの簡単な Windows プログラミングになっている。ファイルを開いて、<code>GetFileTime()</code> して <code>SetFileTime()</code> しているだけ。</p>

<ul>
<li><a href="https://github.com/nitoyon/setctime.exe/blob/v1.0.0/src/main.cpp">https://github.com/nitoyon/setctime.exe/blob/v1.0.0/src/main.cpp</a></li>
</ul>

<p>開発は Visual C++ 2008 で行っている。もっと新しいやつでやってもいいんだけど、新しいやつで開いたら自動でプロジェクトファイルが変換されるので、手元にある一番古い Visual C++ で開発している。</p>

<h2>Visual C++ 再頒布可能ランタイム問題</h2>

<p>Visual C++ で開発すると、再頒布可能ランタイムの扱いをどうするかが悩ましい。</p>

<p>静的リンクするとサイズが大きくなる。動的リンクすると開発者と同じバージョンの Visual C++ ランタイムが入ってないと、実行時にエラーになる。</p>

<p>今回は小さなアプリケーションだったので、<code>libc.lib</code> をリンクしないようにした。<code>printf()</code> が使えなくなったり、<code>argc</code> <code>argv</code> が参照できなかったり、それなりに制限はあるけど Win32 のネイティブな API を使って回避できる。</p>

<p>そんなアクロバットな努力の結果、実行ファイルのサイズが 4KB と小さくなって、ランタイムライブラリーのバージョン問題に悩まなくてよくなった。</p>

<h1>まとめ</h1>

<p>どうぞご利用ください。</p>
]]></description>
		</item>

		<item>
			<title>CVS レポジトリを Git に変換した手順とか注意点とか</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/11/20/cvs2git/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/11/20/cvs2git/</guid>
			<pubDate>Wed, 20 Nov 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>この前、10 年以上前に趣味で作っていたフリーソフトについてメールで質問が来た。もはや完全に記憶から消えているだけでなく、いま使っている PC にソースコードもない。何も分からない、答えられない。</p>

<p>そのままでは古いソースコードも成仏しきれない。供養するために、古い HDD を引っ張り出して探したところ、自宅サーバーをやってた HDD の中に CVS レポジトリーが見つかった。せっかくなので、Git に変換して GitHub で公開してみた (<a href="https://github.com/nitoyon/mp3album">その１</a>, <a href="https://github.com/nitoyon/winamp-zipmp3plugin">その２</a>)。これで成仏できるだろう。</p>

<p>そこで、この記事では CVS レポジトリーを Git に移行した手順をまとめておく。レガシーな CVS から Git に移行したい人の参考になるとうれしい。</p>

<h1>git cvsimport の使い方</h1>

<p>Git には <a href="https://www.kernel.org/pub/software/scm/git/docs/git-cvsimport.html">git-cvsimport</a> というコマンドがある。CVS の履歴を Git に変換してくれる。</p>

<p>CVS はファイルごとに履歴を保存する構造になってるんだけど、<code>cvsps</code> というツールを組み合わせることで、同時に変更したファイルを 1 コミットとして扱ってくれるようになる。</p>

<p>大きいレポジトリーだと結構時間かかる。cygwin だと超絶に時間がかかったので、UNIX 上で実行した。Git for Windows には <code>git-cvsimport</code> がない。</p>

<p>自分は次のように実行した。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">git cvsimport -v -i -R -A author-conv-file.txt \
-d :local:/path/to/CVS &lt;module&gt;
</code></pre></div>
<p>それぞれのパラメータの意味は次の通り。詳しくは <a href="https://www.kernel.org/pub/software/scm/git/docs/git-cvsimport.html">git-cvsimport</a> を参照のこと。</p>

<ul>
<li><code>-v</code>: 出力を verbose にする。</li>
<li><code>-i</code>: インポートだけを行ってチェックアウトしない。</li>
<li><code>-R</code>: 「CVS のリビジョン番号」と「それに対応する Git のコミット」の対応付けを <code>.git/cvs-revisions</code> に出力する。一応生成しておく。</li>
<li><code>-A</code>: ユーザー名の変換テーブル。詳細は後述。</li>
<li><code>-d</code>: CVSROOT のパス。cvs コマンドで <code>-d</code> に指定するやつ。もしくは、環境変数の <code>CVSROOT</code> に指定してるやつ。</li>
<li><code>&lt;module&gt;</code>: モジュール名。サブディレクトリを指定することもできる。</li>
</ul>

<p><code>-d</code> で指定したパスに <code>CVSROOT</code> ディレクトリがないと <code>Expected Valid-requests from server, but got: E Cannot access /path/to/CVS</code> というエラーになる。ダミーでよいので <code>mkdir /path/to/CVS/CVSROOT</code> しておけば回避できた。</p>

<h2>author-conv-file の書き方</h2>

<p>author-conv-file には「CVS のユーザー名」から「Git の Author 名・メールアドレス」への対応を記述していく。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">user1=User 1 &lt;user1@example.com&gt;
user2=User 2 &lt;user1@example.com&gt; Asia/Tokyo
</code></pre></div>
<p>1.8.1 からはタイムゾーンも指定できるようになっている。それ以前のバージョンだと、すべて UTC でのコミットとなってしまう。</p>

<p>実行が終わったら <code>git log | grep Author: | sort | uniq</code> を実行して、author-conv-file に漏れがないか確認しておくといいだろう。</p>

<h2>cvsps のキャッシュ</h2>

<p>個人的に悩まされたのが、<code>cvsps</code> が結果を <code>~/.cvsps</code> にキャッシュすること。CVS レポジトリーを変更したあとに <code>git cvsimport</code> を実行しても反映されない。そういうときは、<code>rm -rf ~/.cvsps</code> して再実行するとよい。</p>

<h2>文字コードの変換</h2>

<p>いまなら「全部 UTF-8 でやっちゃえ」となるんだけど、CVS 全盛の時代は Windows は ShiftJIS で、UNIX 上では EUC-JP がまだまだ主流だった。</p>

<p>コミットログやファイル名が UTF-8 でない場合は、ちょいとソースコードを修正する必要がある。</p>

<p>以下は 1.7.3.1 の <code>git-cvsimport</code> に対する修正。</p>
<div class="highlight"><pre><code class="diff language-diff" data-lang="diff">--- /usr/local/libexec/git-core/git-cvsimport.bak
+++ /usr/local/libexec/git-core/git-cvsimport
@@ -722,6 +722,11 @@
 sub update_index (\@\@) {
        my $old = shift;
        my $new = shift;
+
+       # file name
+       use Encode qw/decode encode/;
+       $_ = encode(&#39;utf8&#39;, decode(&#39;shift-jis&#39;, $_)) for @$old;
+       $_-&gt;[2] = encode(&#39;utf8&#39;, decode(&#39;shift-jis&#39;, $_-&gt;[2])) for @$new;
+
        open(my $fh, &#39;|-&#39;, qw(git update-index -z --index-info))
                or die &quot;unable to open git update-index: $!&quot;;
        print $fh
@@ -810,6 +816,11 @@
        substr($logmsg,32767) = &quot;&quot; if length($logmsg) &gt; 32767;
        $logmsg =~ s/[\s\n]+\z//;

+       # commit log
+       use Encode qw/encode decode/;
+       $logmsg = encode(&#39;utf8&#39;, decode(&#39;shift-jis&#39;, $logmsg));
+
        if (@skipped) {
            $logmsg .= &quot;\n\n\nSKIPPED:\n\t&quot;;
            $logmsg .= join(&quot;\n\t&quot;, @skipped) . &quot;\n&quot;;
</code></pre></div>
<p>ここではコミットログやファイル名が Shift_JIS だという前提で書いてある。</p>

<p>自動判定したい場合は</p>
<div class="highlight"><pre><code class="diff language-diff" data-lang="diff">+       use Encode::Guess qw/euc-jp shiftjis/;
+       $logmsg = encode(&#39;utf8&#39;, decode(&#39;guess&#39;, $logmsg));
</code></pre></div>
<p>のように書けばいける。</p>

<h2>歴史の書き換え</h2>

<p>push する前に、インポート結果を十分に確認しておきたい。次のような点に注意して作業した。</p>

<p>コミットログを書き換えたいなら <code>git rebase -i</code> でやっちゃう。</p>

<p>不要なファイルがあったら <code>git filter-branch --tree-filter &#39;rm -f passwords.txt&#39; HEAD</code> のようにして消しておく (参照: <a href="http://git-scm.com/book/ja/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E6%AD%B4%E5%8F%B2%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88">Git - 歴史の書き換え</a>)。</p>

<p>一度でも歴史を書き換えたら、commit date が実行時刻になってしまうので、<code>git filter-branch --env-filter &#39;GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; export GIT_COMMITTER_DATE&#39;</code> で author date にそろえておく (参照: <a href="http://stackoverflow.com/questions/2973996/git-rebase-without-changing-commit-timestamps">git rebase without changing commit timestamps - Stack Overflow</a>)。</p>

<p>このあたりは <code>git-cvsimport</code> の Tips というよりも、Git での歴史書き換えの Tips。</p>

<h1>まとめ</h1>

<p>負の遺産 CVS を捨てて、健全な Git ライフを送ろう！</p>
]]></description>
		</item>

	</channel>
</rss>
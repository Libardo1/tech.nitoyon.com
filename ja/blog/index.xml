<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Tue, 06 Nov 2012 00:55:24 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>Flickr の Set 内の写真一覧を更新する Ruby スクリプトを作った</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/11/06/flickr-auto-update/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/11/06/flickr-auto-update/</guid>
			<pubDate>Tue, 06 Nov 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>身内向けの写真ブログを Flickr を使ってやってます。</p>

<p>非公開で写真をアップロードして、Set の Guest Pass 機能と組み合わせて、URL を知ってる人だけが Set の写真を見られる、という形で運営してます。</p>

<p>さて、Set に写真を追加していけば更新できるわけですが、毎回 Flickr を開いて作業するのが面倒になってきました。Set 内の写真が増えてくると、UI がもっさりしてくるのも嫌でした。</p>

<p>となれば、Flickr の API を使って、スクリプトで自動処理したくなるのがプログラマ心情でございます。</p>

<h1>さっそく作った</h1>

<p>ということで、Flickr の API とにらめっこしながら作ってみました。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;flickraw&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;date&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;set&#39;</span>

<span class="c1"># load conf and set API key and access token</span>
<span class="c1"># (ex)</span>
<span class="c1"># { &quot;api_key&quot;: &quot;xxxxxxx&quot;,</span>
<span class="c1">#  &quot;shared_secret&quot;: &quot;xxxxx&quot;,</span>
<span class="c1">#  &quot;access_token&quot;: &quot;xxxxxxx&quot;,</span>
<span class="c1">#  &quot;access_secret&quot;: &quot;xxxxxx&quot;</span>
<span class="c1"># }</span>
<span class="n">conf</span> <span class="o">=</span> <span class="kp">nil</span>
<span class="nb">open</span><span class="p">(</span><span class="s1">&#39;flickr.conf&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">conf</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="p">}</span>

<span class="no">FlickRaw</span><span class="o">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="n">conf</span><span class="o">[</span><span class="s1">&#39;api_key&#39;</span><span class="o">]</span>
<span class="no">FlickRaw</span><span class="o">.</span><span class="n">shared_secret</span> <span class="o">=</span> <span class="n">conf</span><span class="o">[</span><span class="s1">&#39;shared_secret&#39;</span><span class="o">]</span>
<span class="n">flickr</span><span class="o">.</span><span class="n">access_token</span> <span class="o">=</span> <span class="n">conf</span><span class="o">[</span><span class="s1">&#39;access_token&#39;</span><span class="o">]</span>
<span class="n">flickr</span><span class="o">.</span><span class="n">access_secret</span> <span class="o">=</span> <span class="n">conf</span><span class="o">[</span><span class="s1">&#39;access_secret&#39;</span><span class="o">]</span>


<span class="k">def</span> <span class="nf">get_set_id_by_name</span><span class="p">(</span><span class="n">set_name</span><span class="p">)</span>
  <span class="n">res</span> <span class="o">=</span> <span class="n">flickr</span><span class="o">.</span><span class="n">photosets</span><span class="o">.</span><span class="n">getList</span>
  <span class="k">for</span> <span class="n">set</span> <span class="k">in</span> <span class="n">res</span>
    <span class="k">if</span> <span class="n">set</span><span class="o">.</span><span class="n">title</span> <span class="o">==</span> <span class="n">set_name</span>
      <span class="k">return</span> <span class="n">set</span><span class="o">.</span><span class="n">id</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="kp">nil</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">get_photos_in_a_set</span><span class="p">(</span><span class="n">photoset_id</span><span class="p">)</span>
  <span class="n">page</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">pages</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">photo_ids</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="k">while</span> <span class="n">page</span> <span class="o">&lt;=</span> <span class="n">pages</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">flickr</span><span class="o">.</span><span class="n">photosets</span><span class="o">.</span><span class="n">getPhotos</span> <span class="ss">:photoset_id</span> <span class="o">=&gt;</span> <span class="n">photoset_id</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span>
                                     <span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">page</span><span class="o">.</span><span class="n">to_s</span>
    <span class="n">photo_ids</span><span class="o">.</span><span class="n">concat</span> <span class="n">res</span><span class="o">.</span><span class="n">photo</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">photo</span><span class="o">|</span> <span class="n">photo</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span>

    <span class="n">page</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">to_i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">pages</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">to_i</span>
  <span class="k">end</span>
  <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">res</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
    <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="n">res</span><span class="o">.</span><span class="n">primary</span><span class="p">,</span> 
    <span class="ss">:photo</span> <span class="o">=&gt;</span> <span class="n">photo_ids</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">cur_set_id</span><span class="p">)</span>
  <span class="c1"># get set &#39;YYYY-MM-DD&#39;</span>
  <span class="n">new_set_name</span> <span class="o">=</span> <span class="no">Date</span><span class="o">::</span><span class="n">today</span><span class="o">.</span><span class="n">to_s</span>
  <span class="n">new_set_id</span> <span class="o">=</span> <span class="n">get_set_id_by_name</span><span class="p">(</span><span class="n">new_set_name</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">new_set_id</span><span class="o">.</span><span class="n">nil?</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;set </span><span class="si">#{</span><span class="n">new_set_name</span><span class="si">}</span><span class="s2"> not found&quot;</span><span class="p">)</span>
    <span class="nb">exit</span>
  <span class="k">end</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;set </span><span class="si">#{</span><span class="n">new_set_name</span><span class="si">}</span><span class="s2"> found: </span><span class="si">#{</span><span class="n">new_set_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

  <span class="c1"># Get set information</span>
  <span class="n">cur_set</span> <span class="o">=</span> <span class="n">get_photos_in_a_set</span><span class="p">(</span><span class="n">cur_set_id</span><span class="p">)</span>
  <span class="n">new_set</span> <span class="o">=</span> <span class="n">get_photos_in_a_set</span><span class="p">(</span><span class="n">new_set_id</span><span class="p">)</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;current set has </span><span class="si">#{</span><span class="n">cur_set</span><span class="o">[</span><span class="ss">:photo</span><span class="o">].</span><span class="n">length</span><span class="si">}</span><span class="s2"> photos&quot;</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">new_set</span><span class="o">[</span><span class="ss">:photo</span><span class="o">].</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;no photo&quot;</span><span class="p">)</span>
    <span class="nb">exit</span>
  <span class="k">end</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;add </span><span class="si">#{</span><span class="n">new_set</span><span class="o">[</span><span class="ss">:photo</span><span class="o">].</span><span class="n">length</span><span class="si">}</span><span class="s2"> photo(s) to it&quot;</span><span class="p">)</span>

  <span class="c1"># Create new photo_ids</span>
  <span class="n">cur_photos_set</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">cur_set</span><span class="o">[</span><span class="ss">:photo</span><span class="o">]</span><span class="p">)</span>
  <span class="n">photos</span> <span class="o">=</span> <span class="n">cur_set</span><span class="o">[</span><span class="ss">:photo</span><span class="o">].</span><span class="n">dup</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;current photos: </span><span class="si">#{</span><span class="n">photos</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
  <span class="n">modified</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="k">for</span> <span class="n">photo</span> <span class="k">in</span> <span class="n">new_set</span><span class="o">[</span><span class="ss">:photo</span><span class="o">]</span>
    <span class="k">if</span> <span class="n">cur_photos_set</span><span class="o">.</span><span class="n">include?</span> <span class="n">photo</span>
      <span class="n">log</span><span class="p">(</span><span class="s2">&quot;skip photo </span><span class="si">#{</span><span class="n">photo</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="n">log</span><span class="p">(</span><span class="s2">&quot;add photo </span><span class="si">#{</span><span class="n">photo</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
      <span class="n">photos</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">photo</span><span class="p">)</span> 
      <span class="n">modified</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;new photos: </span><span class="si">#{</span><span class="n">photos</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">modified</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;editPhotos start&quot;</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">flickr</span><span class="o">.</span><span class="n">photosets</span><span class="o">.</span><span class="n">editPhotos</span> <span class="ss">:photoset_id</span> <span class="o">=&gt;</span> <span class="n">cur_set</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">,</span>
                                      <span class="ss">:primary_photo_id</span> <span class="o">=&gt;</span> <span class="n">cur_set</span><span class="o">[</span><span class="ss">:primary</span><span class="o">]</span><span class="p">,</span>
                                      <span class="ss">:photo_ids</span> <span class="o">=&gt;</span> <span class="n">photos</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;editPhotos finished&quot;</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="n">log</span><span class="p">(</span><span class="s2">&quot;editPhots skipped&quot;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># delete set</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;delete photoset start&quot;</span><span class="p">)</span>
  <span class="n">flickr</span><span class="o">.</span><span class="n">photosets</span><span class="o">.</span><span class="n">delete</span> <span class="ss">:photoset_id</span> <span class="o">=&gt;</span> <span class="n">new_set_id</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;delete photoset finished&quot;</span><span class="p">)</span>
<span class="k">end</span>


<span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">1</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;set_id not specified&quot;</span><span class="p">)</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;ruby flickr_update.rb [set_id]&quot;</span><span class="p">)</span>
  <span class="nb">exit</span>
<span class="k">end</span>

<span class="k">begin</span>
  <span class="n">main</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
<span class="k">rescue</span> <span class="no">SystemExit</span>
<span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="n">log</span><span class="p">(</span><span class="s2">&quot;exception </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="se">\n</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="k">end</span>
</code></pre>
</div>


<h2>使い方</h2>

<p>あらかじめ、写真をプライベートでアップロードしておきます。</p>

<p>たとえば、2012年11月06日に公開したい写真は、<code>2012-11-06</code> という Set に入れておきます。</p>

<p>その状態で、シェルから</p>

<div class="highlight"><pre><code class="bash"><span class="nv">$ </span>ruby update_flickr.rb <span class="o">[</span>set_id<span class="o">]</span>
</code></pre>
</div>


<p>のように実行してやると、<code>2012-11-06</code> というセット内の写真を列挙して、コマンドライン引数で指定した <code>[set_id]</code> のセットの先頭に追加してくれます。作業が完了すれば <code>2012-11-06</code> というセットは消えます。</p>

<p>あとは、この処理を cron に突っ込んで、一日一回実行するようにしておけば自動化完了です。めでたし。</p>

<h2>ライブラリは FlickRaw を利用</h2>

<p>Flickr API を叩くためのライブラリは、<a href="https://github.com/hanklords/flickraw/">FlickRaw</a> を使ってます。</p>

<p><code>access_token</code> と <code>access_secret</code> は公式のドキュメントに書いてある通りにやれば取得できました。</p>

<p>そのあとは、Flickr の API のドキュメントを眺めながら書くだけでした。<a href="http://www.flickr.com/services/api/explore/flickr.photos.getRecent">Flickr Api Explorer</a> を使えば、ブラウザー上で API の動作試験ができるのが楽でした。</p>

<h1>Flickr への公開は Lightroom で</h1>

<p>ちなみに、写真の現像から Flickr での公開までは、Lightroom を使ってます。</p>

<p>Lightroom にデフォルトでついてくる Flickr の公開サービス機能を使えば、Lightroom の上で Flickr にアップロードが完了します。</p>

<p>Lightroom の Tips としては、Flickr を [対象コレクション] に指定しておけば、[B] キーでアップロードするかどうかを選択できて楽です。</p>

<div class="hatena-asin-detail">
  <a href="http://www.amazon.co.jp/Adobe-Photoshop-Lightroom-Windows-Macintosh%E7%89%88/dp/B007E921HU%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB007E921HU"><img src="http://ecx.images-amazon.com/images/I/51QMvYSTH7L._SL160_.jpg" class="hatena-asin-detail-image" alt="Adobe Photoshop Lightroom 4 Windows/Macintosh版 特別提供版" title="Adobe Photoshop Lightroom 4 Windows/Macintosh版 特別提供版"></a>
  <div class="hatena-asin-detail-info">
    <p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/Adobe-Photoshop-Lightroom-Windows-Macintosh%E7%89%88/dp/B007E921HU%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3DB007E921HU">Adobe Photoshop Lightroom 4 Windows/Macintosh版 特別提供版</a></p>
    <ul>

      <li><span class="hatena-asin-detail-label">出版社/メーカー:</span> アドビシステムズ</li>
      <li><span class="hatena-asin-detail-label">発売日:</span> 2012-03-16</li>
      <li><span class="hatena-asin-detail-label">メディア:</span> DVD-ROM</li>
      <li><a href="http://www.amazon.co.jp/review/product/B007E921HU%3FSubscriptionId%3DAKIAJTLVJPAVA2KR4PJA%26tag%3Dnitoyoncom-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D5143%26creativeASIN%3DB007E921HU">Amazon のレビューを見る</a></li>
    </ul>
  </div>
  <div class="hatena-asin-detail-foot"></div>
</div>


<h1>まとめ</h1>

<p>自動化万歳、API を公開してるサービス万歳。</p>
]]></description>
		</item>

		<item>
			<title>Ruby の Liquid でテンプレートに値を渡すパターン４つ</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/10/29/liquid-drop/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/10/29/liquid-drop/</guid>
			<pubDate>Mon, 29 Oct 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>今日は Ruby のテンプレート エンジン Liquid において、コードとテンプレートの間でデータをやり取りする方法についてまとめておく。</p>

<p>Liquid のバージョンは 2.3.0 で確認しているが、執筆時点で最新の 2.4.1 でも変わってないようにみえる。</p>

<h1>Hash を渡すパターン</h1>

<p>まずは、Liquid のサイトにも載ってる一番単純なハッシュを渡すパターン。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;liquid&#39;</span>

<span class="n">template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi {{name}}&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span> <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nitoyon&#39;</span> <span class="p">)</span> <span class="c1"># =&gt; hi nitoyon</span>
</code></pre>
</div>


<p>分かりやすい。そのまま。</p>

<h1>to_liquid を実装するパターン</h1>

<p>自分で作ったクラスのインスタンスを Liquid に渡したい場合もあるだろう。この場合、<code>to_liquid</code> メソッドを実装してやる必要がある。</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;liquid&#39;</span>

<span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;nitoyon&quot;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">to_liquid</span>
    <span class="p">{</span> <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="vi">@name</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi {{person.name}}&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span> <span class="s1">&#39;person&#39;</span> <span class="o">=&gt;</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span> <span class="c1"># =&gt; hi nitoyon</span>
</code></pre>
</div>


<p>Liquid の処理としては、オブジェクトを参照するときには、あらかじめ <code>to_liquid</code> メソッドを呼ぶ仕組みになっているようだ。実際に、Liquid を <code>require</code> すると、裏側では <code>liquid/extensions.rb</code> によって <code>String#to_liquid</code> などのメソッドが定義されている。</p>

<p>もし、<code>to_liquid</code> を定義していないと、</p>

<pre><code>hi Liquid error: undefined method `to_liquid' for 
#&lt;Person:0x46a400 @name="nitoyon"&gt;
</code></pre>

<p>のようなエラーになってしまう。</p>

<p><code>to_liquid</code> を独自実装するパターンを使うと、テンプレート側から <code>Person</code> のメソッドを呼ぶことはできない。それをやりたいなら、次に説明する <code>Liquid::Drop</code> を使うとよい。</p>

<h1>Drop を使うパターン</h1>

<p><code>Liquid::Drop</code> を継承してやることで、テンプレート側からメソッドを呼べるようになる。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Drop</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;nitoyon&quot;</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">NAME</span>
    <span class="vi">@name</span><span class="o">.</span><span class="n">upcase</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi {{person.name}}&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">({</span><span class="s1">&#39;person&#39;</span> <span class="o">=&gt;</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="p">})</span>  <span class="c1"># =&gt; hi nitoyon</span>

<span class="n">template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi {{person.NAME}}&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">({</span><span class="s1">&#39;person&#39;</span> <span class="o">=&gt;</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="p">})</span>  <span class="c1"># =&gt; hi NITOYON</span>
</code></pre>
</div>


<p>これはとても便利だが、いくつか注意すべき点がある。</p>

<p>まず、引数付きのメソッドを呼ぶことはできない。引数に対処したかったら、テンプレートから <code>name_param1_param2</code> のようにして参照しておいて、後述の <code>before_method</code> でがんばってパースしろ、というポリシーのようだ。</p>

<p>もう１つ。別ライブラリが提供するオブジェクトを Liquid に渡したいことがある。このとき、<code>Liquid::Drop</code> を継承させるのは不可能だ。かといって、<code>to_liquid</code> で内部構造をいちいちハッシュに変換するのも面倒だ。</p>

<p>そんなケースに対処するために Drop 化させるクラス <code>ToDrop</code> を作ってみたので、次のパターンとして紹介する。</p>

<h1>Drop 化させるパターン</h1>

<p>gem かなんかで、こんなクラスが提供されているものと仮定する。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="nc">Person</span>
    <span class="kp">attr_accessor</span> <span class="ss">:name</span>
    <span class="k">def</span> <span class="nf">initialize</span>
      <span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;nitoyon&quot;</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">NAME</span>
      <span class="vi">@name</span><span class="o">.</span><span class="n">upcase</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>外部ライブラリーのクラスなのでいじりたくないけど、このクラスのインスタンスをテンプレートに渡して、 <code>name</code> や <code>NAME</code> メソッドを叩きたいものとする。</p>

<p>そういうときは、次のような <code>ToDrop</code> クラスを定義しておけばよい。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">ToDrop</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Drop</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
    <span class="vi">@obj</span> <span class="o">=</span> <span class="n">obj</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">before_method</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">method</span> <span class="o">&amp;&amp;</span> <span class="nb">method</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span> <span class="o">&amp;&amp;</span> <span class="vi">@obj</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">public_method_defined?</span><span class="p">(</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
      <span class="vi">@obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>


<p>使い方は簡単。<code>to_liquid</code> で <code>ToDrop.new(self)</code> を返す処理を実装してやるだけだ。これだけで期待の動作となっている。</p>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">Foo</span>
  <span class="k">class</span> <span class="nc">Person</span>
    <span class="k">def</span> <span class="nf">to_liquid</span>
      <span class="no">ToDrop</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi {{person.name}}&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">({</span><span class="s1">&#39;person&#39;</span> <span class="o">=&gt;</span> <span class="no">Foo</span><span class="o">::</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="p">})</span> <span class="c1"># =&gt; hi nitoyon</span>

<span class="n">template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi {{person.NAME}}&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">({</span><span class="s1">&#39;person&#39;</span> <span class="o">=&gt;</span> <span class="no">Foo</span><span class="o">::</span><span class="no">Person</span><span class="o">.</span><span class="n">new</span> <span class="p">})</span> <span class="c1"># =&gt; hi NITOYON</span>
</code></pre>
</div>


<p>この <code>ToDrop</code> が今回、わたしが作成した魔法のクラスで、任意のオブジェクトを <code>Liquid::Drop</code> を継承したときと同じ動作にしてくれる。</p>

<p><code>ToLiquid</code> クラスでは <code>Liquid::Drop#before_method</code> メソッドを実装している。このメソッドは <code>Drop</code> のメソッドミッシングのような役割を担っている。<code>ToDrop#before_method</code> では、ラップ対象のオブジェクトに public メソッドがあるかどうか調べて、あるならばそれを呼ぶよう実装している。</p>

<p>言葉で説明しても分かりにくいのだけど、<code>Liquid::Drop</code> クラスのソース <a href="https://github.com/Shopify/liquid/blob/master/lib/liquid/drop.rb">drop.rb</a> と見比べてもらうとイメージは沸きやすいと思う。<code>Liquid::Drop</code> のソースをよく見ると Liquid と密接に関わっているわけではなく、<code>alias :[] :invoke_drop</code> とすることで、<code>[]</code> を使った参照をメソッド呼び出しに置き換えているだけ、というヘルパークラスなのが興味深い。</p>

<h1>まとめ</h1>

<p>Liquid に値を渡すためのパターンを 4 つ紹介した。<code>Liquid::Drop</code> を継承すればテンプレート側からメソッドを呼べるし、継承関係に手が出しにくいときには拙作の <code>ToDrop</code> クラスを使えば便利だよ、という話をした。</p>
]]></description>
		</item>

		<item>
			<title>ActionScript のみで作った SWF をコマ落ちせずに動画にする手法</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/10/18/as3-to-movie/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/10/18/as3-to-movie/</guid>
			<pubDate>Thu, 18 Oct 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[Liquid error: wrong number of arguments (3 for 2)]]></description>
		</item>

		<item>
			<title>静的サイトで JS/CSS のキャッシュを防ぎつつレポジトリをキレイに保つ</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/10/15/static-site-js-css-cache/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/10/15/static-site-js-css-cache/</guid>
			<pubDate>Mon, 15 Oct 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[Liquid error: wrong number of arguments (3 for 2)]]></description>
		</item>

		<item>
			<title>俺の最強ブログ システムが火を噴くぜ</title>
			<link>http://tech.nitoyon.com/ja/blog/2012/09/20/moved-completed/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2012/09/20/moved-completed/</guid>
			<pubDate>Thu, 20 Sep 2012 00:00:00 +0900</pubDate>
			<description><![CDATA[Liquid error: wrong number of arguments (3 for 2)]]></description>
		</item>

	</channel>
</rss>
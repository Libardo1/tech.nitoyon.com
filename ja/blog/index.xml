<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Wed, 02 Oct 2013 00:46:59 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />





		<item>
			<title>Node.js の fs.watch() と fs.watchFile() の違い</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/10/02/node-watch-impl/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/10/02/node-watch-impl/</guid>
			<pubDate>Wed, 02 Oct 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Node.js のファイル監視の API には <code>fs.watch()</code> と <code>fs.watchFile()</code> の 2 つがある。</p>

<p>微妙に機能がかぶっているし、使い分けが分かりにくかったので調べてみた。</p>

<h1>公式情報を見る</h1>

<p>まずは公式の<a href="http://nodejs.org/docs/v0.8.0/api/fs.html#fs_fs_watchfile_filename_options_listener">ドキュメント (v0.8.0)</a>を見てみた。</p>

<blockquote>
<h2>fs.watchFile(filename, [options], listener)</h2>

<p>Stability: 2 - Unstable.  Use fs.watch instead, if available.</p>

<p>Watch for changes on <code>filename</code>.</p>

<h2>fs.watch(filename, [options], [listener])</h2>

<p>Stability: 2 - Unstable.  Not available on all platforms.</p>

<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a directory.</p>
</blockquote>

<p>と書いてある。</p>

<p>つまり</p>

<ul>
<li><code>fs.watch()</code> の利用を推奨している</li>
<li><code>fs.watch()</code> は全てのプラットフォームで使えるわけではない</li>
<li><code>fs.watch()</code> はファイルとディレクトリを監視できるが、<code>fs.watchFile()</code> はファイルしか監視できない</li>
</ul>

<p>ことが分かる。</p>

<h1>歴史的見地から調べる</h1>

<p>次に、過去をさかのぼるために <a href="https://github.com/joyent/node/blob/master/ChangeLog">ChangeLog</a> を見てみた。</p>

<ul>
<li><code>fs.watchFile()</code> は v0.1.18 で <code>process.watchFile()</code> として登場した古い API</li>
<li><code>fs.watch()</code> は v0.5.9 で実装された新しい API</li>
</ul>

<p>だと分かった。</p>

<p>しかし、これ以上の公式の情報が見つからなかったため、全体像が見えない。</p>

<h1>ソースコードを見る</h1>

<p>困ったらソースコードを見ろ、と昔の偉い人も言っている。いざ、コード リーディング！</p>

<h2>fs.watch()</h2>

<p>まずは、<code>fs.watch()</code> の実装をみてみよう。(ソースコードは執筆時点で最新の <a href="https://github.com/joyent/node/tree/v0.10.19">v0.10.19</a> を利用する)</p>

<p><a href="https://github.com/joyent/node/blob/v0.10.19/lib/fs.js"><code>lib/fs.js</code></a> → <a href="https://github.com/joyent/node/blob/v0.10.19/src/fs_event_wrap.cc#L102"><code>src/fs_event_wrap.cc</code></a> の順にたどっていくと、<code>uv_fs_event_init()</code> 関数が本丸だと分かった。</p>

<p><code>uv</code> で始まる関数は libuv で定義されたもの。libuv は Node.js のプラットフォーム間の差を吸収するためのライブラリらしく、IO やスレッド、タイマーなどの処理が実装されているようだ。</p>

<p>では、<code>uv_fs_event_init()</code> の実装を見てみる。<code>deps/uv/src</code> の下を grep してみると</p>

<ul>
<li>unix\aix.c</li>
<li>unix\cygwin.c</li>
<li>unix\kqueue.c</li>
<li>unix\linux-inotify.c</li>
<li>unix\sunos.c</li>
<li>win\fs-event.c</li>
</ul>

<p>が引っかかった。プラットフォームごとに実装が異なっているようだ。</p>

<p>ざっと読んでみると、</p>

<table><thead>
<tr>
<th>プラットフォーム</th>
<th>実装方法</th>
</tr>
</thead><tbody>
<tr>
<td>Linux</td>
<td>inotify を利用</td>
</tr>
<tr>
<td>MacOS、*BSD</td>
<td>kqueue を利用</td>
</tr>
<tr>
<td>Windows</td>
<td><code>ReadDirectoryChangesW()</code> を利用</td>
</tr>
<tr>
<td>Solaris</td>
<td>Event Ports を利用</td>
</tr>
<tr>
<td>AIX</td>
<td>(未対応)</td>
</tr>
<tr>
<td>Cygwin</td>
<td>(未対応)</td>
</tr>
</tbody></table>

<p>となっていた。</p>

<p>つまり、<strong>fs.watch() はネイティブの監視処理を利用して、変更があったら OS から通知してもらっている</strong>ことが分かった。</p>

<h2>fs.watchFile()</h2>

<p>一方の <code>fs.watchFile()</code> を見てみる。Node.js には古くから実装されているが、現在では利用が推奨されていないほうの関数である。</p>

<p><a href="https://github.com/joyent/node/blob/v0.10.19/lib/fs.js"><code>lib/fs.js</code></a> → <a href="https://github.com/joyent/node/blob/v0.10.19/src/node_stat_watcher.cc#L112"><code>src/node_stat_watcher.cc</code></a> の順にたどっていくと、<code>uv_fs_poll_start()</code> 関数が本丸だと分かった。</p>

<p>あとは、<code>uv_fs_poll_start()</code> の流れをつかめばおしまい。<a href="https://github.com/joyent/node/blob/v0.10.19/deps/uv/src/fs-poll.c#L56"><code>deps/uv/src/fs-poll.c</code></a> を見てみよう。なんとなくポーリングをしていそうな名前である。</p>
<div class="highlight"><pre><code class="c language-c" data-lang="c">int uv_fs_poll_start(uv_fs_poll_t* handle,
                     uv_fs_poll_cb cb,
                     const char* path,
                     unsigned int interval) {
  // 初期化処理は省略

  if (uv_fs_stat(loop, &amp;ctx-&gt;fs_req, ctx-&gt;path, poll_cb))
    abort();
</code></pre></div>
<p>肝は <code>uv_fs_stat()</code> の呼び出し。この関数は、Node.js で言うところの <code>fs.stat()</code> 相当の処理だろう。ファイルの更新日時の取得を依頼して、取得が完了したら、<code>poll_cb()</code> が呼ばれる。</p>

<p>その <a href="https://github.com/joyent/node/blob/v0.10.19/deps/uv/src/fs-poll.c#L139"><code>poll_cb()</code></a> を見てみよう。</p>
<div class="highlight"><pre><code class="c language-c" data-lang="c">static void poll_cb(uv_fs_t* req) {
  // 異常処理とか、前回と違ってたらイベント発行する処理とか

  /* Reschedule timer, subtract the delay from doing the stat(). */
  interval = ctx-&gt;interval;
  interval -= (uv_now(ctx-&gt;loop) - ctx-&gt;start_time) % interval;

  if (uv_timer_start(&amp;ctx-&gt;timer_handle, timer_cb, interval, 0))
    abort();
}
</code></pre></div>
<p>実行結果の解析が終わったら、<code>interval</code> 後に <code>timer_cb()</code> が呼ばれるようにタイマーを開始している。</p>

<p><code>timer_cb()</code> では、再度 <code>uv_fs_stat()</code> を実行している。つまり、定期的に <code>fs.stat()</code> を実行している。</p>

<p>つまり、<strong>fs.watchFile() は定期的に fs.stat() をポーリングで実行して、変更されたらイベントを発行している</strong> ことが分かった。非常に原始的な実装になっている。</p>

<h1>まとめ</h1>

<p><code>fs.watch()</code>:</p>

<ul>
<li>新しい API、利用が推奨されている</li>
<li>push 型 (OS の監視機能を利用しているので、待機中に CPU を消費しない)</li>
<li>一部のプラットフォーム (AIX、Cygwin) では利用できない</li>
</ul>

<p><code>fs.watchFile()</code>:</p>

<ul>
<li>古い API、あまり使ってほしくなさそう</li>
<li>poll 型 (定期的に stat を実行する)</li>
<li>どのプラットフォームでも動く</li>
</ul>
]]></description>
		</item>

		<item>
			<title>LiveReloadX を Grunt から使えるようにした</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/07/29/livereloadx0-3-0/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/07/29/livereloadx0-3-0/</guid>
			<pubDate>Mon, 29 Jul 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><a href="http://nitoyon.github.io/livereloadx/">LiveReloadX</a> に少し手を入れて <a href="http://gruntjs.com/">Grunt</a> のタスクとして動作させられるようにした。</p>

<p>今回のバージョンは 0.3.0。新規インストールするなら今まで通り <code>npm install -g livereloadx</code> で、バージョンアップするなら <code>npm update -g livereloadx</code> でどうぞ。</p>

<p>設定手順は <a href="http://nitoyon.github.io/livereloadx/">LiveReloadX</a> の「Run as a Grunt Task」あたりを参照してもらうとして、この記事では実装した背景を説明しておこう。</p>

<h1>Grunt に対応させる価値</h1>

<p><a href="http://gruntjs.com/">Grunt</a> は、サイトの生成にあたっての必要な処理をひとまとめにできるのでとても便利である。そこに live reload する機能まで含んでいればさらに便利そうである。</p>

<p>といっても、実は、公式の <a href="https://github.com/gruntjs/grunt-contrib-watch#optionslivereload">grunt-contrib-watch</a> プラグインに live reload 機能はついている。</p>

<p>じゃあ、公式でよさそうなのだけど、公式を使うためには「HTML に JavaScript のスニペットを埋め込む」か「ブラウザ拡張を導入する」必要がある。<code>grunt-contrib-watch</code> のページに <a href="https://github.com/intesso/connect-livereload">connect-livereload</a> を使う方法も紹介されてるが、そっちは少し煩雑そうだった。</p>

<p><a href="http://nitoyon.github.io/livereloadx/">LiveReloadX</a> の一番のウリが static モードと proxy モードで、JavaScript スニペットの埋め込みを Web サーバー側でやってくれる。この機能を使いたかったので、<a href="http://nitoyon.github.io/livereloadx/">LiveReloadX</a> 自体を <a href="http://gruntjs.com/">Grunt</a> に組み込んでみた。</p>

<p>組み込むにあたっては、Grunt のドキュメントを見たり、各種プラグインのソースを見たりすれば、だいたいの方法は分かったので、比較的簡単に対応できた。</p>

<h1>ブログ書くのがさらに手軽になった</h1>

<p>個人的には、今回の機能によって、ブログを書くのがとても楽になった。</p>

<p>いままでは、このブログを書くにあたって、<code>jekyll</code> と <code>livereloadx</code> を個別に実行していた。</p>

<p>以前、<a href="/ja/blog/2013/06/25/jekyll-grunt/">Jekyll で --watch の代わりに Grunt を使ってみるテスト</a> で書いたとおり、<a href="https://github.com/mojombo/jekyll">Jekyll</a> を <a href="http://gruntjs.com/">Grunt</a> から使うことには成功していた。今回、<a href="http://nitoyon.github.io/livereloadx/">LiveReloadX</a> も組み合わせられるようになった。</p>

<p>つまり、<code>grunt</code> と実行するだけで</p>

<ul>
<li>Web サーバーが起動して、Jekyll のビルド結果を確認できる</li>
<li>Markdown 記法の記事をテキストエディターから編集したら、<code>jekyll</code> が走って HTML を生成する。</li>
<li>表示しているページの HTML や画像が生成されたら、自動でブラウザーがリロードされる</li>
</ul>

<p>という環境が整った。</p>

<p>このブログのソースコードは <a href="https://github.com/nitoyon/tech.nitoyon.com">nitoyon/tech.nitoyon.com - GitHub</a> を参照してほしい。</p>

<p>理想のブログ環境に近づいてきた。</p>
]]></description>
		</item>

		<item>
			<title>Git にパッチを送って取り込まれた話</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/07/23/git-patch/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/07/23/git-patch/</guid>
			<pubDate>Tue, 23 Jul 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git の挙動に変なところを見つけたので、パッチを作って Git のメーリングリストに投げてみたところ、何度かのレビューを経て、無事に<a href="https://github.com/git/git/commit/32eaf1de7f79c4ba09f3de3261c84e52e0a67af5">取り込まれた</a>。</p>

<p><a href="https://github.com/git/git/commit/32eaf1de7f79c4ba09f3de3261c84e52e0a67af5"><center><img src="http://farm8.staticflickr.com/7305/9342092085_b197aaf53e.jpg" width="500" height="368"></center></a></p>

<p>Git に貢献したい人とか、オープンソース開発の流れに興味がある人もいるだろうから、作業の流れを書いておくことにする。</p>

<h1>1. バグを発見する</h1>

<p>何はともあれ、修正したいところを見つけるところから。</p>

<p>先日、<a href="/ja/blog/2013/07/02/git-dir-diff/">git difftool --dir-diff が便利すぎて泣きそうです</a> という記事を書いたが、<code>difftool --dir-diff</code> の挙動を調べているうちに、一時ファイル書き戻し条件が変なことに気づいた。</p>

<p>手元のバージョンが古いのかとも思ったが、<code>master</code> ブランチでも再現したので、ちょっくら深入りしてみた。<code>git difftool</code> は Perl スクリプトだったので、ソースコードに <code>print</code> を追加しつつ挙動を探っていった。しばらく調べていると、コードの流れも分かってきて、<code>--no-symlinks</code> が指定されたとき (Windows ではこれがデフォルト) にのみ動作がおかしいことに気づいた。</p>

<p>マニアックなオプションで、しかも、Windows でしか発生しないバグ・・・ということで発見されてなかったのだろう。ちょっと修正したら期待通りの結果になったので、これはパッチを送ってみるチャンスである、と思い立った。</p>

<p>パッチを作るための手順は <a href="https://github.com/git/git/blob/master/Documentation/SubmittingPatches">Documentation/SubmittingPatches</a> に記載されている。この手順に従って、パッチを送ってみることにした。</p>

<h1>2. テストコードを修正する</h1>

<p><a href="https://github.com/git/git/blob/master/Documentation/SubmittingPatches">Documentation/SubmittingPatches</a> を読んでいると、テストコードも一緒に修正しろ、とある。</p>

<p>Windows 上でテスト環境を作ろうとしたが、修羅の道っぽかったのですぐに諦めた。次に、レンタルサーバーを借りている sakura の FreeBSD 上で試そうとしたが、これも罠にハマって解決能力がないので諦めた。</p>

<p>結局、素直に仮想端末に CentOS を突っ込んだ。<code>yum</code> でいろいろインストールしたら、あっさりテストまで実行できる環境ができあがった。</p>

<p>テストはシェルスクリプトで記述されている。シェルスクリプトは不慣れなのだが、しばらく読んでるうちに作法が分かってきたので、真似をして修正した。</p>

<h1>3. コミットログを書く</h1>

<p>これが一番難しかった。</p>

<p><a href="https://github.com/git/git/blob/master/Documentation/SubmittingPatches">Documentation/SubmittingPatches</a> を読むと、「修正前は何がおかしかったのか」「修正によって正しくなった理由」を説明することを求められている。もちろん英語で。</p>

<p>実際に、Git プロジェクトのコミットログを読んでみると、どれもコミットログが長くて、しっかりと修正の内容が説明されている。</p>

<p>しかし、自分には英語力がないので、言いたいことをうまく伝えられない。</p>

<p>第一稿では、同一ファイルへの過去のコミットログを切り貼りしつつ、なんとかそれっぽく書き上げたつもりになった (これが後々、「分かりにくいぞ」とツッコミを受けてしまうのだが・・・)。</p>

<p>あとは、コミットログの末尾に <code>Signed-off-by:</code> として自分の名前を書かなきゃいけない。「本名を書け」とあるので、名前を出したくない人にとっては厳しい関門かもしれない。</p>

<h1>4. メーリングリストにパッチを投げる</h1>

<p>Git の議論やパッチのレビューはすべてメーリングリスト上で行われている。ということで、次にすべきはパッチを <a href="http://vger.kernel.org/vger-lists.html#git">Git ML</a> に投げることである。間違っても、GitHub 上で pull リクエストを出してはいけない。</p>

<p>メールを送付する手順も <a href="https://github.com/git/git/blob/master/Documentation/SubmittingPatches">Documentation/SubmittingPatches</a> に書いてある。</p>

<p>まずは、<code>git format-patch</code> でパッチを作成する。作成したパッチはメール形式になっているので、これをそのままメールとして送る必要がある。</p>

<p>自分は GMail を使いたかったので、<a href="https://www.kernel.org/pub/software/scm/git/docs/git-format-patch.html">git-format-patch(1)</a> の MUA-SPECIFIC HINTS に従って、<code>git send-email</code> コマンドを使って送信した。事前に <code>.gitconfig</code> の <code>[sendemail]</code> に色々と設定を書くのだけど、最初、<code>[sendmail]</code> に設定を書いてしまってうまくいかずにしばらく悩んだのは、今となってはいい思い出。</p>

<h1>5. レビュー結果に従う</h1>

<p>しばらく待っているとメーリングリストに返事が届いた。</p>

<p>今回の修正では、コードについては文句が出なかったが、コミットログが分かりにくい、という注文がついた。</p>

<p>1 回目は John さんから、2 回目はメンテナの濱野さんから。</p>

<ul>
<li><a href="http://www.spinics.net/lists/git/msg208473.html">Re: [PATCH] difftool --dir-diff: copy back all files matching the working tree -- Git</a></li>
<li><a href="http://www.spinics.net/lists/git/msg208598.html">Re: [PATCH v2] difftool --dir-diff: always use identical working tree file -- Git</a></li>
</ul>

<p>結局、2 回、コミットログのみを書き換えてパッチを再送信した。</p>

<p>三度目の正直、v3 で OK をもらえた。</p>

<ul>
<li><a href="http://www.spinics.net/lists/git/msg208794.html">Re: [PATCH v3] difftool --dir-diff: allow changing any clean working tree file -- Git</a></li>
</ul>

<h1>6. ブランチを昇格していく</h1>

<p>OK をもらったコミットは <code>pu</code> (Proposed Update) ブランチに取り込まれる。</p>

<p>しばらく経って異論が出なければ <code>next</code> ブランチにマージされて、最後に <code>master</code> ブランチにマージされる。</p>

<p>最終的に自分の<a href="https://github.com/git/git/commit/32eaf1de7f79c4ba09f3de3261c84e52e0a67af5">コミット</a> が v1.8.3.2 で取り込まれてリリースされた。<a href="https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.3.2.txt">リリースノート</a>の末尾にも自分のパッチの情報が書いてあった。</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text"> * &quot;difftool --dir-diff&quot; did not copy back changes made by the
   end-user in the diff tool backend to the working tree in some
   cases.
</code></pre></div>
<p>めでたい。</p>

<h1>まとめ</h1>

<p>以上でパッチを送ってから取り込まれるまでの流れを振り返った。</p>

<p>印象的だったのは、コミットログをしっかり書かせる文化である、ということ。今回の自分のコミットは「ソースコードの行数 &lt; コミットログの行数」だった。ソースコード上のコメントは少なくても、コミットログにしっかりと歴史や意図が刻まれている。</p>

<p>あとは、英語をなんとかしたい・・・。</p>
]]></description>
		</item>

		<item>
			<title>Windows でも git difftool --dir-diff でシンボリックリンクを使う方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/07/09/symlink-dir-diff-on-windows/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/07/09/symlink-dir-diff-on-windows/</guid>
			<pubDate>Tue, 09 Jul 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><code>git difftool --dir-diff</code> が便利だよ、という話を <a href="/ja/blog/2013/07/02/git-dir-diff/">git difftool --dir-diff が便利すぎて泣きそうです</a> で書きましたが、１つ宿題が残っていました。Windows では一時ファイルがワーキング ディレクトリーへのシンボリックリンクにならないので、Unix や Mac に比べて、少しだけ不便だよ、という話です。</p>

<p>そこで、Windows でもシンボリックリンクを使えるようにしちゃおう、というのがこのエントリーの趣旨でございます。</p>

<h1>Windows 向けの応急処置パッチ</h1>

<p>Git for Windows 1.8.3 で動作確認しています。OS は Windows 7 (64 ビット)。</p>

<p><code>C:\Program Files (x86)\Git\libexec\git-core\git-difftool</code> のパッチがこちら。</p>
<div class="highlight"><pre><code class="diff language-diff" data-lang="diff">--- git-difftool    Sun Jun  2 11:28:06 2013
+++ git-difftool    Tue Jul  9 00:42:02 2013
@@ -283,7 +283,7 @@
            exit_cleanup($tmpdir, 1);
        }
        if ($symlinks) {
-           symlink(&quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
+           !system(&quot;git&quot;, &quot;mklink&quot;, &quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
            exit_cleanup($tmpdir, 1);
        } else {
            copy(&quot;$workdir/$file&quot;, &quot;$rdir/$file&quot;) or
@@ -448,7 +448,7 @@
    my $indices_loaded = 0;

    for my $file (@worktree) {
-       next if $symlinks &amp;&amp; -l &quot;$b/$file&quot;;
+       next if $symlinks;
        next if ! -f &quot;$b/$file&quot;;

        if (!$indices_loaded) {
</code></pre></div>
<p>適当な場所に保存して、GitBash を管理者権限で起動して適用してやります。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ cd /c/Program\ Files\ \(x86\)/Git/libexec/git-core/
$ patch &lt; ~/git-difftool.patch
patching file `git-difftool&#39;
</code></pre></div>
<p>さらに、<code>C:\Program Files (x86)\Git\libexec\git-core\git-mklink</code> を作ります。</p>
<div class="highlight"><pre><code class="sh language-sh" data-lang="sh">#!/bin/sh

cmd.exe /c &quot;mklink \&quot;$2\&quot; \&quot;$1\&quot;&quot; &gt; /dev/null
</code></pre></div>
<p>(このスクリプトは <code>/tmp/</code> といった msys 内のパスを Windows のパスに変換するために必要)</p>

<h1>使い方</h1>

<p>最初に、<code>.gitconfig</code> に difftool の設定をしておきます。<a href="http://winmerge.org/">WinMerge</a> を利用するには次のようにしておきます。</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[diff]
    tool = winmerge
[difftool winmerge]
    path = C:/Program Files (x86)/WinMerge/winmergeu.exe
    cmd = \&quot;C:/Program Files (x86)/WinMerge/winmergeu.exe\&quot; -r -u \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;
</code></pre></div>
<p>GitBash を管理者権限で起動して、次のように実行します (Windows ではシンボリックリンクを作成するには管理者権限が必要)。</p>
<div class="highlight"><pre><code class="console language-console" data-lang="console">$ git difftool -d --symlinks [&lt;commit&gt; [&lt;commit&gt;]]
</code></pre></div>
<p>ついでに <code>.gitconfig</code> にエイリアスを定義しておくと便利でしょう。</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[alias]
    d = difftool -d --symlinks
</code></pre></div>
<p>どうぞご利用ください。</p>
]]></description>
		</item>

		<item>
			<title>git difftool --dir-diff が便利すぎて泣きそうです</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/07/02/git-dir-diff/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/07/02/git-dir-diff/</guid>
			<pubDate>Tue, 02 Jul 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p><center><img src="http://farm3.staticflickr.com/2869/9194395890_e02e5eae04_o.jpg" width="550" height="244"></center></p>

<p>Git の 1.7.11 から <code>git difftool</code> コマンドに <code>--dir-diff</code> というオプションが追加されたのですが、これがライフ チェンジングだと思ったので紹介します。</p>

<p><code>--dir-diff</code> 登場以前の <code>git difftool</code> は「ファイルごとに順番に差分を表示していく」ことしかできず、使い勝手はいまいちでした。それが、<code>--dir-diff</code> オプションの登場で状況が一変したわけです。</p>

<h1>こんな感じの使い心地だよ</h1>

<p>ある Git レポジトリーで <code>dir1/a.txt</code> と <code>dir2/c.txt</code> を編集したとしましょう。</p>

<p>この状態で <code>git difftool --dir-diff</code> または <code>git difftool -d</code>  を実行してみると・・・。</p>

<p><center><img src="http://farm6.staticflickr.com/5339/9190948901_e8af0e9b5d.jpg" width="500" height="366"></center></p>

<p>はい、差分のあるファイルが一覧で表示されました。</p>

<p>(difftool に WinMerge を設定して、メニューから [ツリー表示] を有効にしたときの表示例です。設定方法は後述します)</p>

<h2>個別のファイルの diff を見る</h2>

<p><code>a.txt</code> を選択すると、新しいタブが開いて、<code>a.txt</code> の差分が表示されます。</p>

<p><center><img src="http://farm6.staticflickr.com/5477/9193747196_ebd8033182.jpg" width="500" height="366"></center></p>

<p>カラフルに色分けされているし、ショートカットキーで前後の差分に移動できるので便利です (WinMerge の場合は Alt + ↑ と Alt + ↓)。</p>

<p>当然、タブを移動して差分一覧に戻れば、<code>c.txt</code> の差分も表示できます。</p>

<p>コマンドラインの <code>git diff</code> に比べて、</p>

<ul>
<li>確認するファイルを選びやすい</li>
<li>差分間の移動がキーボードでやりやすい</li>
<li>ファイル全体が表示されているので、差分から前後に好きなだけたどっていける</li>
</ul>

<p>といったところが嬉しいですね。</p>

<p>おっと、ここまでなら、GUI な Git クライアントでも同じようなことはできますね。便利なのはこの次です。</p>

<h2>ファイル編集も！</h2>

<p>なんと、右側のファイルを編集して保存すると、<strong>ワーキング ディレクトリーに反映される</strong>のです (ただし、右側のファイルがワーキング ディレクトリーのファイルと同じ内容のときのみ)。</p>

<p>これがとてつもなく便利です。</p>

<p>差分を見ながら、「この差分は不要」とか「typo 発見」とか気づいたときに、その場で修正ができちゃうわけです。</p>

<h2>比較対象は無限大</h2>

<p><code>git difftool</code> で比較対象を指定する方法は <code>git diff</code> とまったく同じです。</p>

<p>たとえば、<code>git difftool -d master...topic</code> として、トピックブランチでの変更点をまとめて閲覧したりもできるわけです。<code>git difftool -d --cached</code> としてインデックスとの差分を確認できるわけです。任意のコミット間の差分も確認できるわけです。タグがうってあれば、特定のバージョン間の差分も確認できるわけです</p>

<p>うれしいですね。</p>

<h1>裏側で起こっていること</h1>

<p><code>git difftool -d</code> を実行したときに、裏側で何が起こっているのでしょうか。</p>

<p>内部的に <code>git diff</code> を呼び出して、出てきたファイルを一時ディレクトリーにチェックアウトしています。</p>

<p>たとえば、先ほどの例でいうと</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">Temp/git-difftool.VoxJJ/
    left/
        dir1/
            a.txt
        dir2/
            c.txt
    right/
        dir1/
            a.txt
        dir2/
            c.txt
</code></pre></div>
<p>といった構造になります。中身が同一なファイルはチェックアウトされないので、大きなレポジトリーでも安心です。</p>

<p>さらに、Mac や Linux では、<code>right</code> のファイルがワーキング ディレクトリーと同じなら、「ワーキング ディレクトリーへのシンボリックリンク」になっています。その結果、<code>right</code> のファイルを書き換えると、即時にワーキング ディレクトリーに反映されるわけです。</p>

<p>Windows の場合は、difftool を終了したときに、ワーキング ディレクトリーに一時ファイルを書き戻す動作になっています。ちょっと不便なので、シンボリックリンクを使うように改造したいところです。(追記) 改造しました!! <a href="/ja/blog/2013/07/09/symlink-dir-diff-on-windows/">Windows でも git difftool --dir-diff でシンボリックリンクを使う方法</a></p>

<h1>使えるようにするまでの準備</h1>

<p>便利なのは分かってもらえたと思うので、使えるように準備してみましょう！</p>

<h2>最新の git-difftool を取得しておく</h2>

<p>先ほど書いた通り、<code>git difftool --dir-diff</code> は 1.7.11 から追加されています。ただ、最近になっていくつか大きなバグが修正されているので、なるべく新しいヤツ (Linux なら 1.8.3、Windows なら 1.8.3.2 ) を利用するのがオススメです。</p>

<p>Git 全体を更新するのが面倒な場合は、git-difftool だけを</p>

<ul>
<li><a href="https://github.com/git/git/blob/master/git-difftool.perl">GitHub (git/git-difftool.perl at master)</a></li>
</ul>

<p>から落としてきて、<code>libexec/git-core/git-difftool</code> に上書きすれば、よほど古いバージョンじゃなければ動く・・・と思います。</p>

<h2>difftool の設定: WinMerge 篇</h2>

<p>Windows で WinMerge を使う場合は、<code>.gitconfig</code> に次のように書きます (Git for Windows の場合)。</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[diff]
    tool = winmerge
[difftool winmerge]
    path = C:/Program Files (x86)/WinMerge/winmergeu.exe
    cmd = \&quot;C:/Program Files (x86)/WinMerge/winmergeu.exe\&quot; -r -u \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;
</code></pre></div>
<p>インストール先が異なる場合は適宜修正してください。</p>

<p>コマンドライン オプションの意味は次の通りです。</p>

<ul>
<li><code>-r</code>: 再帰的に比較する</li>
<li><code>-u</code>: 最近開いた一覧に追加しない</li>
</ul>

<p>人によっては <code>-e</code> を追加して ESC で WinMerge を閉じられるようにしているようですが、複数タブを開いてるときに ESC を押して WinMerge が閉じてしまうと困るので私は設定していません。</p>

<h2>difftool の設定: meld 篇</h2>

<p>Mac や Linux で meld を利用する場合は、<code>.gitconfig</code> に次のように書きます。</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[diff]
    tool = meld
</code></pre></div>
<p>簡単ですね。</p>

<p>Git 本体に meld のコマンドラインオプションの情報が入ってるので、これで動くようです。</p>

<p>(手元に Mac がないので動作確認はできませんでしたが、<a href="http://stackoverflow.com/questions/2006032/view-differences-of-branches-with-meld#answer-12815806">git - View differences of branches with meld? - Stack Overflow</a> に同じ手順が書いてあって、プラス評価がついてるので正しいはずです)</p>

<p>Pro Git には <a href="http://git-scm.com/book/ja/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E8%A8%AD%E5%AE%9A#%E5%A4%96%E9%83%A8%E3%81%AE%E3%83%9E%E3%83%BC%E3%82%B8%E3%83%84%E3%83%BC%E3%83%AB%E3%81%8A%E3%82%88%E3%81%B3-Diff-%E3%83%84%E3%83%BC%E3%83%AB">P4Merge を使う手順</a> が書いてあるんだけど、P4Merge はディレクトリーの比較に対応してないので、<code>--dir-diff</code> には活用できません。</p>

<h2>エイリアスを設定する</h2>

<p>このあたりは好みですが、<code>.gitconfig</code> でエイリアスを設定しておくと便利でしょう。</p>
<div class="highlight"><pre><code class="ini language-ini" data-lang="ini">[alias]
    d = difftool -d
    dc = difftool -d --cached
    dp = difftool -d HEAD~
</code></pre></div>
<p><code>git d &lt;branch&gt;</code> とか <code>git d HEAD</code> のように入力するだけで、difftool が <code>--dir-diff</code> で立ち上がるようになります。</p>

<h1>まとめ</h1>

<p><code>difftool --dir-diff</code> で快適な Git 生活を！</p>
]]></description>
		</item>

	</channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>てっく煮ブログ</title>
		<link>http://tech.nitoyon.com/ja/blog/index.xml</link>
		<description>All Technology is Boiled in This Site.</description>
		<language>ja</language>
		<copyright>Copyright nitoyon.</copyright>
		<lastBuildDate>Thu, 02 May 2013 02:44:35 +0000</lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<atom:link href="http://tech.nitoyon.com/ja/blog/index.xml" rel="self" type="application/rss+xml" />









		<item>
			<title>git commit --amend を省力化する方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/05/02/git-commit-amend/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/05/02/git-commit-amend/</guid>
			<pubDate>Thu, 02 May 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git で最後のコミットを修正するときには <code>git commit --amend</code> を使うんだけども、いままでは</p>

<ol>
<li><code>git add .</code></li>
<li><code>git commit --amend</code></li>
<li>エディターが立ち上がって、前回のコミット メッセージが表示される</li>
<li>エディターを終了させる</li>
</ol>

<p>としていた。</p>

<p>この作業は何度も繰り返すと面倒だったので、man を調べてみると <code>--no-edit</code> なるステキなオプションを発見した。</p>

<h1>--no-edit を使う</h1>

<p><code>--no-edit</code> を指定すると、上の手順はこうなる。</p>

<ol>
<li><code>git add .</code></li>
<li><code>git commit --amend --no-edit</code></li>
</ol>

<p>コミット メッセージはそのままに、コミットの中身だけを書き換えられる。エディターが立ち上がらないので楽チン。</p>

<h1>-a でさらに省力化</h1>

<p>さらに <code>git add .</code> も省力化できて</p>
<div class="highlight"><pre><code class="text">git commit -a --amend --no-edit
</code></pre></div>
<p>とすればよい。</p>

<p><strong>コマンド一発</strong>になった。超楽チン。</p>

<p>注意点は次の 2 つ。</p>

<ul>
<li>新しいファイルを追加したときは明示的に add する必要がある。<code>git add .</code> と <code>git c    ommit -a</code> ではステージするファイルが違うので注意。</li>
<li>コミットしたくない変更がワーキング ディレクトリーに残ってる状態では使えない。<code>git stash</code> するなどでよけておくべし。</li>
</ul>
]]></description>
		</item>

		<item>
			<title>Google Chrome で超手軽にスマホ向けデザインを確認する方法</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/04/23/chrome-responsive-debug/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/04/23/chrome-responsive-debug/</guid>
			<pubDate>Tue, 23 Apr 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>最近、<strong>Google Chrome のデベロッパー ツールにスマートフォンでの表示を確認する機能がある</strong>ことを知りました。</p>

<p>いままでは、レスポンシブデザイン Web デザインをするときに、ちまちまとブラウザーのサイズを変えたり、Web サービス (<a href="http://mattkersley.com/responsive/">Responsive Design Testing</a> とか <a href="http://designmodo.com/responsive-test/">Responsive Web Design Test Tool</a> とか) を使っていたのですが、こちらの手順のほうがお手軽なので紹介します。</p>

<h1>設定は超簡単！！</h1>

<p>Google Chrome のデベロッパー ツールを開いて、右下の歯車のアイコンをクリックします。</p>

<p>左側から [Overrides] を選んで、[User Agent] と [Device metrics] にチェックを入れます。</p>

<p><center><img src="http://farm9.staticflickr.com/8260/8672447614_28f45f8d1d.jpg" width="500" height="296"></center></p>

<p>これだけです！</p>

<h2>ためしに Yahoo! を表示してみよう</h2>

<p>[User Agent] で [iPhone -- iOS 4] を選んでから Yahoo! のトップページを開いてみると・・・。</p>

<p><center><img src="http://farm9.staticflickr.com/8114/8672493580_8246647f79.jpg" width="500" height="477"></center></p>

<p>m.yahoo.co.jp にリダイレクトされて、iPhone 4 のサイズで表示されました。</p>

<p>解像度指定の右にあるボタンを押すと「縦横切り替え」ができます。リロード不要です！</p>

<p><center><img src="http://farm9.staticflickr.com/8379/8672493572_927d7e0e0e.jpg" width="485" height="500"></center></p>

<p>横方向になると、画面の構成が少し変わりましたね。</p>

<p>今度は [iPad -- iOS 5] にしてみます。リロードしてみると・・・。</p>

<p><center><img src="http://farm9.staticflickr.com/8397/8671392997_2fc220a0eb.jpg" width="500" height="377"></center></p>

<p>はい、PC 版にリダイレクトされて、iPad のサイズで表示できました。</p>

<p>User Agent も切り替えてくれるので、レスポンシブ Web デザインに対応したサイトだけでなく、User Agent で表示を切り替えているサイトも確認できますね。</p>

<h2>登録されているスマートフォン一覧</h2>

<p>Google Chrome 26 に登録されているスマートフォンは次のもの。</p>

<ul>
<li>iPhone -- iOS 5</li>
<li>iPhone -- iOS 4</li>
<li>iPad -- iOS 5</li>
<li>iPad -- iOS 4</li>
<li>Android 2.3 -- Nexus S</li>
<li>Android 4.0.2 -- Galaxy Nexus</li>
<li>BlackBerry -- PlayBook 2.1</li>
<li>BlackBerry -- 9900</li>
<li>BlackBerry -- BB10</li>
<li>MeeGo -- Nokia N9</li>
</ul>

<p>試したい機種が登録されていなくても心配後無用。User Agent や解像度は手入力も可能です。</p>

<h2>気になるところ</h2>

<p>注意しなきゃいけないのは、<strong>スマートフォンの表示を完全にエミュレートできるわけではない</strong>、ということです。PC 版ブラウザーでUserAgent と表示サイズを変更しているだけだと割り切りましょう。</p>

<p>まず、viewport の設定が無視されます。そのため、viewport の設定によっては実際のスマートフォンでの表示と異なります。</p>

<p>たとえば、Yahoo! のモバイル版では viewport に <code>device-width</code> が設定してあるので、iPhone 4 では横幅 <code>320px</code> 相当で描画されるべきです。しかし、実際には <code>640px</code> 相当で描画してしまってます。実際の iPhone の表示に近づけるためには、サイズを <code>320px</code> に変更しなきゃいけません。</p>

<p>他にも、[Fit in window] をチェックすると、ブラウザーの領域内に収まるように表示してくれて便利なのですが、iPad の設定で Yahoo! のトップページを開くと横スクロールバーが表示されて変でした。[Fit in window] のチェックを外すと表示されないので、ズーム関係の処理と CSS の何かの指定がバッティングしてるのかもしれません。</p>

<p>ということで、最終確認は必ず実機でやるべきです。それでも、この機能を活用すれば、開発効率はかなり改善するはずです！</p>

<h1>まとめ</h1>

<p>Google Chrome に統合されているので、とてもお手軽に試せることが分かりました。レスポンシブ Web デザインしている場合も、サーバー側で User Agent みている場合でも、どちらでも活用できるのが便利です。大手サイトのスマホ デザインを確認するのも手軽にできるのが嬉しいですね。</p>

<p>ちなみに、User Agent を変更する機能は 2012 年 2 月の <a href="http://googlesystem.blogspot.jp/2011/12/changing-user-agent-new-google-chrome.html">Chrome 17 から提供</a>、サイズを変更する機能は 2012 年 10 月から<a href="http://blog.chromium.org/2012/10/do-more-with-chrome-developer-tools.html">提供されている</a>ようです。</p>
]]></description>
		</item>

		<item>
			<title>Jekyll のカテゴリーとタグの指定方法 3 パターン</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/04/17/jekyll-pluralize/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/04/17/jekyll-pluralize/</guid>
			<pubDate>Wed, 17 Apr 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Jekyll で記事にカテゴリーやタグを設定するには YAML の部分に書けばいいんだけど、指定方法が 3 通りもあって複雑だったのでまとめておく。</p>

<p>Jekyll 0.12.0 を前提に書いてるけど、将来的に大きな変更が入るとは思いにくい。</p>

<h1>(1) 単数形を使う</h1>

<p>単数形 (<code>category</code>・<code>tag</code>) で指定したときは 1 つだけしか指定できない。</p>
<div class="highlight"><pre><code class="yaml">---
category: Foo
tag: Bar
</code></pre></div>
<p>上の例では、<code>Foo</code> というカテゴリー、<code>Bar</code> というタグを設定したことになる。</p>

<p>1 つしか指定できないので、</p>
<div class="highlight"><pre><code class="yaml">---
category: Foo Bar
tag: Bar, Baz
</code></pre></div>
<p>のようにカンマやスペースで区切ったとしても、<code>Foo Bar</code> という名前のカテゴリー、<code>Bar, Baz</code> という名前のタグが指定されたものと解釈される。</p>

<h1>(2) 複数形に文字列を指定する</h1>

<p>複数形 (<code>categories</code>・<code>tags</code>) に文字列を与えると、スペース区切りで複数指定できる。</p>
<div class="highlight"><pre><code class="yaml">---
categories: Foo Bar
tags: Bar Baz
</code></pre></div>
<p>この例では、カテゴリーは <code>Foo</code> と <code>Bar</code>、タグは <code>Bar</code> と <code>Baz</code> の 2 つずつ指定されたものとみなされる。</p>

<p>つまり、この書き方ではスペースを含むカテゴリー名やタグ名は指定できない。スペースを含めたいなら、次で紹介する「複数形＋配列」で指定する方法を使うのがよい。前述の「単数形」の指定を使ってもよいけど、個数を増やしたときに無駄にハマりそうなので、複数形で統一したほうが分かりやすいと思う。</p>

<h1>(3) 複数形に配列を指定する</h1>

<p>複数形 (<code>categories</code>・`tags) に文字列の配列を渡すこともできる。</p>
<div class="highlight"><pre><code class="yaml">---
categories:
- Foo Bar
- AA,BBB
tags:
- Bar
- Baz, AAA
</code></pre></div>
<p>上の指定では、カテゴリーは <code>Foo Bar</code> と <code>AA,BBB</code>、タグは <code>Bar Baz</code> と <code>AAA</code> の 2 つずつが指定されたものと解釈される。名前にスペースやカンマを含めることが可能。</p>

<p>次のようにも書けるけど、この場合は YAML の制限でカンマを含む名前は指定できない。</p>
<div class="highlight"><pre><code class="yaml">---
categories: [Foo Bar, AABBB]
tags: [Bar Baz, AAA]
</code></pre></div>
<h1>該当箇所のソースを読んでみる</h1>

<p>ソースを読んだほうが早いかもしれない。</p>

<p><a href="https://github.com/mojombo/jekyll/blob/9d814a4eb7b59ce617569b40a19c3c183fecda33/lib/jekyll/core_ext.rb">lib/jekyll/core_ext.rb</a> の <code>Hash#pluralized_array</code> を見ればよい。</p>

<p>この関数が <code>self.data.pluralized_array(&quot;tag&quot;, &quot;tags&quot;)</code> のように呼ばれる。</p>
<div class="highlight"><pre><code class="ruby">class Hash

  # Read array from the supplied hash favouring the singular key
  # and then the plural key, and handling any nil entries.
  #   +hash+ the hash to read from
  #   +singular_key+ the singular key
  #   +plural_key+ the singular key
  #
  # Returns an array
  def pluralized_array(singular_key, plural_key)
    hash = self
    if hash.has_key?(singular_key)
      array = [hash[singular_key]] if hash[singular_key]
    elsif hash.has_key?(plural_key)
      case hash[plural_key]
      when String
        array = hash[plural_key].split
      when Array
        array = hash[plural_key].compact
      end
    end
    array || []
  end
</code></pre></div>
<p>singular が単数形、plural が複数形。</p>

<p>ビルトインの <code>Hash</code> にメソッドを追加するあたりがなんともアグレッシブ。</p>

<h1>まとめ</h1>

<p>親切な計らいのおかげで、かえって悩むことが増えそうにも思える不思議な仕様・・・。</p>
]]></description>
		</item>

		<item>
			<title>SourceTree が Git のグローバルな無視リストを書き換えて困った話</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/04/05/sourcetree/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/04/05/sourcetree/</guid>
			<pubDate>Fri, 05 Apr 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git を使ってるときに、<code>git status</code> に存在するはずのファイルが Untracked files に出てこない現象に出会って困ってしまった。</p>

<p>いろいろ調べてみたところ、SourceTree さんがインストール時にグローバルな無視リストを作成していたことが判明した。SourceTree を使ってないときにも影響がでるのでたちが悪い。</p>

<h1>勝手に書き換えられてしまうファイルはこれだ!!</h1>

<p>Windows 版の例だけど、まず、<code>.gitconfig</code>。</p>
<div class="highlight"><pre><code class="ini">[core]
    excludesfile = C:\\Users\\username\\Documents\\gitignore_global.txt
</code></pre></div>
<p>Mac の場合は <code>/User/username/.gitignore_global</code> に設定する模様。</p>

<p>gitignore_global.txt はこんな感じ。</p>
<div class="highlight"><pre><code class="text">#ignore thumbnails created by windows
Thumbs.db
#Ignore files build by Visual Studio
*.obj
*.exe
*.pdb
*.user
*.aps
*.pch
*.vspscc
*_i.c
*_p.c
*.ncb
*.suo
*.tlb
*.tlh
*.bak
*.cache
*.ilk
*.log
*.dll
*.lib
*.sbr
</code></pre></div>
<p>Windows 系の開発で自動生成されたり、コミットする必要のないファイルが列挙されている。</p>

<h1>.gitconfig に excludesfile がないときに発動</h1>

<p>セットアップ時に、最初のダイアログには [Allow SourceTree to modify global Git and Mercurial config files] という設定項目がある。</p>

<p><center><img src="http://farm9.staticflickr.com/8382/8619841968_d036e18115.jpg" width="470" height="500"></center></p>

<p>デフォルトでチェック入ってるんだけど、これが入ってる以上は、<code>.gitconfig</code> がいじられても文句は言えない。</p>

<p>デフォルトのままで先に進むと、<code>.gitconfig</code> に <code>excludesfile</code> の設定がない場合には SourceTree さんは上に書いたような書き換えを行ってくれる。</p>

<p>シンセツダナー。</p>

<p>この親切すぎて涙がでてしまう挙動は、当然のように一部のユーザーの逆鱗に触れることとなり、非難轟々、雨嵐霰がふき乱れた。</p>

<blockquote class="twitter-tweet" lang="ja"><p>@<a href="https://twitter.com/daniellangnet">daniellangnet</a> Sorry this caused you hassle. We don't do this if you have a global ignore already, and it's a checkbox in the setup wizard</p>&mdash; SourceTree updatesさん (@sourcetree) <a href="https://twitter.com/sourcetree/status/314672749203308544">2013年3月21日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>「最低なやつめ！　なんで gitignore_global.txt を勝手に作って .dll と .exe を除外しちゃうんだよ！？」というユーザーのお怒りの声。</p>

<p>これに対して、「怒らせてごめんよ。すでにグローバルな ignore ファイルがあればそんなことはしないよ。」と答える SourceTree さん。</p>

<blockquote class="twitter-tweet" lang="ja"><p>@<a href="https://twitter.com/daniellangnet">daniellangnet</a> We defaulted that to 'Yes' if you have no global ignore, trying to help people new to git, since committing dlls/exes is rare</p>&mdash; SourceTree updatesさん (@sourcetree) <a href="https://twitter.com/sourcetree/status/314672902148616192">2013年3月21日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>「git に不慣れな人を助けるために、グローバルな ignore ファイルがないならそうしてるんだよ。だって、exe や dll をコミットすることなんてめったにないでしょ？」。まぁ、それはそうなんだけども・・・。</p>

<blockquote class="twitter-tweet" lang="ja"><p>@<a href="https://twitter.com/daniellangnet">daniellangnet</a> We'll draw attention to that setup option more clearly in the next update to avoid this for people who commit binaries</p>&mdash; SourceTree updatesさん (@sourcetree) <a href="https://twitter.com/sourcetree/status/314674613844062208">2013年3月21日</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>「次のリリースでは、もうちょっと注意を引きやすい警告を出すようにして、バイナリー ファイルをコミットしたい人を困らせないようにするよ」と、将来のバージョン アップを誓っている。</p>

<h1>最近は警告ダイアログをだしてくれる</h1>

<p>で、その結果、最近のリリースでは、こんなダイアログが表示されるようになった。</p>

<p><center><img src="http://farm9.staticflickr.com/8391/8619841994_5093182205_o.png" width="623" height="344"></center></p>

<p>ざっと訳すと</p>

<blockquote>
<p>グローバルな ignore ファイルがないようだけど、SourceTree がデフォルトのやつを設定したげようか？</p>

<p>.exe とか .dll とか .obj とか .suo とか Debug のようなフォルダーとか、普通はソース管理しないようなやつを追加しといてあげるよ。</p>

<p>もし、デフォルトで全部のファイルをみれるようにしたいなら、とりあえず No を選んどいてね。あとで、Tools &gt; Options から設定することもできるよ。</p>
</blockquote>

<p>と書いてある。</p>

<p>次のキャプチャーを見る限りは Mac 版でも「グローバル無視リスト」を書き換える処理はあるようだ。</p>

<p><center><img src="http://farm9.staticflickr.com/8525/8618737121_b83669bf6a.jpg" width="500" height="456"></center></p>

<p>(画像は <a href="http://kashewnuts-tech.blogspot.jp/2011/11/macgitmercurialgui-sourcetree.html">kashew_nuts-tech: Mac用Git/MercurialのGUIクライアント-SourceTree-を試してみた</a> より)</p>

<h1>まとめ</h1>

<p>SourceTree の Windows 版を試した人 (特に初期のバージョン) は、マイドキュメント直下に <code>gitignore_global.txt</code> がないか確認しておくとよいだろう。このファイルが残っていると、Git を使っていて無駄に混乱してしまうかもしれない。分かってて設定する分にはいいんだけども。</p>
]]></description>
		</item>

		<item>
			<title>Git で複数ブランチを同時に扱いたいなら git-new-workdir が便利</title>
			<link>http://tech.nitoyon.com/ja/blog/2013/03/29/git-new-workdir/</link>
			<guid>http://tech.nitoyon.com/ja/blog/2013/03/29/git-new-workdir/</guid>
			<pubDate>Fri, 29 Mar 2013 00:00:00 +0900</pubDate>
			<description><![CDATA[<p>Git で管理してるレポジトリーで、いくつかのブランチを別々の場所にチェックアウトしたいことがある。</p>

<p>たとえば</p>

<ul>
<li>GUI なツールでブランチ間の比較したい</li>
<li>同時に実行して比較しつつテストしたい</li>
<li>ブランチ間でファイルをコピーしたい</li>
<li>ドキュメントの生成結果を別ブランチで管理したい</li>
</ul>

<p>といったときに、必要になる。</p>

<p>ブランチの個数だけ clone しちゃえば用は足りそうなんだけど、でかいレポジトリーだったら時間もディスク容量ももったいない。</p>

<h1>git-new-workdir を使うべきでしょう！</h1>

<p>先日、「git-new-workdir を使えばワーキング ディレクトリーを複数を作れて便利」と書いてあるブログを読んだ。</p>

<ul>
<li><a href="http://subtech.g.hatena.ne.jp/secondlife/20121207/1354854068">git-new-workdir が便利 - #生存戦略 、それは - subtech</a></li>
</ul>

<p><code>git-new-workdir</code> の usage を見てたら、別ブランチのワーキング ディレクトリー作成にも対応しているらしい！</p>
<div class="highlight"><pre><code class="text">git-new-workdir &lt;repository&gt; &lt;new_workdir&gt; [&lt;branch&gt;]
</code></pre></div>
<p>これは活用しない手はない。</p>

<h2>git-new-workdir はこんなに便利</h2>

<p><code>master</code> ブランチで作業しているとして、<code>develop</code> ブランチの中身も展開したいと思ったとする。</p>
<div class="highlight"><pre><code class="text">git-new-workdir . ../foo-develop develop
</code></pre></div>
<p>これだけで <code>../foo-develop</code> に <code>develop</code> ブランチの中身を展開してくれる。</p>

<p>展開の処理に工夫があって、ワーキングディレクトリーとステージ (インデックス) は独立なんだけど、コミット履歴などはシンボリックリンクで共有されている。</p>

<p>だから、ワーキング ディレクトリーの中身を比較できるのはもちろん、別々の場所で編集してコミットしてもよい。片方でコミットした内容は、もう片方で <code>git log</code> すれば表示できる。</p>

<p><code>git push</code> すれば <code>master</code> と <code>develop</code> の両方の変更を一気に push できる。別々に clone していたらありえない。</p>

<p>もちろん、<code>git fetch</code> も、どちらか一方で実行すれば、もう片方も最新の状態になってる。</p>

<p>いろいろ便利でハッピー！</p>

<h2>ドキュメントを別ブランチで管理するような場合にも使える</h2>

<p>GitHub Pages を使うときにはありがちなんだけど、ドキュメントの生成結果を別ブランチにコミットする。このブログでは、Jekyll でサイト生成した結果を別ブランチにコミットしている (詳しくは <a href="/ja/blog/2012/09/20/moved-completed/">俺の最強ブログ システムが火を噴くぜ</a> 参照)。</p>

<p>このようなケースには、サブモジュールを使うテクニックが知られている。</p>

<ul>
<li><a href="http://blog.64p.org/entry/20100310/1268189518">Doxygen を github-pages にあげるのをお気楽にやる方法 - tokuhirom&#39;s blog.</a></li>
<li><a href="http://tell-k.hatenablog.com/entry/2012/01/20/020531">github のプロジェクトにSphinxドキュメントを良さげな感じにおきたい 其の二 - Study08.net 対シンバシ殲滅用人型機動兵器</a></li>
<li><a href="http://blog.kaihatsubu.com/?p=1836">GitHub 上に ページを作成する | Tanablog</a></li>
</ul>

<p>このテクニックは一見便利そうなんだけども、使っているうちに不便なところが目に付いてきた・・・。</p>

<ul>
<li>同じレポジトリーを 2 回 clone するので非効率的。</li>
<li>2 つの作業ディレクトリーのそれぞれで push, pull しなきゃいけない。</li>
<li>ドキュメントのディレクトリーでコミットするたびに、submodule が更新された状態になる。それを放置してると、<code>submodule init</code> した人が古い状態のツリーを参照してしまうので、定期的にコミットして、サブモジュールの指す先を更新する必要がある。</li>
</ul>

<p>サブモジュールはそもそも別の Git レポジトリーを管理するために設計されたものだし、同じレポジトリーをサブモジュールとして持つのはいろいろ弊害あるように思う。</p>

<p>で、サブモジュールに困っていたところで、<code>git-new-workdir</code> を使ってみたら便利だった。</p>

<p>開発用ブランチが <code>master</code> で、ドキュメントのブランチが <code>gh-pages</code> だとして、gh-pages ディレクトリーに <code>gh-pages</code> ブランチの中身をチェックアウトする。</p>
<div class="highlight"><pre><code class="text">git-new-workdir . gh-pages gh-pages
</code></pre></div>
<p>これで、Git レポジトリー直下の gh-pages ディレクトリーに <code>gh-pages</code> ブランチがチェックアウトされた。間違ってディレクトリーの中身をコミットしないように <code>.gitignore</code> に gh-pages を入れておくと安全だろう。</p>

<p>あとは個別のディレクトリーで編集してコミットしていく。先ほどの例と同じく、片方でコミットした内容は、もう片方の作業ディレクトリーで <code>git log</code> すれば反映されるし、<code>git push</code> すれば一気にリモートに反映される。</p>

<p>便利便利である。</p>

<h1>git-new-workdir の導入方法</h1>

<p>git-new-workdir は git-core の contrib に入っている。詳しくは <a href="http://subtech.g.hatena.ne.jp/secondlife/20121207/1354854068">git-new-workdir が便利 - #生存戦略 、それは - subtech</a> を参照。</p>

<p>ただ、Windows で Git for Windows (msysGit) を使ってる場合は、そのまま持ってきても動かないので、次のようにした。</p>

<ol>
<li><a href="https://github.com/dansmith65/git/blob/master/contrib/workdir/git-new-workdir-win">git/contrib/workdir/git-new-workdir-win at master - dansmith65/git</a> から git-new-workdir-win を拾ってくる。</li>
<li><code>C:\Program Files (x86)\Git\libexec\git-core</code> に <code>git-new-workdir</code> としてコピーする。(x86 環境なら <code>Program Files (x86)</code> を <code>Program Files</code> に読み替えるべし)</li>
</ol>

<p>これでおしまい。ただし、mklink.exe を使う関係で、UAC 有効にしてる環境では、bash を管理者として実行しておかないと、権限が足りなくてエラーになるので注意すべし。</p>

<h1>まとめ</h1>

<p><code>git-new-workdir</code> で便利な Git 生活を！</p>
]]></description>
		</item>

	</channel>
</rss>